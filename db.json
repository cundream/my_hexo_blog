{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/image/shouye.jpg","path":"image/shouye.jpg","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","path":"categories/Spring AI Alibaba/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419091747915.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419091747915.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419092017527.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419092017527.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419102848756.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419102848756.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419105704031.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419105704031.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419112758947.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419112758947.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419113622811.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419113622811.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181524113.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419181524113.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181631076.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419181631076.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181745960.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250419181745960.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114322913.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250422114322913.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114422258.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250422114422258.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114555482.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250422114555482.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114642336.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250422114642336.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425104935964-5549379.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250425104935964-5549379.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425104935964.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250425104935964.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425174252871.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250425174252871.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429172724826.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429172724826.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429174851066.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429174851066.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429174959408.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429174959408.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175228086.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429175228086.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175342611.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429175342611.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175421998.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429175421998.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429180401580.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429180401580.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175540574.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429175540574.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181039571.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429181039571.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181131778.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429181131778.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181312813.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429181312813.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429183142516.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250429183142516.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508161105090.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250508161105090.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508161546610.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250508161546610.png","modified":0,"renderable":0},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508162115569.png","path":"categories/Spring AI Alibaba/typora-user-images/image-20250508162115569.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","path":"categories/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","path":"categories/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","path":"categories/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","path":"categories/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","path":"categories/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","path":"categories/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","path":"categories/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","path":"categories/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419091747915.png","path":"categories/typora-user-images/image-20250419091747915.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419092017527.png","path":"categories/typora-user-images/image-20250419092017527.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419102848756.png","path":"categories/typora-user-images/image-20250419102848756.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419105704031.png","path":"categories/typora-user-images/image-20250419105704031.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419112758947.png","path":"categories/typora-user-images/image-20250419112758947.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419113622811.png","path":"categories/typora-user-images/image-20250419113622811.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419181524113.png","path":"categories/typora-user-images/image-20250419181524113.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419181631076.png","path":"categories/typora-user-images/image-20250419181631076.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250419181745960.png","path":"categories/typora-user-images/image-20250419181745960.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250422114322913.png","path":"categories/typora-user-images/image-20250422114322913.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250422114422258.png","path":"categories/typora-user-images/image-20250422114422258.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250422114555482.png","path":"categories/typora-user-images/image-20250422114555482.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250422114642336.png","path":"categories/typora-user-images/image-20250422114642336.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250425104935964-5549379.png","path":"categories/typora-user-images/image-20250425104935964-5549379.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250425104935964.png","path":"categories/typora-user-images/image-20250425104935964.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250425174252871.png","path":"categories/typora-user-images/image-20250425174252871.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429172724826.png","path":"categories/typora-user-images/image-20250429172724826.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429174851066.png","path":"categories/typora-user-images/image-20250429174851066.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429174959408.png","path":"categories/typora-user-images/image-20250429174959408.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429175228086.png","path":"categories/typora-user-images/image-20250429175228086.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429175342611.png","path":"categories/typora-user-images/image-20250429175342611.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429175421998.png","path":"categories/typora-user-images/image-20250429175421998.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429175540574.png","path":"categories/typora-user-images/image-20250429175540574.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429180401580.png","path":"categories/typora-user-images/image-20250429180401580.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429181039571.png","path":"categories/typora-user-images/image-20250429181039571.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429181131778.png","path":"categories/typora-user-images/image-20250429181131778.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429181312813.png","path":"categories/typora-user-images/image-20250429181312813.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250429183142516.png","path":"categories/typora-user-images/image-20250429183142516.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250508161105090.png","path":"categories/typora-user-images/image-20250508161105090.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250508161546610.png","path":"categories/typora-user-images/image-20250508161546610.png","modified":0,"renderable":0},{"_id":"source/categories/typora-user-images/image-20250508162115569.png","path":"categories/typora-user-images/image-20250508162115569.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1749024109374},{"_id":"source/about/index.md","hash":"6f31565e4e99bb6fbf55be5771c727ada0bb6bdb","modified":1749030067185},{"_id":"source/categories/index.md","hash":"063dbfa737baf9009645a00100ec0cec8d0eb92b","modified":1749030043836},{"_id":"source/comments/index.md","hash":"7b6b47f281ec1a444ee3e4cc13d6f47d11b17534","modified":1749030059963},{"_id":"source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1748598547000},{"_id":"source/link/index.md","hash":"d25bfd8890c1a4680257bafd013de0323a449965","modified":1749030063718},{"_id":"source/movies/index.md","hash":"e903c93c69e2e624fd3aad6be2efafad14c612ab","modified":1749030056487},{"_id":"source/music/index.md","hash":"a98702749c899f0b85eea15eccf737e5fd13b09d","modified":1749030048081},{"_id":"source/picture/index.md","hash":"9d8a79dcdd7be979da2d4aef0a3c8e67a34cad5e","modified":1749030052571},{"_id":"source/tags/index-1.md","hash":"64e1a23855a7dbd195d4db7219d48f7b240476e4","modified":1749030035728},{"_id":"source/tags/index.md","hash":"5fdc6f265d17bd71664bb6b844bf6e1a36e1755b","modified":1749029228364},{"_id":"source/image/shouye.jpg","hash":"e75ad850c0d85a460832e196ab1940ce99841c8f","modified":1748598528000},{"_id":"themes/butterfly/.gitignore","hash":"76e6365d33cec02b90d00699da3c0ddef1cd7efa","modified":1748584750000},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1748584750000},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1748584750000},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1748584750000},{"_id":"themes/butterfly/_config.butterfly.yml","hash":"7166aff350fcf84cbc01835fad5731eb855cecd7","modified":1748584750000},{"_id":"themes/butterfly/package.json","hash":"dd598502734c702eed104a3f955f75568e18a29e","modified":1748584750000},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1748584750000},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1748584750000},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1748584750000},{"_id":"themes/butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1748584750000},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1748584750000},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1748584750000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1748584750000},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1748584750000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1748584750000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1748584750000},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1748584750000},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1748584750000},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1748584750000},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1748584750000},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1748584750000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1748584750000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1748584750000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1748584750000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1748584750000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1748584750000},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1748584750000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1748584750000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1748584750000},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1748584750000},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1748584750000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1748584750000},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1748584750000},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1748584750000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1748584750000},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1748584750000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1748584750000},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1748584750000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1748584750000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1748584750000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1748584750000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1748584750000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1748584750000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1748584750000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1748584750000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1748584750000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1748584750000},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1748584750000},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/comments/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/link/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/movies/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/music/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/picture/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/tags/index-1.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/2025/06/04/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/archives/2025/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/archives/2025/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1749030102757},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1749030102757},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1749030102757},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1749030102757},{"_id":"public/css/index.css","hash":"a134b9ab9b0d4ca6444a66bdcc55bd8f600244f7","modified":1749030102757},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1749030102757},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1749030102757},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1749030102757},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1749030102757},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1749030102757},{"_id":"public/image/shouye.jpg","hash":"e75ad850c0d85a460832e196ab1940ce99841c8f","modified":1749030102757},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1749030102757},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/.DS_Store","hash":"f265e4b85368bb93c3a912886e5b4397d2b85f99","modified":1745918838711},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","hash":"f928e205aed451715e66fcdabeda40acc17016a4","modified":1745053627459},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","hash":"ca777da537d0a7d9f37c3ee40b05b5c5004e2b05","modified":1745053849829},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","hash":"731bac951d911ce1d06ab2fffad52071e9e173ec","modified":1745053521350},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","hash":"9ae3c7049609cfddf93e501d51c6f6b2f9c54fe1","modified":1745053653702},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419105704031.png","hash":"ad3c04f5ceef79bac1791e61f283a27491face21","modified":1745031424039},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429172724826.png","hash":"da273dc2bd390a26138020b93e706ca8fbf8b261","modified":1745918844838},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181131778.png","hash":"0e4282464cd34c9a1222095b0922267be1422f08","modified":1745921491779},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181312813.png","hash":"aebd7fad268451f30150c11f08cc75190e10f78b","modified":1745921592816},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","hash":"6ee6552a20c710aa26ace986d93c09f17ab35a8d","modified":1745053715414},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","hash":"9881da6dc6387905b676019588e4d61dc9be066f","modified":1745053779852},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419113622811.png","hash":"c5263c854a53d3d911d53bc11404b5867969c0a5","modified":1745033782812},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425174252871.png","hash":"c33f809927ec425d0ec5a5de446efeb804cc0714","modified":1745574172883},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181039571.png","hash":"ac3ff91bad60dd8fcf32470de8468bd10c0a1cc3","modified":1745921439575},{"_id":"source/categories/Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势.md","hash":"d7b384fc0abb9cc26595b28c6a8fdff5513e4b08","modified":1745396492161},{"_id":"source/categories/Spring AI Alibaba/.DS_Store","hash":"ab66dc2c07d915c77eb7ae77d9f6a17171b49e61","modified":1746758325209},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","hash":"3e8e52832ab059338441700da2ef5edc38a17989","modified":1745056576496},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","hash":"4614676542fda9942a414b8c7b7b49991cc26181","modified":1745056587668},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","hash":"66a8cc5009fe492b9eefab173931e9138130c6ae","modified":1745923292331},{"_id":"source/categories/Spring AI Alibaba/Untitled.md","hash":"852945edd8f145c8130c9a32a924b6daf4b284bb","modified":1746585186342},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","hash":"a935ba41973210a2d25f32608240378e56fccc66","modified":1745923323405},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","hash":"c30f71ce919f7384e101a058c6deeb1d673d36c8","modified":1746692515849},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","hash":"3f5c8e5d220e8ee80edd693aa28b38db2042606f","modified":1745053412261},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181745960.png","hash":"202acd3f001b8bc0c1eeae98b758b1651f83021a","modified":1745057865972},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419092017527.png","hash":"651a6f76b900f6d32f5c8dcef8b24803841dc1c2","modified":1745025617528},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","hash":"9a12d9ec34beb4470dd34ee9cdbf24795a8ce8ba","modified":1745053589651},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419102848756.png","hash":"46350b8cc65a3e542d3c721fff82d18b7f42cfc6","modified":1745029728757},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419112758947.png","hash":"472e0caec1f9bedaa1e95acdeb4e0a21b0b74ee0","modified":1745033278949},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114642336.png","hash":"2be0181072e00a32cf7c4ffc3da3fc9b59ee6bae","modified":1745293602337},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429183142516.png","hash":"344896ff25fb43bf4ee4b651041ac1cbceda290c","modified":1745922702519},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419091747915.png","hash":"abbb5a2b42a2feea4f067124327ba7a2e0b49844","modified":1745025467915},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181631076.png","hash":"30174e45262d9a229860a7cb6c8cc056d56a2f16","modified":1745057791077},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175540574.png","hash":"99de9164e275203a2e77465a3c79b96e1ce6dcd4","modified":1745920540584},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508161546610.png","hash":"b278e1e74774ebf76673cd87797fd25599530a42","modified":1746692146612},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425104935964-5549379.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508161105090.png","hash":"c5baca122ea19651a96d3e2008e7eefb815794fa","modified":1746691865104},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175342611.png","hash":"9ab1b9aaa6241fbe4c8d2e16f82f09bfdba51311","modified":1745920422612},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425104935964.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181524113.png","hash":"f0a282ddcc5dd3b69d8cfa679c4bcd976ad82e5b","modified":1745057724118},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114322913.png","hash":"6a02df96a96bb0544d1d009868bdba0a8fe5850a","modified":1745293402925},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114422258.png","hash":"6d9b7578a561388f37ad2647180a50dcaa735b07","modified":1745293462259},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175228086.png","hash":"698a2ecc2f30b5c94f52121a41290c671451afa9","modified":1745920348093},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175421998.png","hash":"fe77c6a9999c12a0148bb1990ae045b2bcb63418","modified":1745920462000},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508162115569.png","hash":"a05a74331a80ea339f895adfcd63f451569a9f23","modified":1746692475571},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114555482.png","hash":"e33332a744c886e568bfe33b306d6f57b0e54f49","modified":1745293555482},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429180401580.png","hash":"a9206b3cba0d01688e0feac3ccba76ce81b93408","modified":1745921041592},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429174851066.png","hash":"1e66607d3f47bb278267622dd24df86e4e26237e","modified":1745920131077},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429174959408.png","hash":"12c835276e5309ffd874ab41de15a9148b6d65ca","modified":1745920199410},{"_id":"source/categories/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","hash":"f928e205aed451715e66fcdabeda40acc17016a4","modified":1745053627459},{"_id":"source/categories/typora-user-images/.DS_Store","hash":"f265e4b85368bb93c3a912886e5b4397d2b85f99","modified":1745918838711},{"_id":"source/categories/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","hash":"ca777da537d0a7d9f37c3ee40b05b5c5004e2b05","modified":1745053849829},{"_id":"source/categories/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","hash":"731bac951d911ce1d06ab2fffad52071e9e173ec","modified":1745053521350},{"_id":"source/categories/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","hash":"9ae3c7049609cfddf93e501d51c6f6b2f9c54fe1","modified":1745053653702},{"_id":"source/categories/typora-user-images/image-20250419105704031.png","hash":"ad3c04f5ceef79bac1791e61f283a27491face21","modified":1745031424039},{"_id":"source/categories/typora-user-images/image-20250429172724826.png","hash":"da273dc2bd390a26138020b93e706ca8fbf8b261","modified":1745918844838},{"_id":"source/categories/typora-user-images/image-20250429181131778.png","hash":"0e4282464cd34c9a1222095b0922267be1422f08","modified":1745921491779},{"_id":"source/categories/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","hash":"6ee6552a20c710aa26ace986d93c09f17ab35a8d","modified":1745053715414},{"_id":"source/categories/typora-user-images/image-20250429181312813.png","hash":"aebd7fad268451f30150c11f08cc75190e10f78b","modified":1745921592816},{"_id":"source/categories/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","hash":"9881da6dc6387905b676019588e4d61dc9be066f","modified":1745053779852},{"_id":"source/categories/typora-user-images/image-20250419113622811.png","hash":"c5263c854a53d3d911d53bc11404b5867969c0a5","modified":1745033782812},{"_id":"source/categories/typora-user-images/image-20250425174252871.png","hash":"c33f809927ec425d0ec5a5de446efeb804cc0714","modified":1745574172883},{"_id":"source/categories/typora-user-images/image-20250429181039571.png","hash":"ac3ff91bad60dd8fcf32470de8468bd10c0a1cc3","modified":1745921439575},{"_id":"source/categories/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","hash":"3f5c8e5d220e8ee80edd693aa28b38db2042606f","modified":1745053412261},{"_id":"source/categories/typora-user-images/image-20250419181745960.png","hash":"202acd3f001b8bc0c1eeae98b758b1651f83021a","modified":1745057865972},{"_id":"source/categories/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","hash":"9a12d9ec34beb4470dd34ee9cdbf24795a8ce8ba","modified":1745053589651},{"_id":"source/categories/typora-user-images/image-20250419092017527.png","hash":"651a6f76b900f6d32f5c8dcef8b24803841dc1c2","modified":1745025617528},{"_id":"source/categories/typora-user-images/image-20250419102848756.png","hash":"46350b8cc65a3e542d3c721fff82d18b7f42cfc6","modified":1745029728757},{"_id":"source/categories/typora-user-images/image-20250419112758947.png","hash":"472e0caec1f9bedaa1e95acdeb4e0a21b0b74ee0","modified":1745033278949},{"_id":"source/categories/typora-user-images/image-20250422114642336.png","hash":"2be0181072e00a32cf7c4ffc3da3fc9b59ee6bae","modified":1745293602337},{"_id":"source/categories/typora-user-images/image-20250429183142516.png","hash":"344896ff25fb43bf4ee4b651041ac1cbceda290c","modified":1745922702519},{"_id":"source/categories/typora-user-images/image-20250419091747915.png","hash":"abbb5a2b42a2feea4f067124327ba7a2e0b49844","modified":1745025467915},{"_id":"source/categories/typora-user-images/image-20250419181631076.png","hash":"30174e45262d9a229860a7cb6c8cc056d56a2f16","modified":1745057791077},{"_id":"source/categories/typora-user-images/image-20250429175540574.png","hash":"99de9164e275203a2e77465a3c79b96e1ce6dcd4","modified":1745920540584},{"_id":"source/categories/typora-user-images/image-20250508161546610.png","hash":"b278e1e74774ebf76673cd87797fd25599530a42","modified":1746692146612},{"_id":"source/categories/typora-user-images/image-20250425104935964.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/typora-user-images/image-20250425104935964-5549379.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/typora-user-images/image-20250429175342611.png","hash":"9ab1b9aaa6241fbe4c8d2e16f82f09bfdba51311","modified":1745920422612},{"_id":"source/categories/typora-user-images/image-20250508161105090.png","hash":"c5baca122ea19651a96d3e2008e7eefb815794fa","modified":1746691865104},{"_id":"source/categories/typora-user-images/image-20250422114322913.png","hash":"6a02df96a96bb0544d1d009868bdba0a8fe5850a","modified":1745293402925},{"_id":"source/categories/typora-user-images/image-20250419181524113.png","hash":"f0a282ddcc5dd3b69d8cfa679c4bcd976ad82e5b","modified":1745057724118},{"_id":"source/categories/typora-user-images/image-20250422114422258.png","hash":"6d9b7578a561388f37ad2647180a50dcaa735b07","modified":1745293462259},{"_id":"source/categories/typora-user-images/image-20250429175421998.png","hash":"fe77c6a9999c12a0148bb1990ae045b2bcb63418","modified":1745920462000},{"_id":"source/categories/typora-user-images/image-20250429175228086.png","hash":"698a2ecc2f30b5c94f52121a41290c671451afa9","modified":1745920348093},{"_id":"source/categories/typora-user-images/image-20250508162115569.png","hash":"a05a74331a80ea339f895adfcd63f451569a9f23","modified":1746692475571},{"_id":"source/categories/typora-user-images/image-20250422114555482.png","hash":"e33332a744c886e568bfe33b306d6f57b0e54f49","modified":1745293555482},{"_id":"source/categories/typora-user-images/image-20250429174851066.png","hash":"1e66607d3f47bb278267622dd24df86e4e26237e","modified":1745920131077},{"_id":"source/categories/typora-user-images/image-20250429180401580.png","hash":"a9206b3cba0d01688e0feac3ccba76ce81b93408","modified":1745921041592},{"_id":"source/categories/typora-user-images/image-20250429174959408.png","hash":"12c835276e5309ffd874ab41de15a9148b6d65ca","modified":1745920199410},{"_id":"source/categories/Spring AI Agent未来智能应用的发展趋势.md","hash":"09b37f49cbb6f15990b273d57f1fbf2195591d4f","modified":1749033074977},{"_id":"source/categories/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","hash":"4614676542fda9942a414b8c7b7b49991cc26181","modified":1745056587668},{"_id":"source/categories/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","hash":"66a8cc5009fe492b9eefab173931e9138130c6ae","modified":1745923292331},{"_id":"source/categories/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","hash":"3e8e52832ab059338441700da2ef5edc38a17989","modified":1745056576496},{"_id":"source/categories/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","hash":"a935ba41973210a2d25f32608240378e56fccc66","modified":1745923323405},{"_id":"source/categories/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","hash":"c30f71ce919f7384e101a058c6deeb1d673d36c8","modified":1746692515849},{"_id":"source/categories/Untitled.md","hash":"852945edd8f145c8130c9a32a924b6daf4b284bb","modified":1746585186342},{"_id":"source/categories/.DS_Store","hash":"35a1c54ece7ada401ae8a4fe999cd92211d26d8e","modified":1749032004230},{"_id":"source/.DS_Store","hash":"22b4a9083f0d9ffeab6b212223c34f2d71637bb2","modified":1749031959005},{"_id":"source/categories/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1749024109000}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2025-06-04T09:41:07.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-06-04 17:41:07\n---\n","updated":"2025-06-04T09:41:07.185Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmbhrd5ec0000y2ky26zdfx4j","content":"","excerpt":"","more":""},{"title":"categories","date":"2025-06-04T09:40:43.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2025-06-04 17:40:43\n---\n","updated":"2025-06-04T10:30:48.611Z","path":"categories/index.html","_id":"cmbhrd5eo0002y2ky58l67fja","comments":1,"layout":"page","content":"","excerpt":"","more":""},{"title":"comments","date":"2025-06-04T09:40:59.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: comments\ndate: 2025-06-04 17:40:59\n---\n","updated":"2025-06-04T09:40:59.963Z","path":"comments/index.html","comments":1,"layout":"page","_id":"cmbhrd5er0003y2ky8q73ez2h","content":"","excerpt":"","more":""},{"title":"link","date":"2025-06-04T09:41:03.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2025-06-04 17:41:03\n---\n","updated":"2025-06-04T09:41:03.718Z","path":"link/index.html","comments":1,"layout":"page","_id":"cmbhrd5et0004y2ky1ru54cv8","content":"","excerpt":"","more":""},{"title":"movies","date":"2025-06-04T09:40:56.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2025-06-04 17:40:56\n---\n","updated":"2025-06-04T09:40:56.487Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cmbhrd5eu0005y2ky26b53sdm","content":"","excerpt":"","more":""},{"title":"music","date":"2025-06-04T09:40:48.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2025-06-04 17:40:48\n---\n","updated":"2025-06-04T09:40:48.081Z","path":"music/index.html","comments":1,"layout":"page","_id":"cmbhrd5ev0006y2ky8s9b93kb","content":"","excerpt":"","more":""},{"title":"picture","date":"2025-06-04T09:40:52.000Z","_content":"","source":"picture/index.md","raw":"---\ntitle: picture\ndate: 2025-06-04 17:40:52\n---\n","updated":"2025-06-04T09:40:52.571Z","path":"picture/index.html","comments":1,"layout":"page","_id":"cmbhrd5ew0007y2kygtkm4721","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-06-04T09:40:35.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2025-06-04 17:40:35\n---\n","updated":"2025-06-04T09:40:35.728Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cmbhrd5ey0008y2ky25jaec7q","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-06-04T09:27:08.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-06-04 17:27:08\n---\n","updated":"2025-06-04T09:27:08.364Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmbhrd5f10009y2kydwr7ctxx","content":"","excerpt":"","more":""},{"_content":"https://blog.csdn.net/chen2017sheng/article/details/145779143  AANl  投喂\n\n\n\nhttps://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502 二流吃货\n\n\n\nhttps://blog.csdn.net/weixin_42289362?type=blog","source":"categories/Spring AI Alibaba/Untitled.md","raw":"https://blog.csdn.net/chen2017sheng/article/details/145779143  AANl  投喂\n\n\n\nhttps://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502 二流吃货\n\n\n\nhttps://blog.csdn.net/weixin_42289362?type=blog","date":"2025-06-04T10:12:41.823Z","updated":"2025-05-07T02:33:06.342Z","path":"categories/Spring AI Alibaba/Untitled.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5c0000nffybjst5f7w","content":"<p><a href=\"https://blog.csdn.net/chen2017sheng/article/details/145779143\">https://blog.csdn.net/chen2017sheng/article/details/145779143</a>  AANl  投喂</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502\">https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502</a> 二流吃货</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362?type=blog\">https://blog.csdn.net/weixin_42289362?type=blog</a></p>\n","excerpt":"","more":"<p><a href=\"https://blog.csdn.net/chen2017sheng/article/details/145779143\">https://blog.csdn.net/chen2017sheng/article/details/145779143</a>  AANl  投喂</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502\">https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502</a> 二流吃货</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362?type=blog\">https://blog.csdn.net/weixin_42289362?type=blog</a></p>\n"},{"_content":"# Spring AI Agent 未来智能应用的发展趋势\n\n\n\n一、引言\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n二、Spring AI 概述\nSpring AI 是啥玩意儿\nSpring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。\n\n它能干啥，有啥好处\nSpring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。\n\n那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。\n\n三、Agent 的基本概念\nAgent 是啥\nAgent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。\n\n它有啥特点，能干些啥\nAgent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。\n\n具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。\n\n它在 AI 里有啥用\n在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。\n\n四、Spring AI 中的 Agent\n它的架构和设计是啥样的\n在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。\n\n它是怎么工作的\nAgent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。\n\n怎么实现它\n在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。\n\n五、Spring AI Agent 的应用场景\n1. 智能客服里的 Agent\n在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。\n\n自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。\n多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。\n情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。\n2. 机器人控制里的 Agent\n在机器人领域，Agent 能让机器人变得更聪明、更灵活。\n\n路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。\n物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。\n人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。\n3. 数据分析里的 Agent\n在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。\n\n数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。\n模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。\n实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。\n4. 智能家居里的 Agent\n在智能家居领域，Agent 能让我们的家变得更智能、更舒适。\n\n设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。\n安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。\n用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。\n5. 医疗健康里的 Agent\n在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。\n\n病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。\n患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。\n医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。\n6. 金融领域的 Agent\n在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。\n\n风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。\n交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。\n客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。\n7. 交通物流里的 Agent\n在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。\n\n交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。\n车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。\n物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。\n8. 教育领域的 Agent\n在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。\n\n个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。\n智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。\n学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。\n六、Spring AI Agent 的发展趋势\n随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：\n\n学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。\n自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。\n交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。\n安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。\n七、结语\nSpring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。\n\n虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。\n\n\n\n# RAG  \n\n一、RAG是什么\n1.1 RAG的定义\nRAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。\n\n1.2 RAG的发展历程\nRAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。\n\n1.3 RAG与其他技术的关系\nRAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。\n\n二、RAG的应用场景\n2.1 智能问答系统\n2.1.1 提高问答准确性\n在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。\n\n2.1.2 处理复杂问题\n面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。\n\n2.2 文本生成任务\n2.2.1 辅助创作内容\n在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。\n\n2.2.2 生成多样化文本\nRAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。\n\n2.3 信息检索增强\n2.3.1 提升检索效率\n传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。\n\n2.3.2 深入挖掘信息\nRAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。\n\n四、RAG的优势与挑战\n4.1 RAG的优势\n4.1.1 提高模型性能\nRAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。\n\n4.1.2 增强可解释性\n由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。\n\n4.1.3 适应多种任务\nRAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。\n\n4.2 RAG的挑战\n4.2.1 数据质量与规模要求\nRAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。\n\nRAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。\n\n4.2.2 检索与生成的协调\n在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。\n\n检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。\n\n五、结语\n展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。\n","source":"categories/Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势.md","raw":"# Spring AI Agent 未来智能应用的发展趋势\n\n\n\n一、引言\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n二、Spring AI 概述\nSpring AI 是啥玩意儿\nSpring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。\n\n它能干啥，有啥好处\nSpring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。\n\n那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。\n\n三、Agent 的基本概念\nAgent 是啥\nAgent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。\n\n它有啥特点，能干些啥\nAgent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。\n\n具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。\n\n它在 AI 里有啥用\n在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。\n\n四、Spring AI 中的 Agent\n它的架构和设计是啥样的\n在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。\n\n它是怎么工作的\nAgent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。\n\n怎么实现它\n在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。\n\n五、Spring AI Agent 的应用场景\n1. 智能客服里的 Agent\n在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。\n\n自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。\n多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。\n情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。\n2. 机器人控制里的 Agent\n在机器人领域，Agent 能让机器人变得更聪明、更灵活。\n\n路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。\n物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。\n人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。\n3. 数据分析里的 Agent\n在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。\n\n数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。\n模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。\n实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。\n4. 智能家居里的 Agent\n在智能家居领域，Agent 能让我们的家变得更智能、更舒适。\n\n设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。\n安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。\n用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。\n5. 医疗健康里的 Agent\n在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。\n\n病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。\n患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。\n医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。\n6. 金融领域的 Agent\n在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。\n\n风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。\n交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。\n客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。\n7. 交通物流里的 Agent\n在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。\n\n交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。\n车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。\n物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。\n8. 教育领域的 Agent\n在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。\n\n个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。\n智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。\n学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。\n六、Spring AI Agent 的发展趋势\n随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：\n\n学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。\n自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。\n交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。\n安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。\n七、结语\nSpring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。\n\n虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。\n\n\n\n# RAG  \n\n一、RAG是什么\n1.1 RAG的定义\nRAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。\n\n1.2 RAG的发展历程\nRAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。\n\n1.3 RAG与其他技术的关系\nRAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。\n\n二、RAG的应用场景\n2.1 智能问答系统\n2.1.1 提高问答准确性\n在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。\n\n2.1.2 处理复杂问题\n面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。\n\n2.2 文本生成任务\n2.2.1 辅助创作内容\n在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。\n\n2.2.2 生成多样化文本\nRAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。\n\n2.3 信息检索增强\n2.3.1 提升检索效率\n传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。\n\n2.3.2 深入挖掘信息\nRAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。\n\n四、RAG的优势与挑战\n4.1 RAG的优势\n4.1.1 提高模型性能\nRAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。\n\n4.1.2 增强可解释性\n由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。\n\n4.1.3 适应多种任务\nRAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。\n\n4.2 RAG的挑战\n4.2.1 数据质量与规模要求\nRAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。\n\nRAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。\n\n4.2.2 检索与生成的协调\n在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。\n\n检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。\n\n五、结语\n展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。\n","date":"2025-06-04T10:12:41.825Z","updated":"2025-04-23T08:21:32.161Z","path":"categories/Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5e0001nffyg7cd3q2w","content":"<h1 id=\"Spring-AI-Agent-未来智能应用的发展趋势\"><a href=\"#Spring-AI-Agent-未来智能应用的发展趋势\" class=\"headerlink\" title=\"Spring AI Agent 未来智能应用的发展趋势\"></a>Spring AI Agent 未来智能应用的发展趋势</h1><p>一、引言<br>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<p>二、Spring AI 概述<br>Spring AI 是啥玩意儿<br>Spring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。</p>\n<p>它能干啥，有啥好处<br>Spring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。</p>\n<p>那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。</p>\n<p>三、Agent 的基本概念<br>Agent 是啥<br>Agent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。</p>\n<p>它有啥特点，能干些啥<br>Agent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。</p>\n<p>具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。</p>\n<p>它在 AI 里有啥用<br>在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。</p>\n<p>四、Spring AI 中的 Agent<br>它的架构和设计是啥样的<br>在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。</p>\n<p>它是怎么工作的<br>Agent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。</p>\n<p>怎么实现它<br>在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。</p>\n<p>五、Spring AI Agent 的应用场景</p>\n<ol>\n<li>智能客服里的 Agent<br>在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。</li>\n</ol>\n<p>自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。<br>多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。<br>情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。<br>2. 机器人控制里的 Agent<br>在机器人领域，Agent 能让机器人变得更聪明、更灵活。</p>\n<p>路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。<br>物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。<br>人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。<br>3. 数据分析里的 Agent<br>在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。</p>\n<p>数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。<br>模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。<br>实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。<br>4. 智能家居里的 Agent<br>在智能家居领域，Agent 能让我们的家变得更智能、更舒适。</p>\n<p>设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。<br>安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。<br>用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。<br>5. 医疗健康里的 Agent<br>在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。</p>\n<p>病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。<br>患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。<br>医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。<br>6. 金融领域的 Agent<br>在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。</p>\n<p>风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。<br>交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。<br>客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。<br>7. 交通物流里的 Agent<br>在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。</p>\n<p>交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。<br>车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。<br>物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。<br>8. 教育领域的 Agent<br>在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。</p>\n<p>个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。<br>智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。<br>学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。<br>六、Spring AI Agent 的发展趋势<br>随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：</p>\n<p>学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。<br>自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。<br>交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。<br>安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。<br>七、结语<br>Spring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。</p>\n<p>虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。</p>\n<h1 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h1><p>一、RAG是什么<br>1.1 RAG的定义<br>RAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。</p>\n<p>1.2 RAG的发展历程<br>RAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。</p>\n<p>1.3 RAG与其他技术的关系<br>RAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。</p>\n<p>二、RAG的应用场景<br>2.1 智能问答系统<br>2.1.1 提高问答准确性<br>在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。</p>\n<p>2.1.2 处理复杂问题<br>面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。</p>\n<p>2.2 文本生成任务<br>2.2.1 辅助创作内容<br>在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。</p>\n<p>2.2.2 生成多样化文本<br>RAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。</p>\n<p>2.3 信息检索增强<br>2.3.1 提升检索效率<br>传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。</p>\n<p>2.3.2 深入挖掘信息<br>RAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。</p>\n<p>四、RAG的优势与挑战<br>4.1 RAG的优势<br>4.1.1 提高模型性能<br>RAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。</p>\n<p>4.1.2 增强可解释性<br>由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。</p>\n<p>4.1.3 适应多种任务<br>RAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。</p>\n<p>4.2 RAG的挑战<br>4.2.1 数据质量与规模要求<br>RAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。</p>\n<p>RAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。</p>\n<p>4.2.2 检索与生成的协调<br>在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。</p>\n<p>检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。</p>\n<p>五、结语<br>展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Agent-未来智能应用的发展趋势\"><a href=\"#Spring-AI-Agent-未来智能应用的发展趋势\" class=\"headerlink\" title=\"Spring AI Agent 未来智能应用的发展趋势\"></a>Spring AI Agent 未来智能应用的发展趋势</h1><p>一、引言<br>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<p>二、Spring AI 概述<br>Spring AI 是啥玩意儿<br>Spring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。</p>\n<p>它能干啥，有啥好处<br>Spring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。</p>\n<p>那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。</p>\n<p>三、Agent 的基本概念<br>Agent 是啥<br>Agent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。</p>\n<p>它有啥特点，能干些啥<br>Agent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。</p>\n<p>具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。</p>\n<p>它在 AI 里有啥用<br>在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。</p>\n<p>四、Spring AI 中的 Agent<br>它的架构和设计是啥样的<br>在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。</p>\n<p>它是怎么工作的<br>Agent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。</p>\n<p>怎么实现它<br>在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。</p>\n<p>五、Spring AI Agent 的应用场景</p>\n<ol>\n<li>智能客服里的 Agent<br>在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。</li>\n</ol>\n<p>自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。<br>多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。<br>情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。<br>2. 机器人控制里的 Agent<br>在机器人领域，Agent 能让机器人变得更聪明、更灵活。</p>\n<p>路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。<br>物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。<br>人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。<br>3. 数据分析里的 Agent<br>在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。</p>\n<p>数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。<br>模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。<br>实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。<br>4. 智能家居里的 Agent<br>在智能家居领域，Agent 能让我们的家变得更智能、更舒适。</p>\n<p>设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。<br>安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。<br>用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。<br>5. 医疗健康里的 Agent<br>在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。</p>\n<p>病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。<br>患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。<br>医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。<br>6. 金融领域的 Agent<br>在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。</p>\n<p>风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。<br>交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。<br>客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。<br>7. 交通物流里的 Agent<br>在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。</p>\n<p>交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。<br>车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。<br>物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。<br>8. 教育领域的 Agent<br>在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。</p>\n<p>个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。<br>智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。<br>学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。<br>六、Spring AI Agent 的发展趋势<br>随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：</p>\n<p>学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。<br>自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。<br>交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。<br>安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。<br>七、结语<br>Spring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。</p>\n<p>虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。</p>\n<h1 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h1><p>一、RAG是什么<br>1.1 RAG的定义<br>RAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。</p>\n<p>1.2 RAG的发展历程<br>RAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。</p>\n<p>1.3 RAG与其他技术的关系<br>RAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。</p>\n<p>二、RAG的应用场景<br>2.1 智能问答系统<br>2.1.1 提高问答准确性<br>在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。</p>\n<p>2.1.2 处理复杂问题<br>面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。</p>\n<p>2.2 文本生成任务<br>2.2.1 辅助创作内容<br>在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。</p>\n<p>2.2.2 生成多样化文本<br>RAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。</p>\n<p>2.3 信息检索增强<br>2.3.1 提升检索效率<br>传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。</p>\n<p>2.3.2 深入挖掘信息<br>RAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。</p>\n<p>四、RAG的优势与挑战<br>4.1 RAG的优势<br>4.1.1 提高模型性能<br>RAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。</p>\n<p>4.1.2 增强可解释性<br>由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。</p>\n<p>4.1.3 适应多种任务<br>RAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。</p>\n<p>4.2 RAG的挑战<br>4.2.1 数据质量与规模要求<br>RAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。</p>\n<p>RAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。</p>\n<p>4.2.2 检索与生成的协调<br>在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。</p>\n<p>检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。</p>\n<p>五、结语<br>展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。</p>\n"},{"_content":"# Spring AI Alibaba-00-Spring Ai Alibaba介绍\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.12`\n\n\n\n[toc]\n\n\n\n## 简介\n\n[Spring AI](https://docs.spring.io/spring-ai/reference/index.html) 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。\n\n\n\n\n\n## 什么是 Spring AI Alibaba？\n\n\n\nSpring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。\n\n![img](typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png)\n\nSpring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。\n\n- 开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient\n- 提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等\n- 支持的模型类型包括聊天、文生图、音频转录、文生语音等\n- 支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）\n- 支持 Structured Output，即将 AI 模型输出映射到 POJOs\n- 支持矢量数据库存储与检索\n- 支持函数调用 Function Calling\n- 支持构建 AI Agent 所需要的工具调用和对话内存记忆能力\n- 支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索\n\n以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。\n\n\n\n## 核心概念\n\n### 模型（Model）\n\nAI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。\n\nAI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。\n\n\n\n![spring-ai-concepts-model-types](typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg)\n\nSpring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。\n\nGPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。\n\n\n\n### 提示（Prompt）\n\nPrompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。\n\nChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。\n\n撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。\n\n这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。\n\n分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。\n\n### 提示词模板（Prompt Template）\n\n创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。\n\n例如，考虑以下简单的 Prompt 模板：\n\n>Tell me a {adjective} joke about {content}.\n\n在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。\n\n传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。\n\n\n\n### 嵌入（Embedding）\n\n嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。\n\n通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。\n\n![spring-ai-embeddings](typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg)\n\n作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。\n\nEmbedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。\n\n您可以将这个语义空间视为一个向量。\n\n### Token\n\ntoken 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。\n\n在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。\n\n![spring-ai-concepts-tokens](typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png)\n\n\n\n也许更重要的是 “token = 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。\n\n此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。\n\n例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。\n\n要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。\n\n### 结构化输出（Structured Output）\n\n即使您要求回复为 JSON ，AI 模型的输出通常也会以 `java.lang.String` 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。\n\n这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。\n\n![结构化输出转换器架构](typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg)\n\n\n\n[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。\n\n\n\n### 将您的数据和 API 引入 AI 模型\n\n如何让人工智能模型与不在训练集中的数据一同工作？\n\n请注意，GPT 3.5/4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。\n\n有三种技术可以定制 AI 模型以整合您的数据：\n\n- `Fine Tuning` 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。\n- `Prompt Stuffing` 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为[检索增强生成 (RAG)]()实现解决方案。\n\n![prompt-stuffing](typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg)\n\n- Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。\n\n\n\n\n\n### 检索增强生成（RAG）\n\n一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。\n\n该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。\n\n在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：\n\n1. 将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。\n2. 将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。\n\nRAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。\n\n![Spring AI RAG](typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg)\n\n\n\n\n\n- [ETL 管道](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html) 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。\n- [ChatClient - RAG] 解释了如何使用`QuestionAnswerAdvisor` Advisor 在您的应用程序中启用 RAG 功能。\n\n### 函数调用（Function Calling）\n\n大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。\n\n[Function Calling](https://docs.spring.io/spring-ai/reference/api/functions.html)机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。\n\nSpring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，`@Bean`然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。\n\n![Spring AI Function Calling](typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg)\n\n- （1）执行聊天请求并发送函数定义信息。后者提供`name`（`description`例如，解释模型何时应调用该函数）和`input parameters`（例如，函数的输入参数模式）。\n- （2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。\n- （3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。\n- （4）模型可以执行多个函数调用来检索所需的所有信息。\n- （5）一旦获取了所有需要的信息，模型就会生成响应。\n\n请关注[函数调用](https://docs.spring.io/spring-ai/reference/api/functions.html)文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。\n\n### 评估人工智能的回答（Evaluation）\n\n有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。\n\nEvaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。\n\n一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。\n\n此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。","source":"categories/Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","raw":"# Spring AI Alibaba-00-Spring Ai Alibaba介绍\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.12`\n\n\n\n[toc]\n\n\n\n## 简介\n\n[Spring AI](https://docs.spring.io/spring-ai/reference/index.html) 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。\n\n\n\n\n\n## 什么是 Spring AI Alibaba？\n\n\n\nSpring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。\n\n![img](typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png)\n\nSpring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。\n\n- 开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient\n- 提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等\n- 支持的模型类型包括聊天、文生图、音频转录、文生语音等\n- 支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）\n- 支持 Structured Output，即将 AI 模型输出映射到 POJOs\n- 支持矢量数据库存储与检索\n- 支持函数调用 Function Calling\n- 支持构建 AI Agent 所需要的工具调用和对话内存记忆能力\n- 支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索\n\n以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。\n\n\n\n## 核心概念\n\n### 模型（Model）\n\nAI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。\n\nAI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。\n\n\n\n![spring-ai-concepts-model-types](typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg)\n\nSpring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。\n\nGPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。\n\n\n\n### 提示（Prompt）\n\nPrompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。\n\nChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。\n\n撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。\n\n这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。\n\n分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。\n\n### 提示词模板（Prompt Template）\n\n创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。\n\n例如，考虑以下简单的 Prompt 模板：\n\n>Tell me a {adjective} joke about {content}.\n\n在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。\n\n传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。\n\n\n\n### 嵌入（Embedding）\n\n嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。\n\n通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。\n\n![spring-ai-embeddings](typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg)\n\n作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。\n\nEmbedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。\n\n您可以将这个语义空间视为一个向量。\n\n### Token\n\ntoken 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。\n\n在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。\n\n![spring-ai-concepts-tokens](typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png)\n\n\n\n也许更重要的是 “token = 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。\n\n此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。\n\n例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。\n\n要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。\n\n### 结构化输出（Structured Output）\n\n即使您要求回复为 JSON ，AI 模型的输出通常也会以 `java.lang.String` 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。\n\n这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。\n\n![结构化输出转换器架构](typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg)\n\n\n\n[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。\n\n\n\n### 将您的数据和 API 引入 AI 模型\n\n如何让人工智能模型与不在训练集中的数据一同工作？\n\n请注意，GPT 3.5/4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。\n\n有三种技术可以定制 AI 模型以整合您的数据：\n\n- `Fine Tuning` 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。\n- `Prompt Stuffing` 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为[检索增强生成 (RAG)]()实现解决方案。\n\n![prompt-stuffing](typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg)\n\n- Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。\n\n\n\n\n\n### 检索增强生成（RAG）\n\n一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。\n\n该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。\n\n在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：\n\n1. 将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。\n2. 将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。\n\nRAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。\n\n![Spring AI RAG](typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg)\n\n\n\n\n\n- [ETL 管道](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html) 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。\n- [ChatClient - RAG] 解释了如何使用`QuestionAnswerAdvisor` Advisor 在您的应用程序中启用 RAG 功能。\n\n### 函数调用（Function Calling）\n\n大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。\n\n[Function Calling](https://docs.spring.io/spring-ai/reference/api/functions.html)机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。\n\nSpring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，`@Bean`然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。\n\n![Spring AI Function Calling](typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg)\n\n- （1）执行聊天请求并发送函数定义信息。后者提供`name`（`description`例如，解释模型何时应调用该函数）和`input parameters`（例如，函数的输入参数模式）。\n- （2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。\n- （3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。\n- （4）模型可以执行多个函数调用来检索所需的所有信息。\n- （5）一旦获取了所有需要的信息，模型就会生成响应。\n\n请关注[函数调用](https://docs.spring.io/spring-ai/reference/api/functions.html)文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。\n\n### 评估人工智能的回答（Evaluation）\n\n有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。\n\nEvaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。\n\n一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。\n\n此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。","date":"2025-06-04T10:12:41.872Z","updated":"2025-04-19T09:56:16.496Z","path":"categories/Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5n0002nffy895m3gu0","content":"<h1 id=\"Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\"><a href=\"#Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\" class=\"headerlink\" title=\"Spring AI Alibaba-00-Spring Ai Alibaba介绍\"></a>Spring AI Alibaba-00-Spring Ai Alibaba介绍</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.12</code></p>\n<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://docs.spring.io/spring-ai/reference/index.html\">Spring AI</a> 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。</p>\n<h2 id=\"什么是-Spring-AI-Alibaba？\"><a href=\"#什么是-Spring-AI-Alibaba？\" class=\"headerlink\" title=\"什么是 Spring AI Alibaba？\"></a>什么是 Spring AI Alibaba？</h2><p>Spring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。</p>\n<p><img src=\"/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png\" alt=\"img\"></p>\n<p>Spring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。</p>\n<ul>\n<li>开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient</li>\n<li>提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等</li>\n<li>支持的模型类型包括聊天、文生图、音频转录、文生语音等</li>\n<li>支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）</li>\n<li>支持 Structured Output，即将 AI 模型输出映射到 POJOs</li>\n<li>支持矢量数据库存储与检索</li>\n<li>支持函数调用 Function Calling</li>\n<li>支持构建 AI Agent 所需要的工具调用和对话内存记忆能力</li>\n<li>支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索</li>\n</ul>\n<p>以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"模型（Model）\"><a href=\"#模型（Model）\" class=\"headerlink\" title=\"模型（Model）\"></a>模型（Model）</h3><p>AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。</p>\n<p>AI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。</p>\n<p><img src=\"/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg\" alt=\"spring-ai-concepts-model-types\"></p>\n<p>Spring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。</p>\n<p>GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。</p>\n<h3 id=\"提示（Prompt）\"><a href=\"#提示（Prompt）\" class=\"headerlink\" title=\"提示（Prompt）\"></a>提示（Prompt）</h3><p>Prompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。</p>\n<p>ChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。</p>\n<p>撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。</p>\n<p>这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。</p>\n<p>分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。</p>\n<h3 id=\"提示词模板（Prompt-Template）\"><a href=\"#提示词模板（Prompt-Template）\" class=\"headerlink\" title=\"提示词模板（Prompt Template）\"></a>提示词模板（Prompt Template）</h3><p>创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。</p>\n<p>例如，考虑以下简单的 Prompt 模板：</p>\n<blockquote>\n<p>Tell me a {adjective} joke about {content}.</p>\n</blockquote>\n<p>在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。</p>\n<p>传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。</p>\n<h3 id=\"嵌入（Embedding）\"><a href=\"#嵌入（Embedding）\" class=\"headerlink\" title=\"嵌入（Embedding）\"></a>嵌入（Embedding）</h3><p>嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。</p>\n<p>通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。</p>\n<p><img src=\"/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg\" alt=\"spring-ai-embeddings\"></p>\n<p>作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。</p>\n<p>Embedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。</p>\n<p>您可以将这个语义空间视为一个向量。</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>token 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。</p>\n<p>在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。</p>\n<p><img src=\"/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png\" alt=\"spring-ai-concepts-tokens\"></p>\n<p>也许更重要的是 “token &#x3D; 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。</p>\n<p>此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。</p>\n<p>例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。</p>\n<p>要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。</p>\n<h3 id=\"结构化输出（Structured-Output）\"><a href=\"#结构化输出（Structured-Output）\" class=\"headerlink\" title=\"结构化输出（Structured Output）\"></a>结构化输出（Structured Output）</h3><p>即使您要求回复为 JSON ，AI 模型的输出通常也会以 <code>java.lang.String</code> 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。</p>\n<p>这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。</p>\n<p><img src=\"/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg\" alt=\"结构化输出转换器架构\"></p>\n<p>[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。</p>\n<h3 id=\"将您的数据和-API-引入-AI-模型\"><a href=\"#将您的数据和-API-引入-AI-模型\" class=\"headerlink\" title=\"将您的数据和 API 引入 AI 模型\"></a>将您的数据和 API 引入 AI 模型</h3><p>如何让人工智能模型与不在训练集中的数据一同工作？</p>\n<p>请注意，GPT 3.5&#x2F;4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。</p>\n<p>有三种技术可以定制 AI 模型以整合您的数据：</p>\n<ul>\n<li><code>Fine Tuning</code> 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。</li>\n<li><code>Prompt Stuffing</code> 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为<a href=\"\">检索增强生成 (RAG)</a>实现解决方案。</li>\n</ul>\n<p><img src=\"/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg\" alt=\"prompt-stuffing\"></p>\n<ul>\n<li>Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。</li>\n</ul>\n<h3 id=\"检索增强生成（RAG）\"><a href=\"#检索增强生成（RAG）\" class=\"headerlink\" title=\"检索增强生成（RAG）\"></a>检索增强生成（RAG）</h3><p>一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。</p>\n<p>该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。</p>\n<p>在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：</p>\n<ol>\n<li>将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。</li>\n<li>将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。</li>\n</ol>\n<p>RAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。</p>\n<p><img src=\"/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg\" alt=\"Spring AI RAG\"></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html\">ETL 管道</a> 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。</li>\n<li>[ChatClient - RAG] 解释了如何使用<code>QuestionAnswerAdvisor</code> Advisor 在您的应用程序中启用 RAG 功能。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a>函数调用（Function Calling）</h3><p>大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。</p>\n<p><a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">Function Calling</a>机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。</p>\n<p>Spring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，<code>@Bean</code>然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。</p>\n<p><img src=\"/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg\" alt=\"Spring AI Function Calling\"></p>\n<ul>\n<li>（1）执行聊天请求并发送函数定义信息。后者提供<code>name</code>（<code>description</code>例如，解释模型何时应调用该函数）和<code>input parameters</code>（例如，函数的输入参数模式）。</li>\n<li>（2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。</li>\n<li>（3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。</li>\n<li>（4）模型可以执行多个函数调用来检索所需的所有信息。</li>\n<li>（5）一旦获取了所有需要的信息，模型就会生成响应。</li>\n</ul>\n<p>请关注<a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">函数调用</a>文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。</p>\n<h3 id=\"评估人工智能的回答（Evaluation）\"><a href=\"#评估人工智能的回答（Evaluation）\" class=\"headerlink\" title=\"评估人工智能的回答（Evaluation）\"></a>评估人工智能的回答（Evaluation）</h3><p>有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。</p>\n<p>Evaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。</p>\n<p>一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。</p>\n<p>此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\"><a href=\"#Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\" class=\"headerlink\" title=\"Spring AI Alibaba-00-Spring Ai Alibaba介绍\"></a>Spring AI Alibaba-00-Spring Ai Alibaba介绍</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.12</code></p>\n<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://docs.spring.io/spring-ai/reference/index.html\">Spring AI</a> 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。</p>\n<h2 id=\"什么是-Spring-AI-Alibaba？\"><a href=\"#什么是-Spring-AI-Alibaba？\" class=\"headerlink\" title=\"什么是 Spring AI Alibaba？\"></a>什么是 Spring AI Alibaba？</h2><p>Spring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。</p>\n<p><img src=\"/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png\" alt=\"img\"></p>\n<p>Spring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。</p>\n<ul>\n<li>开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient</li>\n<li>提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等</li>\n<li>支持的模型类型包括聊天、文生图、音频转录、文生语音等</li>\n<li>支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）</li>\n<li>支持 Structured Output，即将 AI 模型输出映射到 POJOs</li>\n<li>支持矢量数据库存储与检索</li>\n<li>支持函数调用 Function Calling</li>\n<li>支持构建 AI Agent 所需要的工具调用和对话内存记忆能力</li>\n<li>支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索</li>\n</ul>\n<p>以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"模型（Model）\"><a href=\"#模型（Model）\" class=\"headerlink\" title=\"模型（Model）\"></a>模型（Model）</h3><p>AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。</p>\n<p>AI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。</p>\n<p><img src=\"/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg\" alt=\"spring-ai-concepts-model-types\"></p>\n<p>Spring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。</p>\n<p>GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。</p>\n<h3 id=\"提示（Prompt）\"><a href=\"#提示（Prompt）\" class=\"headerlink\" title=\"提示（Prompt）\"></a>提示（Prompt）</h3><p>Prompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。</p>\n<p>ChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。</p>\n<p>撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。</p>\n<p>这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。</p>\n<p>分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。</p>\n<h3 id=\"提示词模板（Prompt-Template）\"><a href=\"#提示词模板（Prompt-Template）\" class=\"headerlink\" title=\"提示词模板（Prompt Template）\"></a>提示词模板（Prompt Template）</h3><p>创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。</p>\n<p>例如，考虑以下简单的 Prompt 模板：</p>\n<blockquote>\n<p>Tell me a {adjective} joke about {content}.</p>\n</blockquote>\n<p>在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。</p>\n<p>传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。</p>\n<h3 id=\"嵌入（Embedding）\"><a href=\"#嵌入（Embedding）\" class=\"headerlink\" title=\"嵌入（Embedding）\"></a>嵌入（Embedding）</h3><p>嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。</p>\n<p>通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。</p>\n<p><img src=\"/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg\" alt=\"spring-ai-embeddings\"></p>\n<p>作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。</p>\n<p>Embedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。</p>\n<p>您可以将这个语义空间视为一个向量。</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>token 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。</p>\n<p>在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。</p>\n<p><img src=\"/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png\" alt=\"spring-ai-concepts-tokens\"></p>\n<p>也许更重要的是 “token &#x3D; 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。</p>\n<p>此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。</p>\n<p>例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。</p>\n<p>要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。</p>\n<h3 id=\"结构化输出（Structured-Output）\"><a href=\"#结构化输出（Structured-Output）\" class=\"headerlink\" title=\"结构化输出（Structured Output）\"></a>结构化输出（Structured Output）</h3><p>即使您要求回复为 JSON ，AI 模型的输出通常也会以 <code>java.lang.String</code> 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。</p>\n<p>这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。</p>\n<p><img src=\"/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg\" alt=\"结构化输出转换器架构\"></p>\n<p>[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。</p>\n<h3 id=\"将您的数据和-API-引入-AI-模型\"><a href=\"#将您的数据和-API-引入-AI-模型\" class=\"headerlink\" title=\"将您的数据和 API 引入 AI 模型\"></a>将您的数据和 API 引入 AI 模型</h3><p>如何让人工智能模型与不在训练集中的数据一同工作？</p>\n<p>请注意，GPT 3.5&#x2F;4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。</p>\n<p>有三种技术可以定制 AI 模型以整合您的数据：</p>\n<ul>\n<li><code>Fine Tuning</code> 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。</li>\n<li><code>Prompt Stuffing</code> 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为<a href=\"\">检索增强生成 (RAG)</a>实现解决方案。</li>\n</ul>\n<p><img src=\"/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg\" alt=\"prompt-stuffing\"></p>\n<ul>\n<li>Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。</li>\n</ul>\n<h3 id=\"检索增强生成（RAG）\"><a href=\"#检索增强生成（RAG）\" class=\"headerlink\" title=\"检索增强生成（RAG）\"></a>检索增强生成（RAG）</h3><p>一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。</p>\n<p>该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。</p>\n<p>在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：</p>\n<ol>\n<li>将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。</li>\n<li>将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。</li>\n</ol>\n<p>RAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。</p>\n<p><img src=\"/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg\" alt=\"Spring AI RAG\"></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html\">ETL 管道</a> 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。</li>\n<li>[ChatClient - RAG] 解释了如何使用<code>QuestionAnswerAdvisor</code> Advisor 在您的应用程序中启用 RAG 功能。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a>函数调用（Function Calling）</h3><p>大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。</p>\n<p><a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">Function Calling</a>机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。</p>\n<p>Spring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，<code>@Bean</code>然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。</p>\n<p><img src=\"/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg\" alt=\"Spring AI Function Calling\"></p>\n<ul>\n<li>（1）执行聊天请求并发送函数定义信息。后者提供<code>name</code>（<code>description</code>例如，解释模型何时应调用该函数）和<code>input parameters</code>（例如，函数的输入参数模式）。</li>\n<li>（2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。</li>\n<li>（3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。</li>\n<li>（4）模型可以执行多个函数调用来检索所需的所有信息。</li>\n<li>（5）一旦获取了所有需要的信息，模型就会生成响应。</li>\n</ul>\n<p>请关注<a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">函数调用</a>文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。</p>\n<h3 id=\"评估人工智能的回答（Evaluation）\"><a href=\"#评估人工智能的回答（Evaluation）\" class=\"headerlink\" title=\"评估人工智能的回答（Evaluation）\"></a>评估人工智能的回答（Evaluation）</h3><p>有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。</p>\n<p>Evaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。</p>\n<p>一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。</p>\n<p>此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。</p>\n"},{"_content":"# Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n\n\nSpring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。\n\n## 依赖\n\n开发工具:IntelliJ IDEA\n\nJDK17+, 可以使用idea自带\n\n阿里云百炼：https://bailian.console.aliyun.com/\n\n\n\n## 准备\n\n### 使用IDEA 创建demo\n\n\n\n![image-20250419091747915](typora-user-images/image-20250419091747915.png)\n\n然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上\n\n![image-20250419092017527](typora-user-images/image-20250419092017527.png)\n\n\n\n\n\n###  Pom依赖\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n### **新建ChatController.java**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatController {\n\n\n    private final ChatClient chatClient;\n\n    public ChatController(ChatClient.Builder chatClientBuilder) {\n        this.chatClient = chatClientBuilder\n                // 实现 Chat Memory 的 Advisor\n                // 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。\n                .defaultAdvisors(\n                        new MessageChatMemoryAdvisor(new InMemoryChatMemory())\n                )\n                // 实现 Logger 的 Advisor\n                .defaultAdvisors(\n                        new SimpleLoggerAdvisor()\n                )\n                // 设置 ChatClient 中 ChatModel 的 Options 参数\n                .defaultOptions(\n                        DashScopeChatOptions.builder()\n                                .withTopP(0.7)\n                                .build()\n                )\n                .build();\n    }\n\n    @GetMapping(\"/simple/chat\")\n    public String simpleChat(String query) {\n        log.info(\"query: {}\",query );\n        String text =  chatClient.prompt(query).call().content();\n        log.info(\"text: {}\",text );\n        return text;\n    }\n\n    @GetMapping(\"/chat\")\n    public String chat(String message) {\n\n        return this.chatClient.prompt()\n                .user(message)\n                .call()\n                .content();\n    }\n\n\n    @GetMapping(\"/hello\")\n    public String hello(String message) {\n\n        return \"Hello \" + message;\n    }\n\n}\n\n~~~\n\nspring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建`chatClient`时添加两行代码。\n\n~~~java\nprivate ChatMemory chatMemory = new InMemoryChatMemory();                                            \n\npublic ChatController(ChatClient.Builder builder) {\n                                                   \n    this.chatClient = builder                                                                        \n            .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory, UUID.randomUUID().toString(), 10))\n            .build();                                                                                \n}\n\n~~~\n\nUUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。\n\n这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。\n\n\n\n这里有两个事项需要注意：\n\n1. Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。\n2. spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。\n\n~~~xml\n<repositories>\n  <repository>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n\n~~~\n\n\n\napplication.yml配置\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n~~~\n\n\n\n\n\n### 对话页面\n\n\n\n\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"js/marked.min.js\"></script>\n    <title></title>\n    <style>\n        body {\n\n            background-color: #f8f9fa;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n\n            margin: 50px auto;\n            width: 800px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        label {\n\n            display: block;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        input[type=\"text\"] {\n\n            width: 85%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        input[type=\"submit\"] {\n\n            background-color: #2ecc71;\n            color: #fff;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 3px;\n            cursor: pointer;\n            width: 10%;\n        }\n\n        .chat-box {\n\n            width: 100%;\n            height: 500px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n            overflow-y: scroll;\n        }\n\n        .message {\n\n            margin-bottom: 10px;\n            padding: 10px;\n            background-color: #f1f1f1;\n            border-radius: 3px;\n        }\n\n        .user-message {\n\n            background-color: #2ecc71;\n            color: #fff;\n        }\n\n        .bot-message {\n\n            background-color: #e6aa6b;\n            color: #fff;\n        }\n\n        .loader {\n\n            text-align: center;\n        }\n\n        .loader::after {\n\n            content: \"\";\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #ccc;\n            border-top-color: #2ecc71;\n            animation: spin 1s infinite linear;\n        }\n\n        @keyframes spin {\n\n            to {\n\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>AI 对话</h1>\n    <form id=\"form\" style=\"width: 47%;position: absolute;bottom: 150px;margin-left:15px\">\n        <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"输入你的问题\">\n        <input type=\"submit\" value=\"发送\">\n    </form>\n    <br>\n    <div id=\"loader\" class=\"loader\" style=\"display: none;\"></div>\n    <div id=\"chat-box\" class=\"chat-box\"></div>\n</div>\n\n<script>\n    var loader = document.getElementById(\"loader\");\n\n    document.getElementById(\"form\").addEventListener(\"submit\", function(event) {\n\n        event.preventDefault();\n\n        var messageInput = document.getElementById(\"message\");\n        var message = messageInput.value;\n        messageInput.value = \"\";\n\n        var chatBox = document.getElementById(\"chat-box\");\n\n        var userMessage = document.createElement(\"div\");\n        userMessage.className = \"message\";\n        userMessage.textContent = \"我: \" + message;\n        chatBox.appendChild(userMessage);\n        chatBox.scrollTop = chatBox.scrollHeight;\n\n        loader.style.display = \"block\";\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"http://localhost:8080/ai/v1/chat?message=\" + encodeURIComponent(message), true);\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState === 4) {\n\n                loader.style.display = \"none\";\n\n                if (xhr.status === 200) {\n\n                    var response = xhr.responseText;\n\n                    var botMessage = document.createElement(\"div\");\n                    botMessage.className = \"message bot-message\";\n\n                    var botMessageText = document.createElement(\"span\");\n                    botMessageText.className = \"message-text\";\n                    botMessage.appendChild(botMessageText);\n                    botMessageText.innerHTML = marked.marked(response);\n\n                    chatBox.appendChild(botMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else if (xhr.status === 400) {\n\n                    var error = JSON.parse(xhr.responseText);\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: \" + error.message;\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else {\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: Failed to connect to the backend service. Please make sure the backend service is running.\";\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                }\n            }\n        };\n\n        xhr.onloadstart = function() {\n\n            loader.style.display = \"block\";\n        };\n\n        xhr.onloadend = function() {\n\n            loader.style.display = \"none\";\n        };\n\n        xhr.send();\n    });\n</script>\n</body>\n</html>\n\n~~~\n\n注意：js 引入的 `marked.min.js`\n\n可以去 [GitHub](https://github.com/cundream/marked) 或联系我\n\n### 注册配置APi\n\n[阿里云百练文档地址](https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1)\n\n\n\n![image-20250419102848756](typora-user-images/image-20250419102848756.png)\n\n\n\n创建Key\n\n![image-20250419105704031](typora-user-images/image-20250419105704031.png)\n\n\n\n## 测试验证\n\n访问：http://localhost:8080/chat.html\n\n输入对话\n\n\n\n![image-20250419113622811](typora-user-images/image-20250419113622811.png)\n\n测试二：\n\nhttp://localhost:8080/ai/v1/simple/chat?query=你是谁\n\n![image-20250419112758947](typora-user-images/image-20250419112758947.png)\n\n\n\n## 需要了解的基本知识\n\n\n\n上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。\n\n- AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。\n- Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。\n- Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。\n- 模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。\n\n对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。\n\n\n\n\n\n# 总结\n\nSpring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。","source":"categories/Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","raw":"# Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n\n\nSpring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。\n\n## 依赖\n\n开发工具:IntelliJ IDEA\n\nJDK17+, 可以使用idea自带\n\n阿里云百炼：https://bailian.console.aliyun.com/\n\n\n\n## 准备\n\n### 使用IDEA 创建demo\n\n\n\n![image-20250419091747915](typora-user-images/image-20250419091747915.png)\n\n然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上\n\n![image-20250419092017527](typora-user-images/image-20250419092017527.png)\n\n\n\n\n\n###  Pom依赖\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n### **新建ChatController.java**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatController {\n\n\n    private final ChatClient chatClient;\n\n    public ChatController(ChatClient.Builder chatClientBuilder) {\n        this.chatClient = chatClientBuilder\n                // 实现 Chat Memory 的 Advisor\n                // 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。\n                .defaultAdvisors(\n                        new MessageChatMemoryAdvisor(new InMemoryChatMemory())\n                )\n                // 实现 Logger 的 Advisor\n                .defaultAdvisors(\n                        new SimpleLoggerAdvisor()\n                )\n                // 设置 ChatClient 中 ChatModel 的 Options 参数\n                .defaultOptions(\n                        DashScopeChatOptions.builder()\n                                .withTopP(0.7)\n                                .build()\n                )\n                .build();\n    }\n\n    @GetMapping(\"/simple/chat\")\n    public String simpleChat(String query) {\n        log.info(\"query: {}\",query );\n        String text =  chatClient.prompt(query).call().content();\n        log.info(\"text: {}\",text );\n        return text;\n    }\n\n    @GetMapping(\"/chat\")\n    public String chat(String message) {\n\n        return this.chatClient.prompt()\n                .user(message)\n                .call()\n                .content();\n    }\n\n\n    @GetMapping(\"/hello\")\n    public String hello(String message) {\n\n        return \"Hello \" + message;\n    }\n\n}\n\n~~~\n\nspring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建`chatClient`时添加两行代码。\n\n~~~java\nprivate ChatMemory chatMemory = new InMemoryChatMemory();                                            \n\npublic ChatController(ChatClient.Builder builder) {\n                                                   \n    this.chatClient = builder                                                                        \n            .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory, UUID.randomUUID().toString(), 10))\n            .build();                                                                                \n}\n\n~~~\n\nUUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。\n\n这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。\n\n\n\n这里有两个事项需要注意：\n\n1. Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。\n2. spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。\n\n~~~xml\n<repositories>\n  <repository>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n\n~~~\n\n\n\napplication.yml配置\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n~~~\n\n\n\n\n\n### 对话页面\n\n\n\n\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"js/marked.min.js\"></script>\n    <title></title>\n    <style>\n        body {\n\n            background-color: #f8f9fa;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n\n            margin: 50px auto;\n            width: 800px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        label {\n\n            display: block;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        input[type=\"text\"] {\n\n            width: 85%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        input[type=\"submit\"] {\n\n            background-color: #2ecc71;\n            color: #fff;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 3px;\n            cursor: pointer;\n            width: 10%;\n        }\n\n        .chat-box {\n\n            width: 100%;\n            height: 500px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n            overflow-y: scroll;\n        }\n\n        .message {\n\n            margin-bottom: 10px;\n            padding: 10px;\n            background-color: #f1f1f1;\n            border-radius: 3px;\n        }\n\n        .user-message {\n\n            background-color: #2ecc71;\n            color: #fff;\n        }\n\n        .bot-message {\n\n            background-color: #e6aa6b;\n            color: #fff;\n        }\n\n        .loader {\n\n            text-align: center;\n        }\n\n        .loader::after {\n\n            content: \"\";\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #ccc;\n            border-top-color: #2ecc71;\n            animation: spin 1s infinite linear;\n        }\n\n        @keyframes spin {\n\n            to {\n\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>AI 对话</h1>\n    <form id=\"form\" style=\"width: 47%;position: absolute;bottom: 150px;margin-left:15px\">\n        <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"输入你的问题\">\n        <input type=\"submit\" value=\"发送\">\n    </form>\n    <br>\n    <div id=\"loader\" class=\"loader\" style=\"display: none;\"></div>\n    <div id=\"chat-box\" class=\"chat-box\"></div>\n</div>\n\n<script>\n    var loader = document.getElementById(\"loader\");\n\n    document.getElementById(\"form\").addEventListener(\"submit\", function(event) {\n\n        event.preventDefault();\n\n        var messageInput = document.getElementById(\"message\");\n        var message = messageInput.value;\n        messageInput.value = \"\";\n\n        var chatBox = document.getElementById(\"chat-box\");\n\n        var userMessage = document.createElement(\"div\");\n        userMessage.className = \"message\";\n        userMessage.textContent = \"我: \" + message;\n        chatBox.appendChild(userMessage);\n        chatBox.scrollTop = chatBox.scrollHeight;\n\n        loader.style.display = \"block\";\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"http://localhost:8080/ai/v1/chat?message=\" + encodeURIComponent(message), true);\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState === 4) {\n\n                loader.style.display = \"none\";\n\n                if (xhr.status === 200) {\n\n                    var response = xhr.responseText;\n\n                    var botMessage = document.createElement(\"div\");\n                    botMessage.className = \"message bot-message\";\n\n                    var botMessageText = document.createElement(\"span\");\n                    botMessageText.className = \"message-text\";\n                    botMessage.appendChild(botMessageText);\n                    botMessageText.innerHTML = marked.marked(response);\n\n                    chatBox.appendChild(botMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else if (xhr.status === 400) {\n\n                    var error = JSON.parse(xhr.responseText);\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: \" + error.message;\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else {\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: Failed to connect to the backend service. Please make sure the backend service is running.\";\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                }\n            }\n        };\n\n        xhr.onloadstart = function() {\n\n            loader.style.display = \"block\";\n        };\n\n        xhr.onloadend = function() {\n\n            loader.style.display = \"none\";\n        };\n\n        xhr.send();\n    });\n</script>\n</body>\n</html>\n\n~~~\n\n注意：js 引入的 `marked.min.js`\n\n可以去 [GitHub](https://github.com/cundream/marked) 或联系我\n\n### 注册配置APi\n\n[阿里云百练文档地址](https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1)\n\n\n\n![image-20250419102848756](typora-user-images/image-20250419102848756.png)\n\n\n\n创建Key\n\n![image-20250419105704031](typora-user-images/image-20250419105704031.png)\n\n\n\n## 测试验证\n\n访问：http://localhost:8080/chat.html\n\n输入对话\n\n\n\n![image-20250419113622811](typora-user-images/image-20250419113622811.png)\n\n测试二：\n\nhttp://localhost:8080/ai/v1/simple/chat?query=你是谁\n\n![image-20250419112758947](typora-user-images/image-20250419112758947.png)\n\n\n\n## 需要了解的基本知识\n\n\n\n上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。\n\n- AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。\n- Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。\n- Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。\n- 模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。\n\n对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。\n\n\n\n\n\n# 总结\n\nSpring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。","date":"2025-06-04T10:12:41.873Z","updated":"2025-04-19T09:56:27.668Z","path":"categories/Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5n0003nffy5ujm1w44","content":"<h1 id=\"Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\"><a href=\"#Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\" class=\"headerlink\" title=\"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\"></a>Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>Spring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>开发工具:IntelliJ IDEA</p>\n<p>JDK17+, 可以使用idea自带</p>\n<p>阿里云百炼：<a href=\"https://bailian.console.aliyun.com/\">https://bailian.console.aliyun.com/</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"使用IDEA-创建demo\"><a href=\"#使用IDEA-创建demo\" class=\"headerlink\" title=\"使用IDEA 创建demo\"></a>使用IDEA 创建demo</h3><p><img src=\"/typora-user-images/image-20250419091747915.png\" alt=\"image-20250419091747915\"></p>\n<p>然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上</p>\n<p><img src=\"/typora-user-images/image-20250419092017527.png\" alt=\"image-20250419092017527\"></p>\n<h3 id=\"Pom依赖\"><a href=\"#Pom依赖\" class=\"headerlink\" title=\"Pom依赖\"></a>Pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建ChatController-java\"><a href=\"#新建ChatController-java\" class=\"headerlink\" title=\"新建ChatController.java\"></a><strong>新建ChatController.java</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = chatClientBuilder</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">                <span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>())</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">                .defaultOptions(</span><br><span class=\"line\">                        DashScopeChatOptions.builder()</span><br><span class=\"line\">                                .withTopP(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">                                .build()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/simple/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query: &#123;&#125;&quot;</span>,query );</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span>  chatClient.prompt(query).call().content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text: &#123;&#125;&quot;</span>,text );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.chatClient.prompt()</span><br><span class=\"line\">                .user(message)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>spring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建<code>chatClient</code>时添加两行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ChatMemory</span> <span class=\"variable\">chatMemory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();                                            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">                                                   </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder                                                                        </span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, UUID.randomUUID().toString(), <span class=\"number\">10</span>))</span><br><span class=\"line\">            .build();                                                                                </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>UUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。</p>\n<p>这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。</p>\n<p>这里有两个事项需要注意：</p>\n<ol>\n<li>Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。</li>\n<li>spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>application.yml配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"对话页面\"><a href=\"#对话页面\" class=\"headerlink\" title=\"对话页面\"></a>对话页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/marked.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f9fa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">85%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.chat-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow-y</span>: scroll;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.user-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.bot-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#e6aa6b</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">animation</span>: spin <span class=\"number\">1s</span> infinite linear;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"keyword\">@keyframes</span> spin &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>AI 对话<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 47%;position: absolute;bottom: 150px;margin-left:15px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入你的问题&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-box&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> loader = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loader&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;form&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;submit&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        event.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> messageInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> message = messageInput.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        messageInput.<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> chatBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;chat-box&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> userMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;我: &quot;</span> + message;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"title function_\">appendChild</span>(userMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:8080/ai/v1/chat?message=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(message), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> response = xhr.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessageText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">className</span> = <span class=\"string\">&quot;message-text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"title function_\">appendChild</span>(botMessageText);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">innerHTML</span> = marked.<span class=\"title function_\">marked</span>(response);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(botMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">400</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: &quot;</span> + error.<span class=\"property\">message</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: Failed to connect to the backend service. Please make sure the backend service is running.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：js 引入的 <code>marked.min.js</code></p>\n<p>可以去 <a href=\"https://github.com/cundream/marked\">GitHub</a> 或联系我</p>\n<h3 id=\"注册配置APi\"><a href=\"#注册配置APi\" class=\"headerlink\" title=\"注册配置APi\"></a>注册配置APi</h3><p><a href=\"https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1\">阿里云百练文档地址</a></p>\n<p><img src=\"/typora-user-images/image-20250419102848756.png\" alt=\"image-20250419102848756\"></p>\n<p>创建Key</p>\n<p><img src=\"/typora-user-images/image-20250419105704031.png\" alt=\"image-20250419105704031\"></p>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>访问：<a href=\"http://localhost:8080/chat.html\">http://localhost:8080/chat.html</a></p>\n<p>输入对话</p>\n<p><img src=\"/typora-user-images/image-20250419113622811.png\" alt=\"image-20250419113622811\"></p>\n<p>测试二：</p>\n<p><a href=\"http://localhost:8080/ai/v1/simple/chat?query=%E4%BD%A0%E6%98%AF%E8%B0%81\">http://localhost:8080/ai/v1/simple/chat?query=你是谁</a></p>\n<p><img src=\"/typora-user-images/image-20250419112758947.png\" alt=\"image-20250419112758947\"></p>\n<h2 id=\"需要了解的基本知识\"><a href=\"#需要了解的基本知识\" class=\"headerlink\" title=\"需要了解的基本知识\"></a>需要了解的基本知识</h2><p>上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。</p>\n<ul>\n<li>AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。</li>\n<li>Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。</li>\n<li>Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。</li>\n<li>模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。</li>\n</ul>\n<p>对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\"><a href=\"#Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\" class=\"headerlink\" title=\"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\"></a>Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>Spring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>开发工具:IntelliJ IDEA</p>\n<p>JDK17+, 可以使用idea自带</p>\n<p>阿里云百炼：<a href=\"https://bailian.console.aliyun.com/\">https://bailian.console.aliyun.com/</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"使用IDEA-创建demo\"><a href=\"#使用IDEA-创建demo\" class=\"headerlink\" title=\"使用IDEA 创建demo\"></a>使用IDEA 创建demo</h3><p><img src=\"/typora-user-images/image-20250419091747915.png\" alt=\"image-20250419091747915\"></p>\n<p>然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上</p>\n<p><img src=\"/typora-user-images/image-20250419092017527.png\" alt=\"image-20250419092017527\"></p>\n<h3 id=\"Pom依赖\"><a href=\"#Pom依赖\" class=\"headerlink\" title=\"Pom依赖\"></a>Pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建ChatController-java\"><a href=\"#新建ChatController-java\" class=\"headerlink\" title=\"新建ChatController.java\"></a><strong>新建ChatController.java</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = chatClientBuilder</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">                <span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>())</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">                .defaultOptions(</span><br><span class=\"line\">                        DashScopeChatOptions.builder()</span><br><span class=\"line\">                                .withTopP(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">                                .build()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/simple/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query: &#123;&#125;&quot;</span>,query );</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span>  chatClient.prompt(query).call().content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text: &#123;&#125;&quot;</span>,text );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.chatClient.prompt()</span><br><span class=\"line\">                .user(message)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>spring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建<code>chatClient</code>时添加两行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ChatMemory</span> <span class=\"variable\">chatMemory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();                                            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">                                                   </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder                                                                        </span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, UUID.randomUUID().toString(), <span class=\"number\">10</span>))</span><br><span class=\"line\">            .build();                                                                                </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>UUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。</p>\n<p>这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。</p>\n<p>这里有两个事项需要注意：</p>\n<ol>\n<li>Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。</li>\n<li>spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>application.yml配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"对话页面\"><a href=\"#对话页面\" class=\"headerlink\" title=\"对话页面\"></a>对话页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/marked.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f9fa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">85%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.chat-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow-y</span>: scroll;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.user-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.bot-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#e6aa6b</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">animation</span>: spin <span class=\"number\">1s</span> infinite linear;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"keyword\">@keyframes</span> spin &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>AI 对话<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 47%;position: absolute;bottom: 150px;margin-left:15px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入你的问题&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-box&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> loader = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loader&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;form&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;submit&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        event.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> messageInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> message = messageInput.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        messageInput.<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> chatBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;chat-box&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> userMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;我: &quot;</span> + message;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"title function_\">appendChild</span>(userMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:8080/ai/v1/chat?message=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(message), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> response = xhr.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessageText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">className</span> = <span class=\"string\">&quot;message-text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"title function_\">appendChild</span>(botMessageText);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">innerHTML</span> = marked.<span class=\"title function_\">marked</span>(response);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(botMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">400</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: &quot;</span> + error.<span class=\"property\">message</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: Failed to connect to the backend service. Please make sure the backend service is running.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：js 引入的 <code>marked.min.js</code></p>\n<p>可以去 <a href=\"https://github.com/cundream/marked\">GitHub</a> 或联系我</p>\n<h3 id=\"注册配置APi\"><a href=\"#注册配置APi\" class=\"headerlink\" title=\"注册配置APi\"></a>注册配置APi</h3><p><a href=\"https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1\">阿里云百练文档地址</a></p>\n<p><img src=\"/typora-user-images/image-20250419102848756.png\" alt=\"image-20250419102848756\"></p>\n<p>创建Key</p>\n<p><img src=\"/typora-user-images/image-20250419105704031.png\" alt=\"image-20250419105704031\"></p>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>访问：<a href=\"http://localhost:8080/chat.html\">http://localhost:8080/chat.html</a></p>\n<p>输入对话</p>\n<p><img src=\"/typora-user-images/image-20250419113622811.png\" alt=\"image-20250419113622811\"></p>\n<p>测试二：</p>\n<p><a href=\"http://localhost:8080/ai/v1/simple/chat?query=%E4%BD%A0%E6%98%AF%E8%B0%81\">http://localhost:8080/ai/v1/simple/chat?query=你是谁</a></p>\n<p><img src=\"/typora-user-images/image-20250419112758947.png\" alt=\"image-20250419112758947\"></p>\n<h2 id=\"需要了解的基本知识\"><a href=\"#需要了解的基本知识\" class=\"headerlink\" title=\"需要了解的基本知识\"></a>需要了解的基本知识</h2><p>上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。</p>\n<ul>\n<li>AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。</li>\n<li>Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。</li>\n<li>Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。</li>\n<li>模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。</li>\n</ul>\n<p>对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。</p>\n"},{"_content":"# Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n\n[toc]\n\n\n\n## 概述\n\n\n\n### **Tool Calling 的核心优势在于：**\n\n简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。\n增强扩展性：工具可以动态注册和调用，支持快速集成新服务。\n提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。\n在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。\n\n\n\n### 功能介绍\n\nSpring AI 的 Tool Calling 提供了以下核心功能：\n\n1. **工具注册与管理**：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。\n2. **工具调用链**：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。\n\n\n\n\n\n在本案例中，我们将实现以下功能：\n\n- 调用外部天气 API，获取指定城市的天气预报。\n- 调用内部 OA 服务，查询员工剩余假期和提交请假申请。\n- 通过 RAG 找到医生后，进行挂号\n- 挂号当日在医院附近找饭店\n- 对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。\n\n\n\n## 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **天气服务**：需要注册天气服务 API [账号申请](https://www.weatherapi.com/)\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**Tool calling 相关服务**\n\n1. **医院挂号服务**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"医院挂号的功能\")\npublic class HospitalService {\n\n    @Tool(description = \"挂号接口，帮患者在线挂号的接口\")\n    String registeInHos (@ToolParam(description = \"医生名称\", required = true) String docName,\n                         @ToolParam(description = \"时间\", required = true) String time ,\n                         @ToolParam(description = \"病情描述\", required = false) String desc,\n                         @ToolParam(description = \"患者ID\") String userId) {\n\n\n        String rtn1 = \"好的，已经为您挂了【\"+docName+\"】医生的号，就诊时间【\"+time+\"】，人数为【\"+desc+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您挂到医生【\"+docName+\"】的号，请稍后再试\";\n\n\n\n\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n\n}\n\n\n~~~\n\n2. 办公OA服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"OA相关服务，主要用于假期查询和请假\")\npublic class OaService {\n\n    private static int LEFT_DAYS = 5;\n    @Tool(description = \"员工剩余假期查询：查询员工还有几天的假期可以请\")\n    public String getCurrentDateTime() {\n        return \"目前，你还有 【\"+LEFT_DAYS+\"】 天的假期可以使用\";\n    }\n\n    @Tool(description = \"员工请假，需要传用户id(userId),和需要请假的天数 (days)\")\n    String askForLeave(@ToolParam(description = \"员工工号\") String userId ,@ToolParam(description = \"需要请假的天数\") String days) {\n        if(!StringUtils.isNumeric(days)){\n            throw new IllegalArgumentException(\"days参数必须是数字\");\n        }\n        int dayInt = Integer.parseInt(days);\n        String rtn1 = \"好的，员工【\"+userId+\"】,已经请假【\"+days+\"】天，请好好享受假期\";\n        String rtn2 = \"你的假期不足，无法请假\";\n        return dayInt>=LEFT_DAYS?rtn2:rtn1;\n    }\n}\n\n\n\n~~~\n\n\n\n3. 饭店查询服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\nimport java.util.Set;\n\n@Slf4j\n@Description(\"饭店查询和预定服务\")\npublic class RestaurantService {\n\n    private static int LEFT_DAYS = 5;\n    private static Set<String> RESTAURANT_NAME = Set.of( \"红龙餐厅\", \"金莲小馆\", \"樱花寿司吧\", \"丝绸之路餐馆\", \"意大利小酒馆\");\n\n    @Tool(description = \"查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃\")\n    public String queryRestaurantName(@ToolParam(description = \"当前位置\", required = true) String location) {\n        // 从 RESTAURANT_NAME 中随机选择\n        String rtn = RESTAURANT_NAME.stream().skip((int) (Math.random() * RESTAURANT_NAME.size())).limit(3).reduce((a, b) -> a + \"，\" + b).get();\n        return \"当前位置\" + location + \"，推荐 restaurantName：\" + rtn;\n    }\n\n    @Tool(description = \"预定餐厅，需要提供饭店名称，时间和人数\")\n    String bookRestaurant (@ToolParam(description = \"饭店名称\", required = true) String restName,\n                           @ToolParam(description = \"订餐时间\", required = true) String time ,\n                           @ToolParam(description = \"就餐人数\", required = true) String userNumber) {\n        String rtn1 = \"好的，已经为您预定了【\"+restName+\"】，就餐时间为【\"+time+\"】，人数为【\"+userNumber+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您预定【\"+restName+\"】，请稍后再试\";\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n}\n\n~~~\n\n\n\n **控制器（ToolCallController.java）**\n\n~~~\n  @GetMapping(value = \"/rag/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChat(@RequestParam String userId, @RequestParam String message) {\n        log.info(\"userId -> [{}], message --> [{}]\", userId, message);\n        String text = chatClient.prompt()\n                .user(message)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))\n                .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))\n                .call().content();\n        return text;\n    }\n~~~\n\n\n\n\n\n\n\n## 测试验证\n\n1、无工具调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n响应结果：\n\n![image-20250508161105090](typora-user-images/image-20250508161105090.png)\n\n**说明**：\n\n- 无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。\n- 这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心\n\n\n\n2、工具调用接口\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n\n\n![image-20250508161546610](typora-user-images/image-20250508161546610.png)\n\n继续调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店\n~~~\n\n\n\n![image-20250508162115569](typora-user-images/image-20250508162115569.png)\n\n\n\n**说明**：\n\n- 工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。\n- 这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性\n\n","source":"categories/Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","raw":"# Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n\n[toc]\n\n\n\n## 概述\n\n\n\n### **Tool Calling 的核心优势在于：**\n\n简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。\n增强扩展性：工具可以动态注册和调用，支持快速集成新服务。\n提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。\n在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。\n\n\n\n### 功能介绍\n\nSpring AI 的 Tool Calling 提供了以下核心功能：\n\n1. **工具注册与管理**：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。\n2. **工具调用链**：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。\n\n\n\n\n\n在本案例中，我们将实现以下功能：\n\n- 调用外部天气 API，获取指定城市的天气预报。\n- 调用内部 OA 服务，查询员工剩余假期和提交请假申请。\n- 通过 RAG 找到医生后，进行挂号\n- 挂号当日在医院附近找饭店\n- 对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。\n\n\n\n## 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **天气服务**：需要注册天气服务 API [账号申请](https://www.weatherapi.com/)\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**Tool calling 相关服务**\n\n1. **医院挂号服务**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"医院挂号的功能\")\npublic class HospitalService {\n\n    @Tool(description = \"挂号接口，帮患者在线挂号的接口\")\n    String registeInHos (@ToolParam(description = \"医生名称\", required = true) String docName,\n                         @ToolParam(description = \"时间\", required = true) String time ,\n                         @ToolParam(description = \"病情描述\", required = false) String desc,\n                         @ToolParam(description = \"患者ID\") String userId) {\n\n\n        String rtn1 = \"好的，已经为您挂了【\"+docName+\"】医生的号，就诊时间【\"+time+\"】，人数为【\"+desc+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您挂到医生【\"+docName+\"】的号，请稍后再试\";\n\n\n\n\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n\n}\n\n\n~~~\n\n2. 办公OA服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"OA相关服务，主要用于假期查询和请假\")\npublic class OaService {\n\n    private static int LEFT_DAYS = 5;\n    @Tool(description = \"员工剩余假期查询：查询员工还有几天的假期可以请\")\n    public String getCurrentDateTime() {\n        return \"目前，你还有 【\"+LEFT_DAYS+\"】 天的假期可以使用\";\n    }\n\n    @Tool(description = \"员工请假，需要传用户id(userId),和需要请假的天数 (days)\")\n    String askForLeave(@ToolParam(description = \"员工工号\") String userId ,@ToolParam(description = \"需要请假的天数\") String days) {\n        if(!StringUtils.isNumeric(days)){\n            throw new IllegalArgumentException(\"days参数必须是数字\");\n        }\n        int dayInt = Integer.parseInt(days);\n        String rtn1 = \"好的，员工【\"+userId+\"】,已经请假【\"+days+\"】天，请好好享受假期\";\n        String rtn2 = \"你的假期不足，无法请假\";\n        return dayInt>=LEFT_DAYS?rtn2:rtn1;\n    }\n}\n\n\n\n~~~\n\n\n\n3. 饭店查询服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\nimport java.util.Set;\n\n@Slf4j\n@Description(\"饭店查询和预定服务\")\npublic class RestaurantService {\n\n    private static int LEFT_DAYS = 5;\n    private static Set<String> RESTAURANT_NAME = Set.of( \"红龙餐厅\", \"金莲小馆\", \"樱花寿司吧\", \"丝绸之路餐馆\", \"意大利小酒馆\");\n\n    @Tool(description = \"查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃\")\n    public String queryRestaurantName(@ToolParam(description = \"当前位置\", required = true) String location) {\n        // 从 RESTAURANT_NAME 中随机选择\n        String rtn = RESTAURANT_NAME.stream().skip((int) (Math.random() * RESTAURANT_NAME.size())).limit(3).reduce((a, b) -> a + \"，\" + b).get();\n        return \"当前位置\" + location + \"，推荐 restaurantName：\" + rtn;\n    }\n\n    @Tool(description = \"预定餐厅，需要提供饭店名称，时间和人数\")\n    String bookRestaurant (@ToolParam(description = \"饭店名称\", required = true) String restName,\n                           @ToolParam(description = \"订餐时间\", required = true) String time ,\n                           @ToolParam(description = \"就餐人数\", required = true) String userNumber) {\n        String rtn1 = \"好的，已经为您预定了【\"+restName+\"】，就餐时间为【\"+time+\"】，人数为【\"+userNumber+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您预定【\"+restName+\"】，请稍后再试\";\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n}\n\n~~~\n\n\n\n **控制器（ToolCallController.java）**\n\n~~~\n  @GetMapping(value = \"/rag/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChat(@RequestParam String userId, @RequestParam String message) {\n        log.info(\"userId -> [{}], message --> [{}]\", userId, message);\n        String text = chatClient.prompt()\n                .user(message)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))\n                .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))\n                .call().content();\n        return text;\n    }\n~~~\n\n\n\n\n\n\n\n## 测试验证\n\n1、无工具调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n响应结果：\n\n![image-20250508161105090](typora-user-images/image-20250508161105090.png)\n\n**说明**：\n\n- 无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。\n- 这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心\n\n\n\n2、工具调用接口\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n\n\n![image-20250508161546610](typora-user-images/image-20250508161546610.png)\n\n继续调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店\n~~~\n\n\n\n![image-20250508162115569](typora-user-images/image-20250508162115569.png)\n\n\n\n**说明**：\n\n- 工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。\n- 这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性\n\n","date":"2025-06-04T10:12:41.877Z","updated":"2025-05-08T08:21:55.849Z","path":"categories/Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5o0004nffydpyegff4","content":"<h1 id=\"Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\"></a>Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程</h1><p>[toc]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"Tool-Calling-的核心优势在于：\"><a href=\"#Tool-Calling-的核心优势在于：\" class=\"headerlink\" title=\"Tool Calling 的核心优势在于：\"></a><strong>Tool Calling 的核心优势在于：</strong></h3><p>简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。<br>增强扩展性：工具可以动态注册和调用，支持快速集成新服务。<br>提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。<br>在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Spring AI 的 Tool Calling 提供了以下核心功能：</p>\n<ol>\n<li><strong>工具注册与管理</strong>：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。</li>\n<li><strong>工具调用链</strong>：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。</li>\n</ol>\n<p>在本案例中，我们将实现以下功能：</p>\n<ul>\n<li>调用外部天气 API，获取指定城市的天气预报。</li>\n<li>调用内部 OA 服务，查询员工剩余假期和提交请假申请。</li>\n<li>通过 RAG 找到医生后，进行挂号</li>\n<li>挂号当日在医院附近找饭店</li>\n<li>对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>天气服务</strong>：需要注册天气服务 API <a href=\"https://www.weatherapi.com/\">账号申请</a></li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>Tool calling 相关服务</strong></p>\n<ol>\n<li><strong>医院挂号服务</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;医院挂号的功能&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HospitalService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;挂号接口，帮患者在线挂号的接口&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">registeInHos</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;医生名称&quot;, required = true)</span> String docName,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;病情描述&quot;, required = false)</span> String desc,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;患者ID&quot;)</span> String userId)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您挂了【&quot;</span>+docName+<span class=\"string\">&quot;】医生的号，就诊时间【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+desc+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您挂到医生【&quot;</span>+docName+<span class=\"string\">&quot;】的号，请稍后再试&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>办公OA服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;OA相关服务，主要用于假期查询和请假&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OaService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工剩余假期查询：查询员工还有几天的假期可以请&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCurrentDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;目前，你还有 【&quot;</span>+LEFT_DAYS+<span class=\"string\">&quot;】 天的假期可以使用&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工请假，需要传用户id(userId),和需要请假的天数 (days)&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">askForLeave</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;员工工号&quot;)</span> String userId ,<span class=\"meta\">@ToolParam(description = &quot;需要请假的天数&quot;)</span> String days)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(days))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;days参数必须是数字&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dayInt</span> <span class=\"operator\">=</span> Integer.parseInt(days);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，员工【&quot;</span>+userId+<span class=\"string\">&quot;】,已经请假【&quot;</span>+days+<span class=\"string\">&quot;】天，请好好享受假期&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你的假期不足，无法请假&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayInt&gt;=LEFT_DAYS?rtn2:rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>饭店查询服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;饭店查询和预定服务&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestaurantService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; RESTAURANT_NAME = Set.of( <span class=\"string\">&quot;红龙餐厅&quot;</span>, <span class=\"string\">&quot;金莲小馆&quot;</span>, <span class=\"string\">&quot;樱花寿司吧&quot;</span>, <span class=\"string\">&quot;丝绸之路餐馆&quot;</span>, <span class=\"string\">&quot;意大利小酒馆&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryRestaurantName</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;当前位置&quot;, required = true)</span> String location)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从 RESTAURANT_NAME 中随机选择</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn</span> <span class=\"operator\">=</span> RESTAURANT_NAME.stream().skip((<span class=\"type\">int</span>) (Math.random() * RESTAURANT_NAME.size())).limit(<span class=\"number\">3</span>).reduce((a, b) -&gt; a + <span class=\"string\">&quot;，&quot;</span> + b).get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;当前位置&quot;</span> + location + <span class=\"string\">&quot;，推荐 restaurantName：&quot;</span> + rtn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;预定餐厅，需要提供饭店名称，时间和人数&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">bookRestaurant</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;饭店名称&quot;, required = true)</span> String restName,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;订餐时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;就餐人数&quot;, required = true)</span> String userNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您预定了【&quot;</span>+restName+<span class=\"string\">&quot;】，就餐时间为【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+userNumber+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您预定【&quot;</span>+restName+<span class=\"string\">&quot;】，请稍后再试&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>控制器（ToolCallController.java）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(value = &quot;/rag/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span><br><span class=\"line\">  public String ragChat(@RequestParam String userId, @RequestParam String message) &#123;</span><br><span class=\"line\">      log.info(&quot;userId -&gt; [&#123;&#125;], message --&gt; [&#123;&#125;]&quot;, userId, message);</span><br><span class=\"line\">      String text = chatClient.prompt()</span><br><span class=\"line\">              .user(message)</span><br><span class=\"line\">              .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))</span><br><span class=\"line\">              .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))</span><br><span class=\"line\">              .call().content();</span><br><span class=\"line\">      return text;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>1、无工具调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n<p>响应结果：</p>\n<p><img src=\"/typora-user-images/image-20250508161105090.png\" alt=\"image-20250508161105090\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。</li>\n<li>这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心</li>\n</ul>\n<p>2、工具调用接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508161546610.png\" alt=\"image-20250508161546610\"></p>\n<p>继续调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508162115569.png\" alt=\"image-20250508162115569\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。</li>\n<li>这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\"></a>Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程</h1><p>[toc]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"Tool-Calling-的核心优势在于：\"><a href=\"#Tool-Calling-的核心优势在于：\" class=\"headerlink\" title=\"Tool Calling 的核心优势在于：\"></a><strong>Tool Calling 的核心优势在于：</strong></h3><p>简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。<br>增强扩展性：工具可以动态注册和调用，支持快速集成新服务。<br>提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。<br>在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Spring AI 的 Tool Calling 提供了以下核心功能：</p>\n<ol>\n<li><strong>工具注册与管理</strong>：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。</li>\n<li><strong>工具调用链</strong>：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。</li>\n</ol>\n<p>在本案例中，我们将实现以下功能：</p>\n<ul>\n<li>调用外部天气 API，获取指定城市的天气预报。</li>\n<li>调用内部 OA 服务，查询员工剩余假期和提交请假申请。</li>\n<li>通过 RAG 找到医生后，进行挂号</li>\n<li>挂号当日在医院附近找饭店</li>\n<li>对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>天气服务</strong>：需要注册天气服务 API <a href=\"https://www.weatherapi.com/\">账号申请</a></li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>Tool calling 相关服务</strong></p>\n<ol>\n<li><strong>医院挂号服务</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;医院挂号的功能&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HospitalService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;挂号接口，帮患者在线挂号的接口&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">registeInHos</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;医生名称&quot;, required = true)</span> String docName,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;病情描述&quot;, required = false)</span> String desc,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;患者ID&quot;)</span> String userId)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您挂了【&quot;</span>+docName+<span class=\"string\">&quot;】医生的号，就诊时间【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+desc+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您挂到医生【&quot;</span>+docName+<span class=\"string\">&quot;】的号，请稍后再试&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>办公OA服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;OA相关服务，主要用于假期查询和请假&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OaService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工剩余假期查询：查询员工还有几天的假期可以请&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCurrentDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;目前，你还有 【&quot;</span>+LEFT_DAYS+<span class=\"string\">&quot;】 天的假期可以使用&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工请假，需要传用户id(userId),和需要请假的天数 (days)&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">askForLeave</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;员工工号&quot;)</span> String userId ,<span class=\"meta\">@ToolParam(description = &quot;需要请假的天数&quot;)</span> String days)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(days))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;days参数必须是数字&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dayInt</span> <span class=\"operator\">=</span> Integer.parseInt(days);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，员工【&quot;</span>+userId+<span class=\"string\">&quot;】,已经请假【&quot;</span>+days+<span class=\"string\">&quot;】天，请好好享受假期&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你的假期不足，无法请假&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayInt&gt;=LEFT_DAYS?rtn2:rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>饭店查询服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;饭店查询和预定服务&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestaurantService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; RESTAURANT_NAME = Set.of( <span class=\"string\">&quot;红龙餐厅&quot;</span>, <span class=\"string\">&quot;金莲小馆&quot;</span>, <span class=\"string\">&quot;樱花寿司吧&quot;</span>, <span class=\"string\">&quot;丝绸之路餐馆&quot;</span>, <span class=\"string\">&quot;意大利小酒馆&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryRestaurantName</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;当前位置&quot;, required = true)</span> String location)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从 RESTAURANT_NAME 中随机选择</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn</span> <span class=\"operator\">=</span> RESTAURANT_NAME.stream().skip((<span class=\"type\">int</span>) (Math.random() * RESTAURANT_NAME.size())).limit(<span class=\"number\">3</span>).reduce((a, b) -&gt; a + <span class=\"string\">&quot;，&quot;</span> + b).get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;当前位置&quot;</span> + location + <span class=\"string\">&quot;，推荐 restaurantName：&quot;</span> + rtn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;预定餐厅，需要提供饭店名称，时间和人数&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">bookRestaurant</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;饭店名称&quot;, required = true)</span> String restName,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;订餐时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;就餐人数&quot;, required = true)</span> String userNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您预定了【&quot;</span>+restName+<span class=\"string\">&quot;】，就餐时间为【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+userNumber+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您预定【&quot;</span>+restName+<span class=\"string\">&quot;】，请稍后再试&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>控制器（ToolCallController.java）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(value = &quot;/rag/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span><br><span class=\"line\">  public String ragChat(@RequestParam String userId, @RequestParam String message) &#123;</span><br><span class=\"line\">      log.info(&quot;userId -&gt; [&#123;&#125;], message --&gt; [&#123;&#125;]&quot;, userId, message);</span><br><span class=\"line\">      String text = chatClient.prompt()</span><br><span class=\"line\">              .user(message)</span><br><span class=\"line\">              .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))</span><br><span class=\"line\">              .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))</span><br><span class=\"line\">              .call().content();</span><br><span class=\"line\">      return text;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>1、无工具调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n<p>响应结果：</p>\n<p><img src=\"/typora-user-images/image-20250508161105090.png\" alt=\"image-20250508161105090\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。</li>\n<li>这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心</li>\n</ul>\n<p>2、工具调用接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508161546610.png\" alt=\"image-20250508161546610\"></p>\n<p>继续调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508162115569.png\" alt=\"image-20250508162115569\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。</li>\n<li>这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性</li>\n</ul>\n"},{"_content":"# Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n\n\n\n在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。**Spring AI**，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，\n\n[toc]\n\n\n\n\n\n## Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\n\n### Spring AI 介绍\n\n#### Spring AI的版本演进\n\nSpring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：\n\n* 2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。\n* 2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。\n* 2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。\n* 2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。\n* 2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性\n\n\n\n#### Spring AI的主要功能\n\nSpring AI为开发者提供了多种AI功能的支持，包括：\n\n* 智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。\n* 文本生成：利用AI模型生成创意文本内容，例如文章、故事等。\n* 图像生成：通过文本提示生成图像，支持多种图像生成模型。\n* 音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。\n* 功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。\n\n### **函数调用（Function Calling）**\n\n#### 功能与作用\n\n在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。\n\n#### 实现方式\n\n在Spring AI中，函数调用的实现步骤如下：\n\n**1、定义函数**：开发者创建一个实现`Function`接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：\n\n~~~java\n@Component\npublic class WeatherFunction implements Function<WeatherFunction.WeatherRequest, String> {\n    @Override\n    public String apply(WeatherRequest request) {\n        return \"The weather in \" + request.getCity() + \" is sunny.\";\n    }\n    public static class WeatherRequest {\n        private String city;\n        public String getCity() { return city; }\n        public void setCity(String city) { this.city = city; }\n    }\n}\n\n~~~\n\n**2、注册函数**：将函数注册为Spring Bean，使其能被Spring AI识别和调用\n\n~~~java\n@Configuration\npublic class FunctionConfig {\n    @Bean\n    @Description(\"获取指定城市的天气信息\")\n    public Function<WeatherFunction.WeatherRequest, String> weatherFunction() {\n        return new WeatherFunction();\n    }\n}\n~~~\n\n**3、配置模型**：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withFunction(\"weatherFunction\").build())\n                .build();\n    }\n}\n~~~\n\n**4、模型调用函数**：模型在生成响应时，可以通过请求调用外部函数，得到结果：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        WeatherFunction.WeatherRequest request = new WeatherFunction.WeatherRequest();\n        request.setCity(input);\n        String response = chatClient.prompt().user(input).functions(\"weatherFunction\").call().content();\n        return response;\n    }\n}\n~~~\n\n**注意**：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用**工具调用**（Tool Calling）来实现类似功能。\n\n### **工具调用（Tool Calling）**\n\n#### **功能与作用**\n\n工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。\n\n#### 实现方式\n\n工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：\n\n**1、定义工具接口**：开发者定义一个接口，声明工具的方法：\n\n~~~java\npublic interface WeatherTool {\n    String getWeather(String city);\n}\n~~~\n\n**2、实现工具接口**：编写具体的工具实现类，处理工具的业务逻辑：\n\n~~~java\n@Component\npublic class WeatherToolImpl implements WeatherTool {\n    @Override\n    public String getWeather(String city) {\n        return \"The weather in \" + city + \" is sunny.\";\n    }\n}\n~~~\n\n**3、注册工具为Spring Bean**：将工具实现类注册为Spring Bean，以便Spring容器管理：\n\n~~~java\n@Configuration\npublic class ToolConfig {\n    @Bean\n    public WeatherTool weatherTool() {\n        return new WeatherToolImpl();\n    }\n}\n~~~\n\n**4、配置模型使用工具**：在Spring AI配置中，指定模型使用的工具：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withTool(\"weatherTool\").build())\n                .build();\n    }\n}\n\n~~~\n\n**5、模型调用工具**：模型在与用户交互时，通过工具调用获取所需的响应：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        String response = chatClient.prompt().user(input).tools(\"weatherTool\").call().content();\n        return response;\n    }\n}\n\n~~~\n\n### 智能体（Agent）\n\n#### 功能与作用\n\n智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。\n\n#### 实现方式\n\n智能体的实现涉及多个关键组件，主要包括：\n\n模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。\n智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。\n智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。\n注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。\n\n### 从函数调用（FunctionCallbac）到工具调用（ToolCallback）\n\n随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。\n\n**为什么从FunctionCallback迁移到ToolCallback**\n\nSpring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：\n\n* 功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。\n* 一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。\n* 未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。\n\n\n\n因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。\n\n\n\n## Spring AI + DeepSeek-R1 + ES/Milvus + RAG + Tool Calling：智能对话应用开发\n\n### 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n\n\n![image-20250425104935964](typora-user-images/image-20250425104935964-5549379.png)\n\n\n\n**Elasticsearch安装**\n\n\n\n~~~yaml\n# base 基础组件服务\nversion: '3.8'\nservices:\n\telasticsearch1:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4\n    hostname: \"elasticsearch1\"\n    environment:\n      - TZ=Asia/Shanghai\n      - \"ES_JAVA_OPTS=-Xms84m -Xmx512m\"\n    ports:\n      - 9200:9200\n      - 9300:9300\n    volumes:\n      - /Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data \n      - /Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins \n      - /Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config  \n      - /Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs  \n    privileged: true\n    #restart: always\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.7\n\n  vsftpd:\n    image: \"fauria/vsftpd\"\n    hostname: \"rabbitmq1\"\n    environment:\n      - FTP_USER=admin \n      - FTP_PASS=123456 \n      - PASV_MIN_PORT=21100\n      - PASV_MAX_PORT=21110 \n      - PASV_ADDRESS=172.18.0.8\n    ports:\n      - 21:21\n      - 21100-21110:21100-21110\n    volumes:\n      - /Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd\n      - /Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd\n    privileged: true\n    #restart: always\n    networks:\n      - nt_dev\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n![image-20250425174252871](typora-user-images/image-20250425174252871.png)\n\n### 功能介绍\n\n1. 集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。\n2. 集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。\n3. 基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。\n4. 通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。\n5. Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：\n   * 场景 1：通过 RAG 找到医生后，进行挂号\n   * 场景 2：挂号当日请假\n   * 场景 3：挂号当日在医院附近找饭店\n\n\n\n通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 \n\n\n\n## 代码实现\n\n**Maven 核心依赖**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>3.4.3</spring-boot.version>\n        <spring-ai.version>1.0.0-M6</spring-ai.version>\n        <alibaba.ai.version>1.0.0-M6.1</alibaba.ai.version>\n        <spring.ai.ollama.version>1.0.0-M6</spring.ai.ollama.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>${alibaba.ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-elasticsearch-store-spring-boot-starter</artifactId>\n            <version>${spring-ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n            <version>${spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>spring-snapshots</id>\n            <name>Spring Snapshots</name>\n            <url>https://repo.spring.io/snapshot</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.36</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n~~~\n\n上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。\n\n**核心配置 （`application.yml`）**\n\n这里一定要注意的是文本推理模型 `model: deepseek-r1`, 嵌入模型`model: text-embedding-v2`用来生成文本的向量数据\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      elasticsearch:\n        initialize-schema: true\n        index-name: spring-ai-tag\n        # 这里一定要注意，维度是默认1536，需要和向量模型的维度一致\n        dimensions: 1536\n        similarity: cosine\n        batching-strategy: TOKEN_COUNT\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n       @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                // 设置系统的默认行为和风格\n                .defaultSystem(\"你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。\")\n                // 注册向量检索顾问，用于从向量存储中检索相关信息\n                .defaultAdvisors(\n                        new QuestionAnswerAdvisor(\n                                vectorStore,\n                                SearchRequest.builder()\n                                        .similarityThreshold(0.1) // 设置相似度阈值\n                                        .topK(10) // 设置返回最多 10 条相关结果\n                                        .build()\n                        )\n                )\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n\n\n**编写核心控制器（DeepseekChatController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.rag.Query;\nimport org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;\nimport org.springframework.ai.reader.TextReader;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @ClassName DeepseekChatController  //类名称\n * @Description:\n * @Author: 200900681 李村\n * @CreateDate: 2025/4/25\n * @Version: 1.0    //版本号\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class DeepseekChatController {\n\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private VectorStore vectorStore;\n    @Autowired\n    private ChatMemory chatMemory;\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(\"/data/load\")\n    public String loadData() throws IOException {\n        // 1. 读取文件\n        DocumentReader reader = new TextReader(\"static/hospitalInfo.txt\");\n        List<Document> documents = reader.get();\n\n        // 2.切分文件：根据空白行进行分割\n        List<Document> splitDocuments =  new ArrayList<>();\n        for (Document document : documents) {\n            // 获取文档内容\n            String content = document.getText();\n            // 使用正则表达式按空白行分割\n            String[] parts = content.split(\"\\\\n\\\\s*\\\\n\");\n            // 将分割后的部分封装为新的 Document 对象\n            for (String part : parts) {\n                splitDocuments.add(new Document(part.trim()));\n            }\n        }\n\n        log.info(\"文件切分为 [{}]\", splitDocuments.size());\n\n        // 3.写入数据\n        vectorStore.add(splitDocuments);\n\n        return \"success\";\n    }\n\n    @GetMapping(\"/select\")\n    public String search(@RequestParam(\"query\") String query) {\n        log.info(\"query is  [{}]\", query);\n        List<Document> results = vectorStore.similaritySearch(\n//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n\n        );\n        log.info(\"results is [{}]\", results);\n        return results.toString();\n    }\n\n    /**\n     * 查询重写\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/rewrite/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByRewrite(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1、构建查询重写转换器\n        QueryTransformer queryTransformer = RewriteQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n        // 2、执行查询重写\n        Query queryByTransform = queryTransformer.transform(new Query(inputMsg));\n        // 3、输出重写后的查询文案\n        return queryByTransform.text();\n    }\n\n\n    /**\n     * 上下文感知查询\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/history/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByHistory(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1. 获取历史消息\n        List<Message> history = chatMemory.get(userId, CHAT_HISTORY_SIZE);\n        // 2. 构建查询对象\n        Query query = Query.builder()\n                .text(inputMsg)\n                .history(history)\n                .build();\n\n        // 3. 创建 CompressionQueryTransformer\n        CompressionQueryTransformer queryTransformerByHis = CompressionQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n\n        // 4、执行历史信息后查询\n        Query queryByHistory = queryTransformerByHis.transform(query);\n\n        // 5、输出重写后的查询文案\n        return queryByHistory.text();\n    }\n    \n}\n\n~~~\n\n\n\n\n\n\n\n\n\n**数据准备**\n\n我让kimi帮我生成了一个医院的介绍，包含\n\n- 医院`小智口腔医院`的介绍，\n- 3个科室的介绍，分别是 `口腔修复科`,`口腔正畸科`,`儿童口腔科`\n- 每个科室也有对应的20位医生信息\n\n~~~\n1. 医院介绍\n小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。\n2. 科室介绍\n(1)口腔修复科:\n口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信\n(2)口腔正畸科:\n是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。\n(3)儿童口腔科:\n儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。\n\n3. 医生介绍\n(1) 李明轩\n性别 ：男\n出生年月 ：1985年3月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。\n介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(2) 王晓彤\n性别 ：女\n出生年月 ：1990年7月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(3) 张伟杰\n性别 ：男\n出生年月 ：1982年11月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。\n介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(4) 陈静怡\n性别 ：女\n出生年月 ：1988年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(5) 刘志远\n性别 ：男\n出生年月 ：1980年9月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。\n介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(6) 孙悦宁\n性别 ：女\n出生年月 ：1993年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。\n介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(7) 赵天宇\n性别 ：男\n出生年月 ：1987年5月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(8) 林晓慧\n性别 ：女\n出生年月 ：1991年8月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(9) 黄志强\n性别 ：男\n出生年月 ：1979年12月\n医生职称 ：主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。\n介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务\n\n(10) 高雅婷\n性别 ：女\n出生年月 ：1986年2月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。\n\n(11) 王浩然\n性别 ：男\n出生年月 ：1983年7月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。\n介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(12) 李佳琪\n性别 ：女\n出生年月 ：1992年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。\n介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(13) 周文博\n性别 ：男\n出生年月 ：1981年10月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。\n介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(14) 张馨月\n性别 ：女\n出生年月 ：1989年6月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(15) 王志鹏\n性别 ：男\n出生年月 ：1984年11月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(16) 赵雪梅\n性别 ：女\n出生年月 ：1990年3月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(17) 陈子豪\n性别 ：男\n出生年月 ：1988年9月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。\n介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(18) 李梦瑶\n性别 ：女\n出生年月 ：1994年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(19) 黄晓峰\n性别 ：男\n出生年月 ：1985年8月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(20) 刘欣怡\n性别 ：女\n出生年月 ：1991年5月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n~~~\n\n\n\n\n\n## 测试验证\n\n\n\n~~~\n数据写入的接口\nhttp://127.0.0.1:8080/ai/v1/data/load\n获取数据向量的接口\nhttp://127.0.0.1:8080/ai/v1/select\n连读对话的接口\nhttp://127.0.0.1:8080/ai/v1/rag/chat\n~~~\n\n\n\n**数据写入**\n\n>数据写入的接口\n>http://127.0.0.1:8080/ai/v1/data/load\n\n\n\n![image-20250429172724826](typora-user-images/image-20250429172724826.png)\n\n![image-20250429180401580](typora-user-images/image-20250429180401580.png)\n\n>获取数据向量的接口\n>http://127.0.0.1:8080/ai/v1/select?query=医院介绍\n\n![image-20250429174959408](typora-user-images/image-20250429174959408.png)\n\n可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek\n\n接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题\n\n>- 请介绍一下医院\n>- 请介绍一下医院都有哪些科室\n>- 医院有哪些主任医师\n>- 张馨月医生怎么样\n>- 我刚才都问了哪些问题\n\n\n\n![image-20250429174851066](typora-user-images/image-20250429174851066.png)\n\n\n\n\n\n![image-20250429175228086](typora-user-images/image-20250429175228086.png)\n\n\n\n![image-20250429175342611](typora-user-images/image-20250429175342611.png)\n\n\n\n![image-20250429175421998](typora-user-images/image-20250429175421998.png)\n\n\n\n\n\n![image-20250429175540574](typora-user-images/image-20250429175540574.png)\n\n\n\n\n\n## 附：向量数据库milvus 存储数据\n\n\n\n### Milvus安装\n\n**Docker-compose 配置**\n\n~~~yaml\n# 配置 etcd 服务\n  etcd:\n    container_name: milvus-etcd  # 容器名称\n    image: quay.io/coreos/etcd:v3.5.16  # 使用的镜像\n    environment:\n      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式\n      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留的修订版本数\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储限制\n      - ETCD_SNAPSHOT_COUNT=50000  # 快照计数\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据卷挂载\n    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir /etcd  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"etcdctl\", \"endpoint\", \"health\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n\n  # 配置 MinIO 服务\n  minio:\n    container_name: milvus-minio  # 容器名称\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用的镜像\n    environment:\n      MINIO_ACCESS_KEY: minioadmin  # MinIO 访问密钥\n      MINIO_SECRET_KEY: minioadmin  # MinIO 密钥\n    ports:\n      - \"9001:9001\"  # 控制台端口映射\n      - \"9000:9000\"  # 服务端口映射\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # 数据卷挂载\n    command: minio server /minio_data --console-address \":9001\"  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.8   \n\n  # 配置 Milvus 服务\n  standalone:\n    container_name: milvus-standalone  # 容器名称\n    image: milvusdb/milvus:v2.5.4  # 使用的镜像\n    command: [\"milvus\", \"run\", \"standalone\"]  # 启动命令\n    security_opt:\n    - seccomp:unconfined  # 安全选项\n    environment:\n      ETCD_ENDPOINTS: etcd:2379  # etcd 服务地址\n      MINIO_ADDRESS: minio:9000  # MinIO 服务地址\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # 数据卷挂载\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      start_period: 90s  # 启动等待时间\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    ports:\n      - \"19530:19530\"  # 服务端口映射\n      - \"9091:9091\"  # 管理端口映射\n    depends_on:\n      - \"etcd\"  # 依赖 etcd 服务\n      - \"minio\"  # 依赖 MinIO 服务\n\n  # 配置 Milvus Dashboard 服务\n  dashboard:\n    image: zilliz/attu:v2.5  # 使用的镜像\n    container_name: milvus-dashboard  # 容器名称\n    environment:\n      MILVUS_URL: http://standalone:19530  # Milvus 服务地址\n    ports:\n      - \"8000:3000\"  # 端口映射\n    depends_on:\n      - standalone  # 依赖 Milvus 服务\n      - etcd  # 依赖 etcd 服务\n      - minio  # 依赖 MinIO 服务\n\n# 定义网络配置\nnetworks:\n  nt_dev:\n      external: true\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n**查看客户端，** 输入地址 `http://localhost:8000/`\n进入如下界面：此时什么都不要填写，直接点【连接】按钮\n\n\n\n![image-20250429181131778](typora-user-images/image-20250429181131778.png)\n\n进入系统后\n\n![image-20250429181039571](typora-user-images/image-20250429181039571.png)\n\n\n\n创建用户：用户名：``milvus`, 密码： `milvus-4321` (这里要和我们spring工程里的配置一致)，角色我们选 `admin`, \n\n\n\n\n\n![image-20250429181312813](typora-user-images/image-20250429181312813.png)\n\n\n\n\n\n修改依赖：\n\n~~~xml\n  <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-milvus-store-spring-boot-starter</artifactId>\n </dependency>\n~~~\n\n\n\n\n\n修改配置\n\n\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  elasticsearch:\n    uris: http://127.0.0.1:9200\n    username:\n    password:\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      milvus:\n        client:\n          host: \"localhost\"\n          port: 19530\n          username: \"milvus\"\n          password: \"milvus-4321\"\n        databaseName: \"default\"\n        collectionName: \"vector_store\"\n        embeddingDimension: 1536\n        indexType: IVF_FLAT\n        metricType: COSINE\n        initialize-schema: true\n\n\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。\n\n\n\n使用加载接口\n\n![image-20250429183142516](typora-user-images/image-20250429183142516.png)\n","source":"categories/Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","raw":"# Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n\n\n\n在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。**Spring AI**，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，\n\n[toc]\n\n\n\n\n\n## Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\n\n### Spring AI 介绍\n\n#### Spring AI的版本演进\n\nSpring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：\n\n* 2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。\n* 2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。\n* 2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。\n* 2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。\n* 2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性\n\n\n\n#### Spring AI的主要功能\n\nSpring AI为开发者提供了多种AI功能的支持，包括：\n\n* 智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。\n* 文本生成：利用AI模型生成创意文本内容，例如文章、故事等。\n* 图像生成：通过文本提示生成图像，支持多种图像生成模型。\n* 音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。\n* 功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。\n\n### **函数调用（Function Calling）**\n\n#### 功能与作用\n\n在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。\n\n#### 实现方式\n\n在Spring AI中，函数调用的实现步骤如下：\n\n**1、定义函数**：开发者创建一个实现`Function`接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：\n\n~~~java\n@Component\npublic class WeatherFunction implements Function<WeatherFunction.WeatherRequest, String> {\n    @Override\n    public String apply(WeatherRequest request) {\n        return \"The weather in \" + request.getCity() + \" is sunny.\";\n    }\n    public static class WeatherRequest {\n        private String city;\n        public String getCity() { return city; }\n        public void setCity(String city) { this.city = city; }\n    }\n}\n\n~~~\n\n**2、注册函数**：将函数注册为Spring Bean，使其能被Spring AI识别和调用\n\n~~~java\n@Configuration\npublic class FunctionConfig {\n    @Bean\n    @Description(\"获取指定城市的天气信息\")\n    public Function<WeatherFunction.WeatherRequest, String> weatherFunction() {\n        return new WeatherFunction();\n    }\n}\n~~~\n\n**3、配置模型**：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withFunction(\"weatherFunction\").build())\n                .build();\n    }\n}\n~~~\n\n**4、模型调用函数**：模型在生成响应时，可以通过请求调用外部函数，得到结果：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        WeatherFunction.WeatherRequest request = new WeatherFunction.WeatherRequest();\n        request.setCity(input);\n        String response = chatClient.prompt().user(input).functions(\"weatherFunction\").call().content();\n        return response;\n    }\n}\n~~~\n\n**注意**：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用**工具调用**（Tool Calling）来实现类似功能。\n\n### **工具调用（Tool Calling）**\n\n#### **功能与作用**\n\n工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。\n\n#### 实现方式\n\n工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：\n\n**1、定义工具接口**：开发者定义一个接口，声明工具的方法：\n\n~~~java\npublic interface WeatherTool {\n    String getWeather(String city);\n}\n~~~\n\n**2、实现工具接口**：编写具体的工具实现类，处理工具的业务逻辑：\n\n~~~java\n@Component\npublic class WeatherToolImpl implements WeatherTool {\n    @Override\n    public String getWeather(String city) {\n        return \"The weather in \" + city + \" is sunny.\";\n    }\n}\n~~~\n\n**3、注册工具为Spring Bean**：将工具实现类注册为Spring Bean，以便Spring容器管理：\n\n~~~java\n@Configuration\npublic class ToolConfig {\n    @Bean\n    public WeatherTool weatherTool() {\n        return new WeatherToolImpl();\n    }\n}\n~~~\n\n**4、配置模型使用工具**：在Spring AI配置中，指定模型使用的工具：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withTool(\"weatherTool\").build())\n                .build();\n    }\n}\n\n~~~\n\n**5、模型调用工具**：模型在与用户交互时，通过工具调用获取所需的响应：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        String response = chatClient.prompt().user(input).tools(\"weatherTool\").call().content();\n        return response;\n    }\n}\n\n~~~\n\n### 智能体（Agent）\n\n#### 功能与作用\n\n智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。\n\n#### 实现方式\n\n智能体的实现涉及多个关键组件，主要包括：\n\n模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。\n智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。\n智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。\n注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。\n\n### 从函数调用（FunctionCallbac）到工具调用（ToolCallback）\n\n随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。\n\n**为什么从FunctionCallback迁移到ToolCallback**\n\nSpring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：\n\n* 功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。\n* 一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。\n* 未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。\n\n\n\n因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。\n\n\n\n## Spring AI + DeepSeek-R1 + ES/Milvus + RAG + Tool Calling：智能对话应用开发\n\n### 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n\n\n![image-20250425104935964](typora-user-images/image-20250425104935964-5549379.png)\n\n\n\n**Elasticsearch安装**\n\n\n\n~~~yaml\n# base 基础组件服务\nversion: '3.8'\nservices:\n\telasticsearch1:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4\n    hostname: \"elasticsearch1\"\n    environment:\n      - TZ=Asia/Shanghai\n      - \"ES_JAVA_OPTS=-Xms84m -Xmx512m\"\n    ports:\n      - 9200:9200\n      - 9300:9300\n    volumes:\n      - /Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data \n      - /Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins \n      - /Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config  \n      - /Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs  \n    privileged: true\n    #restart: always\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.7\n\n  vsftpd:\n    image: \"fauria/vsftpd\"\n    hostname: \"rabbitmq1\"\n    environment:\n      - FTP_USER=admin \n      - FTP_PASS=123456 \n      - PASV_MIN_PORT=21100\n      - PASV_MAX_PORT=21110 \n      - PASV_ADDRESS=172.18.0.8\n    ports:\n      - 21:21\n      - 21100-21110:21100-21110\n    volumes:\n      - /Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd\n      - /Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd\n    privileged: true\n    #restart: always\n    networks:\n      - nt_dev\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n![image-20250425174252871](typora-user-images/image-20250425174252871.png)\n\n### 功能介绍\n\n1. 集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。\n2. 集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。\n3. 基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。\n4. 通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。\n5. Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：\n   * 场景 1：通过 RAG 找到医生后，进行挂号\n   * 场景 2：挂号当日请假\n   * 场景 3：挂号当日在医院附近找饭店\n\n\n\n通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 \n\n\n\n## 代码实现\n\n**Maven 核心依赖**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>3.4.3</spring-boot.version>\n        <spring-ai.version>1.0.0-M6</spring-ai.version>\n        <alibaba.ai.version>1.0.0-M6.1</alibaba.ai.version>\n        <spring.ai.ollama.version>1.0.0-M6</spring.ai.ollama.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>${alibaba.ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-elasticsearch-store-spring-boot-starter</artifactId>\n            <version>${spring-ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n            <version>${spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>spring-snapshots</id>\n            <name>Spring Snapshots</name>\n            <url>https://repo.spring.io/snapshot</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.36</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n~~~\n\n上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。\n\n**核心配置 （`application.yml`）**\n\n这里一定要注意的是文本推理模型 `model: deepseek-r1`, 嵌入模型`model: text-embedding-v2`用来生成文本的向量数据\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      elasticsearch:\n        initialize-schema: true\n        index-name: spring-ai-tag\n        # 这里一定要注意，维度是默认1536，需要和向量模型的维度一致\n        dimensions: 1536\n        similarity: cosine\n        batching-strategy: TOKEN_COUNT\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n       @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                // 设置系统的默认行为和风格\n                .defaultSystem(\"你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。\")\n                // 注册向量检索顾问，用于从向量存储中检索相关信息\n                .defaultAdvisors(\n                        new QuestionAnswerAdvisor(\n                                vectorStore,\n                                SearchRequest.builder()\n                                        .similarityThreshold(0.1) // 设置相似度阈值\n                                        .topK(10) // 设置返回最多 10 条相关结果\n                                        .build()\n                        )\n                )\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n\n\n**编写核心控制器（DeepseekChatController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.rag.Query;\nimport org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;\nimport org.springframework.ai.reader.TextReader;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @ClassName DeepseekChatController  //类名称\n * @Description:\n * @Author: 200900681 李村\n * @CreateDate: 2025/4/25\n * @Version: 1.0    //版本号\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class DeepseekChatController {\n\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private VectorStore vectorStore;\n    @Autowired\n    private ChatMemory chatMemory;\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(\"/data/load\")\n    public String loadData() throws IOException {\n        // 1. 读取文件\n        DocumentReader reader = new TextReader(\"static/hospitalInfo.txt\");\n        List<Document> documents = reader.get();\n\n        // 2.切分文件：根据空白行进行分割\n        List<Document> splitDocuments =  new ArrayList<>();\n        for (Document document : documents) {\n            // 获取文档内容\n            String content = document.getText();\n            // 使用正则表达式按空白行分割\n            String[] parts = content.split(\"\\\\n\\\\s*\\\\n\");\n            // 将分割后的部分封装为新的 Document 对象\n            for (String part : parts) {\n                splitDocuments.add(new Document(part.trim()));\n            }\n        }\n\n        log.info(\"文件切分为 [{}]\", splitDocuments.size());\n\n        // 3.写入数据\n        vectorStore.add(splitDocuments);\n\n        return \"success\";\n    }\n\n    @GetMapping(\"/select\")\n    public String search(@RequestParam(\"query\") String query) {\n        log.info(\"query is  [{}]\", query);\n        List<Document> results = vectorStore.similaritySearch(\n//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n\n        );\n        log.info(\"results is [{}]\", results);\n        return results.toString();\n    }\n\n    /**\n     * 查询重写\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/rewrite/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByRewrite(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1、构建查询重写转换器\n        QueryTransformer queryTransformer = RewriteQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n        // 2、执行查询重写\n        Query queryByTransform = queryTransformer.transform(new Query(inputMsg));\n        // 3、输出重写后的查询文案\n        return queryByTransform.text();\n    }\n\n\n    /**\n     * 上下文感知查询\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/history/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByHistory(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1. 获取历史消息\n        List<Message> history = chatMemory.get(userId, CHAT_HISTORY_SIZE);\n        // 2. 构建查询对象\n        Query query = Query.builder()\n                .text(inputMsg)\n                .history(history)\n                .build();\n\n        // 3. 创建 CompressionQueryTransformer\n        CompressionQueryTransformer queryTransformerByHis = CompressionQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n\n        // 4、执行历史信息后查询\n        Query queryByHistory = queryTransformerByHis.transform(query);\n\n        // 5、输出重写后的查询文案\n        return queryByHistory.text();\n    }\n    \n}\n\n~~~\n\n\n\n\n\n\n\n\n\n**数据准备**\n\n我让kimi帮我生成了一个医院的介绍，包含\n\n- 医院`小智口腔医院`的介绍，\n- 3个科室的介绍，分别是 `口腔修复科`,`口腔正畸科`,`儿童口腔科`\n- 每个科室也有对应的20位医生信息\n\n~~~\n1. 医院介绍\n小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。\n2. 科室介绍\n(1)口腔修复科:\n口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信\n(2)口腔正畸科:\n是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。\n(3)儿童口腔科:\n儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。\n\n3. 医生介绍\n(1) 李明轩\n性别 ：男\n出生年月 ：1985年3月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。\n介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(2) 王晓彤\n性别 ：女\n出生年月 ：1990年7月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(3) 张伟杰\n性别 ：男\n出生年月 ：1982年11月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。\n介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(4) 陈静怡\n性别 ：女\n出生年月 ：1988年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(5) 刘志远\n性别 ：男\n出生年月 ：1980年9月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。\n介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(6) 孙悦宁\n性别 ：女\n出生年月 ：1993年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。\n介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(7) 赵天宇\n性别 ：男\n出生年月 ：1987年5月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(8) 林晓慧\n性别 ：女\n出生年月 ：1991年8月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(9) 黄志强\n性别 ：男\n出生年月 ：1979年12月\n医生职称 ：主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。\n介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务\n\n(10) 高雅婷\n性别 ：女\n出生年月 ：1986年2月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。\n\n(11) 王浩然\n性别 ：男\n出生年月 ：1983年7月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。\n介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(12) 李佳琪\n性别 ：女\n出生年月 ：1992年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。\n介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(13) 周文博\n性别 ：男\n出生年月 ：1981年10月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。\n介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(14) 张馨月\n性别 ：女\n出生年月 ：1989年6月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(15) 王志鹏\n性别 ：男\n出生年月 ：1984年11月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(16) 赵雪梅\n性别 ：女\n出生年月 ：1990年3月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(17) 陈子豪\n性别 ：男\n出生年月 ：1988年9月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。\n介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(18) 李梦瑶\n性别 ：女\n出生年月 ：1994年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(19) 黄晓峰\n性别 ：男\n出生年月 ：1985年8月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(20) 刘欣怡\n性别 ：女\n出生年月 ：1991年5月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n~~~\n\n\n\n\n\n## 测试验证\n\n\n\n~~~\n数据写入的接口\nhttp://127.0.0.1:8080/ai/v1/data/load\n获取数据向量的接口\nhttp://127.0.0.1:8080/ai/v1/select\n连读对话的接口\nhttp://127.0.0.1:8080/ai/v1/rag/chat\n~~~\n\n\n\n**数据写入**\n\n>数据写入的接口\n>http://127.0.0.1:8080/ai/v1/data/load\n\n\n\n![image-20250429172724826](typora-user-images/image-20250429172724826.png)\n\n![image-20250429180401580](typora-user-images/image-20250429180401580.png)\n\n>获取数据向量的接口\n>http://127.0.0.1:8080/ai/v1/select?query=医院介绍\n\n![image-20250429174959408](typora-user-images/image-20250429174959408.png)\n\n可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek\n\n接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题\n\n>- 请介绍一下医院\n>- 请介绍一下医院都有哪些科室\n>- 医院有哪些主任医师\n>- 张馨月医生怎么样\n>- 我刚才都问了哪些问题\n\n\n\n![image-20250429174851066](typora-user-images/image-20250429174851066.png)\n\n\n\n\n\n![image-20250429175228086](typora-user-images/image-20250429175228086.png)\n\n\n\n![image-20250429175342611](typora-user-images/image-20250429175342611.png)\n\n\n\n![image-20250429175421998](typora-user-images/image-20250429175421998.png)\n\n\n\n\n\n![image-20250429175540574](typora-user-images/image-20250429175540574.png)\n\n\n\n\n\n## 附：向量数据库milvus 存储数据\n\n\n\n### Milvus安装\n\n**Docker-compose 配置**\n\n~~~yaml\n# 配置 etcd 服务\n  etcd:\n    container_name: milvus-etcd  # 容器名称\n    image: quay.io/coreos/etcd:v3.5.16  # 使用的镜像\n    environment:\n      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式\n      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留的修订版本数\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储限制\n      - ETCD_SNAPSHOT_COUNT=50000  # 快照计数\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据卷挂载\n    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir /etcd  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"etcdctl\", \"endpoint\", \"health\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n\n  # 配置 MinIO 服务\n  minio:\n    container_name: milvus-minio  # 容器名称\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用的镜像\n    environment:\n      MINIO_ACCESS_KEY: minioadmin  # MinIO 访问密钥\n      MINIO_SECRET_KEY: minioadmin  # MinIO 密钥\n    ports:\n      - \"9001:9001\"  # 控制台端口映射\n      - \"9000:9000\"  # 服务端口映射\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # 数据卷挂载\n    command: minio server /minio_data --console-address \":9001\"  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.8   \n\n  # 配置 Milvus 服务\n  standalone:\n    container_name: milvus-standalone  # 容器名称\n    image: milvusdb/milvus:v2.5.4  # 使用的镜像\n    command: [\"milvus\", \"run\", \"standalone\"]  # 启动命令\n    security_opt:\n    - seccomp:unconfined  # 安全选项\n    environment:\n      ETCD_ENDPOINTS: etcd:2379  # etcd 服务地址\n      MINIO_ADDRESS: minio:9000  # MinIO 服务地址\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # 数据卷挂载\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      start_period: 90s  # 启动等待时间\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    ports:\n      - \"19530:19530\"  # 服务端口映射\n      - \"9091:9091\"  # 管理端口映射\n    depends_on:\n      - \"etcd\"  # 依赖 etcd 服务\n      - \"minio\"  # 依赖 MinIO 服务\n\n  # 配置 Milvus Dashboard 服务\n  dashboard:\n    image: zilliz/attu:v2.5  # 使用的镜像\n    container_name: milvus-dashboard  # 容器名称\n    environment:\n      MILVUS_URL: http://standalone:19530  # Milvus 服务地址\n    ports:\n      - \"8000:3000\"  # 端口映射\n    depends_on:\n      - standalone  # 依赖 Milvus 服务\n      - etcd  # 依赖 etcd 服务\n      - minio  # 依赖 MinIO 服务\n\n# 定义网络配置\nnetworks:\n  nt_dev:\n      external: true\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n**查看客户端，** 输入地址 `http://localhost:8000/`\n进入如下界面：此时什么都不要填写，直接点【连接】按钮\n\n\n\n![image-20250429181131778](typora-user-images/image-20250429181131778.png)\n\n进入系统后\n\n![image-20250429181039571](typora-user-images/image-20250429181039571.png)\n\n\n\n创建用户：用户名：``milvus`, 密码： `milvus-4321` (这里要和我们spring工程里的配置一致)，角色我们选 `admin`, \n\n\n\n\n\n![image-20250429181312813](typora-user-images/image-20250429181312813.png)\n\n\n\n\n\n修改依赖：\n\n~~~xml\n  <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-milvus-store-spring-boot-starter</artifactId>\n </dependency>\n~~~\n\n\n\n\n\n修改配置\n\n\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  elasticsearch:\n    uris: http://127.0.0.1:9200\n    username:\n    password:\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      milvus:\n        client:\n          host: \"localhost\"\n          port: 19530\n          username: \"milvus\"\n          password: \"milvus-4321\"\n        databaseName: \"default\"\n        collectionName: \"vector_store\"\n        embeddingDimension: 1536\n        indexType: IVF_FLAT\n        metricType: COSINE\n        initialize-schema: true\n\n\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。\n\n\n\n使用加载接口\n\n![image-20250429183142516](typora-user-images/image-20250429183142516.png)\n","date":"2025-06-04T10:12:41.876Z","updated":"2025-04-29T10:42:03.405Z","path":"categories/Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5o0005nffy6l3u85oa","content":"<h1 id=\"Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程\"></a>Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程</h1><p>在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。<strong>Spring AI</strong>，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，</p>\n<p>[toc]</p>\n<h2 id=\"Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\"><a href=\"#Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\" class=\"headerlink\" title=\"Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\"></a>Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系</h2><h3 id=\"Spring-AI-介绍\"><a href=\"#Spring-AI-介绍\" class=\"headerlink\" title=\"Spring AI 介绍\"></a>Spring AI 介绍</h3><h4 id=\"Spring-AI的版本演进\"><a href=\"#Spring-AI的版本演进\" class=\"headerlink\" title=\"Spring AI的版本演进\"></a>Spring AI的版本演进</h4><p>Spring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：</p>\n<ul>\n<li>2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。</li>\n<li>2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。</li>\n<li>2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。</li>\n<li>2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。</li>\n<li>2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性</li>\n</ul>\n<h4 id=\"Spring-AI的主要功能\"><a href=\"#Spring-AI的主要功能\" class=\"headerlink\" title=\"Spring AI的主要功能\"></a>Spring AI的主要功能</h4><p>Spring AI为开发者提供了多种AI功能的支持，包括：</p>\n<ul>\n<li>智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。</li>\n<li>文本生成：利用AI模型生成创意文本内容，例如文章、故事等。</li>\n<li>图像生成：通过文本提示生成图像，支持多种图像生成模型。</li>\n<li>音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。</li>\n<li>功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a><strong>函数调用（Function Calling）</strong></h3><h4 id=\"功能与作用\"><a href=\"#功能与作用\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>在Spring AI中，函数调用的实现步骤如下：</p>\n<p><strong>1、定义函数</strong>：开发者创建一个实现<code>Function</code>接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Function</span>&lt;WeatherFunction.WeatherRequest, String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(WeatherRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + request.getCity() + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherRequest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getCity</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> city; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCity</span><span class=\"params\">(String city)</span> &#123; <span class=\"built_in\">this</span>.city = city; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、注册函数</strong>：将函数注册为Spring Bean，使其能被Spring AI识别和调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;获取指定城市的天气信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;WeatherFunction.WeatherRequest, String&gt; weatherFunction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置模型</strong>：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withFunction(<span class=\"string\">&quot;weatherFunction&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模型调用函数</strong>：模型在生成响应时，可以通过请求调用外部函数，得到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        WeatherFunction.<span class=\"type\">WeatherRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>.WeatherRequest();</span><br><span class=\"line\">        request.setCity(input);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).functions(<span class=\"string\">&quot;weatherFunction&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用<strong>工具调用</strong>（Tool Calling）来实现类似功能。</p>\n<h3 id=\"工具调用（Tool-Calling）\"><a href=\"#工具调用（Tool-Calling）\" class=\"headerlink\" title=\"工具调用（Tool Calling）\"></a><strong>工具调用（Tool Calling）</strong></h3><h4 id=\"功能与作用-1\"><a href=\"#功能与作用-1\" class=\"headerlink\" title=\"功能与作用\"></a><strong>功能与作用</strong></h4><p>工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：</p>\n<p><strong>1、定义工具接口</strong>：开发者定义一个接口，声明工具的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、实现工具接口</strong>：编写具体的工具实现类，处理工具的业务逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherToolImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + city + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、注册工具为Spring Bean</strong>：将工具实现类注册为Spring Bean，以便Spring容器管理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WeatherTool <span class=\"title function_\">weatherTool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherToolImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、配置模型使用工具</strong>：在Spring AI配置中，指定模型使用的工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withTool(<span class=\"string\">&quot;weatherTool&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、模型调用工具</strong>：模型在与用户交互时，通过工具调用获取所需的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).tools(<span class=\"string\">&quot;weatherTool&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"智能体（Agent）\"><a href=\"#智能体（Agent）\" class=\"headerlink\" title=\"智能体（Agent）\"></a>智能体（Agent）</h3><h4 id=\"功能与作用-2\"><a href=\"#功能与作用-2\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。</p>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>智能体的实现涉及多个关键组件，主要包括：</p>\n<p>模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。<br>智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。<br>智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。<br>注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。</p>\n<h3 id=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"><a href=\"#从函数调用（FunctionCallbac）到工具调用（ToolCallback）\" class=\"headerlink\" title=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"></a>从函数调用（FunctionCallbac）到工具调用（ToolCallback）</h3><p>随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。</p>\n<p><strong>为什么从FunctionCallback迁移到ToolCallback</strong></p>\n<p>Spring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：</p>\n<ul>\n<li>功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。</li>\n<li>一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。</li>\n<li>未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。</li>\n</ul>\n<p>因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。</p>\n<h2 id=\"Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\"><a href=\"#Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\" class=\"headerlink\" title=\"Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发\"></a>Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p><img src=\"/typora-user-images/image-20250425104935964-5549379.png\" alt=\"image-20250425104935964\"></p>\n<p><strong>Elasticsearch安装</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"attr\">elasticsearch1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;elasticsearch1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms84m -Xmx512m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs</span>  </span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vsftpd:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;fauria/vsftpd&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;rabbitmq1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_USER=admin</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_PASS=123456</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MIN_PORT=21100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MAX_PORT=21110</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_ADDRESS=172.18.0.8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21</span><span class=\"string\">:21</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21100</span><span class=\"number\">-21110</span><span class=\"string\">:21100-21110</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nt_dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/typora-user-images/image-20250425174252871.png\" alt=\"image-20250425174252871\"></p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><ol>\n<li>集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。</li>\n<li>集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。</li>\n<li>基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。</li>\n<li>通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。</li>\n<li>Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：<ul>\n<li>场景 1：通过 RAG 找到医生后，进行挂号</li>\n<li>场景 2：挂号当日请假</li>\n<li>场景 3：挂号当日在医院附近找饭店</li>\n</ul>\n</li>\n</ol>\n<p>通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>Maven 核心依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-ai.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring-ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">alibaba.ai.version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">alibaba.ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.ai.ollama.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring.ai.ollama.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;alibaba.ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-elasticsearch-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Snapshots<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。</p>\n<p><strong>核心配置 （<code>application.yml</code>）</strong></p>\n<p>这里一定要注意的是文本推理模型 <code>model: deepseek-r1</code>, 嵌入模型<code>model: text-embedding-v2</code>用来生成文本的向量数据</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">index-name:</span> <span class=\"string\">spring-ai-tag</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里一定要注意，维度是默认1536，需要和向量模型的维度一致</span></span><br><span class=\"line\">        <span class=\"attr\">dimensions:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">similarity:</span> <span class=\"string\">cosine</span></span><br><span class=\"line\">        <span class=\"attr\">batching-strategy:</span> <span class=\"string\">TOKEN_COUNT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储</p>\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                <span class=\"comment\">// 设置系统的默认行为和风格</span></span><br><span class=\"line\">                .defaultSystem(<span class=\"string\">&quot;你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 注册向量检索顾问，用于从向量存储中检索相关信息</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(</span><br><span class=\"line\">                                vectorStore,</span><br><span class=\"line\">                                SearchRequest.builder()</span><br><span class=\"line\">                                        .similarityThreshold(<span class=\"number\">0.1</span>) <span class=\"comment\">// 设置相似度阈值</span></span><br><span class=\"line\">                                        .topK(<span class=\"number\">10</span>) <span class=\"comment\">// 设置返回最多 10 条相关结果</span></span><br><span class=\"line\">                                        .build()</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编写核心控制器（DeepseekChatController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.DocumentReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.reader.TextReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.VectorStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DeepseekChatController  //类名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 200900681 李村</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2025/4/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>: 1.0    //版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeepseekChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/data/load&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">loadData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取文件</span></span><br><span class=\"line\">        <span class=\"type\">DocumentReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(<span class=\"string\">&quot;static/hospitalInfo.txt&quot;</span>);</span><br><span class=\"line\">        List&lt;Document&gt; documents = reader.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.切分文件：根据空白行进行分割</span></span><br><span class=\"line\">        List&lt;Document&gt; splitDocuments =  <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取文档内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> document.getText();</span><br><span class=\"line\">            <span class=\"comment\">// 使用正则表达式按空白行分割</span></span><br><span class=\"line\">            String[] parts = content.split(<span class=\"string\">&quot;\\\\n\\\\s*\\\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将分割后的部分封装为新的 Document 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                splitDocuments.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(part.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件切分为 [&#123;&#125;]&quot;</span>, splitDocuments.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.写入数据</span></span><br><span class=\"line\">        vectorStore.add(splitDocuments);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/select&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;query&quot;)</span> String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query is  [&#123;&#125;]&quot;</span>, query);</span><br><span class=\"line\">        List&lt;Document&gt; results = vectorStore.similaritySearch(</span><br><span class=\"line\"><span class=\"comment\">//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()</span></span><br><span class=\"line\">                SearchRequest.builder().query(query).similarityThreshold(<span class=\"number\">0.1</span>).topK(<span class=\"number\">10</span>).build()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;results is [&#123;&#125;]&quot;</span>, results);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询重写</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/rewrite/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByRewrite</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、构建查询重写转换器</span></span><br><span class=\"line\">        <span class=\"type\">QueryTransformer</span> <span class=\"variable\">queryTransformer</span> <span class=\"operator\">=</span> RewriteQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 2、执行查询重写</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByTransform</span> <span class=\"operator\">=</span> queryTransformer.transform(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(inputMsg));</span><br><span class=\"line\">        <span class=\"comment\">// 3、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByTransform.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文感知查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/history/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByHistory</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取历史消息</span></span><br><span class=\"line\">        List&lt;Message&gt; history = chatMemory.get(userId, CHAT_HISTORY_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 构建查询对象</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.builder()</span><br><span class=\"line\">                .text(inputMsg)</span><br><span class=\"line\">                .history(history)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 创建 CompressionQueryTransformer</span></span><br><span class=\"line\">        <span class=\"type\">CompressionQueryTransformer</span> <span class=\"variable\">queryTransformerByHis</span> <span class=\"operator\">=</span> CompressionQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4、执行历史信息后查询</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByHistory</span> <span class=\"operator\">=</span> queryTransformerByHis.transform(query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByHistory.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>数据准备</strong></p>\n<p>我让kimi帮我生成了一个医院的介绍，包含</p>\n<ul>\n<li>医院<code>小智口腔医院</code>的介绍，</li>\n<li>3个科室的介绍，分别是 <code>口腔修复科</code>,<code>口腔正畸科</code>,<code>儿童口腔科</code></li>\n<li>每个科室也有对应的20位医生信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 医院介绍</span><br><span class=\"line\">小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。</span><br><span class=\"line\">2. 科室介绍</span><br><span class=\"line\">(1)口腔修复科:</span><br><span class=\"line\">口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信</span><br><span class=\"line\">(2)口腔正畸科:</span><br><span class=\"line\">是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。</span><br><span class=\"line\">(3)儿童口腔科:</span><br><span class=\"line\">儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 医生介绍</span><br><span class=\"line\">(1) 李明轩</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年3月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。</span><br><span class=\"line\">介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 王晓彤</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年7月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 张伟杰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1982年11月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。</span><br><span class=\"line\">介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(4) 陈静怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1988年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(5) 刘志远</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1980年9月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。</span><br><span class=\"line\">介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(6) 孙悦宁</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1993年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。</span><br><span class=\"line\">介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(7) 赵天宇</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1987年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(8) 林晓慧</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年8月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(9) 黄志强</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1979年12月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。</span><br><span class=\"line\">介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务</span><br><span class=\"line\"></span><br><span class=\"line\">(10) 高雅婷</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1986年2月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。</span><br><span class=\"line\"></span><br><span class=\"line\">(11) 王浩然</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1983年7月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。</span><br><span class=\"line\">介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(12) 李佳琪</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1992年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。</span><br><span class=\"line\">介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(13) 周文博</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1981年10月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。</span><br><span class=\"line\">介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(14) 张馨月</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1989年6月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(15) 王志鹏</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1984年11月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(16) 赵雪梅</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年3月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(17) 陈子豪</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1988年9月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。</span><br><span class=\"line\">介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(18) 李梦瑶</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1994年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(19) 黄晓峰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年8月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(20) 刘欣怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据写入的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/data/load</span><br><span class=\"line\">获取数据向量的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/select</span><br><span class=\"line\">连读对话的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/rag/chat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>数据写入</strong></p>\n<blockquote>\n<p>数据写入的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/data/load\">http://127.0.0.1:8080/ai/v1/data/load</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429172724826.png\" alt=\"image-20250429172724826\"></p>\n<p><img src=\"/typora-user-images/image-20250429180401580.png\" alt=\"image-20250429180401580\"></p>\n<blockquote>\n<p>获取数据向量的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/select?query=%E5%8C%BB%E9%99%A2%E4%BB%8B%E7%BB%8D\">http://127.0.0.1:8080/ai/v1/select?query=医院介绍</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174959408.png\" alt=\"image-20250429174959408\"></p>\n<p>可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek</p>\n<p>接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题</p>\n<blockquote>\n<ul>\n<li>请介绍一下医院</li>\n<li>请介绍一下医院都有哪些科室</li>\n<li>医院有哪些主任医师</li>\n<li>张馨月医生怎么样</li>\n<li>我刚才都问了哪些问题</li>\n</ul>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174851066.png\" alt=\"image-20250429174851066\"></p>\n<p><img src=\"/typora-user-images/image-20250429175228086.png\" alt=\"image-20250429175228086\"></p>\n<p><img src=\"/typora-user-images/image-20250429175342611.png\" alt=\"image-20250429175342611\"></p>\n<p><img src=\"/typora-user-images/image-20250429175421998.png\" alt=\"image-20250429175421998\"></p>\n<p><img src=\"/typora-user-images/image-20250429175540574.png\" alt=\"image-20250429175540574\"></p>\n<h2 id=\"附：向量数据库milvus-存储数据\"><a href=\"#附：向量数据库milvus-存储数据\" class=\"headerlink\" title=\"附：向量数据库milvus 存储数据\"></a>附：向量数据库milvus 存储数据</h2><h3 id=\"Milvus安装\"><a href=\"#Milvus安装\" class=\"headerlink\" title=\"Milvus安装\"></a>Milvus安装</h3><p><strong>Docker-compose 配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 etcd 服务</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-etcd</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">quay.io/coreos/etcd:v3.5.16</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_MODE=revision</span>  <span class=\"comment\"># 自动压缩模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_RETENTION=1000</span>  <span class=\"comment\"># 保留的修订版本数</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_QUOTA_BACKEND_BYTES=4294967296</span>  <span class=\"comment\"># 后端存储限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_SNAPSHOT_COUNT=50000</span>  <span class=\"comment\"># 快照计数</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">etcd</span> <span class=\"string\">-advertise-client-urls=http://127.0.0.1:2379</span> <span class=\"string\">-listen-client-urls=http://0.0.0.0:2379</span> <span class=\"string\">--data-dir</span> <span class=\"string\">/etcd</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;etcdctl&quot;</span>, <span class=\"string\">&quot;endpoint&quot;</span>, <span class=\"string\">&quot;health&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 MinIO 服务</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-minio</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:RELEASE.2023-03-20T20-16-18Z</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 访问密钥</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 密钥</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9001&quot;</span>  <span class=\"comment\"># 控制台端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">minio</span> <span class=\"string\">server</span> <span class=\"string\">/minio_data</span> <span class=\"string\">--console-address</span> <span class=\"string\">&quot;:9001&quot;</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.8</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus 服务</span></span><br><span class=\"line\">  <span class=\"attr\">standalone:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-standalone</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">milvusdb/milvus:v2.5.4</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;milvus&quot;</span>, <span class=\"string\">&quot;run&quot;</span>, <span class=\"string\">&quot;standalone&quot;</span>]  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">seccomp:unconfined</span>  <span class=\"comment\"># 安全选项</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ETCD_ENDPOINTS:</span> <span class=\"string\">etcd:2379</span>  <span class=\"comment\"># etcd 服务地址</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ADDRESS:</span> <span class=\"string\">minio:9000</span>  <span class=\"comment\"># MinIO 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9091/healthz&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">90s</span>  <span class=\"comment\"># 启动等待时间</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;19530:19530&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9091:9091&quot;</span>  <span class=\"comment\"># 管理端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;etcd&quot;</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;minio&quot;</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus Dashboard 服务</span></span><br><span class=\"line\">  <span class=\"attr\">dashboard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zilliz/attu:v2.5</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-dashboard</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MILVUS_URL:</span> <span class=\"string\">http://standalone:19530</span>  <span class=\"comment\"># Milvus 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:3000&quot;</span>  <span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">standalone</span>  <span class=\"comment\"># 依赖 Milvus 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">etcd</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">minio</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义网络配置</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">      <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看客户端，</strong> 输入地址 <code>http://localhost:8000/</code><br>进入如下界面：此时什么都不要填写，直接点【连接】按钮</p>\n<p><img src=\"/typora-user-images/image-20250429181131778.png\" alt=\"image-20250429181131778\"></p>\n<p>进入系统后</p>\n<p><img src=\"/typora-user-images/image-20250429181039571.png\" alt=\"image-20250429181039571\"></p>\n<p>创建用户：用户名：&#96;&#96;milvus<code>, 密码： </code>milvus-4321<code>(这里要和我们spring工程里的配置一致)，角色我们选</code>admin&#96;, </p>\n<p><img src=\"/typora-user-images/image-20250429181312813.png\" alt=\"image-20250429181312813\"></p>\n<p>修改依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-milvus-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">uris:</span> <span class=\"string\">http://127.0.0.1:9200</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">milvus:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">port:</span> <span class=\"number\">19530</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;milvus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;milvus-4321&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">databaseName:</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">collectionName:</span> <span class=\"string\">&quot;vector_store&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">embeddingDimension:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">indexType:</span> <span class=\"string\">IVF_FLAT</span></span><br><span class=\"line\">        <span class=\"attr\">metricType:</span> <span class=\"string\">COSINE</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。</p>\n<p>使用加载接口</p>\n<p><img src=\"/typora-user-images/image-20250429183142516.png\" alt=\"image-20250429183142516\"></p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程\"></a>Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程</h1><p>在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。<strong>Spring AI</strong>，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，</p>\n<p>[toc]</p>\n<h2 id=\"Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\"><a href=\"#Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\" class=\"headerlink\" title=\"Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\"></a>Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系</h2><h3 id=\"Spring-AI-介绍\"><a href=\"#Spring-AI-介绍\" class=\"headerlink\" title=\"Spring AI 介绍\"></a>Spring AI 介绍</h3><h4 id=\"Spring-AI的版本演进\"><a href=\"#Spring-AI的版本演进\" class=\"headerlink\" title=\"Spring AI的版本演进\"></a>Spring AI的版本演进</h4><p>Spring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：</p>\n<ul>\n<li>2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。</li>\n<li>2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。</li>\n<li>2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。</li>\n<li>2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。</li>\n<li>2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性</li>\n</ul>\n<h4 id=\"Spring-AI的主要功能\"><a href=\"#Spring-AI的主要功能\" class=\"headerlink\" title=\"Spring AI的主要功能\"></a>Spring AI的主要功能</h4><p>Spring AI为开发者提供了多种AI功能的支持，包括：</p>\n<ul>\n<li>智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。</li>\n<li>文本生成：利用AI模型生成创意文本内容，例如文章、故事等。</li>\n<li>图像生成：通过文本提示生成图像，支持多种图像生成模型。</li>\n<li>音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。</li>\n<li>功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a><strong>函数调用（Function Calling）</strong></h3><h4 id=\"功能与作用\"><a href=\"#功能与作用\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>在Spring AI中，函数调用的实现步骤如下：</p>\n<p><strong>1、定义函数</strong>：开发者创建一个实现<code>Function</code>接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Function</span>&lt;WeatherFunction.WeatherRequest, String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(WeatherRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + request.getCity() + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherRequest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getCity</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> city; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCity</span><span class=\"params\">(String city)</span> &#123; <span class=\"built_in\">this</span>.city = city; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、注册函数</strong>：将函数注册为Spring Bean，使其能被Spring AI识别和调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;获取指定城市的天气信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;WeatherFunction.WeatherRequest, String&gt; weatherFunction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置模型</strong>：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withFunction(<span class=\"string\">&quot;weatherFunction&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模型调用函数</strong>：模型在生成响应时，可以通过请求调用外部函数，得到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        WeatherFunction.<span class=\"type\">WeatherRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>.WeatherRequest();</span><br><span class=\"line\">        request.setCity(input);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).functions(<span class=\"string\">&quot;weatherFunction&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用<strong>工具调用</strong>（Tool Calling）来实现类似功能。</p>\n<h3 id=\"工具调用（Tool-Calling）\"><a href=\"#工具调用（Tool-Calling）\" class=\"headerlink\" title=\"工具调用（Tool Calling）\"></a><strong>工具调用（Tool Calling）</strong></h3><h4 id=\"功能与作用-1\"><a href=\"#功能与作用-1\" class=\"headerlink\" title=\"功能与作用\"></a><strong>功能与作用</strong></h4><p>工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：</p>\n<p><strong>1、定义工具接口</strong>：开发者定义一个接口，声明工具的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、实现工具接口</strong>：编写具体的工具实现类，处理工具的业务逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherToolImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + city + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、注册工具为Spring Bean</strong>：将工具实现类注册为Spring Bean，以便Spring容器管理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WeatherTool <span class=\"title function_\">weatherTool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherToolImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、配置模型使用工具</strong>：在Spring AI配置中，指定模型使用的工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withTool(<span class=\"string\">&quot;weatherTool&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、模型调用工具</strong>：模型在与用户交互时，通过工具调用获取所需的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).tools(<span class=\"string\">&quot;weatherTool&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"智能体（Agent）\"><a href=\"#智能体（Agent）\" class=\"headerlink\" title=\"智能体（Agent）\"></a>智能体（Agent）</h3><h4 id=\"功能与作用-2\"><a href=\"#功能与作用-2\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。</p>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>智能体的实现涉及多个关键组件，主要包括：</p>\n<p>模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。<br>智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。<br>智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。<br>注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。</p>\n<h3 id=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"><a href=\"#从函数调用（FunctionCallbac）到工具调用（ToolCallback）\" class=\"headerlink\" title=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"></a>从函数调用（FunctionCallbac）到工具调用（ToolCallback）</h3><p>随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。</p>\n<p><strong>为什么从FunctionCallback迁移到ToolCallback</strong></p>\n<p>Spring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：</p>\n<ul>\n<li>功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。</li>\n<li>一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。</li>\n<li>未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。</li>\n</ul>\n<p>因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。</p>\n<h2 id=\"Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\"><a href=\"#Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\" class=\"headerlink\" title=\"Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发\"></a>Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p><img src=\"/typora-user-images/image-20250425104935964-5549379.png\" alt=\"image-20250425104935964\"></p>\n<p><strong>Elasticsearch安装</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"attr\">elasticsearch1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;elasticsearch1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms84m -Xmx512m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs</span>  </span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vsftpd:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;fauria/vsftpd&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;rabbitmq1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_USER=admin</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_PASS=123456</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MIN_PORT=21100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MAX_PORT=21110</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_ADDRESS=172.18.0.8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21</span><span class=\"string\">:21</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21100</span><span class=\"number\">-21110</span><span class=\"string\">:21100-21110</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nt_dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/typora-user-images/image-20250425174252871.png\" alt=\"image-20250425174252871\"></p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><ol>\n<li>集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。</li>\n<li>集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。</li>\n<li>基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。</li>\n<li>通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。</li>\n<li>Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：<ul>\n<li>场景 1：通过 RAG 找到医生后，进行挂号</li>\n<li>场景 2：挂号当日请假</li>\n<li>场景 3：挂号当日在医院附近找饭店</li>\n</ul>\n</li>\n</ol>\n<p>通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>Maven 核心依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-ai.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring-ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">alibaba.ai.version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">alibaba.ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.ai.ollama.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring.ai.ollama.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;alibaba.ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-elasticsearch-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Snapshots<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。</p>\n<p><strong>核心配置 （<code>application.yml</code>）</strong></p>\n<p>这里一定要注意的是文本推理模型 <code>model: deepseek-r1</code>, 嵌入模型<code>model: text-embedding-v2</code>用来生成文本的向量数据</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">index-name:</span> <span class=\"string\">spring-ai-tag</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里一定要注意，维度是默认1536，需要和向量模型的维度一致</span></span><br><span class=\"line\">        <span class=\"attr\">dimensions:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">similarity:</span> <span class=\"string\">cosine</span></span><br><span class=\"line\">        <span class=\"attr\">batching-strategy:</span> <span class=\"string\">TOKEN_COUNT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储</p>\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                <span class=\"comment\">// 设置系统的默认行为和风格</span></span><br><span class=\"line\">                .defaultSystem(<span class=\"string\">&quot;你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 注册向量检索顾问，用于从向量存储中检索相关信息</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(</span><br><span class=\"line\">                                vectorStore,</span><br><span class=\"line\">                                SearchRequest.builder()</span><br><span class=\"line\">                                        .similarityThreshold(<span class=\"number\">0.1</span>) <span class=\"comment\">// 设置相似度阈值</span></span><br><span class=\"line\">                                        .topK(<span class=\"number\">10</span>) <span class=\"comment\">// 设置返回最多 10 条相关结果</span></span><br><span class=\"line\">                                        .build()</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编写核心控制器（DeepseekChatController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.DocumentReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.reader.TextReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.VectorStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DeepseekChatController  //类名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 200900681 李村</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2025/4/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>: 1.0    //版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeepseekChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/data/load&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">loadData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取文件</span></span><br><span class=\"line\">        <span class=\"type\">DocumentReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(<span class=\"string\">&quot;static/hospitalInfo.txt&quot;</span>);</span><br><span class=\"line\">        List&lt;Document&gt; documents = reader.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.切分文件：根据空白行进行分割</span></span><br><span class=\"line\">        List&lt;Document&gt; splitDocuments =  <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取文档内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> document.getText();</span><br><span class=\"line\">            <span class=\"comment\">// 使用正则表达式按空白行分割</span></span><br><span class=\"line\">            String[] parts = content.split(<span class=\"string\">&quot;\\\\n\\\\s*\\\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将分割后的部分封装为新的 Document 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                splitDocuments.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(part.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件切分为 [&#123;&#125;]&quot;</span>, splitDocuments.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.写入数据</span></span><br><span class=\"line\">        vectorStore.add(splitDocuments);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/select&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;query&quot;)</span> String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query is  [&#123;&#125;]&quot;</span>, query);</span><br><span class=\"line\">        List&lt;Document&gt; results = vectorStore.similaritySearch(</span><br><span class=\"line\"><span class=\"comment\">//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()</span></span><br><span class=\"line\">                SearchRequest.builder().query(query).similarityThreshold(<span class=\"number\">0.1</span>).topK(<span class=\"number\">10</span>).build()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;results is [&#123;&#125;]&quot;</span>, results);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询重写</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/rewrite/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByRewrite</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、构建查询重写转换器</span></span><br><span class=\"line\">        <span class=\"type\">QueryTransformer</span> <span class=\"variable\">queryTransformer</span> <span class=\"operator\">=</span> RewriteQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 2、执行查询重写</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByTransform</span> <span class=\"operator\">=</span> queryTransformer.transform(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(inputMsg));</span><br><span class=\"line\">        <span class=\"comment\">// 3、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByTransform.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文感知查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/history/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByHistory</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取历史消息</span></span><br><span class=\"line\">        List&lt;Message&gt; history = chatMemory.get(userId, CHAT_HISTORY_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 构建查询对象</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.builder()</span><br><span class=\"line\">                .text(inputMsg)</span><br><span class=\"line\">                .history(history)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 创建 CompressionQueryTransformer</span></span><br><span class=\"line\">        <span class=\"type\">CompressionQueryTransformer</span> <span class=\"variable\">queryTransformerByHis</span> <span class=\"operator\">=</span> CompressionQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4、执行历史信息后查询</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByHistory</span> <span class=\"operator\">=</span> queryTransformerByHis.transform(query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByHistory.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>数据准备</strong></p>\n<p>我让kimi帮我生成了一个医院的介绍，包含</p>\n<ul>\n<li>医院<code>小智口腔医院</code>的介绍，</li>\n<li>3个科室的介绍，分别是 <code>口腔修复科</code>,<code>口腔正畸科</code>,<code>儿童口腔科</code></li>\n<li>每个科室也有对应的20位医生信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 医院介绍</span><br><span class=\"line\">小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。</span><br><span class=\"line\">2. 科室介绍</span><br><span class=\"line\">(1)口腔修复科:</span><br><span class=\"line\">口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信</span><br><span class=\"line\">(2)口腔正畸科:</span><br><span class=\"line\">是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。</span><br><span class=\"line\">(3)儿童口腔科:</span><br><span class=\"line\">儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 医生介绍</span><br><span class=\"line\">(1) 李明轩</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年3月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。</span><br><span class=\"line\">介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 王晓彤</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年7月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 张伟杰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1982年11月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。</span><br><span class=\"line\">介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(4) 陈静怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1988年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(5) 刘志远</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1980年9月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。</span><br><span class=\"line\">介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(6) 孙悦宁</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1993年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。</span><br><span class=\"line\">介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(7) 赵天宇</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1987年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(8) 林晓慧</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年8月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(9) 黄志强</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1979年12月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。</span><br><span class=\"line\">介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务</span><br><span class=\"line\"></span><br><span class=\"line\">(10) 高雅婷</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1986年2月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。</span><br><span class=\"line\"></span><br><span class=\"line\">(11) 王浩然</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1983年7月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。</span><br><span class=\"line\">介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(12) 李佳琪</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1992年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。</span><br><span class=\"line\">介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(13) 周文博</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1981年10月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。</span><br><span class=\"line\">介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(14) 张馨月</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1989年6月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(15) 王志鹏</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1984年11月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(16) 赵雪梅</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年3月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(17) 陈子豪</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1988年9月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。</span><br><span class=\"line\">介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(18) 李梦瑶</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1994年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(19) 黄晓峰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年8月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(20) 刘欣怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据写入的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/data/load</span><br><span class=\"line\">获取数据向量的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/select</span><br><span class=\"line\">连读对话的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/rag/chat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>数据写入</strong></p>\n<blockquote>\n<p>数据写入的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/data/load\">http://127.0.0.1:8080/ai/v1/data/load</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429172724826.png\" alt=\"image-20250429172724826\"></p>\n<p><img src=\"/typora-user-images/image-20250429180401580.png\" alt=\"image-20250429180401580\"></p>\n<blockquote>\n<p>获取数据向量的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/select?query=%E5%8C%BB%E9%99%A2%E4%BB%8B%E7%BB%8D\">http://127.0.0.1:8080/ai/v1/select?query=医院介绍</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174959408.png\" alt=\"image-20250429174959408\"></p>\n<p>可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek</p>\n<p>接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题</p>\n<blockquote>\n<ul>\n<li>请介绍一下医院</li>\n<li>请介绍一下医院都有哪些科室</li>\n<li>医院有哪些主任医师</li>\n<li>张馨月医生怎么样</li>\n<li>我刚才都问了哪些问题</li>\n</ul>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174851066.png\" alt=\"image-20250429174851066\"></p>\n<p><img src=\"/typora-user-images/image-20250429175228086.png\" alt=\"image-20250429175228086\"></p>\n<p><img src=\"/typora-user-images/image-20250429175342611.png\" alt=\"image-20250429175342611\"></p>\n<p><img src=\"/typora-user-images/image-20250429175421998.png\" alt=\"image-20250429175421998\"></p>\n<p><img src=\"/typora-user-images/image-20250429175540574.png\" alt=\"image-20250429175540574\"></p>\n<h2 id=\"附：向量数据库milvus-存储数据\"><a href=\"#附：向量数据库milvus-存储数据\" class=\"headerlink\" title=\"附：向量数据库milvus 存储数据\"></a>附：向量数据库milvus 存储数据</h2><h3 id=\"Milvus安装\"><a href=\"#Milvus安装\" class=\"headerlink\" title=\"Milvus安装\"></a>Milvus安装</h3><p><strong>Docker-compose 配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 etcd 服务</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-etcd</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">quay.io/coreos/etcd:v3.5.16</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_MODE=revision</span>  <span class=\"comment\"># 自动压缩模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_RETENTION=1000</span>  <span class=\"comment\"># 保留的修订版本数</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_QUOTA_BACKEND_BYTES=4294967296</span>  <span class=\"comment\"># 后端存储限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_SNAPSHOT_COUNT=50000</span>  <span class=\"comment\"># 快照计数</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">etcd</span> <span class=\"string\">-advertise-client-urls=http://127.0.0.1:2379</span> <span class=\"string\">-listen-client-urls=http://0.0.0.0:2379</span> <span class=\"string\">--data-dir</span> <span class=\"string\">/etcd</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;etcdctl&quot;</span>, <span class=\"string\">&quot;endpoint&quot;</span>, <span class=\"string\">&quot;health&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 MinIO 服务</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-minio</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:RELEASE.2023-03-20T20-16-18Z</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 访问密钥</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 密钥</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9001&quot;</span>  <span class=\"comment\"># 控制台端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">minio</span> <span class=\"string\">server</span> <span class=\"string\">/minio_data</span> <span class=\"string\">--console-address</span> <span class=\"string\">&quot;:9001&quot;</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.8</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus 服务</span></span><br><span class=\"line\">  <span class=\"attr\">standalone:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-standalone</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">milvusdb/milvus:v2.5.4</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;milvus&quot;</span>, <span class=\"string\">&quot;run&quot;</span>, <span class=\"string\">&quot;standalone&quot;</span>]  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">seccomp:unconfined</span>  <span class=\"comment\"># 安全选项</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ETCD_ENDPOINTS:</span> <span class=\"string\">etcd:2379</span>  <span class=\"comment\"># etcd 服务地址</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ADDRESS:</span> <span class=\"string\">minio:9000</span>  <span class=\"comment\"># MinIO 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9091/healthz&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">90s</span>  <span class=\"comment\"># 启动等待时间</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;19530:19530&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9091:9091&quot;</span>  <span class=\"comment\"># 管理端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;etcd&quot;</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;minio&quot;</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus Dashboard 服务</span></span><br><span class=\"line\">  <span class=\"attr\">dashboard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zilliz/attu:v2.5</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-dashboard</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MILVUS_URL:</span> <span class=\"string\">http://standalone:19530</span>  <span class=\"comment\"># Milvus 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:3000&quot;</span>  <span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">standalone</span>  <span class=\"comment\"># 依赖 Milvus 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">etcd</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">minio</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义网络配置</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">      <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看客户端，</strong> 输入地址 <code>http://localhost:8000/</code><br>进入如下界面：此时什么都不要填写，直接点【连接】按钮</p>\n<p><img src=\"/typora-user-images/image-20250429181131778.png\" alt=\"image-20250429181131778\"></p>\n<p>进入系统后</p>\n<p><img src=\"/typora-user-images/image-20250429181039571.png\" alt=\"image-20250429181039571\"></p>\n<p>创建用户：用户名：&#96;&#96;milvus<code>, 密码： </code>milvus-4321<code>(这里要和我们spring工程里的配置一致)，角色我们选</code>admin&#96;, </p>\n<p><img src=\"/typora-user-images/image-20250429181312813.png\" alt=\"image-20250429181312813\"></p>\n<p>修改依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-milvus-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">uris:</span> <span class=\"string\">http://127.0.0.1:9200</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">milvus:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">port:</span> <span class=\"number\">19530</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;milvus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;milvus-4321&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">databaseName:</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">collectionName:</span> <span class=\"string\">&quot;vector_store&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">embeddingDimension:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">indexType:</span> <span class=\"string\">IVF_FLAT</span></span><br><span class=\"line\">        <span class=\"attr\">metricType:</span> <span class=\"string\">COSINE</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。</p>\n<p>使用加载接口</p>\n<p><img src=\"/typora-user-images/image-20250429183142516.png\" alt=\"image-20250429183142516\"></p>\n"},{"_content":"# Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。\n\n依赖：\n\n- **开发工具**：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）\n- **JDK**：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）\n- **阿里云百炼平台**：[阿里百炼平台](https://bailian.console.aliyun.com/)（提供强大的 AI 模型支持和训练服务）\n\n## 多轮对话\n\n\n\n**1、配置ChatMemory** \n\n```java\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    /**\n     * 创建一个基于内存的聊天模型\n     */\n    @Bean\n    public ChatMemory chatMemory() {\n        return new InMemoryChatMemory();\n    }\n}\n```\n\n**2、创建ChatMemoryController**\n\n这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦\n\n~~~java\n// 调用 chatClient.prompt() 方法开始构建聊天请求\nChatClient.CallResponseSpec response = chatClient.prompt()\n        // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n        .user(input)\n        // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n        .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n        // 调用 .call() 方法执行聊天请求并获取响应规格\n        .call();\n\n~~~\n\n\n\n全文：\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatMemoryController {\n    private final ChatClient chatClient;\n\n    // 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）\n    public ChatMemoryController(ChatModel chatModel, ChatMemory chatMemory) {\n        // 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor\n        this.chatClient = ChatClient.builder(chatModel)\n                .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory))\n                .build();\n    }\n\n    /**\n     * 多轮对话接口\n     * 每次调用时自动加载和更新该会话的历史记录。\n     */\n    @GetMapping(\"/multi/chat\")\n    public String chat(@RequestParam(value = \"userId\",defaultValue = \"10001\") String userId,\n                       @RequestParam(\"input\") String input) {\n        log.info(\"/multi/chat   input:  [{}]\", input);\n        // 调用 chatClient.prompt() 方法开始构建聊天请求\n        ChatClient.CallResponseSpec response = chatClient.prompt()\n                // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n                .user(input)\n                // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n                .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                        // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n                // 调用 .call() 方法执行聊天请求并获取响应规格\n                .call();\n        return response.content();\n    }\n}\n\n\n~~~\n\n\n\n\n\n通过以上代码，我们成功创建了一个对外接口：http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：\n\nuserId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。\ninput：用户输入的问题或消息。\n\n\n\n\n\n![image-20250419181524113](typora-user-images/image-20250419181524113.png)\n\n测试连续对话，继续问他们出生在什么地方\n\n![image-20250419181631076](typora-user-images/image-20250419181631076.png)\n\n\n\n**修改用户ID**\n\n修改用户ID 继续询问问题 lison002，看是否能够继续作答\n\n\n\n![image-20250419181745960](typora-user-images/image-20250419181745960.png)\n\n结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。\n\n\n\n\n\n## 对话持久-Redis\n\n\n\n**增加依赖**\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n    @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**编写核心控制器（ChatStorageMemoryController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatStorageMemoryController {\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private ChatMemory chatMemory;\n\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(value = \"/storage/chat\")\n    public String chat(@RequestParam String userId, @RequestParam String inputMsg) {\n\n        log.info(\"/redis/chat  userId: [{}],  input:  [{}]\", userId, inputMsg);\n\n        String text = chatClient.prompt()\n                .user(inputMsg)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory, userId, CHAT_HISTORY_SIZE))\n                .call()\n                .content();\n        log.info(\"text --> [{}]\", text);\n        return text;\n    }\n}\n\n~~~\n\n\n\n**application.yml**\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: xxxx\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n\n\n\n~~~\n\n\n\n**验证测试**\n\nhttp://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=中国近代3个名人\n\n**第一轮对话：**中国近代3个名人\n\n![image-20250422114322913](typora-user-images/image-20250422114322913.png)\n\n**第二轮对话：他们的出生地在哪**\n\n\n\n![image-20250422114422258](typora-user-images/image-20250422114422258.png)\n\n**第三轮对话：这些地方曾经出过哪些大的事件**\n\n![image-20250422114555482](typora-user-images/image-20250422114555482.png)\n\n\n\n **Redis 的存储**\n\n![image-20250422114642336](typora-user-images/image-20250422114642336.png)\n\n本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。","source":"categories/Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","raw":"# Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。\n\n依赖：\n\n- **开发工具**：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）\n- **JDK**：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）\n- **阿里云百炼平台**：[阿里百炼平台](https://bailian.console.aliyun.com/)（提供强大的 AI 模型支持和训练服务）\n\n## 多轮对话\n\n\n\n**1、配置ChatMemory** \n\n```java\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    /**\n     * 创建一个基于内存的聊天模型\n     */\n    @Bean\n    public ChatMemory chatMemory() {\n        return new InMemoryChatMemory();\n    }\n}\n```\n\n**2、创建ChatMemoryController**\n\n这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦\n\n~~~java\n// 调用 chatClient.prompt() 方法开始构建聊天请求\nChatClient.CallResponseSpec response = chatClient.prompt()\n        // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n        .user(input)\n        // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n        .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n        // 调用 .call() 方法执行聊天请求并获取响应规格\n        .call();\n\n~~~\n\n\n\n全文：\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatMemoryController {\n    private final ChatClient chatClient;\n\n    // 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）\n    public ChatMemoryController(ChatModel chatModel, ChatMemory chatMemory) {\n        // 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor\n        this.chatClient = ChatClient.builder(chatModel)\n                .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory))\n                .build();\n    }\n\n    /**\n     * 多轮对话接口\n     * 每次调用时自动加载和更新该会话的历史记录。\n     */\n    @GetMapping(\"/multi/chat\")\n    public String chat(@RequestParam(value = \"userId\",defaultValue = \"10001\") String userId,\n                       @RequestParam(\"input\") String input) {\n        log.info(\"/multi/chat   input:  [{}]\", input);\n        // 调用 chatClient.prompt() 方法开始构建聊天请求\n        ChatClient.CallResponseSpec response = chatClient.prompt()\n                // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n                .user(input)\n                // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n                .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                        // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n                // 调用 .call() 方法执行聊天请求并获取响应规格\n                .call();\n        return response.content();\n    }\n}\n\n\n~~~\n\n\n\n\n\n通过以上代码，我们成功创建了一个对外接口：http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：\n\nuserId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。\ninput：用户输入的问题或消息。\n\n\n\n\n\n![image-20250419181524113](typora-user-images/image-20250419181524113.png)\n\n测试连续对话，继续问他们出生在什么地方\n\n![image-20250419181631076](typora-user-images/image-20250419181631076.png)\n\n\n\n**修改用户ID**\n\n修改用户ID 继续询问问题 lison002，看是否能够继续作答\n\n\n\n![image-20250419181745960](typora-user-images/image-20250419181745960.png)\n\n结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。\n\n\n\n\n\n## 对话持久-Redis\n\n\n\n**增加依赖**\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n    @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**编写核心控制器（ChatStorageMemoryController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatStorageMemoryController {\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private ChatMemory chatMemory;\n\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(value = \"/storage/chat\")\n    public String chat(@RequestParam String userId, @RequestParam String inputMsg) {\n\n        log.info(\"/redis/chat  userId: [{}],  input:  [{}]\", userId, inputMsg);\n\n        String text = chatClient.prompt()\n                .user(inputMsg)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory, userId, CHAT_HISTORY_SIZE))\n                .call()\n                .content();\n        log.info(\"text --> [{}]\", text);\n        return text;\n    }\n}\n\n~~~\n\n\n\n**application.yml**\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: xxxx\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n\n\n\n~~~\n\n\n\n**验证测试**\n\nhttp://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=中国近代3个名人\n\n**第一轮对话：**中国近代3个名人\n\n![image-20250422114322913](typora-user-images/image-20250422114322913.png)\n\n**第二轮对话：他们的出生地在哪**\n\n\n\n![image-20250422114422258](typora-user-images/image-20250422114422258.png)\n\n**第三轮对话：这些地方曾经出过哪些大的事件**\n\n![image-20250422114555482](typora-user-images/image-20250422114555482.png)\n\n\n\n **Redis 的存储**\n\n![image-20250422114642336](typora-user-images/image-20250422114642336.png)\n\n本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。","date":"2025-06-04T10:12:41.879Z","updated":"2025-04-29T10:41:32.331Z","path":"categories/Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录.html","title":"","comments":1,"layout":"page","_id":"cmbhsgz5p0006nffybn00cpd3","content":"<h1 id=\"Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\"><a href=\"#Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\" class=\"headerlink\" title=\"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\"></a>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。</p>\n<p>依赖：</p>\n<ul>\n<li><strong>开发工具</strong>：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）</li>\n<li><strong>JDK</strong>：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）</li>\n<li><strong>阿里云百炼平台</strong>：<a href=\"https://bailian.console.aliyun.com/\">阿里百炼平台</a>（提供强大的 AI 模型支持和训练服务）</li>\n</ul>\n<h2 id=\"多轮对话\"><a href=\"#多轮对话\" class=\"headerlink\" title=\"多轮对话\"></a>多轮对话</h2><p><strong>1、配置ChatMemory</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个基于内存的聊天模型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、创建ChatMemoryController</strong></p>\n<p>这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">        .user(input)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">        .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">        .call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>全文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatMemoryController</span><span class=\"params\">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = ChatClient.builder(chatModel)</span><br><span class=\"line\">                .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多轮对话接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次调用时自动加载和更新该会话的历史记录。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/multi/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;userId&quot;,defaultValue = &quot;10001&quot;)</span> String userId,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;input&quot;)</span> String input)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/multi/chat   input:  [&#123;&#125;]&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">        ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">                .user(input)</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">                .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                        <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">                .call();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过以上代码，我们成功创建了一个对外接口：<a href=\"http://127.0.0.1:8080/ai/v1/multi/chat%E3%80%82%E8%AF%A5%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\">http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：</a></p>\n<p>userId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。<br>input：用户输入的问题或消息。</p>\n<p><img src=\"/typora-user-images/image-20250419181524113.png\" alt=\"image-20250419181524113\"></p>\n<p>测试连续对话，继续问他们出生在什么地方</p>\n<p><img src=\"/typora-user-images/image-20250419181631076.png\" alt=\"image-20250419181631076\"></p>\n<p><strong>修改用户ID</strong></p>\n<p>修改用户ID 继续询问问题 lison002，看是否能够继续作答</p>\n<p><img src=\"/typora-user-images/image-20250419181745960.png\" alt=\"image-20250419181745960\"></p>\n<p>结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。</p>\n<h2 id=\"对话持久-Redis\"><a href=\"#对话持久-Redis\" class=\"headerlink\" title=\"对话持久-Redis\"></a>对话持久-Redis</h2><p><strong>增加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>编写核心控制器（ChatStorageMemoryController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/storage/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/redis/chat  userId: [&#123;&#125;],  input:  [&#123;&#125;]&quot;</span>, userId, inputMsg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                .user(inputMsg)</span><br><span class=\"line\">                .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, userId, CHAT_HISTORY_SIZE))</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text --&gt; [&#123;&#125;]&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>验证测试</strong></p>\n<p><a href=\"http://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A33%E4%B8%AA%E5%90%8D%E4%BA%BA\">http://localhost:8080/ai/v1/storage/chat?userId=lison001&amp;inputMsg=中国近代3个名人</a></p>\n<p>**第一轮对话：**中国近代3个名人</p>\n<p><img src=\"/typora-user-images/image-20250422114322913.png\" alt=\"image-20250422114322913\"></p>\n<p><strong>第二轮对话：他们的出生地在哪</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114422258.png\" alt=\"image-20250422114422258\"></p>\n<p><strong>第三轮对话：这些地方曾经出过哪些大的事件</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114555482.png\" alt=\"image-20250422114555482\"></p>\n<p> <strong>Redis 的存储</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114642336.png\" alt=\"image-20250422114642336\"></p>\n<p>本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\"><a href=\"#Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\" class=\"headerlink\" title=\"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\"></a>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。</p>\n<p>依赖：</p>\n<ul>\n<li><strong>开发工具</strong>：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）</li>\n<li><strong>JDK</strong>：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）</li>\n<li><strong>阿里云百炼平台</strong>：<a href=\"https://bailian.console.aliyun.com/\">阿里百炼平台</a>（提供强大的 AI 模型支持和训练服务）</li>\n</ul>\n<h2 id=\"多轮对话\"><a href=\"#多轮对话\" class=\"headerlink\" title=\"多轮对话\"></a>多轮对话</h2><p><strong>1、配置ChatMemory</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个基于内存的聊天模型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、创建ChatMemoryController</strong></p>\n<p>这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">        .user(input)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">        .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">        .call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>全文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatMemoryController</span><span class=\"params\">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = ChatClient.builder(chatModel)</span><br><span class=\"line\">                .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多轮对话接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次调用时自动加载和更新该会话的历史记录。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/multi/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;userId&quot;,defaultValue = &quot;10001&quot;)</span> String userId,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;input&quot;)</span> String input)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/multi/chat   input:  [&#123;&#125;]&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">        ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">                .user(input)</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">                .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                        <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">                .call();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过以上代码，我们成功创建了一个对外接口：<a href=\"http://127.0.0.1:8080/ai/v1/multi/chat%E3%80%82%E8%AF%A5%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\">http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：</a></p>\n<p>userId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。<br>input：用户输入的问题或消息。</p>\n<p><img src=\"/typora-user-images/image-20250419181524113.png\" alt=\"image-20250419181524113\"></p>\n<p>测试连续对话，继续问他们出生在什么地方</p>\n<p><img src=\"/typora-user-images/image-20250419181631076.png\" alt=\"image-20250419181631076\"></p>\n<p><strong>修改用户ID</strong></p>\n<p>修改用户ID 继续询问问题 lison002，看是否能够继续作答</p>\n<p><img src=\"/typora-user-images/image-20250419181745960.png\" alt=\"image-20250419181745960\"></p>\n<p>结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。</p>\n<h2 id=\"对话持久-Redis\"><a href=\"#对话持久-Redis\" class=\"headerlink\" title=\"对话持久-Redis\"></a>对话持久-Redis</h2><p><strong>增加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>编写核心控制器（ChatStorageMemoryController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/storage/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/redis/chat  userId: [&#123;&#125;],  input:  [&#123;&#125;]&quot;</span>, userId, inputMsg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                .user(inputMsg)</span><br><span class=\"line\">                .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, userId, CHAT_HISTORY_SIZE))</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text --&gt; [&#123;&#125;]&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>验证测试</strong></p>\n<p><a href=\"http://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A33%E4%B8%AA%E5%90%8D%E4%BA%BA\">http://localhost:8080/ai/v1/storage/chat?userId=lison001&amp;inputMsg=中国近代3个名人</a></p>\n<p>**第一轮对话：**中国近代3个名人</p>\n<p><img src=\"/typora-user-images/image-20250422114322913.png\" alt=\"image-20250422114322913\"></p>\n<p><strong>第二轮对话：他们的出生地在哪</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114422258.png\" alt=\"image-20250422114422258\"></p>\n<p><strong>第三轮对话：这些地方曾经出过哪些大的事件</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114555482.png\" alt=\"image-20250422114555482\"></p>\n<p> <strong>Redis 的存储</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114642336.png\" alt=\"image-20250422114642336\"></p>\n<p>本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。</p>\n"},{"_content":"# Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n\n\nSpring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。\n\n## 依赖\n\n开发工具:IntelliJ IDEA\n\nJDK17+, 可以使用idea自带\n\n阿里云百炼：https://bailian.console.aliyun.com/\n\n\n\n## 准备\n\n### 使用IDEA 创建demo\n\n\n\n![image-20250419091747915](typora-user-images/image-20250419091747915.png)\n\n然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上\n\n![image-20250419092017527](typora-user-images/image-20250419092017527.png)\n\n\n\n\n\n###  Pom依赖\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n### **新建ChatController.java**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatController {\n\n\n    private final ChatClient chatClient;\n\n    public ChatController(ChatClient.Builder chatClientBuilder) {\n        this.chatClient = chatClientBuilder\n                // 实现 Chat Memory 的 Advisor\n                // 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。\n                .defaultAdvisors(\n                        new MessageChatMemoryAdvisor(new InMemoryChatMemory())\n                )\n                // 实现 Logger 的 Advisor\n                .defaultAdvisors(\n                        new SimpleLoggerAdvisor()\n                )\n                // 设置 ChatClient 中 ChatModel 的 Options 参数\n                .defaultOptions(\n                        DashScopeChatOptions.builder()\n                                .withTopP(0.7)\n                                .build()\n                )\n                .build();\n    }\n\n    @GetMapping(\"/simple/chat\")\n    public String simpleChat(String query) {\n        log.info(\"query: {}\",query );\n        String text =  chatClient.prompt(query).call().content();\n        log.info(\"text: {}\",text );\n        return text;\n    }\n\n    @GetMapping(\"/chat\")\n    public String chat(String message) {\n\n        return this.chatClient.prompt()\n                .user(message)\n                .call()\n                .content();\n    }\n\n\n    @GetMapping(\"/hello\")\n    public String hello(String message) {\n\n        return \"Hello \" + message;\n    }\n\n}\n\n~~~\n\nspring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建`chatClient`时添加两行代码。\n\n~~~java\nprivate ChatMemory chatMemory = new InMemoryChatMemory();                                            \n\npublic ChatController(ChatClient.Builder builder) {\n                                                   \n    this.chatClient = builder                                                                        \n            .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory, UUID.randomUUID().toString(), 10))\n            .build();                                                                                \n}\n\n~~~\n\nUUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。\n\n这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。\n\n\n\n这里有两个事项需要注意：\n\n1. Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。\n2. spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。\n\n~~~xml\n<repositories>\n  <repository>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n\n~~~\n\n\n\napplication.yml配置\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n~~~\n\n\n\n\n\n### 对话页面\n\n\n\n\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"js/marked.min.js\"></script>\n    <title></title>\n    <style>\n        body {\n\n            background-color: #f8f9fa;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n\n            margin: 50px auto;\n            width: 800px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        label {\n\n            display: block;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        input[type=\"text\"] {\n\n            width: 85%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        input[type=\"submit\"] {\n\n            background-color: #2ecc71;\n            color: #fff;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 3px;\n            cursor: pointer;\n            width: 10%;\n        }\n\n        .chat-box {\n\n            width: 100%;\n            height: 500px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n            overflow-y: scroll;\n        }\n\n        .message {\n\n            margin-bottom: 10px;\n            padding: 10px;\n            background-color: #f1f1f1;\n            border-radius: 3px;\n        }\n\n        .user-message {\n\n            background-color: #2ecc71;\n            color: #fff;\n        }\n\n        .bot-message {\n\n            background-color: #e6aa6b;\n            color: #fff;\n        }\n\n        .loader {\n\n            text-align: center;\n        }\n\n        .loader::after {\n\n            content: \"\";\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #ccc;\n            border-top-color: #2ecc71;\n            animation: spin 1s infinite linear;\n        }\n\n        @keyframes spin {\n\n            to {\n\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>AI 对话</h1>\n    <form id=\"form\" style=\"width: 47%;position: absolute;bottom: 150px;margin-left:15px\">\n        <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"输入你的问题\">\n        <input type=\"submit\" value=\"发送\">\n    </form>\n    <br>\n    <div id=\"loader\" class=\"loader\" style=\"display: none;\"></div>\n    <div id=\"chat-box\" class=\"chat-box\"></div>\n</div>\n\n<script>\n    var loader = document.getElementById(\"loader\");\n\n    document.getElementById(\"form\").addEventListener(\"submit\", function(event) {\n\n        event.preventDefault();\n\n        var messageInput = document.getElementById(\"message\");\n        var message = messageInput.value;\n        messageInput.value = \"\";\n\n        var chatBox = document.getElementById(\"chat-box\");\n\n        var userMessage = document.createElement(\"div\");\n        userMessage.className = \"message\";\n        userMessage.textContent = \"我: \" + message;\n        chatBox.appendChild(userMessage);\n        chatBox.scrollTop = chatBox.scrollHeight;\n\n        loader.style.display = \"block\";\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"http://localhost:8080/ai/v1/chat?message=\" + encodeURIComponent(message), true);\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState === 4) {\n\n                loader.style.display = \"none\";\n\n                if (xhr.status === 200) {\n\n                    var response = xhr.responseText;\n\n                    var botMessage = document.createElement(\"div\");\n                    botMessage.className = \"message bot-message\";\n\n                    var botMessageText = document.createElement(\"span\");\n                    botMessageText.className = \"message-text\";\n                    botMessage.appendChild(botMessageText);\n                    botMessageText.innerHTML = marked.marked(response);\n\n                    chatBox.appendChild(botMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else if (xhr.status === 400) {\n\n                    var error = JSON.parse(xhr.responseText);\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: \" + error.message;\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else {\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: Failed to connect to the backend service. Please make sure the backend service is running.\";\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                }\n            }\n        };\n\n        xhr.onloadstart = function() {\n\n            loader.style.display = \"block\";\n        };\n\n        xhr.onloadend = function() {\n\n            loader.style.display = \"none\";\n        };\n\n        xhr.send();\n    });\n</script>\n</body>\n</html>\n\n~~~\n\n注意：js 引入的 `marked.min.js`\n\n可以去 [GitHub](https://github.com/cundream/marked) 或联系我\n\n### 注册配置APi\n\n[阿里云百练文档地址](https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1)\n\n\n\n![image-20250419102848756](typora-user-images/image-20250419102848756.png)\n\n\n\n创建Key\n\n![image-20250419105704031](typora-user-images/image-20250419105704031.png)\n\n\n\n## 测试验证\n\n访问：http://localhost:8080/chat.html\n\n输入对话\n\n\n\n![image-20250419113622811](typora-user-images/image-20250419113622811.png)\n\n测试二：\n\nhttp://localhost:8080/ai/v1/simple/chat?query=你是谁\n\n![image-20250419112758947](typora-user-images/image-20250419112758947.png)\n\n\n\n## 需要了解的基本知识\n\n\n\n上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。\n\n- AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。\n- Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。\n- Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。\n- 模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。\n\n对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。\n\n\n\n\n\n# 总结\n\nSpring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。","source":"categories/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","raw":"# Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n\n\nSpring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。\n\n## 依赖\n\n开发工具:IntelliJ IDEA\n\nJDK17+, 可以使用idea自带\n\n阿里云百炼：https://bailian.console.aliyun.com/\n\n\n\n## 准备\n\n### 使用IDEA 创建demo\n\n\n\n![image-20250419091747915](typora-user-images/image-20250419091747915.png)\n\n然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上\n\n![image-20250419092017527](typora-user-images/image-20250419092017527.png)\n\n\n\n\n\n###  Pom依赖\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n### **新建ChatController.java**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatController {\n\n\n    private final ChatClient chatClient;\n\n    public ChatController(ChatClient.Builder chatClientBuilder) {\n        this.chatClient = chatClientBuilder\n                // 实现 Chat Memory 的 Advisor\n                // 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。\n                .defaultAdvisors(\n                        new MessageChatMemoryAdvisor(new InMemoryChatMemory())\n                )\n                // 实现 Logger 的 Advisor\n                .defaultAdvisors(\n                        new SimpleLoggerAdvisor()\n                )\n                // 设置 ChatClient 中 ChatModel 的 Options 参数\n                .defaultOptions(\n                        DashScopeChatOptions.builder()\n                                .withTopP(0.7)\n                                .build()\n                )\n                .build();\n    }\n\n    @GetMapping(\"/simple/chat\")\n    public String simpleChat(String query) {\n        log.info(\"query: {}\",query );\n        String text =  chatClient.prompt(query).call().content();\n        log.info(\"text: {}\",text );\n        return text;\n    }\n\n    @GetMapping(\"/chat\")\n    public String chat(String message) {\n\n        return this.chatClient.prompt()\n                .user(message)\n                .call()\n                .content();\n    }\n\n\n    @GetMapping(\"/hello\")\n    public String hello(String message) {\n\n        return \"Hello \" + message;\n    }\n\n}\n\n~~~\n\nspring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建`chatClient`时添加两行代码。\n\n~~~java\nprivate ChatMemory chatMemory = new InMemoryChatMemory();                                            \n\npublic ChatController(ChatClient.Builder builder) {\n                                                   \n    this.chatClient = builder                                                                        \n            .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory, UUID.randomUUID().toString(), 10))\n            .build();                                                                                \n}\n\n~~~\n\nUUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。\n\n这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。\n\n\n\n这里有两个事项需要注意：\n\n1. Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。\n2. spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。\n\n~~~xml\n<repositories>\n  <repository>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n\n~~~\n\n\n\napplication.yml配置\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n~~~\n\n\n\n\n\n### 对话页面\n\n\n\n\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"js/marked.min.js\"></script>\n    <title></title>\n    <style>\n        body {\n\n            background-color: #f8f9fa;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n\n            margin: 50px auto;\n            width: 800px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        label {\n\n            display: block;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        input[type=\"text\"] {\n\n            width: 85%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        input[type=\"submit\"] {\n\n            background-color: #2ecc71;\n            color: #fff;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 3px;\n            cursor: pointer;\n            width: 10%;\n        }\n\n        .chat-box {\n\n            width: 100%;\n            height: 500px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n            overflow-y: scroll;\n        }\n\n        .message {\n\n            margin-bottom: 10px;\n            padding: 10px;\n            background-color: #f1f1f1;\n            border-radius: 3px;\n        }\n\n        .user-message {\n\n            background-color: #2ecc71;\n            color: #fff;\n        }\n\n        .bot-message {\n\n            background-color: #e6aa6b;\n            color: #fff;\n        }\n\n        .loader {\n\n            text-align: center;\n        }\n\n        .loader::after {\n\n            content: \"\";\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #ccc;\n            border-top-color: #2ecc71;\n            animation: spin 1s infinite linear;\n        }\n\n        @keyframes spin {\n\n            to {\n\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>AI 对话</h1>\n    <form id=\"form\" style=\"width: 47%;position: absolute;bottom: 150px;margin-left:15px\">\n        <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"输入你的问题\">\n        <input type=\"submit\" value=\"发送\">\n    </form>\n    <br>\n    <div id=\"loader\" class=\"loader\" style=\"display: none;\"></div>\n    <div id=\"chat-box\" class=\"chat-box\"></div>\n</div>\n\n<script>\n    var loader = document.getElementById(\"loader\");\n\n    document.getElementById(\"form\").addEventListener(\"submit\", function(event) {\n\n        event.preventDefault();\n\n        var messageInput = document.getElementById(\"message\");\n        var message = messageInput.value;\n        messageInput.value = \"\";\n\n        var chatBox = document.getElementById(\"chat-box\");\n\n        var userMessage = document.createElement(\"div\");\n        userMessage.className = \"message\";\n        userMessage.textContent = \"我: \" + message;\n        chatBox.appendChild(userMessage);\n        chatBox.scrollTop = chatBox.scrollHeight;\n\n        loader.style.display = \"block\";\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"http://localhost:8080/ai/v1/chat?message=\" + encodeURIComponent(message), true);\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState === 4) {\n\n                loader.style.display = \"none\";\n\n                if (xhr.status === 200) {\n\n                    var response = xhr.responseText;\n\n                    var botMessage = document.createElement(\"div\");\n                    botMessage.className = \"message bot-message\";\n\n                    var botMessageText = document.createElement(\"span\");\n                    botMessageText.className = \"message-text\";\n                    botMessage.appendChild(botMessageText);\n                    botMessageText.innerHTML = marked.marked(response);\n\n                    chatBox.appendChild(botMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else if (xhr.status === 400) {\n\n                    var error = JSON.parse(xhr.responseText);\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: \" + error.message;\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else {\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: Failed to connect to the backend service. Please make sure the backend service is running.\";\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                }\n            }\n        };\n\n        xhr.onloadstart = function() {\n\n            loader.style.display = \"block\";\n        };\n\n        xhr.onloadend = function() {\n\n            loader.style.display = \"none\";\n        };\n\n        xhr.send();\n    });\n</script>\n</body>\n</html>\n\n~~~\n\n注意：js 引入的 `marked.min.js`\n\n可以去 [GitHub](https://github.com/cundream/marked) 或联系我\n\n### 注册配置APi\n\n[阿里云百练文档地址](https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1)\n\n\n\n![image-20250419102848756](typora-user-images/image-20250419102848756.png)\n\n\n\n创建Key\n\n![image-20250419105704031](typora-user-images/image-20250419105704031.png)\n\n\n\n## 测试验证\n\n访问：http://localhost:8080/chat.html\n\n输入对话\n\n\n\n![image-20250419113622811](typora-user-images/image-20250419113622811.png)\n\n测试二：\n\nhttp://localhost:8080/ai/v1/simple/chat?query=你是谁\n\n![image-20250419112758947](typora-user-images/image-20250419112758947.png)\n\n\n\n## 需要了解的基本知识\n\n\n\n上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。\n\n- AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。\n- Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。\n- Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。\n- 模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。\n\n对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。\n\n\n\n\n\n# 总结\n\nSpring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。","date":"2025-06-04T10:13:19.150Z","updated":"2025-04-19T09:56:27.668Z","path":"categories/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.html","_id":"cmbhshry70007nffycp184m6m","title":"","comments":1,"layout":"page","content":"<h1 id=\"Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\"><a href=\"#Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\" class=\"headerlink\" title=\"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\"></a>Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>Spring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>开发工具:IntelliJ IDEA</p>\n<p>JDK17+, 可以使用idea自带</p>\n<p>阿里云百炼：<a href=\"https://bailian.console.aliyun.com/\">https://bailian.console.aliyun.com/</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"使用IDEA-创建demo\"><a href=\"#使用IDEA-创建demo\" class=\"headerlink\" title=\"使用IDEA 创建demo\"></a>使用IDEA 创建demo</h3><p><img src=\"/typora-user-images/image-20250419091747915.png\" alt=\"image-20250419091747915\"></p>\n<p>然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上</p>\n<p><img src=\"/typora-user-images/image-20250419092017527.png\" alt=\"image-20250419092017527\"></p>\n<h3 id=\"Pom依赖\"><a href=\"#Pom依赖\" class=\"headerlink\" title=\"Pom依赖\"></a>Pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建ChatController-java\"><a href=\"#新建ChatController-java\" class=\"headerlink\" title=\"新建ChatController.java\"></a><strong>新建ChatController.java</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = chatClientBuilder</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">                <span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>())</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">                .defaultOptions(</span><br><span class=\"line\">                        DashScopeChatOptions.builder()</span><br><span class=\"line\">                                .withTopP(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">                                .build()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/simple/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query: &#123;&#125;&quot;</span>,query );</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span>  chatClient.prompt(query).call().content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text: &#123;&#125;&quot;</span>,text );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.chatClient.prompt()</span><br><span class=\"line\">                .user(message)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>spring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建<code>chatClient</code>时添加两行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ChatMemory</span> <span class=\"variable\">chatMemory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();                                            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">                                                   </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder                                                                        </span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, UUID.randomUUID().toString(), <span class=\"number\">10</span>))</span><br><span class=\"line\">            .build();                                                                                </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>UUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。</p>\n<p>这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。</p>\n<p>这里有两个事项需要注意：</p>\n<ol>\n<li>Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。</li>\n<li>spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>application.yml配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"对话页面\"><a href=\"#对话页面\" class=\"headerlink\" title=\"对话页面\"></a>对话页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/marked.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f9fa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">85%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.chat-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow-y</span>: scroll;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.user-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.bot-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#e6aa6b</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">animation</span>: spin <span class=\"number\">1s</span> infinite linear;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"keyword\">@keyframes</span> spin &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>AI 对话<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 47%;position: absolute;bottom: 150px;margin-left:15px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入你的问题&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-box&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> loader = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loader&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;form&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;submit&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        event.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> messageInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> message = messageInput.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        messageInput.<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> chatBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;chat-box&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> userMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;我: &quot;</span> + message;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"title function_\">appendChild</span>(userMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:8080/ai/v1/chat?message=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(message), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> response = xhr.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessageText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">className</span> = <span class=\"string\">&quot;message-text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"title function_\">appendChild</span>(botMessageText);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">innerHTML</span> = marked.<span class=\"title function_\">marked</span>(response);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(botMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">400</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: &quot;</span> + error.<span class=\"property\">message</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: Failed to connect to the backend service. Please make sure the backend service is running.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：js 引入的 <code>marked.min.js</code></p>\n<p>可以去 <a href=\"https://github.com/cundream/marked\">GitHub</a> 或联系我</p>\n<h3 id=\"注册配置APi\"><a href=\"#注册配置APi\" class=\"headerlink\" title=\"注册配置APi\"></a>注册配置APi</h3><p><a href=\"https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1\">阿里云百练文档地址</a></p>\n<p><img src=\"/typora-user-images/image-20250419102848756.png\" alt=\"image-20250419102848756\"></p>\n<p>创建Key</p>\n<p><img src=\"/typora-user-images/image-20250419105704031.png\" alt=\"image-20250419105704031\"></p>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>访问：<a href=\"http://localhost:8080/chat.html\">http://localhost:8080/chat.html</a></p>\n<p>输入对话</p>\n<p><img src=\"/typora-user-images/image-20250419113622811.png\" alt=\"image-20250419113622811\"></p>\n<p>测试二：</p>\n<p><a href=\"http://localhost:8080/ai/v1/simple/chat?query=%E4%BD%A0%E6%98%AF%E8%B0%81\">http://localhost:8080/ai/v1/simple/chat?query=你是谁</a></p>\n<p><img src=\"/typora-user-images/image-20250419112758947.png\" alt=\"image-20250419112758947\"></p>\n<h2 id=\"需要了解的基本知识\"><a href=\"#需要了解的基本知识\" class=\"headerlink\" title=\"需要了解的基本知识\"></a>需要了解的基本知识</h2><p>上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。</p>\n<ul>\n<li>AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。</li>\n<li>Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。</li>\n<li>Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。</li>\n<li>模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。</li>\n</ul>\n<p>对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\"><a href=\"#Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\" class=\"headerlink\" title=\"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\"></a>Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>Spring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>开发工具:IntelliJ IDEA</p>\n<p>JDK17+, 可以使用idea自带</p>\n<p>阿里云百炼：<a href=\"https://bailian.console.aliyun.com/\">https://bailian.console.aliyun.com/</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"使用IDEA-创建demo\"><a href=\"#使用IDEA-创建demo\" class=\"headerlink\" title=\"使用IDEA 创建demo\"></a>使用IDEA 创建demo</h3><p><img src=\"/typora-user-images/image-20250419091747915.png\" alt=\"image-20250419091747915\"></p>\n<p>然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上</p>\n<p><img src=\"/typora-user-images/image-20250419092017527.png\" alt=\"image-20250419092017527\"></p>\n<h3 id=\"Pom依赖\"><a href=\"#Pom依赖\" class=\"headerlink\" title=\"Pom依赖\"></a>Pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建ChatController-java\"><a href=\"#新建ChatController-java\" class=\"headerlink\" title=\"新建ChatController.java\"></a><strong>新建ChatController.java</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = chatClientBuilder</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">                <span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>())</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">                .defaultOptions(</span><br><span class=\"line\">                        DashScopeChatOptions.builder()</span><br><span class=\"line\">                                .withTopP(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">                                .build()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/simple/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query: &#123;&#125;&quot;</span>,query );</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span>  chatClient.prompt(query).call().content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text: &#123;&#125;&quot;</span>,text );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.chatClient.prompt()</span><br><span class=\"line\">                .user(message)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>spring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建<code>chatClient</code>时添加两行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ChatMemory</span> <span class=\"variable\">chatMemory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();                                            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">                                                   </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder                                                                        </span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, UUID.randomUUID().toString(), <span class=\"number\">10</span>))</span><br><span class=\"line\">            .build();                                                                                </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>UUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。</p>\n<p>这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。</p>\n<p>这里有两个事项需要注意：</p>\n<ol>\n<li>Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。</li>\n<li>spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>application.yml配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"对话页面\"><a href=\"#对话页面\" class=\"headerlink\" title=\"对话页面\"></a>对话页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/marked.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f9fa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">85%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.chat-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow-y</span>: scroll;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.user-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.bot-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#e6aa6b</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">animation</span>: spin <span class=\"number\">1s</span> infinite linear;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"keyword\">@keyframes</span> spin &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>AI 对话<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 47%;position: absolute;bottom: 150px;margin-left:15px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入你的问题&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-box&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> loader = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loader&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;form&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;submit&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        event.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> messageInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> message = messageInput.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        messageInput.<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> chatBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;chat-box&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> userMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;我: &quot;</span> + message;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"title function_\">appendChild</span>(userMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:8080/ai/v1/chat?message=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(message), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> response = xhr.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessageText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">className</span> = <span class=\"string\">&quot;message-text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"title function_\">appendChild</span>(botMessageText);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">innerHTML</span> = marked.<span class=\"title function_\">marked</span>(response);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(botMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">400</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: &quot;</span> + error.<span class=\"property\">message</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: Failed to connect to the backend service. Please make sure the backend service is running.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：js 引入的 <code>marked.min.js</code></p>\n<p>可以去 <a href=\"https://github.com/cundream/marked\">GitHub</a> 或联系我</p>\n<h3 id=\"注册配置APi\"><a href=\"#注册配置APi\" class=\"headerlink\" title=\"注册配置APi\"></a>注册配置APi</h3><p><a href=\"https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1\">阿里云百练文档地址</a></p>\n<p><img src=\"/typora-user-images/image-20250419102848756.png\" alt=\"image-20250419102848756\"></p>\n<p>创建Key</p>\n<p><img src=\"/typora-user-images/image-20250419105704031.png\" alt=\"image-20250419105704031\"></p>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>访问：<a href=\"http://localhost:8080/chat.html\">http://localhost:8080/chat.html</a></p>\n<p>输入对话</p>\n<p><img src=\"/typora-user-images/image-20250419113622811.png\" alt=\"image-20250419113622811\"></p>\n<p>测试二：</p>\n<p><a href=\"http://localhost:8080/ai/v1/simple/chat?query=%E4%BD%A0%E6%98%AF%E8%B0%81\">http://localhost:8080/ai/v1/simple/chat?query=你是谁</a></p>\n<p><img src=\"/typora-user-images/image-20250419112758947.png\" alt=\"image-20250419112758947\"></p>\n<h2 id=\"需要了解的基本知识\"><a href=\"#需要了解的基本知识\" class=\"headerlink\" title=\"需要了解的基本知识\"></a>需要了解的基本知识</h2><p>上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。</p>\n<ul>\n<li>AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。</li>\n<li>Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。</li>\n<li>Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。</li>\n<li>模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。</li>\n</ul>\n<p>对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。</p>\n"},{"title":"categories","date":"2025-06-04T09:41:07.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n\n# Spring AI Agent 未来智能应用的发展趋势\n\n\n\n一、引言\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n二、Spring AI 概述\nSpring AI 是啥玩意儿\nSpring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。\n\n它能干啥，有啥好处\nSpring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。\n\n那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。\n\n三、Agent 的基本概念\nAgent 是啥\nAgent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。\n\n它有啥特点，能干些啥\nAgent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。\n\n具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。\n\n它在 AI 里有啥用\n在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。\n\n四、Spring AI 中的 Agent\n它的架构和设计是啥样的\n在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。\n\n它是怎么工作的\nAgent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。\n\n怎么实现它\n在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。\n\n五、Spring AI Agent 的应用场景\n1. 智能客服里的 Agent\n在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。\n\n自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。\n多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。\n情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。\n2. 机器人控制里的 Agent\n在机器人领域，Agent 能让机器人变得更聪明、更灵活。\n\n路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。\n物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。\n人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。\n3. 数据分析里的 Agent\n在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。\n\n数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。\n模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。\n实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。\n4. 智能家居里的 Agent\n在智能家居领域，Agent 能让我们的家变得更智能、更舒适。\n\n设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。\n安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。\n用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。\n5. 医疗健康里的 Agent\n在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。\n\n病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。\n患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。\n医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。\n6. 金融领域的 Agent\n在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。\n\n风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。\n交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。\n客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。\n7. 交通物流里的 Agent\n在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。\n\n交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。\n车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。\n物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。\n8. 教育领域的 Agent\n在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。\n\n个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。\n智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。\n学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。\n六、Spring AI Agent 的发展趋势\n随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：\n\n学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。\n自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。\n交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。\n安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。\n七、结语\nSpring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。\n\n虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。\n\n\n\n# RAG  \n\n一、RAG是什么\n1.1 RAG的定义\nRAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。\n\n1.2 RAG的发展历程\nRAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。\n\n1.3 RAG与其他技术的关系\nRAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。\n\n二、RAG的应用场景\n2.1 智能问答系统\n2.1.1 提高问答准确性\n在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。\n\n2.1.2 处理复杂问题\n面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。\n\n2.2 文本生成任务\n2.2.1 辅助创作内容\n在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。\n\n2.2.2 生成多样化文本\nRAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。\n\n2.3 信息检索增强\n2.3.1 提升检索效率\n传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。\n\n2.3.2 深入挖掘信息\nRAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。\n\n四、RAG的优势与挑战\n4.1 RAG的优势\n4.1.1 提高模型性能\nRAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。\n\n4.1.2 增强可解释性\n由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。\n\n4.1.3 适应多种任务\nRAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。\n\n4.2 RAG的挑战\n4.2.1 数据质量与规模要求\nRAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。\n\nRAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。\n\n4.2.2 检索与生成的协调\n在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。\n\n检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。\n\n五、结语\n展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。\n","source":"categories/Spring AI Agent未来智能应用的发展趋势.md","raw":"---\ntitle: categories\ndate: 2025-06-04 17:41:07\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n\n# Spring AI Agent 未来智能应用的发展趋势\n\n\n\n一、引言\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n二、Spring AI 概述\nSpring AI 是啥玩意儿\nSpring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。\n\n它能干啥，有啥好处\nSpring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。\n\n那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。\n\n三、Agent 的基本概念\nAgent 是啥\nAgent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。\n\n它有啥特点，能干些啥\nAgent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。\n\n具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。\n\n它在 AI 里有啥用\n在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。\n\n四、Spring AI 中的 Agent\n它的架构和设计是啥样的\n在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。\n\n它是怎么工作的\nAgent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。\n\n怎么实现它\n在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。\n\n五、Spring AI Agent 的应用场景\n1. 智能客服里的 Agent\n在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。\n\n自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。\n多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。\n情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。\n2. 机器人控制里的 Agent\n在机器人领域，Agent 能让机器人变得更聪明、更灵活。\n\n路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。\n物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。\n人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。\n3. 数据分析里的 Agent\n在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。\n\n数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。\n模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。\n实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。\n4. 智能家居里的 Agent\n在智能家居领域，Agent 能让我们的家变得更智能、更舒适。\n\n设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。\n安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。\n用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。\n5. 医疗健康里的 Agent\n在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。\n\n病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。\n患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。\n医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。\n6. 金融领域的 Agent\n在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。\n\n风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。\n交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。\n客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。\n7. 交通物流里的 Agent\n在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。\n\n交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。\n车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。\n物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。\n8. 教育领域的 Agent\n在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。\n\n个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。\n智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。\n学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。\n六、Spring AI Agent 的发展趋势\n随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：\n\n学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。\n自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。\n交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。\n安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。\n七、结语\nSpring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。\n\n虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。\n\n\n\n# RAG  \n\n一、RAG是什么\n1.1 RAG的定义\nRAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。\n\n1.2 RAG的发展历程\nRAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。\n\n1.3 RAG与其他技术的关系\nRAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。\n\n二、RAG的应用场景\n2.1 智能问答系统\n2.1.1 提高问答准确性\n在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。\n\n2.1.2 处理复杂问题\n面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。\n\n2.2 文本生成任务\n2.2.1 辅助创作内容\n在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。\n\n2.2.2 生成多样化文本\nRAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。\n\n2.3 信息检索增强\n2.3.1 提升检索效率\n传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。\n\n2.3.2 深入挖掘信息\nRAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。\n\n四、RAG的优势与挑战\n4.1 RAG的优势\n4.1.1 提高模型性能\nRAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。\n\n4.1.2 增强可解释性\n由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。\n\n4.1.3 适应多种任务\nRAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。\n\n4.2 RAG的挑战\n4.2.1 数据质量与规模要求\nRAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。\n\nRAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。\n\n4.2.2 检索与生成的协调\n在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。\n\n检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。\n\n五、结语\n展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。\n","updated":"2025-06-04T10:31:14.977Z","path":"categories/Spring AI Agent未来智能应用的发展趋势.html","_id":"cmbhshry80008nffycyn0bxzm","comments":1,"layout":"page","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h1 id=\"Spring-AI-Agent-未来智能应用的发展趋势\"><a href=\"#Spring-AI-Agent-未来智能应用的发展趋势\" class=\"headerlink\" title=\"Spring AI Agent 未来智能应用的发展趋势\"></a>Spring AI Agent 未来智能应用的发展趋势</h1><p>一、引言<br>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<p>二、Spring AI 概述<br>Spring AI 是啥玩意儿<br>Spring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。</p>\n<p>它能干啥，有啥好处<br>Spring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。</p>\n<p>那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。</p>\n<p>三、Agent 的基本概念<br>Agent 是啥<br>Agent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。</p>\n<p>它有啥特点，能干些啥<br>Agent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。</p>\n<p>具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。</p>\n<p>它在 AI 里有啥用<br>在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。</p>\n<p>四、Spring AI 中的 Agent<br>它的架构和设计是啥样的<br>在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。</p>\n<p>它是怎么工作的<br>Agent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。</p>\n<p>怎么实现它<br>在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。</p>\n<p>五、Spring AI Agent 的应用场景</p>\n<ol>\n<li>智能客服里的 Agent<br>在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。</li>\n</ol>\n<p>自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。<br>多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。<br>情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。<br>2. 机器人控制里的 Agent<br>在机器人领域，Agent 能让机器人变得更聪明、更灵活。</p>\n<p>路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。<br>物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。<br>人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。<br>3. 数据分析里的 Agent<br>在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。</p>\n<p>数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。<br>模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。<br>实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。<br>4. 智能家居里的 Agent<br>在智能家居领域，Agent 能让我们的家变得更智能、更舒适。</p>\n<p>设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。<br>安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。<br>用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。<br>5. 医疗健康里的 Agent<br>在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。</p>\n<p>病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。<br>患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。<br>医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。<br>6. 金融领域的 Agent<br>在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。</p>\n<p>风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。<br>交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。<br>客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。<br>7. 交通物流里的 Agent<br>在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。</p>\n<p>交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。<br>车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。<br>物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。<br>8. 教育领域的 Agent<br>在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。</p>\n<p>个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。<br>智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。<br>学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。<br>六、Spring AI Agent 的发展趋势<br>随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：</p>\n<p>学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。<br>自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。<br>交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。<br>安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。<br>七、结语<br>Spring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。</p>\n<p>虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。</p>\n<h1 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h1><p>一、RAG是什么<br>1.1 RAG的定义<br>RAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。</p>\n<p>1.2 RAG的发展历程<br>RAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。</p>\n<p>1.3 RAG与其他技术的关系<br>RAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。</p>\n<p>二、RAG的应用场景<br>2.1 智能问答系统<br>2.1.1 提高问答准确性<br>在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。</p>\n<p>2.1.2 处理复杂问题<br>面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。</p>\n<p>2.2 文本生成任务<br>2.2.1 辅助创作内容<br>在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。</p>\n<p>2.2.2 生成多样化文本<br>RAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。</p>\n<p>2.3 信息检索增强<br>2.3.1 提升检索效率<br>传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。</p>\n<p>2.3.2 深入挖掘信息<br>RAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。</p>\n<p>四、RAG的优势与挑战<br>4.1 RAG的优势<br>4.1.1 提高模型性能<br>RAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。</p>\n<p>4.1.2 增强可解释性<br>由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。</p>\n<p>4.1.3 适应多种任务<br>RAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。</p>\n<p>4.2 RAG的挑战<br>4.2.1 数据质量与规模要求<br>RAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。</p>\n<p>RAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。</p>\n<p>4.2.2 检索与生成的协调<br>在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。</p>\n<p>检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。</p>\n<p>五、结语<br>展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。</p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h1 id=\"Spring-AI-Agent-未来智能应用的发展趋势\"><a href=\"#Spring-AI-Agent-未来智能应用的发展趋势\" class=\"headerlink\" title=\"Spring AI Agent 未来智能应用的发展趋势\"></a>Spring AI Agent 未来智能应用的发展趋势</h1><p>一、引言<br>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<p>二、Spring AI 概述<br>Spring AI 是啥玩意儿<br>Spring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。</p>\n<p>它能干啥，有啥好处<br>Spring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。</p>\n<p>那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。</p>\n<p>三、Agent 的基本概念<br>Agent 是啥<br>Agent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。</p>\n<p>它有啥特点，能干些啥<br>Agent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。</p>\n<p>具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。</p>\n<p>它在 AI 里有啥用<br>在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。</p>\n<p>四、Spring AI 中的 Agent<br>它的架构和设计是啥样的<br>在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。</p>\n<p>它是怎么工作的<br>Agent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。</p>\n<p>怎么实现它<br>在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。</p>\n<p>五、Spring AI Agent 的应用场景</p>\n<ol>\n<li>智能客服里的 Agent<br>在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。</li>\n</ol>\n<p>自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。<br>多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。<br>情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。<br>2. 机器人控制里的 Agent<br>在机器人领域，Agent 能让机器人变得更聪明、更灵活。</p>\n<p>路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。<br>物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。<br>人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。<br>3. 数据分析里的 Agent<br>在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。</p>\n<p>数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。<br>模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。<br>实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。<br>4. 智能家居里的 Agent<br>在智能家居领域，Agent 能让我们的家变得更智能、更舒适。</p>\n<p>设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。<br>安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。<br>用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。<br>5. 医疗健康里的 Agent<br>在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。</p>\n<p>病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。<br>患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。<br>医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。<br>6. 金融领域的 Agent<br>在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。</p>\n<p>风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。<br>交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。<br>客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。<br>7. 交通物流里的 Agent<br>在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。</p>\n<p>交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。<br>车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。<br>物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。<br>8. 教育领域的 Agent<br>在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。</p>\n<p>个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。<br>智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。<br>学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。<br>六、Spring AI Agent 的发展趋势<br>随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：</p>\n<p>学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。<br>自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。<br>交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。<br>安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。<br>七、结语<br>Spring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。</p>\n<p>虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。</p>\n<h1 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h1><p>一、RAG是什么<br>1.1 RAG的定义<br>RAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。</p>\n<p>1.2 RAG的发展历程<br>RAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。</p>\n<p>1.3 RAG与其他技术的关系<br>RAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。</p>\n<p>二、RAG的应用场景<br>2.1 智能问答系统<br>2.1.1 提高问答准确性<br>在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。</p>\n<p>2.1.2 处理复杂问题<br>面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。</p>\n<p>2.2 文本生成任务<br>2.2.1 辅助创作内容<br>在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。</p>\n<p>2.2.2 生成多样化文本<br>RAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。</p>\n<p>2.3 信息检索增强<br>2.3.1 提升检索效率<br>传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。</p>\n<p>2.3.2 深入挖掘信息<br>RAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。</p>\n<p>四、RAG的优势与挑战<br>4.1 RAG的优势<br>4.1.1 提高模型性能<br>RAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。</p>\n<p>4.1.2 增强可解释性<br>由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。</p>\n<p>4.1.3 适应多种任务<br>RAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。</p>\n<p>4.2 RAG的挑战<br>4.2.1 数据质量与规模要求<br>RAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。</p>\n<p>RAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。</p>\n<p>4.2.2 检索与生成的协调<br>在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。</p>\n<p>检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。</p>\n<p>五、结语<br>展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。</p>\n"},{"_content":"# Spring AI Alibaba-00-Spring Ai Alibaba介绍\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.12`\n\n\n\n[toc]\n\n\n\n## 简介\n\n[Spring AI](https://docs.spring.io/spring-ai/reference/index.html) 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。\n\n\n\n\n\n## 什么是 Spring AI Alibaba？\n\n\n\nSpring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。\n\n![img](typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png)\n\nSpring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。\n\n- 开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient\n- 提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等\n- 支持的模型类型包括聊天、文生图、音频转录、文生语音等\n- 支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）\n- 支持 Structured Output，即将 AI 模型输出映射到 POJOs\n- 支持矢量数据库存储与检索\n- 支持函数调用 Function Calling\n- 支持构建 AI Agent 所需要的工具调用和对话内存记忆能力\n- 支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索\n\n以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。\n\n\n\n## 核心概念\n\n### 模型（Model）\n\nAI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。\n\nAI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。\n\n\n\n![spring-ai-concepts-model-types](typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg)\n\nSpring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。\n\nGPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。\n\n\n\n### 提示（Prompt）\n\nPrompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。\n\nChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。\n\n撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。\n\n这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。\n\n分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。\n\n### 提示词模板（Prompt Template）\n\n创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。\n\n例如，考虑以下简单的 Prompt 模板：\n\n>Tell me a {adjective} joke about {content}.\n\n在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。\n\n传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。\n\n\n\n### 嵌入（Embedding）\n\n嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。\n\n通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。\n\n![spring-ai-embeddings](typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg)\n\n作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。\n\nEmbedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。\n\n您可以将这个语义空间视为一个向量。\n\n### Token\n\ntoken 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。\n\n在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。\n\n![spring-ai-concepts-tokens](typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png)\n\n\n\n也许更重要的是 “token = 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。\n\n此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。\n\n例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。\n\n要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。\n\n### 结构化输出（Structured Output）\n\n即使您要求回复为 JSON ，AI 模型的输出通常也会以 `java.lang.String` 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。\n\n这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。\n\n![结构化输出转换器架构](typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg)\n\n\n\n[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。\n\n\n\n### 将您的数据和 API 引入 AI 模型\n\n如何让人工智能模型与不在训练集中的数据一同工作？\n\n请注意，GPT 3.5/4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。\n\n有三种技术可以定制 AI 模型以整合您的数据：\n\n- `Fine Tuning` 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。\n- `Prompt Stuffing` 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为[检索增强生成 (RAG)]()实现解决方案。\n\n![prompt-stuffing](typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg)\n\n- Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。\n\n\n\n\n\n### 检索增强生成（RAG）\n\n一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。\n\n该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。\n\n在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：\n\n1. 将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。\n2. 将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。\n\nRAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。\n\n![Spring AI RAG](typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg)\n\n\n\n\n\n- [ETL 管道](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html) 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。\n- [ChatClient - RAG] 解释了如何使用`QuestionAnswerAdvisor` Advisor 在您的应用程序中启用 RAG 功能。\n\n### 函数调用（Function Calling）\n\n大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。\n\n[Function Calling](https://docs.spring.io/spring-ai/reference/api/functions.html)机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。\n\nSpring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，`@Bean`然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。\n\n![Spring AI Function Calling](typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg)\n\n- （1）执行聊天请求并发送函数定义信息。后者提供`name`（`description`例如，解释模型何时应调用该函数）和`input parameters`（例如，函数的输入参数模式）。\n- （2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。\n- （3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。\n- （4）模型可以执行多个函数调用来检索所需的所有信息。\n- （5）一旦获取了所有需要的信息，模型就会生成响应。\n\n请关注[函数调用](https://docs.spring.io/spring-ai/reference/api/functions.html)文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。\n\n### 评估人工智能的回答（Evaluation）\n\n有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。\n\nEvaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。\n\n一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。\n\n此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。","source":"categories/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","raw":"# Spring AI Alibaba-00-Spring Ai Alibaba介绍\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.12`\n\n\n\n[toc]\n\n\n\n## 简介\n\n[Spring AI](https://docs.spring.io/spring-ai/reference/index.html) 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。\n\n\n\n\n\n## 什么是 Spring AI Alibaba？\n\n\n\nSpring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。\n\n![img](typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png)\n\nSpring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。\n\n- 开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient\n- 提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等\n- 支持的模型类型包括聊天、文生图、音频转录、文生语音等\n- 支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）\n- 支持 Structured Output，即将 AI 模型输出映射到 POJOs\n- 支持矢量数据库存储与检索\n- 支持函数调用 Function Calling\n- 支持构建 AI Agent 所需要的工具调用和对话内存记忆能力\n- 支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索\n\n以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。\n\n\n\n## 核心概念\n\n### 模型（Model）\n\nAI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。\n\nAI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。\n\n\n\n![spring-ai-concepts-model-types](typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg)\n\nSpring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。\n\nGPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。\n\n\n\n### 提示（Prompt）\n\nPrompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。\n\nChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。\n\n撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。\n\n这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。\n\n分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。\n\n### 提示词模板（Prompt Template）\n\n创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。\n\n例如，考虑以下简单的 Prompt 模板：\n\n>Tell me a {adjective} joke about {content}.\n\n在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。\n\n传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。\n\n\n\n### 嵌入（Embedding）\n\n嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。\n\n通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。\n\n![spring-ai-embeddings](typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg)\n\n作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。\n\nEmbedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。\n\n您可以将这个语义空间视为一个向量。\n\n### Token\n\ntoken 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。\n\n在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。\n\n![spring-ai-concepts-tokens](typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png)\n\n\n\n也许更重要的是 “token = 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。\n\n此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。\n\n例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。\n\n要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。\n\n### 结构化输出（Structured Output）\n\n即使您要求回复为 JSON ，AI 模型的输出通常也会以 `java.lang.String` 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。\n\n这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。\n\n![结构化输出转换器架构](typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg)\n\n\n\n[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。\n\n\n\n### 将您的数据和 API 引入 AI 模型\n\n如何让人工智能模型与不在训练集中的数据一同工作？\n\n请注意，GPT 3.5/4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。\n\n有三种技术可以定制 AI 模型以整合您的数据：\n\n- `Fine Tuning` 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。\n- `Prompt Stuffing` 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为[检索增强生成 (RAG)]()实现解决方案。\n\n![prompt-stuffing](typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg)\n\n- Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。\n\n\n\n\n\n### 检索增强生成（RAG）\n\n一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。\n\n该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。\n\n在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：\n\n1. 将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。\n2. 将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。\n\nRAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。\n\n![Spring AI RAG](typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg)\n\n\n\n\n\n- [ETL 管道](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html) 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。\n- [ChatClient - RAG] 解释了如何使用`QuestionAnswerAdvisor` Advisor 在您的应用程序中启用 RAG 功能。\n\n### 函数调用（Function Calling）\n\n大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。\n\n[Function Calling](https://docs.spring.io/spring-ai/reference/api/functions.html)机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。\n\nSpring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，`@Bean`然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。\n\n![Spring AI Function Calling](typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg)\n\n- （1）执行聊天请求并发送函数定义信息。后者提供`name`（`description`例如，解释模型何时应调用该函数）和`input parameters`（例如，函数的输入参数模式）。\n- （2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。\n- （3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。\n- （4）模型可以执行多个函数调用来检索所需的所有信息。\n- （5）一旦获取了所有需要的信息，模型就会生成响应。\n\n请关注[函数调用](https://docs.spring.io/spring-ai/reference/api/functions.html)文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。\n\n### 评估人工智能的回答（Evaluation）\n\n有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。\n\nEvaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。\n\n一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。\n\n此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。","date":"2025-06-04T10:13:19.149Z","updated":"2025-04-19T09:56:16.496Z","path":"categories/Spring AI Alibaba-00-Spring Ai Alibaba介绍.html","_id":"cmbhshry90009nffy4z0c7zzy","title":"","comments":1,"layout":"page","content":"<h1 id=\"Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\"><a href=\"#Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\" class=\"headerlink\" title=\"Spring AI Alibaba-00-Spring Ai Alibaba介绍\"></a>Spring AI Alibaba-00-Spring Ai Alibaba介绍</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.12</code></p>\n<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://docs.spring.io/spring-ai/reference/index.html\">Spring AI</a> 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。</p>\n<h2 id=\"什么是-Spring-AI-Alibaba？\"><a href=\"#什么是-Spring-AI-Alibaba？\" class=\"headerlink\" title=\"什么是 Spring AI Alibaba？\"></a>什么是 Spring AI Alibaba？</h2><p>Spring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。</p>\n<p><img src=\"/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png\" alt=\"img\"></p>\n<p>Spring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。</p>\n<ul>\n<li>开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient</li>\n<li>提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等</li>\n<li>支持的模型类型包括聊天、文生图、音频转录、文生语音等</li>\n<li>支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）</li>\n<li>支持 Structured Output，即将 AI 模型输出映射到 POJOs</li>\n<li>支持矢量数据库存储与检索</li>\n<li>支持函数调用 Function Calling</li>\n<li>支持构建 AI Agent 所需要的工具调用和对话内存记忆能力</li>\n<li>支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索</li>\n</ul>\n<p>以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"模型（Model）\"><a href=\"#模型（Model）\" class=\"headerlink\" title=\"模型（Model）\"></a>模型（Model）</h3><p>AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。</p>\n<p>AI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。</p>\n<p><img src=\"/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg\" alt=\"spring-ai-concepts-model-types\"></p>\n<p>Spring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。</p>\n<p>GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。</p>\n<h3 id=\"提示（Prompt）\"><a href=\"#提示（Prompt）\" class=\"headerlink\" title=\"提示（Prompt）\"></a>提示（Prompt）</h3><p>Prompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。</p>\n<p>ChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。</p>\n<p>撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。</p>\n<p>这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。</p>\n<p>分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。</p>\n<h3 id=\"提示词模板（Prompt-Template）\"><a href=\"#提示词模板（Prompt-Template）\" class=\"headerlink\" title=\"提示词模板（Prompt Template）\"></a>提示词模板（Prompt Template）</h3><p>创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。</p>\n<p>例如，考虑以下简单的 Prompt 模板：</p>\n<blockquote>\n<p>Tell me a {adjective} joke about {content}.</p>\n</blockquote>\n<p>在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。</p>\n<p>传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。</p>\n<h3 id=\"嵌入（Embedding）\"><a href=\"#嵌入（Embedding）\" class=\"headerlink\" title=\"嵌入（Embedding）\"></a>嵌入（Embedding）</h3><p>嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。</p>\n<p>通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。</p>\n<p><img src=\"/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg\" alt=\"spring-ai-embeddings\"></p>\n<p>作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。</p>\n<p>Embedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。</p>\n<p>您可以将这个语义空间视为一个向量。</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>token 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。</p>\n<p>在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。</p>\n<p><img src=\"/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png\" alt=\"spring-ai-concepts-tokens\"></p>\n<p>也许更重要的是 “token &#x3D; 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。</p>\n<p>此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。</p>\n<p>例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。</p>\n<p>要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。</p>\n<h3 id=\"结构化输出（Structured-Output）\"><a href=\"#结构化输出（Structured-Output）\" class=\"headerlink\" title=\"结构化输出（Structured Output）\"></a>结构化输出（Structured Output）</h3><p>即使您要求回复为 JSON ，AI 模型的输出通常也会以 <code>java.lang.String</code> 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。</p>\n<p>这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。</p>\n<p><img src=\"/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg\" alt=\"结构化输出转换器架构\"></p>\n<p>[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。</p>\n<h3 id=\"将您的数据和-API-引入-AI-模型\"><a href=\"#将您的数据和-API-引入-AI-模型\" class=\"headerlink\" title=\"将您的数据和 API 引入 AI 模型\"></a>将您的数据和 API 引入 AI 模型</h3><p>如何让人工智能模型与不在训练集中的数据一同工作？</p>\n<p>请注意，GPT 3.5&#x2F;4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。</p>\n<p>有三种技术可以定制 AI 模型以整合您的数据：</p>\n<ul>\n<li><code>Fine Tuning</code> 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。</li>\n<li><code>Prompt Stuffing</code> 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为<a href=\"\">检索增强生成 (RAG)</a>实现解决方案。</li>\n</ul>\n<p><img src=\"/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg\" alt=\"prompt-stuffing\"></p>\n<ul>\n<li>Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。</li>\n</ul>\n<h3 id=\"检索增强生成（RAG）\"><a href=\"#检索增强生成（RAG）\" class=\"headerlink\" title=\"检索增强生成（RAG）\"></a>检索增强生成（RAG）</h3><p>一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。</p>\n<p>该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。</p>\n<p>在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：</p>\n<ol>\n<li>将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。</li>\n<li>将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。</li>\n</ol>\n<p>RAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。</p>\n<p><img src=\"/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg\" alt=\"Spring AI RAG\"></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html\">ETL 管道</a> 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。</li>\n<li>[ChatClient - RAG] 解释了如何使用<code>QuestionAnswerAdvisor</code> Advisor 在您的应用程序中启用 RAG 功能。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a>函数调用（Function Calling）</h3><p>大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。</p>\n<p><a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">Function Calling</a>机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。</p>\n<p>Spring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，<code>@Bean</code>然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。</p>\n<p><img src=\"/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg\" alt=\"Spring AI Function Calling\"></p>\n<ul>\n<li>（1）执行聊天请求并发送函数定义信息。后者提供<code>name</code>（<code>description</code>例如，解释模型何时应调用该函数）和<code>input parameters</code>（例如，函数的输入参数模式）。</li>\n<li>（2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。</li>\n<li>（3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。</li>\n<li>（4）模型可以执行多个函数调用来检索所需的所有信息。</li>\n<li>（5）一旦获取了所有需要的信息，模型就会生成响应。</li>\n</ul>\n<p>请关注<a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">函数调用</a>文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。</p>\n<h3 id=\"评估人工智能的回答（Evaluation）\"><a href=\"#评估人工智能的回答（Evaluation）\" class=\"headerlink\" title=\"评估人工智能的回答（Evaluation）\"></a>评估人工智能的回答（Evaluation）</h3><p>有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。</p>\n<p>Evaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。</p>\n<p>一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。</p>\n<p>此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\"><a href=\"#Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\" class=\"headerlink\" title=\"Spring AI Alibaba-00-Spring Ai Alibaba介绍\"></a>Spring AI Alibaba-00-Spring Ai Alibaba介绍</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.12</code></p>\n<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://docs.spring.io/spring-ai/reference/index.html\">Spring AI</a> 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。</p>\n<h2 id=\"什么是-Spring-AI-Alibaba？\"><a href=\"#什么是-Spring-AI-Alibaba？\" class=\"headerlink\" title=\"什么是 Spring AI Alibaba？\"></a>什么是 Spring AI Alibaba？</h2><p>Spring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。</p>\n<p><img src=\"/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png\" alt=\"img\"></p>\n<p>Spring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。</p>\n<ul>\n<li>开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient</li>\n<li>提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等</li>\n<li>支持的模型类型包括聊天、文生图、音频转录、文生语音等</li>\n<li>支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）</li>\n<li>支持 Structured Output，即将 AI 模型输出映射到 POJOs</li>\n<li>支持矢量数据库存储与检索</li>\n<li>支持函数调用 Function Calling</li>\n<li>支持构建 AI Agent 所需要的工具调用和对话内存记忆能力</li>\n<li>支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索</li>\n</ul>\n<p>以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"模型（Model）\"><a href=\"#模型（Model）\" class=\"headerlink\" title=\"模型（Model）\"></a>模型（Model）</h3><p>AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。</p>\n<p>AI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。</p>\n<p><img src=\"/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg\" alt=\"spring-ai-concepts-model-types\"></p>\n<p>Spring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。</p>\n<p>GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。</p>\n<h3 id=\"提示（Prompt）\"><a href=\"#提示（Prompt）\" class=\"headerlink\" title=\"提示（Prompt）\"></a>提示（Prompt）</h3><p>Prompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。</p>\n<p>ChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。</p>\n<p>撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。</p>\n<p>这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。</p>\n<p>分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。</p>\n<h3 id=\"提示词模板（Prompt-Template）\"><a href=\"#提示词模板（Prompt-Template）\" class=\"headerlink\" title=\"提示词模板（Prompt Template）\"></a>提示词模板（Prompt Template）</h3><p>创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。</p>\n<p>例如，考虑以下简单的 Prompt 模板：</p>\n<blockquote>\n<p>Tell me a {adjective} joke about {content}.</p>\n</blockquote>\n<p>在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。</p>\n<p>传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。</p>\n<h3 id=\"嵌入（Embedding）\"><a href=\"#嵌入（Embedding）\" class=\"headerlink\" title=\"嵌入（Embedding）\"></a>嵌入（Embedding）</h3><p>嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。</p>\n<p>通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。</p>\n<p><img src=\"/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg\" alt=\"spring-ai-embeddings\"></p>\n<p>作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。</p>\n<p>Embedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。</p>\n<p>您可以将这个语义空间视为一个向量。</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>token 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。</p>\n<p>在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。</p>\n<p><img src=\"/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png\" alt=\"spring-ai-concepts-tokens\"></p>\n<p>也许更重要的是 “token &#x3D; 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。</p>\n<p>此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。</p>\n<p>例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。</p>\n<p>要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。</p>\n<h3 id=\"结构化输出（Structured-Output）\"><a href=\"#结构化输出（Structured-Output）\" class=\"headerlink\" title=\"结构化输出（Structured Output）\"></a>结构化输出（Structured Output）</h3><p>即使您要求回复为 JSON ，AI 模型的输出通常也会以 <code>java.lang.String</code> 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。</p>\n<p>这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。</p>\n<p><img src=\"/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg\" alt=\"结构化输出转换器架构\"></p>\n<p>[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。</p>\n<h3 id=\"将您的数据和-API-引入-AI-模型\"><a href=\"#将您的数据和-API-引入-AI-模型\" class=\"headerlink\" title=\"将您的数据和 API 引入 AI 模型\"></a>将您的数据和 API 引入 AI 模型</h3><p>如何让人工智能模型与不在训练集中的数据一同工作？</p>\n<p>请注意，GPT 3.5&#x2F;4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。</p>\n<p>有三种技术可以定制 AI 模型以整合您的数据：</p>\n<ul>\n<li><code>Fine Tuning</code> 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。</li>\n<li><code>Prompt Stuffing</code> 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为<a href=\"\">检索增强生成 (RAG)</a>实现解决方案。</li>\n</ul>\n<p><img src=\"/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg\" alt=\"prompt-stuffing\"></p>\n<ul>\n<li>Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。</li>\n</ul>\n<h3 id=\"检索增强生成（RAG）\"><a href=\"#检索增强生成（RAG）\" class=\"headerlink\" title=\"检索增强生成（RAG）\"></a>检索增强生成（RAG）</h3><p>一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。</p>\n<p>该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。</p>\n<p>在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：</p>\n<ol>\n<li>将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。</li>\n<li>将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。</li>\n</ol>\n<p>RAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。</p>\n<p><img src=\"/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg\" alt=\"Spring AI RAG\"></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html\">ETL 管道</a> 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。</li>\n<li>[ChatClient - RAG] 解释了如何使用<code>QuestionAnswerAdvisor</code> Advisor 在您的应用程序中启用 RAG 功能。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a>函数调用（Function Calling）</h3><p>大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。</p>\n<p><a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">Function Calling</a>机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。</p>\n<p>Spring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，<code>@Bean</code>然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。</p>\n<p><img src=\"/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg\" alt=\"Spring AI Function Calling\"></p>\n<ul>\n<li>（1）执行聊天请求并发送函数定义信息。后者提供<code>name</code>（<code>description</code>例如，解释模型何时应调用该函数）和<code>input parameters</code>（例如，函数的输入参数模式）。</li>\n<li>（2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。</li>\n<li>（3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。</li>\n<li>（4）模型可以执行多个函数调用来检索所需的所有信息。</li>\n<li>（5）一旦获取了所有需要的信息，模型就会生成响应。</li>\n</ul>\n<p>请关注<a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">函数调用</a>文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。</p>\n<h3 id=\"评估人工智能的回答（Evaluation）\"><a href=\"#评估人工智能的回答（Evaluation）\" class=\"headerlink\" title=\"评估人工智能的回答（Evaluation）\"></a>评估人工智能的回答（Evaluation）</h3><p>有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。</p>\n<p>Evaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。</p>\n<p>一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。</p>\n<p>此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。</p>\n"},{"_content":"# Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。\n\n依赖：\n\n- **开发工具**：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）\n- **JDK**：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）\n- **阿里云百炼平台**：[阿里百炼平台](https://bailian.console.aliyun.com/)（提供强大的 AI 模型支持和训练服务）\n\n## 多轮对话\n\n\n\n**1、配置ChatMemory** \n\n```java\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    /**\n     * 创建一个基于内存的聊天模型\n     */\n    @Bean\n    public ChatMemory chatMemory() {\n        return new InMemoryChatMemory();\n    }\n}\n```\n\n**2、创建ChatMemoryController**\n\n这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦\n\n~~~java\n// 调用 chatClient.prompt() 方法开始构建聊天请求\nChatClient.CallResponseSpec response = chatClient.prompt()\n        // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n        .user(input)\n        // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n        .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n        // 调用 .call() 方法执行聊天请求并获取响应规格\n        .call();\n\n~~~\n\n\n\n全文：\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatMemoryController {\n    private final ChatClient chatClient;\n\n    // 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）\n    public ChatMemoryController(ChatModel chatModel, ChatMemory chatMemory) {\n        // 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor\n        this.chatClient = ChatClient.builder(chatModel)\n                .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory))\n                .build();\n    }\n\n    /**\n     * 多轮对话接口\n     * 每次调用时自动加载和更新该会话的历史记录。\n     */\n    @GetMapping(\"/multi/chat\")\n    public String chat(@RequestParam(value = \"userId\",defaultValue = \"10001\") String userId,\n                       @RequestParam(\"input\") String input) {\n        log.info(\"/multi/chat   input:  [{}]\", input);\n        // 调用 chatClient.prompt() 方法开始构建聊天请求\n        ChatClient.CallResponseSpec response = chatClient.prompt()\n                // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n                .user(input)\n                // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n                .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                        // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n                // 调用 .call() 方法执行聊天请求并获取响应规格\n                .call();\n        return response.content();\n    }\n}\n\n\n~~~\n\n\n\n\n\n通过以上代码，我们成功创建了一个对外接口：http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：\n\nuserId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。\ninput：用户输入的问题或消息。\n\n\n\n\n\n![image-20250419181524113](typora-user-images/image-20250419181524113.png)\n\n测试连续对话，继续问他们出生在什么地方\n\n![image-20250419181631076](typora-user-images/image-20250419181631076.png)\n\n\n\n**修改用户ID**\n\n修改用户ID 继续询问问题 lison002，看是否能够继续作答\n\n\n\n![image-20250419181745960](typora-user-images/image-20250419181745960.png)\n\n结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。\n\n\n\n\n\n## 对话持久-Redis\n\n\n\n**增加依赖**\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n    @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**编写核心控制器（ChatStorageMemoryController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatStorageMemoryController {\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private ChatMemory chatMemory;\n\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(value = \"/storage/chat\")\n    public String chat(@RequestParam String userId, @RequestParam String inputMsg) {\n\n        log.info(\"/redis/chat  userId: [{}],  input:  [{}]\", userId, inputMsg);\n\n        String text = chatClient.prompt()\n                .user(inputMsg)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory, userId, CHAT_HISTORY_SIZE))\n                .call()\n                .content();\n        log.info(\"text --> [{}]\", text);\n        return text;\n    }\n}\n\n~~~\n\n\n\n**application.yml**\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: xxxx\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n\n\n\n~~~\n\n\n\n**验证测试**\n\nhttp://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=中国近代3个名人\n\n**第一轮对话：**中国近代3个名人\n\n![image-20250422114322913](typora-user-images/image-20250422114322913.png)\n\n**第二轮对话：他们的出生地在哪**\n\n\n\n![image-20250422114422258](typora-user-images/image-20250422114422258.png)\n\n**第三轮对话：这些地方曾经出过哪些大的事件**\n\n![image-20250422114555482](typora-user-images/image-20250422114555482.png)\n\n\n\n **Redis 的存储**\n\n![image-20250422114642336](typora-user-images/image-20250422114642336.png)\n\n本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。","source":"categories/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","raw":"# Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。\n\n依赖：\n\n- **开发工具**：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）\n- **JDK**：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）\n- **阿里云百炼平台**：[阿里百炼平台](https://bailian.console.aliyun.com/)（提供强大的 AI 模型支持和训练服务）\n\n## 多轮对话\n\n\n\n**1、配置ChatMemory** \n\n```java\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    /**\n     * 创建一个基于内存的聊天模型\n     */\n    @Bean\n    public ChatMemory chatMemory() {\n        return new InMemoryChatMemory();\n    }\n}\n```\n\n**2、创建ChatMemoryController**\n\n这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦\n\n~~~java\n// 调用 chatClient.prompt() 方法开始构建聊天请求\nChatClient.CallResponseSpec response = chatClient.prompt()\n        // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n        .user(input)\n        // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n        .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n        // 调用 .call() 方法执行聊天请求并获取响应规格\n        .call();\n\n~~~\n\n\n\n全文：\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatMemoryController {\n    private final ChatClient chatClient;\n\n    // 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）\n    public ChatMemoryController(ChatModel chatModel, ChatMemory chatMemory) {\n        // 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor\n        this.chatClient = ChatClient.builder(chatModel)\n                .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory))\n                .build();\n    }\n\n    /**\n     * 多轮对话接口\n     * 每次调用时自动加载和更新该会话的历史记录。\n     */\n    @GetMapping(\"/multi/chat\")\n    public String chat(@RequestParam(value = \"userId\",defaultValue = \"10001\") String userId,\n                       @RequestParam(\"input\") String input) {\n        log.info(\"/multi/chat   input:  [{}]\", input);\n        // 调用 chatClient.prompt() 方法开始构建聊天请求\n        ChatClient.CallResponseSpec response = chatClient.prompt()\n                // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n                .user(input)\n                // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n                .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                        // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n                // 调用 .call() 方法执行聊天请求并获取响应规格\n                .call();\n        return response.content();\n    }\n}\n\n\n~~~\n\n\n\n\n\n通过以上代码，我们成功创建了一个对外接口：http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：\n\nuserId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。\ninput：用户输入的问题或消息。\n\n\n\n\n\n![image-20250419181524113](typora-user-images/image-20250419181524113.png)\n\n测试连续对话，继续问他们出生在什么地方\n\n![image-20250419181631076](typora-user-images/image-20250419181631076.png)\n\n\n\n**修改用户ID**\n\n修改用户ID 继续询问问题 lison002，看是否能够继续作答\n\n\n\n![image-20250419181745960](typora-user-images/image-20250419181745960.png)\n\n结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。\n\n\n\n\n\n## 对话持久-Redis\n\n\n\n**增加依赖**\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n    @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**编写核心控制器（ChatStorageMemoryController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatStorageMemoryController {\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private ChatMemory chatMemory;\n\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(value = \"/storage/chat\")\n    public String chat(@RequestParam String userId, @RequestParam String inputMsg) {\n\n        log.info(\"/redis/chat  userId: [{}],  input:  [{}]\", userId, inputMsg);\n\n        String text = chatClient.prompt()\n                .user(inputMsg)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory, userId, CHAT_HISTORY_SIZE))\n                .call()\n                .content();\n        log.info(\"text --> [{}]\", text);\n        return text;\n    }\n}\n\n~~~\n\n\n\n**application.yml**\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: xxxx\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n\n\n\n~~~\n\n\n\n**验证测试**\n\nhttp://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=中国近代3个名人\n\n**第一轮对话：**中国近代3个名人\n\n![image-20250422114322913](typora-user-images/image-20250422114322913.png)\n\n**第二轮对话：他们的出生地在哪**\n\n\n\n![image-20250422114422258](typora-user-images/image-20250422114422258.png)\n\n**第三轮对话：这些地方曾经出过哪些大的事件**\n\n![image-20250422114555482](typora-user-images/image-20250422114555482.png)\n\n\n\n **Redis 的存储**\n\n![image-20250422114642336](typora-user-images/image-20250422114642336.png)\n\n本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。","date":"2025-06-04T10:13:19.150Z","updated":"2025-04-29T10:41:32.331Z","path":"categories/Spring AI Alibaba-02-多轮对话、持久化消息记录.html","_id":"cmbhshrya000anffy4ss6czdc","title":"","comments":1,"layout":"page","content":"<h1 id=\"Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\"><a href=\"#Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\" class=\"headerlink\" title=\"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\"></a>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。</p>\n<p>依赖：</p>\n<ul>\n<li><strong>开发工具</strong>：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）</li>\n<li><strong>JDK</strong>：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）</li>\n<li><strong>阿里云百炼平台</strong>：<a href=\"https://bailian.console.aliyun.com/\">阿里百炼平台</a>（提供强大的 AI 模型支持和训练服务）</li>\n</ul>\n<h2 id=\"多轮对话\"><a href=\"#多轮对话\" class=\"headerlink\" title=\"多轮对话\"></a>多轮对话</h2><p><strong>1、配置ChatMemory</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个基于内存的聊天模型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、创建ChatMemoryController</strong></p>\n<p>这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">        .user(input)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">        .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">        .call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>全文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatMemoryController</span><span class=\"params\">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = ChatClient.builder(chatModel)</span><br><span class=\"line\">                .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多轮对话接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次调用时自动加载和更新该会话的历史记录。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/multi/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;userId&quot;,defaultValue = &quot;10001&quot;)</span> String userId,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;input&quot;)</span> String input)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/multi/chat   input:  [&#123;&#125;]&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">        ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">                .user(input)</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">                .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                        <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">                .call();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过以上代码，我们成功创建了一个对外接口：<a href=\"http://127.0.0.1:8080/ai/v1/multi/chat%E3%80%82%E8%AF%A5%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\">http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：</a></p>\n<p>userId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。<br>input：用户输入的问题或消息。</p>\n<p><img src=\"/typora-user-images/image-20250419181524113.png\" alt=\"image-20250419181524113\"></p>\n<p>测试连续对话，继续问他们出生在什么地方</p>\n<p><img src=\"/typora-user-images/image-20250419181631076.png\" alt=\"image-20250419181631076\"></p>\n<p><strong>修改用户ID</strong></p>\n<p>修改用户ID 继续询问问题 lison002，看是否能够继续作答</p>\n<p><img src=\"/typora-user-images/image-20250419181745960.png\" alt=\"image-20250419181745960\"></p>\n<p>结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。</p>\n<h2 id=\"对话持久-Redis\"><a href=\"#对话持久-Redis\" class=\"headerlink\" title=\"对话持久-Redis\"></a>对话持久-Redis</h2><p><strong>增加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>编写核心控制器（ChatStorageMemoryController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/storage/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/redis/chat  userId: [&#123;&#125;],  input:  [&#123;&#125;]&quot;</span>, userId, inputMsg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                .user(inputMsg)</span><br><span class=\"line\">                .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, userId, CHAT_HISTORY_SIZE))</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text --&gt; [&#123;&#125;]&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>验证测试</strong></p>\n<p><a href=\"http://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A33%E4%B8%AA%E5%90%8D%E4%BA%BA\">http://localhost:8080/ai/v1/storage/chat?userId=lison001&amp;inputMsg=中国近代3个名人</a></p>\n<p>**第一轮对话：**中国近代3个名人</p>\n<p><img src=\"/typora-user-images/image-20250422114322913.png\" alt=\"image-20250422114322913\"></p>\n<p><strong>第二轮对话：他们的出生地在哪</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114422258.png\" alt=\"image-20250422114422258\"></p>\n<p><strong>第三轮对话：这些地方曾经出过哪些大的事件</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114555482.png\" alt=\"image-20250422114555482\"></p>\n<p> <strong>Redis 的存储</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114642336.png\" alt=\"image-20250422114642336\"></p>\n<p>本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\"><a href=\"#Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\" class=\"headerlink\" title=\"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\"></a>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。</p>\n<p>依赖：</p>\n<ul>\n<li><strong>开发工具</strong>：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）</li>\n<li><strong>JDK</strong>：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）</li>\n<li><strong>阿里云百炼平台</strong>：<a href=\"https://bailian.console.aliyun.com/\">阿里百炼平台</a>（提供强大的 AI 模型支持和训练服务）</li>\n</ul>\n<h2 id=\"多轮对话\"><a href=\"#多轮对话\" class=\"headerlink\" title=\"多轮对话\"></a>多轮对话</h2><p><strong>1、配置ChatMemory</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个基于内存的聊天模型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、创建ChatMemoryController</strong></p>\n<p>这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">        .user(input)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">        .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">        .call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>全文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatMemoryController</span><span class=\"params\">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = ChatClient.builder(chatModel)</span><br><span class=\"line\">                .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多轮对话接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次调用时自动加载和更新该会话的历史记录。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/multi/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;userId&quot;,defaultValue = &quot;10001&quot;)</span> String userId,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;input&quot;)</span> String input)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/multi/chat   input:  [&#123;&#125;]&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">        ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">                .user(input)</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">                .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                        <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">                .call();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过以上代码，我们成功创建了一个对外接口：<a href=\"http://127.0.0.1:8080/ai/v1/multi/chat%E3%80%82%E8%AF%A5%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\">http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：</a></p>\n<p>userId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。<br>input：用户输入的问题或消息。</p>\n<p><img src=\"/typora-user-images/image-20250419181524113.png\" alt=\"image-20250419181524113\"></p>\n<p>测试连续对话，继续问他们出生在什么地方</p>\n<p><img src=\"/typora-user-images/image-20250419181631076.png\" alt=\"image-20250419181631076\"></p>\n<p><strong>修改用户ID</strong></p>\n<p>修改用户ID 继续询问问题 lison002，看是否能够继续作答</p>\n<p><img src=\"/typora-user-images/image-20250419181745960.png\" alt=\"image-20250419181745960\"></p>\n<p>结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。</p>\n<h2 id=\"对话持久-Redis\"><a href=\"#对话持久-Redis\" class=\"headerlink\" title=\"对话持久-Redis\"></a>对话持久-Redis</h2><p><strong>增加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>编写核心控制器（ChatStorageMemoryController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/storage/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/redis/chat  userId: [&#123;&#125;],  input:  [&#123;&#125;]&quot;</span>, userId, inputMsg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                .user(inputMsg)</span><br><span class=\"line\">                .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, userId, CHAT_HISTORY_SIZE))</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text --&gt; [&#123;&#125;]&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>验证测试</strong></p>\n<p><a href=\"http://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A33%E4%B8%AA%E5%90%8D%E4%BA%BA\">http://localhost:8080/ai/v1/storage/chat?userId=lison001&amp;inputMsg=中国近代3个名人</a></p>\n<p>**第一轮对话：**中国近代3个名人</p>\n<p><img src=\"/typora-user-images/image-20250422114322913.png\" alt=\"image-20250422114322913\"></p>\n<p><strong>第二轮对话：他们的出生地在哪</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114422258.png\" alt=\"image-20250422114422258\"></p>\n<p><strong>第三轮对话：这些地方曾经出过哪些大的事件</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114555482.png\" alt=\"image-20250422114555482\"></p>\n<p> <strong>Redis 的存储</strong></p>\n<p><img src=\"/typora-user-images/image-20250422114642336.png\" alt=\"image-20250422114642336\"></p>\n<p>本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。</p>\n"},{"_content":"# Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n\n\n\n在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。**Spring AI**，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，\n\n[toc]\n\n\n\n\n\n## Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\n\n### Spring AI 介绍\n\n#### Spring AI的版本演进\n\nSpring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：\n\n* 2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。\n* 2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。\n* 2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。\n* 2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。\n* 2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性\n\n\n\n#### Spring AI的主要功能\n\nSpring AI为开发者提供了多种AI功能的支持，包括：\n\n* 智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。\n* 文本生成：利用AI模型生成创意文本内容，例如文章、故事等。\n* 图像生成：通过文本提示生成图像，支持多种图像生成模型。\n* 音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。\n* 功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。\n\n### **函数调用（Function Calling）**\n\n#### 功能与作用\n\n在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。\n\n#### 实现方式\n\n在Spring AI中，函数调用的实现步骤如下：\n\n**1、定义函数**：开发者创建一个实现`Function`接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：\n\n~~~java\n@Component\npublic class WeatherFunction implements Function<WeatherFunction.WeatherRequest, String> {\n    @Override\n    public String apply(WeatherRequest request) {\n        return \"The weather in \" + request.getCity() + \" is sunny.\";\n    }\n    public static class WeatherRequest {\n        private String city;\n        public String getCity() { return city; }\n        public void setCity(String city) { this.city = city; }\n    }\n}\n\n~~~\n\n**2、注册函数**：将函数注册为Spring Bean，使其能被Spring AI识别和调用\n\n~~~java\n@Configuration\npublic class FunctionConfig {\n    @Bean\n    @Description(\"获取指定城市的天气信息\")\n    public Function<WeatherFunction.WeatherRequest, String> weatherFunction() {\n        return new WeatherFunction();\n    }\n}\n~~~\n\n**3、配置模型**：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withFunction(\"weatherFunction\").build())\n                .build();\n    }\n}\n~~~\n\n**4、模型调用函数**：模型在生成响应时，可以通过请求调用外部函数，得到结果：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        WeatherFunction.WeatherRequest request = new WeatherFunction.WeatherRequest();\n        request.setCity(input);\n        String response = chatClient.prompt().user(input).functions(\"weatherFunction\").call().content();\n        return response;\n    }\n}\n~~~\n\n**注意**：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用**工具调用**（Tool Calling）来实现类似功能。\n\n### **工具调用（Tool Calling）**\n\n#### **功能与作用**\n\n工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。\n\n#### 实现方式\n\n工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：\n\n**1、定义工具接口**：开发者定义一个接口，声明工具的方法：\n\n~~~java\npublic interface WeatherTool {\n    String getWeather(String city);\n}\n~~~\n\n**2、实现工具接口**：编写具体的工具实现类，处理工具的业务逻辑：\n\n~~~java\n@Component\npublic class WeatherToolImpl implements WeatherTool {\n    @Override\n    public String getWeather(String city) {\n        return \"The weather in \" + city + \" is sunny.\";\n    }\n}\n~~~\n\n**3、注册工具为Spring Bean**：将工具实现类注册为Spring Bean，以便Spring容器管理：\n\n~~~java\n@Configuration\npublic class ToolConfig {\n    @Bean\n    public WeatherTool weatherTool() {\n        return new WeatherToolImpl();\n    }\n}\n~~~\n\n**4、配置模型使用工具**：在Spring AI配置中，指定模型使用的工具：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withTool(\"weatherTool\").build())\n                .build();\n    }\n}\n\n~~~\n\n**5、模型调用工具**：模型在与用户交互时，通过工具调用获取所需的响应：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        String response = chatClient.prompt().user(input).tools(\"weatherTool\").call().content();\n        return response;\n    }\n}\n\n~~~\n\n### 智能体（Agent）\n\n#### 功能与作用\n\n智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。\n\n#### 实现方式\n\n智能体的实现涉及多个关键组件，主要包括：\n\n模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。\n智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。\n智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。\n注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。\n\n### 从函数调用（FunctionCallbac）到工具调用（ToolCallback）\n\n随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。\n\n**为什么从FunctionCallback迁移到ToolCallback**\n\nSpring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：\n\n* 功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。\n* 一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。\n* 未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。\n\n\n\n因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。\n\n\n\n## Spring AI + DeepSeek-R1 + ES/Milvus + RAG + Tool Calling：智能对话应用开发\n\n### 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n\n\n![image-20250425104935964](typora-user-images/image-20250425104935964-5549379.png)\n\n\n\n**Elasticsearch安装**\n\n\n\n~~~yaml\n# base 基础组件服务\nversion: '3.8'\nservices:\n\telasticsearch1:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4\n    hostname: \"elasticsearch1\"\n    environment:\n      - TZ=Asia/Shanghai\n      - \"ES_JAVA_OPTS=-Xms84m -Xmx512m\"\n    ports:\n      - 9200:9200\n      - 9300:9300\n    volumes:\n      - /Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data \n      - /Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins \n      - /Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config  \n      - /Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs  \n    privileged: true\n    #restart: always\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.7\n\n  vsftpd:\n    image: \"fauria/vsftpd\"\n    hostname: \"rabbitmq1\"\n    environment:\n      - FTP_USER=admin \n      - FTP_PASS=123456 \n      - PASV_MIN_PORT=21100\n      - PASV_MAX_PORT=21110 \n      - PASV_ADDRESS=172.18.0.8\n    ports:\n      - 21:21\n      - 21100-21110:21100-21110\n    volumes:\n      - /Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd\n      - /Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd\n    privileged: true\n    #restart: always\n    networks:\n      - nt_dev\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n![image-20250425174252871](typora-user-images/image-20250425174252871.png)\n\n### 功能介绍\n\n1. 集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。\n2. 集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。\n3. 基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。\n4. 通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。\n5. Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：\n   * 场景 1：通过 RAG 找到医生后，进行挂号\n   * 场景 2：挂号当日请假\n   * 场景 3：挂号当日在医院附近找饭店\n\n\n\n通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 \n\n\n\n## 代码实现\n\n**Maven 核心依赖**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>3.4.3</spring-boot.version>\n        <spring-ai.version>1.0.0-M6</spring-ai.version>\n        <alibaba.ai.version>1.0.0-M6.1</alibaba.ai.version>\n        <spring.ai.ollama.version>1.0.0-M6</spring.ai.ollama.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>${alibaba.ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-elasticsearch-store-spring-boot-starter</artifactId>\n            <version>${spring-ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n            <version>${spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>spring-snapshots</id>\n            <name>Spring Snapshots</name>\n            <url>https://repo.spring.io/snapshot</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.36</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n~~~\n\n上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。\n\n**核心配置 （`application.yml`）**\n\n这里一定要注意的是文本推理模型 `model: deepseek-r1`, 嵌入模型`model: text-embedding-v2`用来生成文本的向量数据\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      elasticsearch:\n        initialize-schema: true\n        index-name: spring-ai-tag\n        # 这里一定要注意，维度是默认1536，需要和向量模型的维度一致\n        dimensions: 1536\n        similarity: cosine\n        batching-strategy: TOKEN_COUNT\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n       @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                // 设置系统的默认行为和风格\n                .defaultSystem(\"你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。\")\n                // 注册向量检索顾问，用于从向量存储中检索相关信息\n                .defaultAdvisors(\n                        new QuestionAnswerAdvisor(\n                                vectorStore,\n                                SearchRequest.builder()\n                                        .similarityThreshold(0.1) // 设置相似度阈值\n                                        .topK(10) // 设置返回最多 10 条相关结果\n                                        .build()\n                        )\n                )\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n\n\n**编写核心控制器（DeepseekChatController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.rag.Query;\nimport org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;\nimport org.springframework.ai.reader.TextReader;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @ClassName DeepseekChatController  //类名称\n * @Description:\n * @Author: 200900681 李村\n * @CreateDate: 2025/4/25\n * @Version: 1.0    //版本号\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class DeepseekChatController {\n\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private VectorStore vectorStore;\n    @Autowired\n    private ChatMemory chatMemory;\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(\"/data/load\")\n    public String loadData() throws IOException {\n        // 1. 读取文件\n        DocumentReader reader = new TextReader(\"static/hospitalInfo.txt\");\n        List<Document> documents = reader.get();\n\n        // 2.切分文件：根据空白行进行分割\n        List<Document> splitDocuments =  new ArrayList<>();\n        for (Document document : documents) {\n            // 获取文档内容\n            String content = document.getText();\n            // 使用正则表达式按空白行分割\n            String[] parts = content.split(\"\\\\n\\\\s*\\\\n\");\n            // 将分割后的部分封装为新的 Document 对象\n            for (String part : parts) {\n                splitDocuments.add(new Document(part.trim()));\n            }\n        }\n\n        log.info(\"文件切分为 [{}]\", splitDocuments.size());\n\n        // 3.写入数据\n        vectorStore.add(splitDocuments);\n\n        return \"success\";\n    }\n\n    @GetMapping(\"/select\")\n    public String search(@RequestParam(\"query\") String query) {\n        log.info(\"query is  [{}]\", query);\n        List<Document> results = vectorStore.similaritySearch(\n//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n\n        );\n        log.info(\"results is [{}]\", results);\n        return results.toString();\n    }\n\n    /**\n     * 查询重写\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/rewrite/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByRewrite(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1、构建查询重写转换器\n        QueryTransformer queryTransformer = RewriteQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n        // 2、执行查询重写\n        Query queryByTransform = queryTransformer.transform(new Query(inputMsg));\n        // 3、输出重写后的查询文案\n        return queryByTransform.text();\n    }\n\n\n    /**\n     * 上下文感知查询\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/history/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByHistory(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1. 获取历史消息\n        List<Message> history = chatMemory.get(userId, CHAT_HISTORY_SIZE);\n        // 2. 构建查询对象\n        Query query = Query.builder()\n                .text(inputMsg)\n                .history(history)\n                .build();\n\n        // 3. 创建 CompressionQueryTransformer\n        CompressionQueryTransformer queryTransformerByHis = CompressionQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n\n        // 4、执行历史信息后查询\n        Query queryByHistory = queryTransformerByHis.transform(query);\n\n        // 5、输出重写后的查询文案\n        return queryByHistory.text();\n    }\n    \n}\n\n~~~\n\n\n\n\n\n\n\n\n\n**数据准备**\n\n我让kimi帮我生成了一个医院的介绍，包含\n\n- 医院`小智口腔医院`的介绍，\n- 3个科室的介绍，分别是 `口腔修复科`,`口腔正畸科`,`儿童口腔科`\n- 每个科室也有对应的20位医生信息\n\n~~~\n1. 医院介绍\n小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。\n2. 科室介绍\n(1)口腔修复科:\n口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信\n(2)口腔正畸科:\n是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。\n(3)儿童口腔科:\n儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。\n\n3. 医生介绍\n(1) 李明轩\n性别 ：男\n出生年月 ：1985年3月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。\n介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(2) 王晓彤\n性别 ：女\n出生年月 ：1990年7月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(3) 张伟杰\n性别 ：男\n出生年月 ：1982年11月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。\n介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(4) 陈静怡\n性别 ：女\n出生年月 ：1988年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(5) 刘志远\n性别 ：男\n出生年月 ：1980年9月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。\n介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(6) 孙悦宁\n性别 ：女\n出生年月 ：1993年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。\n介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(7) 赵天宇\n性别 ：男\n出生年月 ：1987年5月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(8) 林晓慧\n性别 ：女\n出生年月 ：1991年8月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(9) 黄志强\n性别 ：男\n出生年月 ：1979年12月\n医生职称 ：主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。\n介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务\n\n(10) 高雅婷\n性别 ：女\n出生年月 ：1986年2月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。\n\n(11) 王浩然\n性别 ：男\n出生年月 ：1983年7月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。\n介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(12) 李佳琪\n性别 ：女\n出生年月 ：1992年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。\n介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(13) 周文博\n性别 ：男\n出生年月 ：1981年10月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。\n介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(14) 张馨月\n性别 ：女\n出生年月 ：1989年6月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(15) 王志鹏\n性别 ：男\n出生年月 ：1984年11月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(16) 赵雪梅\n性别 ：女\n出生年月 ：1990年3月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(17) 陈子豪\n性别 ：男\n出生年月 ：1988年9月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。\n介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(18) 李梦瑶\n性别 ：女\n出生年月 ：1994年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(19) 黄晓峰\n性别 ：男\n出生年月 ：1985年8月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(20) 刘欣怡\n性别 ：女\n出生年月 ：1991年5月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n~~~\n\n\n\n\n\n## 测试验证\n\n\n\n~~~\n数据写入的接口\nhttp://127.0.0.1:8080/ai/v1/data/load\n获取数据向量的接口\nhttp://127.0.0.1:8080/ai/v1/select\n连读对话的接口\nhttp://127.0.0.1:8080/ai/v1/rag/chat\n~~~\n\n\n\n**数据写入**\n\n>数据写入的接口\n>http://127.0.0.1:8080/ai/v1/data/load\n\n\n\n![image-20250429172724826](typora-user-images/image-20250429172724826.png)\n\n![image-20250429180401580](typora-user-images/image-20250429180401580.png)\n\n>获取数据向量的接口\n>http://127.0.0.1:8080/ai/v1/select?query=医院介绍\n\n![image-20250429174959408](typora-user-images/image-20250429174959408.png)\n\n可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek\n\n接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题\n\n>- 请介绍一下医院\n>- 请介绍一下医院都有哪些科室\n>- 医院有哪些主任医师\n>- 张馨月医生怎么样\n>- 我刚才都问了哪些问题\n\n\n\n![image-20250429174851066](typora-user-images/image-20250429174851066.png)\n\n\n\n\n\n![image-20250429175228086](typora-user-images/image-20250429175228086.png)\n\n\n\n![image-20250429175342611](typora-user-images/image-20250429175342611.png)\n\n\n\n![image-20250429175421998](typora-user-images/image-20250429175421998.png)\n\n\n\n\n\n![image-20250429175540574](typora-user-images/image-20250429175540574.png)\n\n\n\n\n\n## 附：向量数据库milvus 存储数据\n\n\n\n### Milvus安装\n\n**Docker-compose 配置**\n\n~~~yaml\n# 配置 etcd 服务\n  etcd:\n    container_name: milvus-etcd  # 容器名称\n    image: quay.io/coreos/etcd:v3.5.16  # 使用的镜像\n    environment:\n      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式\n      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留的修订版本数\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储限制\n      - ETCD_SNAPSHOT_COUNT=50000  # 快照计数\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据卷挂载\n    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir /etcd  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"etcdctl\", \"endpoint\", \"health\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n\n  # 配置 MinIO 服务\n  minio:\n    container_name: milvus-minio  # 容器名称\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用的镜像\n    environment:\n      MINIO_ACCESS_KEY: minioadmin  # MinIO 访问密钥\n      MINIO_SECRET_KEY: minioadmin  # MinIO 密钥\n    ports:\n      - \"9001:9001\"  # 控制台端口映射\n      - \"9000:9000\"  # 服务端口映射\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # 数据卷挂载\n    command: minio server /minio_data --console-address \":9001\"  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.8   \n\n  # 配置 Milvus 服务\n  standalone:\n    container_name: milvus-standalone  # 容器名称\n    image: milvusdb/milvus:v2.5.4  # 使用的镜像\n    command: [\"milvus\", \"run\", \"standalone\"]  # 启动命令\n    security_opt:\n    - seccomp:unconfined  # 安全选项\n    environment:\n      ETCD_ENDPOINTS: etcd:2379  # etcd 服务地址\n      MINIO_ADDRESS: minio:9000  # MinIO 服务地址\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # 数据卷挂载\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      start_period: 90s  # 启动等待时间\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    ports:\n      - \"19530:19530\"  # 服务端口映射\n      - \"9091:9091\"  # 管理端口映射\n    depends_on:\n      - \"etcd\"  # 依赖 etcd 服务\n      - \"minio\"  # 依赖 MinIO 服务\n\n  # 配置 Milvus Dashboard 服务\n  dashboard:\n    image: zilliz/attu:v2.5  # 使用的镜像\n    container_name: milvus-dashboard  # 容器名称\n    environment:\n      MILVUS_URL: http://standalone:19530  # Milvus 服务地址\n    ports:\n      - \"8000:3000\"  # 端口映射\n    depends_on:\n      - standalone  # 依赖 Milvus 服务\n      - etcd  # 依赖 etcd 服务\n      - minio  # 依赖 MinIO 服务\n\n# 定义网络配置\nnetworks:\n  nt_dev:\n      external: true\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n**查看客户端，** 输入地址 `http://localhost:8000/`\n进入如下界面：此时什么都不要填写，直接点【连接】按钮\n\n\n\n![image-20250429181131778](typora-user-images/image-20250429181131778.png)\n\n进入系统后\n\n![image-20250429181039571](typora-user-images/image-20250429181039571.png)\n\n\n\n创建用户：用户名：``milvus`, 密码： `milvus-4321` (这里要和我们spring工程里的配置一致)，角色我们选 `admin`, \n\n\n\n\n\n![image-20250429181312813](typora-user-images/image-20250429181312813.png)\n\n\n\n\n\n修改依赖：\n\n~~~xml\n  <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-milvus-store-spring-boot-starter</artifactId>\n </dependency>\n~~~\n\n\n\n\n\n修改配置\n\n\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  elasticsearch:\n    uris: http://127.0.0.1:9200\n    username:\n    password:\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      milvus:\n        client:\n          host: \"localhost\"\n          port: 19530\n          username: \"milvus\"\n          password: \"milvus-4321\"\n        databaseName: \"default\"\n        collectionName: \"vector_store\"\n        embeddingDimension: 1536\n        indexType: IVF_FLAT\n        metricType: COSINE\n        initialize-schema: true\n\n\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。\n\n\n\n使用加载接口\n\n![image-20250429183142516](typora-user-images/image-20250429183142516.png)\n","source":"categories/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","raw":"# Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n\n\n\n在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。**Spring AI**，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，\n\n[toc]\n\n\n\n\n\n## Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\n\n### Spring AI 介绍\n\n#### Spring AI的版本演进\n\nSpring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：\n\n* 2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。\n* 2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。\n* 2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。\n* 2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。\n* 2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性\n\n\n\n#### Spring AI的主要功能\n\nSpring AI为开发者提供了多种AI功能的支持，包括：\n\n* 智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。\n* 文本生成：利用AI模型生成创意文本内容，例如文章、故事等。\n* 图像生成：通过文本提示生成图像，支持多种图像生成模型。\n* 音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。\n* 功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。\n\n### **函数调用（Function Calling）**\n\n#### 功能与作用\n\n在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。\n\n#### 实现方式\n\n在Spring AI中，函数调用的实现步骤如下：\n\n**1、定义函数**：开发者创建一个实现`Function`接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：\n\n~~~java\n@Component\npublic class WeatherFunction implements Function<WeatherFunction.WeatherRequest, String> {\n    @Override\n    public String apply(WeatherRequest request) {\n        return \"The weather in \" + request.getCity() + \" is sunny.\";\n    }\n    public static class WeatherRequest {\n        private String city;\n        public String getCity() { return city; }\n        public void setCity(String city) { this.city = city; }\n    }\n}\n\n~~~\n\n**2、注册函数**：将函数注册为Spring Bean，使其能被Spring AI识别和调用\n\n~~~java\n@Configuration\npublic class FunctionConfig {\n    @Bean\n    @Description(\"获取指定城市的天气信息\")\n    public Function<WeatherFunction.WeatherRequest, String> weatherFunction() {\n        return new WeatherFunction();\n    }\n}\n~~~\n\n**3、配置模型**：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withFunction(\"weatherFunction\").build())\n                .build();\n    }\n}\n~~~\n\n**4、模型调用函数**：模型在生成响应时，可以通过请求调用外部函数，得到结果：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        WeatherFunction.WeatherRequest request = new WeatherFunction.WeatherRequest();\n        request.setCity(input);\n        String response = chatClient.prompt().user(input).functions(\"weatherFunction\").call().content();\n        return response;\n    }\n}\n~~~\n\n**注意**：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用**工具调用**（Tool Calling）来实现类似功能。\n\n### **工具调用（Tool Calling）**\n\n#### **功能与作用**\n\n工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。\n\n#### 实现方式\n\n工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：\n\n**1、定义工具接口**：开发者定义一个接口，声明工具的方法：\n\n~~~java\npublic interface WeatherTool {\n    String getWeather(String city);\n}\n~~~\n\n**2、实现工具接口**：编写具体的工具实现类，处理工具的业务逻辑：\n\n~~~java\n@Component\npublic class WeatherToolImpl implements WeatherTool {\n    @Override\n    public String getWeather(String city) {\n        return \"The weather in \" + city + \" is sunny.\";\n    }\n}\n~~~\n\n**3、注册工具为Spring Bean**：将工具实现类注册为Spring Bean，以便Spring容器管理：\n\n~~~java\n@Configuration\npublic class ToolConfig {\n    @Bean\n    public WeatherTool weatherTool() {\n        return new WeatherToolImpl();\n    }\n}\n~~~\n\n**4、配置模型使用工具**：在Spring AI配置中，指定模型使用的工具：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withTool(\"weatherTool\").build())\n                .build();\n    }\n}\n\n~~~\n\n**5、模型调用工具**：模型在与用户交互时，通过工具调用获取所需的响应：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        String response = chatClient.prompt().user(input).tools(\"weatherTool\").call().content();\n        return response;\n    }\n}\n\n~~~\n\n### 智能体（Agent）\n\n#### 功能与作用\n\n智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。\n\n#### 实现方式\n\n智能体的实现涉及多个关键组件，主要包括：\n\n模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。\n智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。\n智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。\n注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。\n\n### 从函数调用（FunctionCallbac）到工具调用（ToolCallback）\n\n随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。\n\n**为什么从FunctionCallback迁移到ToolCallback**\n\nSpring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：\n\n* 功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。\n* 一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。\n* 未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。\n\n\n\n因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。\n\n\n\n## Spring AI + DeepSeek-R1 + ES/Milvus + RAG + Tool Calling：智能对话应用开发\n\n### 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n\n\n![image-20250425104935964](typora-user-images/image-20250425104935964-5549379.png)\n\n\n\n**Elasticsearch安装**\n\n\n\n~~~yaml\n# base 基础组件服务\nversion: '3.8'\nservices:\n\telasticsearch1:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4\n    hostname: \"elasticsearch1\"\n    environment:\n      - TZ=Asia/Shanghai\n      - \"ES_JAVA_OPTS=-Xms84m -Xmx512m\"\n    ports:\n      - 9200:9200\n      - 9300:9300\n    volumes:\n      - /Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data \n      - /Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins \n      - /Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config  \n      - /Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs  \n    privileged: true\n    #restart: always\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.7\n\n  vsftpd:\n    image: \"fauria/vsftpd\"\n    hostname: \"rabbitmq1\"\n    environment:\n      - FTP_USER=admin \n      - FTP_PASS=123456 \n      - PASV_MIN_PORT=21100\n      - PASV_MAX_PORT=21110 \n      - PASV_ADDRESS=172.18.0.8\n    ports:\n      - 21:21\n      - 21100-21110:21100-21110\n    volumes:\n      - /Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd\n      - /Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd\n    privileged: true\n    #restart: always\n    networks:\n      - nt_dev\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n![image-20250425174252871](typora-user-images/image-20250425174252871.png)\n\n### 功能介绍\n\n1. 集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。\n2. 集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。\n3. 基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。\n4. 通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。\n5. Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：\n   * 场景 1：通过 RAG 找到医生后，进行挂号\n   * 场景 2：挂号当日请假\n   * 场景 3：挂号当日在医院附近找饭店\n\n\n\n通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 \n\n\n\n## 代码实现\n\n**Maven 核心依赖**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>3.4.3</spring-boot.version>\n        <spring-ai.version>1.0.0-M6</spring-ai.version>\n        <alibaba.ai.version>1.0.0-M6.1</alibaba.ai.version>\n        <spring.ai.ollama.version>1.0.0-M6</spring.ai.ollama.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>${alibaba.ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-elasticsearch-store-spring-boot-starter</artifactId>\n            <version>${spring-ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n            <version>${spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>spring-snapshots</id>\n            <name>Spring Snapshots</name>\n            <url>https://repo.spring.io/snapshot</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.36</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n~~~\n\n上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。\n\n**核心配置 （`application.yml`）**\n\n这里一定要注意的是文本推理模型 `model: deepseek-r1`, 嵌入模型`model: text-embedding-v2`用来生成文本的向量数据\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      elasticsearch:\n        initialize-schema: true\n        index-name: spring-ai-tag\n        # 这里一定要注意，维度是默认1536，需要和向量模型的维度一致\n        dimensions: 1536\n        similarity: cosine\n        batching-strategy: TOKEN_COUNT\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n       @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                // 设置系统的默认行为和风格\n                .defaultSystem(\"你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。\")\n                // 注册向量检索顾问，用于从向量存储中检索相关信息\n                .defaultAdvisors(\n                        new QuestionAnswerAdvisor(\n                                vectorStore,\n                                SearchRequest.builder()\n                                        .similarityThreshold(0.1) // 设置相似度阈值\n                                        .topK(10) // 设置返回最多 10 条相关结果\n                                        .build()\n                        )\n                )\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n\n\n**编写核心控制器（DeepseekChatController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.rag.Query;\nimport org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;\nimport org.springframework.ai.reader.TextReader;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @ClassName DeepseekChatController  //类名称\n * @Description:\n * @Author: 200900681 李村\n * @CreateDate: 2025/4/25\n * @Version: 1.0    //版本号\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class DeepseekChatController {\n\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private VectorStore vectorStore;\n    @Autowired\n    private ChatMemory chatMemory;\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(\"/data/load\")\n    public String loadData() throws IOException {\n        // 1. 读取文件\n        DocumentReader reader = new TextReader(\"static/hospitalInfo.txt\");\n        List<Document> documents = reader.get();\n\n        // 2.切分文件：根据空白行进行分割\n        List<Document> splitDocuments =  new ArrayList<>();\n        for (Document document : documents) {\n            // 获取文档内容\n            String content = document.getText();\n            // 使用正则表达式按空白行分割\n            String[] parts = content.split(\"\\\\n\\\\s*\\\\n\");\n            // 将分割后的部分封装为新的 Document 对象\n            for (String part : parts) {\n                splitDocuments.add(new Document(part.trim()));\n            }\n        }\n\n        log.info(\"文件切分为 [{}]\", splitDocuments.size());\n\n        // 3.写入数据\n        vectorStore.add(splitDocuments);\n\n        return \"success\";\n    }\n\n    @GetMapping(\"/select\")\n    public String search(@RequestParam(\"query\") String query) {\n        log.info(\"query is  [{}]\", query);\n        List<Document> results = vectorStore.similaritySearch(\n//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n\n        );\n        log.info(\"results is [{}]\", results);\n        return results.toString();\n    }\n\n    /**\n     * 查询重写\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/rewrite/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByRewrite(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1、构建查询重写转换器\n        QueryTransformer queryTransformer = RewriteQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n        // 2、执行查询重写\n        Query queryByTransform = queryTransformer.transform(new Query(inputMsg));\n        // 3、输出重写后的查询文案\n        return queryByTransform.text();\n    }\n\n\n    /**\n     * 上下文感知查询\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/history/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByHistory(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1. 获取历史消息\n        List<Message> history = chatMemory.get(userId, CHAT_HISTORY_SIZE);\n        // 2. 构建查询对象\n        Query query = Query.builder()\n                .text(inputMsg)\n                .history(history)\n                .build();\n\n        // 3. 创建 CompressionQueryTransformer\n        CompressionQueryTransformer queryTransformerByHis = CompressionQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n\n        // 4、执行历史信息后查询\n        Query queryByHistory = queryTransformerByHis.transform(query);\n\n        // 5、输出重写后的查询文案\n        return queryByHistory.text();\n    }\n    \n}\n\n~~~\n\n\n\n\n\n\n\n\n\n**数据准备**\n\n我让kimi帮我生成了一个医院的介绍，包含\n\n- 医院`小智口腔医院`的介绍，\n- 3个科室的介绍，分别是 `口腔修复科`,`口腔正畸科`,`儿童口腔科`\n- 每个科室也有对应的20位医生信息\n\n~~~\n1. 医院介绍\n小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。\n2. 科室介绍\n(1)口腔修复科:\n口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信\n(2)口腔正畸科:\n是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。\n(3)儿童口腔科:\n儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。\n\n3. 医生介绍\n(1) 李明轩\n性别 ：男\n出生年月 ：1985年3月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。\n介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(2) 王晓彤\n性别 ：女\n出生年月 ：1990年7月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(3) 张伟杰\n性别 ：男\n出生年月 ：1982年11月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。\n介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(4) 陈静怡\n性别 ：女\n出生年月 ：1988年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(5) 刘志远\n性别 ：男\n出生年月 ：1980年9月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。\n介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(6) 孙悦宁\n性别 ：女\n出生年月 ：1993年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。\n介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(7) 赵天宇\n性别 ：男\n出生年月 ：1987年5月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(8) 林晓慧\n性别 ：女\n出生年月 ：1991年8月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(9) 黄志强\n性别 ：男\n出生年月 ：1979年12月\n医生职称 ：主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。\n介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务\n\n(10) 高雅婷\n性别 ：女\n出生年月 ：1986年2月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。\n\n(11) 王浩然\n性别 ：男\n出生年月 ：1983年7月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。\n介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(12) 李佳琪\n性别 ：女\n出生年月 ：1992年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。\n介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(13) 周文博\n性别 ：男\n出生年月 ：1981年10月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。\n介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(14) 张馨月\n性别 ：女\n出生年月 ：1989年6月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(15) 王志鹏\n性别 ：男\n出生年月 ：1984年11月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(16) 赵雪梅\n性别 ：女\n出生年月 ：1990年3月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(17) 陈子豪\n性别 ：男\n出生年月 ：1988年9月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。\n介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(18) 李梦瑶\n性别 ：女\n出生年月 ：1994年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(19) 黄晓峰\n性别 ：男\n出生年月 ：1985年8月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(20) 刘欣怡\n性别 ：女\n出生年月 ：1991年5月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n~~~\n\n\n\n\n\n## 测试验证\n\n\n\n~~~\n数据写入的接口\nhttp://127.0.0.1:8080/ai/v1/data/load\n获取数据向量的接口\nhttp://127.0.0.1:8080/ai/v1/select\n连读对话的接口\nhttp://127.0.0.1:8080/ai/v1/rag/chat\n~~~\n\n\n\n**数据写入**\n\n>数据写入的接口\n>http://127.0.0.1:8080/ai/v1/data/load\n\n\n\n![image-20250429172724826](typora-user-images/image-20250429172724826.png)\n\n![image-20250429180401580](typora-user-images/image-20250429180401580.png)\n\n>获取数据向量的接口\n>http://127.0.0.1:8080/ai/v1/select?query=医院介绍\n\n![image-20250429174959408](typora-user-images/image-20250429174959408.png)\n\n可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek\n\n接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题\n\n>- 请介绍一下医院\n>- 请介绍一下医院都有哪些科室\n>- 医院有哪些主任医师\n>- 张馨月医生怎么样\n>- 我刚才都问了哪些问题\n\n\n\n![image-20250429174851066](typora-user-images/image-20250429174851066.png)\n\n\n\n\n\n![image-20250429175228086](typora-user-images/image-20250429175228086.png)\n\n\n\n![image-20250429175342611](typora-user-images/image-20250429175342611.png)\n\n\n\n![image-20250429175421998](typora-user-images/image-20250429175421998.png)\n\n\n\n\n\n![image-20250429175540574](typora-user-images/image-20250429175540574.png)\n\n\n\n\n\n## 附：向量数据库milvus 存储数据\n\n\n\n### Milvus安装\n\n**Docker-compose 配置**\n\n~~~yaml\n# 配置 etcd 服务\n  etcd:\n    container_name: milvus-etcd  # 容器名称\n    image: quay.io/coreos/etcd:v3.5.16  # 使用的镜像\n    environment:\n      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式\n      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留的修订版本数\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储限制\n      - ETCD_SNAPSHOT_COUNT=50000  # 快照计数\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据卷挂载\n    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir /etcd  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"etcdctl\", \"endpoint\", \"health\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n\n  # 配置 MinIO 服务\n  minio:\n    container_name: milvus-minio  # 容器名称\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用的镜像\n    environment:\n      MINIO_ACCESS_KEY: minioadmin  # MinIO 访问密钥\n      MINIO_SECRET_KEY: minioadmin  # MinIO 密钥\n    ports:\n      - \"9001:9001\"  # 控制台端口映射\n      - \"9000:9000\"  # 服务端口映射\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # 数据卷挂载\n    command: minio server /minio_data --console-address \":9001\"  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.8   \n\n  # 配置 Milvus 服务\n  standalone:\n    container_name: milvus-standalone  # 容器名称\n    image: milvusdb/milvus:v2.5.4  # 使用的镜像\n    command: [\"milvus\", \"run\", \"standalone\"]  # 启动命令\n    security_opt:\n    - seccomp:unconfined  # 安全选项\n    environment:\n      ETCD_ENDPOINTS: etcd:2379  # etcd 服务地址\n      MINIO_ADDRESS: minio:9000  # MinIO 服务地址\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # 数据卷挂载\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      start_period: 90s  # 启动等待时间\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    ports:\n      - \"19530:19530\"  # 服务端口映射\n      - \"9091:9091\"  # 管理端口映射\n    depends_on:\n      - \"etcd\"  # 依赖 etcd 服务\n      - \"minio\"  # 依赖 MinIO 服务\n\n  # 配置 Milvus Dashboard 服务\n  dashboard:\n    image: zilliz/attu:v2.5  # 使用的镜像\n    container_name: milvus-dashboard  # 容器名称\n    environment:\n      MILVUS_URL: http://standalone:19530  # Milvus 服务地址\n    ports:\n      - \"8000:3000\"  # 端口映射\n    depends_on:\n      - standalone  # 依赖 Milvus 服务\n      - etcd  # 依赖 etcd 服务\n      - minio  # 依赖 MinIO 服务\n\n# 定义网络配置\nnetworks:\n  nt_dev:\n      external: true\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n**查看客户端，** 输入地址 `http://localhost:8000/`\n进入如下界面：此时什么都不要填写，直接点【连接】按钮\n\n\n\n![image-20250429181131778](typora-user-images/image-20250429181131778.png)\n\n进入系统后\n\n![image-20250429181039571](typora-user-images/image-20250429181039571.png)\n\n\n\n创建用户：用户名：``milvus`, 密码： `milvus-4321` (这里要和我们spring工程里的配置一致)，角色我们选 `admin`, \n\n\n\n\n\n![image-20250429181312813](typora-user-images/image-20250429181312813.png)\n\n\n\n\n\n修改依赖：\n\n~~~xml\n  <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-milvus-store-spring-boot-starter</artifactId>\n </dependency>\n~~~\n\n\n\n\n\n修改配置\n\n\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  elasticsearch:\n    uris: http://127.0.0.1:9200\n    username:\n    password:\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      milvus:\n        client:\n          host: \"localhost\"\n          port: 19530\n          username: \"milvus\"\n          password: \"milvus-4321\"\n        databaseName: \"default\"\n        collectionName: \"vector_store\"\n        embeddingDimension: 1536\n        indexType: IVF_FLAT\n        metricType: COSINE\n        initialize-schema: true\n\n\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。\n\n\n\n使用加载接口\n\n![image-20250429183142516](typora-user-images/image-20250429183142516.png)\n","date":"2025-06-04T10:13:19.151Z","updated":"2025-04-29T10:42:03.405Z","path":"categories/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.html","_id":"cmbhshryb000bnffy5rjy005f","title":"","comments":1,"layout":"page","content":"<h1 id=\"Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程\"></a>Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程</h1><p>在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。<strong>Spring AI</strong>，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，</p>\n<p>[toc]</p>\n<h2 id=\"Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\"><a href=\"#Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\" class=\"headerlink\" title=\"Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\"></a>Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系</h2><h3 id=\"Spring-AI-介绍\"><a href=\"#Spring-AI-介绍\" class=\"headerlink\" title=\"Spring AI 介绍\"></a>Spring AI 介绍</h3><h4 id=\"Spring-AI的版本演进\"><a href=\"#Spring-AI的版本演进\" class=\"headerlink\" title=\"Spring AI的版本演进\"></a>Spring AI的版本演进</h4><p>Spring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：</p>\n<ul>\n<li>2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。</li>\n<li>2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。</li>\n<li>2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。</li>\n<li>2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。</li>\n<li>2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性</li>\n</ul>\n<h4 id=\"Spring-AI的主要功能\"><a href=\"#Spring-AI的主要功能\" class=\"headerlink\" title=\"Spring AI的主要功能\"></a>Spring AI的主要功能</h4><p>Spring AI为开发者提供了多种AI功能的支持，包括：</p>\n<ul>\n<li>智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。</li>\n<li>文本生成：利用AI模型生成创意文本内容，例如文章、故事等。</li>\n<li>图像生成：通过文本提示生成图像，支持多种图像生成模型。</li>\n<li>音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。</li>\n<li>功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a><strong>函数调用（Function Calling）</strong></h3><h4 id=\"功能与作用\"><a href=\"#功能与作用\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>在Spring AI中，函数调用的实现步骤如下：</p>\n<p><strong>1、定义函数</strong>：开发者创建一个实现<code>Function</code>接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Function</span>&lt;WeatherFunction.WeatherRequest, String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(WeatherRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + request.getCity() + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherRequest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getCity</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> city; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCity</span><span class=\"params\">(String city)</span> &#123; <span class=\"built_in\">this</span>.city = city; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、注册函数</strong>：将函数注册为Spring Bean，使其能被Spring AI识别和调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;获取指定城市的天气信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;WeatherFunction.WeatherRequest, String&gt; weatherFunction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置模型</strong>：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withFunction(<span class=\"string\">&quot;weatherFunction&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模型调用函数</strong>：模型在生成响应时，可以通过请求调用外部函数，得到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        WeatherFunction.<span class=\"type\">WeatherRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>.WeatherRequest();</span><br><span class=\"line\">        request.setCity(input);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).functions(<span class=\"string\">&quot;weatherFunction&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用<strong>工具调用</strong>（Tool Calling）来实现类似功能。</p>\n<h3 id=\"工具调用（Tool-Calling）\"><a href=\"#工具调用（Tool-Calling）\" class=\"headerlink\" title=\"工具调用（Tool Calling）\"></a><strong>工具调用（Tool Calling）</strong></h3><h4 id=\"功能与作用-1\"><a href=\"#功能与作用-1\" class=\"headerlink\" title=\"功能与作用\"></a><strong>功能与作用</strong></h4><p>工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：</p>\n<p><strong>1、定义工具接口</strong>：开发者定义一个接口，声明工具的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、实现工具接口</strong>：编写具体的工具实现类，处理工具的业务逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherToolImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + city + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、注册工具为Spring Bean</strong>：将工具实现类注册为Spring Bean，以便Spring容器管理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WeatherTool <span class=\"title function_\">weatherTool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherToolImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、配置模型使用工具</strong>：在Spring AI配置中，指定模型使用的工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withTool(<span class=\"string\">&quot;weatherTool&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、模型调用工具</strong>：模型在与用户交互时，通过工具调用获取所需的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).tools(<span class=\"string\">&quot;weatherTool&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"智能体（Agent）\"><a href=\"#智能体（Agent）\" class=\"headerlink\" title=\"智能体（Agent）\"></a>智能体（Agent）</h3><h4 id=\"功能与作用-2\"><a href=\"#功能与作用-2\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。</p>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>智能体的实现涉及多个关键组件，主要包括：</p>\n<p>模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。<br>智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。<br>智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。<br>注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。</p>\n<h3 id=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"><a href=\"#从函数调用（FunctionCallbac）到工具调用（ToolCallback）\" class=\"headerlink\" title=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"></a>从函数调用（FunctionCallbac）到工具调用（ToolCallback）</h3><p>随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。</p>\n<p><strong>为什么从FunctionCallback迁移到ToolCallback</strong></p>\n<p>Spring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：</p>\n<ul>\n<li>功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。</li>\n<li>一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。</li>\n<li>未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。</li>\n</ul>\n<p>因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。</p>\n<h2 id=\"Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\"><a href=\"#Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\" class=\"headerlink\" title=\"Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发\"></a>Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p><img src=\"/typora-user-images/image-20250425104935964-5549379.png\" alt=\"image-20250425104935964\"></p>\n<p><strong>Elasticsearch安装</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"attr\">elasticsearch1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;elasticsearch1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms84m -Xmx512m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs</span>  </span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vsftpd:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;fauria/vsftpd&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;rabbitmq1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_USER=admin</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_PASS=123456</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MIN_PORT=21100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MAX_PORT=21110</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_ADDRESS=172.18.0.8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21</span><span class=\"string\">:21</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21100</span><span class=\"number\">-21110</span><span class=\"string\">:21100-21110</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nt_dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/typora-user-images/image-20250425174252871.png\" alt=\"image-20250425174252871\"></p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><ol>\n<li>集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。</li>\n<li>集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。</li>\n<li>基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。</li>\n<li>通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。</li>\n<li>Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：<ul>\n<li>场景 1：通过 RAG 找到医生后，进行挂号</li>\n<li>场景 2：挂号当日请假</li>\n<li>场景 3：挂号当日在医院附近找饭店</li>\n</ul>\n</li>\n</ol>\n<p>通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>Maven 核心依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-ai.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring-ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">alibaba.ai.version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">alibaba.ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.ai.ollama.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring.ai.ollama.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;alibaba.ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-elasticsearch-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Snapshots<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。</p>\n<p><strong>核心配置 （<code>application.yml</code>）</strong></p>\n<p>这里一定要注意的是文本推理模型 <code>model: deepseek-r1</code>, 嵌入模型<code>model: text-embedding-v2</code>用来生成文本的向量数据</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">index-name:</span> <span class=\"string\">spring-ai-tag</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里一定要注意，维度是默认1536，需要和向量模型的维度一致</span></span><br><span class=\"line\">        <span class=\"attr\">dimensions:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">similarity:</span> <span class=\"string\">cosine</span></span><br><span class=\"line\">        <span class=\"attr\">batching-strategy:</span> <span class=\"string\">TOKEN_COUNT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储</p>\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                <span class=\"comment\">// 设置系统的默认行为和风格</span></span><br><span class=\"line\">                .defaultSystem(<span class=\"string\">&quot;你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 注册向量检索顾问，用于从向量存储中检索相关信息</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(</span><br><span class=\"line\">                                vectorStore,</span><br><span class=\"line\">                                SearchRequest.builder()</span><br><span class=\"line\">                                        .similarityThreshold(<span class=\"number\">0.1</span>) <span class=\"comment\">// 设置相似度阈值</span></span><br><span class=\"line\">                                        .topK(<span class=\"number\">10</span>) <span class=\"comment\">// 设置返回最多 10 条相关结果</span></span><br><span class=\"line\">                                        .build()</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编写核心控制器（DeepseekChatController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.DocumentReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.reader.TextReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.VectorStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DeepseekChatController  //类名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 200900681 李村</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2025/4/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>: 1.0    //版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeepseekChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/data/load&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">loadData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取文件</span></span><br><span class=\"line\">        <span class=\"type\">DocumentReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(<span class=\"string\">&quot;static/hospitalInfo.txt&quot;</span>);</span><br><span class=\"line\">        List&lt;Document&gt; documents = reader.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.切分文件：根据空白行进行分割</span></span><br><span class=\"line\">        List&lt;Document&gt; splitDocuments =  <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取文档内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> document.getText();</span><br><span class=\"line\">            <span class=\"comment\">// 使用正则表达式按空白行分割</span></span><br><span class=\"line\">            String[] parts = content.split(<span class=\"string\">&quot;\\\\n\\\\s*\\\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将分割后的部分封装为新的 Document 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                splitDocuments.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(part.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件切分为 [&#123;&#125;]&quot;</span>, splitDocuments.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.写入数据</span></span><br><span class=\"line\">        vectorStore.add(splitDocuments);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/select&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;query&quot;)</span> String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query is  [&#123;&#125;]&quot;</span>, query);</span><br><span class=\"line\">        List&lt;Document&gt; results = vectorStore.similaritySearch(</span><br><span class=\"line\"><span class=\"comment\">//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()</span></span><br><span class=\"line\">                SearchRequest.builder().query(query).similarityThreshold(<span class=\"number\">0.1</span>).topK(<span class=\"number\">10</span>).build()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;results is [&#123;&#125;]&quot;</span>, results);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询重写</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/rewrite/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByRewrite</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、构建查询重写转换器</span></span><br><span class=\"line\">        <span class=\"type\">QueryTransformer</span> <span class=\"variable\">queryTransformer</span> <span class=\"operator\">=</span> RewriteQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 2、执行查询重写</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByTransform</span> <span class=\"operator\">=</span> queryTransformer.transform(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(inputMsg));</span><br><span class=\"line\">        <span class=\"comment\">// 3、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByTransform.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文感知查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/history/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByHistory</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取历史消息</span></span><br><span class=\"line\">        List&lt;Message&gt; history = chatMemory.get(userId, CHAT_HISTORY_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 构建查询对象</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.builder()</span><br><span class=\"line\">                .text(inputMsg)</span><br><span class=\"line\">                .history(history)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 创建 CompressionQueryTransformer</span></span><br><span class=\"line\">        <span class=\"type\">CompressionQueryTransformer</span> <span class=\"variable\">queryTransformerByHis</span> <span class=\"operator\">=</span> CompressionQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4、执行历史信息后查询</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByHistory</span> <span class=\"operator\">=</span> queryTransformerByHis.transform(query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByHistory.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>数据准备</strong></p>\n<p>我让kimi帮我生成了一个医院的介绍，包含</p>\n<ul>\n<li>医院<code>小智口腔医院</code>的介绍，</li>\n<li>3个科室的介绍，分别是 <code>口腔修复科</code>,<code>口腔正畸科</code>,<code>儿童口腔科</code></li>\n<li>每个科室也有对应的20位医生信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 医院介绍</span><br><span class=\"line\">小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。</span><br><span class=\"line\">2. 科室介绍</span><br><span class=\"line\">(1)口腔修复科:</span><br><span class=\"line\">口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信</span><br><span class=\"line\">(2)口腔正畸科:</span><br><span class=\"line\">是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。</span><br><span class=\"line\">(3)儿童口腔科:</span><br><span class=\"line\">儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 医生介绍</span><br><span class=\"line\">(1) 李明轩</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年3月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。</span><br><span class=\"line\">介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 王晓彤</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年7月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 张伟杰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1982年11月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。</span><br><span class=\"line\">介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(4) 陈静怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1988年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(5) 刘志远</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1980年9月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。</span><br><span class=\"line\">介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(6) 孙悦宁</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1993年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。</span><br><span class=\"line\">介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(7) 赵天宇</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1987年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(8) 林晓慧</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年8月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(9) 黄志强</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1979年12月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。</span><br><span class=\"line\">介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务</span><br><span class=\"line\"></span><br><span class=\"line\">(10) 高雅婷</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1986年2月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。</span><br><span class=\"line\"></span><br><span class=\"line\">(11) 王浩然</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1983年7月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。</span><br><span class=\"line\">介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(12) 李佳琪</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1992年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。</span><br><span class=\"line\">介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(13) 周文博</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1981年10月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。</span><br><span class=\"line\">介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(14) 张馨月</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1989年6月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(15) 王志鹏</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1984年11月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(16) 赵雪梅</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年3月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(17) 陈子豪</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1988年9月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。</span><br><span class=\"line\">介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(18) 李梦瑶</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1994年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(19) 黄晓峰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年8月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(20) 刘欣怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据写入的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/data/load</span><br><span class=\"line\">获取数据向量的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/select</span><br><span class=\"line\">连读对话的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/rag/chat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>数据写入</strong></p>\n<blockquote>\n<p>数据写入的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/data/load\">http://127.0.0.1:8080/ai/v1/data/load</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429172724826.png\" alt=\"image-20250429172724826\"></p>\n<p><img src=\"/typora-user-images/image-20250429180401580.png\" alt=\"image-20250429180401580\"></p>\n<blockquote>\n<p>获取数据向量的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/select?query=%E5%8C%BB%E9%99%A2%E4%BB%8B%E7%BB%8D\">http://127.0.0.1:8080/ai/v1/select?query=医院介绍</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174959408.png\" alt=\"image-20250429174959408\"></p>\n<p>可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek</p>\n<p>接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题</p>\n<blockquote>\n<ul>\n<li>请介绍一下医院</li>\n<li>请介绍一下医院都有哪些科室</li>\n<li>医院有哪些主任医师</li>\n<li>张馨月医生怎么样</li>\n<li>我刚才都问了哪些问题</li>\n</ul>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174851066.png\" alt=\"image-20250429174851066\"></p>\n<p><img src=\"/typora-user-images/image-20250429175228086.png\" alt=\"image-20250429175228086\"></p>\n<p><img src=\"/typora-user-images/image-20250429175342611.png\" alt=\"image-20250429175342611\"></p>\n<p><img src=\"/typora-user-images/image-20250429175421998.png\" alt=\"image-20250429175421998\"></p>\n<p><img src=\"/typora-user-images/image-20250429175540574.png\" alt=\"image-20250429175540574\"></p>\n<h2 id=\"附：向量数据库milvus-存储数据\"><a href=\"#附：向量数据库milvus-存储数据\" class=\"headerlink\" title=\"附：向量数据库milvus 存储数据\"></a>附：向量数据库milvus 存储数据</h2><h3 id=\"Milvus安装\"><a href=\"#Milvus安装\" class=\"headerlink\" title=\"Milvus安装\"></a>Milvus安装</h3><p><strong>Docker-compose 配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 etcd 服务</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-etcd</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">quay.io/coreos/etcd:v3.5.16</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_MODE=revision</span>  <span class=\"comment\"># 自动压缩模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_RETENTION=1000</span>  <span class=\"comment\"># 保留的修订版本数</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_QUOTA_BACKEND_BYTES=4294967296</span>  <span class=\"comment\"># 后端存储限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_SNAPSHOT_COUNT=50000</span>  <span class=\"comment\"># 快照计数</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">etcd</span> <span class=\"string\">-advertise-client-urls=http://127.0.0.1:2379</span> <span class=\"string\">-listen-client-urls=http://0.0.0.0:2379</span> <span class=\"string\">--data-dir</span> <span class=\"string\">/etcd</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;etcdctl&quot;</span>, <span class=\"string\">&quot;endpoint&quot;</span>, <span class=\"string\">&quot;health&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 MinIO 服务</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-minio</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:RELEASE.2023-03-20T20-16-18Z</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 访问密钥</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 密钥</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9001&quot;</span>  <span class=\"comment\"># 控制台端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">minio</span> <span class=\"string\">server</span> <span class=\"string\">/minio_data</span> <span class=\"string\">--console-address</span> <span class=\"string\">&quot;:9001&quot;</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.8</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus 服务</span></span><br><span class=\"line\">  <span class=\"attr\">standalone:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-standalone</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">milvusdb/milvus:v2.5.4</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;milvus&quot;</span>, <span class=\"string\">&quot;run&quot;</span>, <span class=\"string\">&quot;standalone&quot;</span>]  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">seccomp:unconfined</span>  <span class=\"comment\"># 安全选项</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ETCD_ENDPOINTS:</span> <span class=\"string\">etcd:2379</span>  <span class=\"comment\"># etcd 服务地址</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ADDRESS:</span> <span class=\"string\">minio:9000</span>  <span class=\"comment\"># MinIO 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9091/healthz&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">90s</span>  <span class=\"comment\"># 启动等待时间</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;19530:19530&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9091:9091&quot;</span>  <span class=\"comment\"># 管理端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;etcd&quot;</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;minio&quot;</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus Dashboard 服务</span></span><br><span class=\"line\">  <span class=\"attr\">dashboard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zilliz/attu:v2.5</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-dashboard</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MILVUS_URL:</span> <span class=\"string\">http://standalone:19530</span>  <span class=\"comment\"># Milvus 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:3000&quot;</span>  <span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">standalone</span>  <span class=\"comment\"># 依赖 Milvus 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">etcd</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">minio</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义网络配置</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">      <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看客户端，</strong> 输入地址 <code>http://localhost:8000/</code><br>进入如下界面：此时什么都不要填写，直接点【连接】按钮</p>\n<p><img src=\"/typora-user-images/image-20250429181131778.png\" alt=\"image-20250429181131778\"></p>\n<p>进入系统后</p>\n<p><img src=\"/typora-user-images/image-20250429181039571.png\" alt=\"image-20250429181039571\"></p>\n<p>创建用户：用户名：&#96;&#96;milvus<code>, 密码： </code>milvus-4321<code>(这里要和我们spring工程里的配置一致)，角色我们选</code>admin&#96;, </p>\n<p><img src=\"/typora-user-images/image-20250429181312813.png\" alt=\"image-20250429181312813\"></p>\n<p>修改依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-milvus-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">uris:</span> <span class=\"string\">http://127.0.0.1:9200</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">milvus:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">port:</span> <span class=\"number\">19530</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;milvus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;milvus-4321&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">databaseName:</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">collectionName:</span> <span class=\"string\">&quot;vector_store&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">embeddingDimension:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">indexType:</span> <span class=\"string\">IVF_FLAT</span></span><br><span class=\"line\">        <span class=\"attr\">metricType:</span> <span class=\"string\">COSINE</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。</p>\n<p>使用加载接口</p>\n<p><img src=\"/typora-user-images/image-20250429183142516.png\" alt=\"image-20250429183142516\"></p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程\"></a>Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程</h1><p>在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。<strong>Spring AI</strong>，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，</p>\n<p>[toc]</p>\n<h2 id=\"Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\"><a href=\"#Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\" class=\"headerlink\" title=\"Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\"></a>Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系</h2><h3 id=\"Spring-AI-介绍\"><a href=\"#Spring-AI-介绍\" class=\"headerlink\" title=\"Spring AI 介绍\"></a>Spring AI 介绍</h3><h4 id=\"Spring-AI的版本演进\"><a href=\"#Spring-AI的版本演进\" class=\"headerlink\" title=\"Spring AI的版本演进\"></a>Spring AI的版本演进</h4><p>Spring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：</p>\n<ul>\n<li>2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。</li>\n<li>2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。</li>\n<li>2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。</li>\n<li>2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。</li>\n<li>2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性</li>\n</ul>\n<h4 id=\"Spring-AI的主要功能\"><a href=\"#Spring-AI的主要功能\" class=\"headerlink\" title=\"Spring AI的主要功能\"></a>Spring AI的主要功能</h4><p>Spring AI为开发者提供了多种AI功能的支持，包括：</p>\n<ul>\n<li>智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。</li>\n<li>文本生成：利用AI模型生成创意文本内容，例如文章、故事等。</li>\n<li>图像生成：通过文本提示生成图像，支持多种图像生成模型。</li>\n<li>音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。</li>\n<li>功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a><strong>函数调用（Function Calling）</strong></h3><h4 id=\"功能与作用\"><a href=\"#功能与作用\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>在Spring AI中，函数调用的实现步骤如下：</p>\n<p><strong>1、定义函数</strong>：开发者创建一个实现<code>Function</code>接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Function</span>&lt;WeatherFunction.WeatherRequest, String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(WeatherRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + request.getCity() + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherRequest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getCity</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> city; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCity</span><span class=\"params\">(String city)</span> &#123; <span class=\"built_in\">this</span>.city = city; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、注册函数</strong>：将函数注册为Spring Bean，使其能被Spring AI识别和调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;获取指定城市的天气信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;WeatherFunction.WeatherRequest, String&gt; weatherFunction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置模型</strong>：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withFunction(<span class=\"string\">&quot;weatherFunction&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模型调用函数</strong>：模型在生成响应时，可以通过请求调用外部函数，得到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        WeatherFunction.<span class=\"type\">WeatherRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>.WeatherRequest();</span><br><span class=\"line\">        request.setCity(input);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).functions(<span class=\"string\">&quot;weatherFunction&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用<strong>工具调用</strong>（Tool Calling）来实现类似功能。</p>\n<h3 id=\"工具调用（Tool-Calling）\"><a href=\"#工具调用（Tool-Calling）\" class=\"headerlink\" title=\"工具调用（Tool Calling）\"></a><strong>工具调用（Tool Calling）</strong></h3><h4 id=\"功能与作用-1\"><a href=\"#功能与作用-1\" class=\"headerlink\" title=\"功能与作用\"></a><strong>功能与作用</strong></h4><p>工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：</p>\n<p><strong>1、定义工具接口</strong>：开发者定义一个接口，声明工具的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、实现工具接口</strong>：编写具体的工具实现类，处理工具的业务逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherToolImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + city + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、注册工具为Spring Bean</strong>：将工具实现类注册为Spring Bean，以便Spring容器管理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WeatherTool <span class=\"title function_\">weatherTool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherToolImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、配置模型使用工具</strong>：在Spring AI配置中，指定模型使用的工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withTool(<span class=\"string\">&quot;weatherTool&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、模型调用工具</strong>：模型在与用户交互时，通过工具调用获取所需的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).tools(<span class=\"string\">&quot;weatherTool&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"智能体（Agent）\"><a href=\"#智能体（Agent）\" class=\"headerlink\" title=\"智能体（Agent）\"></a>智能体（Agent）</h3><h4 id=\"功能与作用-2\"><a href=\"#功能与作用-2\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。</p>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>智能体的实现涉及多个关键组件，主要包括：</p>\n<p>模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。<br>智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。<br>智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。<br>注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。</p>\n<h3 id=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"><a href=\"#从函数调用（FunctionCallbac）到工具调用（ToolCallback）\" class=\"headerlink\" title=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"></a>从函数调用（FunctionCallbac）到工具调用（ToolCallback）</h3><p>随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。</p>\n<p><strong>为什么从FunctionCallback迁移到ToolCallback</strong></p>\n<p>Spring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：</p>\n<ul>\n<li>功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。</li>\n<li>一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。</li>\n<li>未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。</li>\n</ul>\n<p>因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。</p>\n<h2 id=\"Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\"><a href=\"#Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\" class=\"headerlink\" title=\"Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发\"></a>Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p><img src=\"/typora-user-images/image-20250425104935964-5549379.png\" alt=\"image-20250425104935964\"></p>\n<p><strong>Elasticsearch安装</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"attr\">elasticsearch1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;elasticsearch1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms84m -Xmx512m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs</span>  </span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vsftpd:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;fauria/vsftpd&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;rabbitmq1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_USER=admin</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_PASS=123456</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MIN_PORT=21100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MAX_PORT=21110</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_ADDRESS=172.18.0.8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21</span><span class=\"string\">:21</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21100</span><span class=\"number\">-21110</span><span class=\"string\">:21100-21110</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nt_dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/typora-user-images/image-20250425174252871.png\" alt=\"image-20250425174252871\"></p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><ol>\n<li>集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。</li>\n<li>集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。</li>\n<li>基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。</li>\n<li>通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。</li>\n<li>Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：<ul>\n<li>场景 1：通过 RAG 找到医生后，进行挂号</li>\n<li>场景 2：挂号当日请假</li>\n<li>场景 3：挂号当日在医院附近找饭店</li>\n</ul>\n</li>\n</ol>\n<p>通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>Maven 核心依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-ai.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring-ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">alibaba.ai.version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">alibaba.ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.ai.ollama.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring.ai.ollama.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;alibaba.ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-elasticsearch-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Snapshots<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。</p>\n<p><strong>核心配置 （<code>application.yml</code>）</strong></p>\n<p>这里一定要注意的是文本推理模型 <code>model: deepseek-r1</code>, 嵌入模型<code>model: text-embedding-v2</code>用来生成文本的向量数据</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">index-name:</span> <span class=\"string\">spring-ai-tag</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里一定要注意，维度是默认1536，需要和向量模型的维度一致</span></span><br><span class=\"line\">        <span class=\"attr\">dimensions:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">similarity:</span> <span class=\"string\">cosine</span></span><br><span class=\"line\">        <span class=\"attr\">batching-strategy:</span> <span class=\"string\">TOKEN_COUNT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储</p>\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                <span class=\"comment\">// 设置系统的默认行为和风格</span></span><br><span class=\"line\">                .defaultSystem(<span class=\"string\">&quot;你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 注册向量检索顾问，用于从向量存储中检索相关信息</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(</span><br><span class=\"line\">                                vectorStore,</span><br><span class=\"line\">                                SearchRequest.builder()</span><br><span class=\"line\">                                        .similarityThreshold(<span class=\"number\">0.1</span>) <span class=\"comment\">// 设置相似度阈值</span></span><br><span class=\"line\">                                        .topK(<span class=\"number\">10</span>) <span class=\"comment\">// 设置返回最多 10 条相关结果</span></span><br><span class=\"line\">                                        .build()</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编写核心控制器（DeepseekChatController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.DocumentReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.reader.TextReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.VectorStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DeepseekChatController  //类名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 200900681 李村</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2025/4/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>: 1.0    //版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeepseekChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/data/load&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">loadData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取文件</span></span><br><span class=\"line\">        <span class=\"type\">DocumentReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(<span class=\"string\">&quot;static/hospitalInfo.txt&quot;</span>);</span><br><span class=\"line\">        List&lt;Document&gt; documents = reader.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.切分文件：根据空白行进行分割</span></span><br><span class=\"line\">        List&lt;Document&gt; splitDocuments =  <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取文档内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> document.getText();</span><br><span class=\"line\">            <span class=\"comment\">// 使用正则表达式按空白行分割</span></span><br><span class=\"line\">            String[] parts = content.split(<span class=\"string\">&quot;\\\\n\\\\s*\\\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将分割后的部分封装为新的 Document 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                splitDocuments.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(part.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件切分为 [&#123;&#125;]&quot;</span>, splitDocuments.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.写入数据</span></span><br><span class=\"line\">        vectorStore.add(splitDocuments);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/select&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;query&quot;)</span> String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query is  [&#123;&#125;]&quot;</span>, query);</span><br><span class=\"line\">        List&lt;Document&gt; results = vectorStore.similaritySearch(</span><br><span class=\"line\"><span class=\"comment\">//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()</span></span><br><span class=\"line\">                SearchRequest.builder().query(query).similarityThreshold(<span class=\"number\">0.1</span>).topK(<span class=\"number\">10</span>).build()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;results is [&#123;&#125;]&quot;</span>, results);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询重写</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/rewrite/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByRewrite</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、构建查询重写转换器</span></span><br><span class=\"line\">        <span class=\"type\">QueryTransformer</span> <span class=\"variable\">queryTransformer</span> <span class=\"operator\">=</span> RewriteQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 2、执行查询重写</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByTransform</span> <span class=\"operator\">=</span> queryTransformer.transform(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(inputMsg));</span><br><span class=\"line\">        <span class=\"comment\">// 3、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByTransform.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文感知查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/history/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByHistory</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取历史消息</span></span><br><span class=\"line\">        List&lt;Message&gt; history = chatMemory.get(userId, CHAT_HISTORY_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 构建查询对象</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.builder()</span><br><span class=\"line\">                .text(inputMsg)</span><br><span class=\"line\">                .history(history)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 创建 CompressionQueryTransformer</span></span><br><span class=\"line\">        <span class=\"type\">CompressionQueryTransformer</span> <span class=\"variable\">queryTransformerByHis</span> <span class=\"operator\">=</span> CompressionQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4、执行历史信息后查询</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByHistory</span> <span class=\"operator\">=</span> queryTransformerByHis.transform(query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByHistory.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>数据准备</strong></p>\n<p>我让kimi帮我生成了一个医院的介绍，包含</p>\n<ul>\n<li>医院<code>小智口腔医院</code>的介绍，</li>\n<li>3个科室的介绍，分别是 <code>口腔修复科</code>,<code>口腔正畸科</code>,<code>儿童口腔科</code></li>\n<li>每个科室也有对应的20位医生信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 医院介绍</span><br><span class=\"line\">小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。</span><br><span class=\"line\">2. 科室介绍</span><br><span class=\"line\">(1)口腔修复科:</span><br><span class=\"line\">口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信</span><br><span class=\"line\">(2)口腔正畸科:</span><br><span class=\"line\">是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。</span><br><span class=\"line\">(3)儿童口腔科:</span><br><span class=\"line\">儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 医生介绍</span><br><span class=\"line\">(1) 李明轩</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年3月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。</span><br><span class=\"line\">介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 王晓彤</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年7月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 张伟杰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1982年11月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。</span><br><span class=\"line\">介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(4) 陈静怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1988年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(5) 刘志远</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1980年9月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。</span><br><span class=\"line\">介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(6) 孙悦宁</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1993年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。</span><br><span class=\"line\">介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(7) 赵天宇</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1987年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(8) 林晓慧</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年8月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(9) 黄志强</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1979年12月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。</span><br><span class=\"line\">介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务</span><br><span class=\"line\"></span><br><span class=\"line\">(10) 高雅婷</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1986年2月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。</span><br><span class=\"line\"></span><br><span class=\"line\">(11) 王浩然</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1983年7月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。</span><br><span class=\"line\">介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(12) 李佳琪</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1992年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。</span><br><span class=\"line\">介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(13) 周文博</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1981年10月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。</span><br><span class=\"line\">介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(14) 张馨月</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1989年6月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(15) 王志鹏</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1984年11月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(16) 赵雪梅</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年3月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(17) 陈子豪</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1988年9月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。</span><br><span class=\"line\">介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(18) 李梦瑶</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1994年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(19) 黄晓峰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年8月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(20) 刘欣怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据写入的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/data/load</span><br><span class=\"line\">获取数据向量的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/select</span><br><span class=\"line\">连读对话的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/rag/chat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>数据写入</strong></p>\n<blockquote>\n<p>数据写入的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/data/load\">http://127.0.0.1:8080/ai/v1/data/load</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429172724826.png\" alt=\"image-20250429172724826\"></p>\n<p><img src=\"/typora-user-images/image-20250429180401580.png\" alt=\"image-20250429180401580\"></p>\n<blockquote>\n<p>获取数据向量的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/select?query=%E5%8C%BB%E9%99%A2%E4%BB%8B%E7%BB%8D\">http://127.0.0.1:8080/ai/v1/select?query=医院介绍</a></p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174959408.png\" alt=\"image-20250429174959408\"></p>\n<p>可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek</p>\n<p>接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题</p>\n<blockquote>\n<ul>\n<li>请介绍一下医院</li>\n<li>请介绍一下医院都有哪些科室</li>\n<li>医院有哪些主任医师</li>\n<li>张馨月医生怎么样</li>\n<li>我刚才都问了哪些问题</li>\n</ul>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20250429174851066.png\" alt=\"image-20250429174851066\"></p>\n<p><img src=\"/typora-user-images/image-20250429175228086.png\" alt=\"image-20250429175228086\"></p>\n<p><img src=\"/typora-user-images/image-20250429175342611.png\" alt=\"image-20250429175342611\"></p>\n<p><img src=\"/typora-user-images/image-20250429175421998.png\" alt=\"image-20250429175421998\"></p>\n<p><img src=\"/typora-user-images/image-20250429175540574.png\" alt=\"image-20250429175540574\"></p>\n<h2 id=\"附：向量数据库milvus-存储数据\"><a href=\"#附：向量数据库milvus-存储数据\" class=\"headerlink\" title=\"附：向量数据库milvus 存储数据\"></a>附：向量数据库milvus 存储数据</h2><h3 id=\"Milvus安装\"><a href=\"#Milvus安装\" class=\"headerlink\" title=\"Milvus安装\"></a>Milvus安装</h3><p><strong>Docker-compose 配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 etcd 服务</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-etcd</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">quay.io/coreos/etcd:v3.5.16</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_MODE=revision</span>  <span class=\"comment\"># 自动压缩模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_RETENTION=1000</span>  <span class=\"comment\"># 保留的修订版本数</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_QUOTA_BACKEND_BYTES=4294967296</span>  <span class=\"comment\"># 后端存储限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_SNAPSHOT_COUNT=50000</span>  <span class=\"comment\"># 快照计数</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">etcd</span> <span class=\"string\">-advertise-client-urls=http://127.0.0.1:2379</span> <span class=\"string\">-listen-client-urls=http://0.0.0.0:2379</span> <span class=\"string\">--data-dir</span> <span class=\"string\">/etcd</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;etcdctl&quot;</span>, <span class=\"string\">&quot;endpoint&quot;</span>, <span class=\"string\">&quot;health&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 MinIO 服务</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-minio</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:RELEASE.2023-03-20T20-16-18Z</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 访问密钥</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 密钥</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9001&quot;</span>  <span class=\"comment\"># 控制台端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">minio</span> <span class=\"string\">server</span> <span class=\"string\">/minio_data</span> <span class=\"string\">--console-address</span> <span class=\"string\">&quot;:9001&quot;</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.8</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus 服务</span></span><br><span class=\"line\">  <span class=\"attr\">standalone:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-standalone</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">milvusdb/milvus:v2.5.4</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;milvus&quot;</span>, <span class=\"string\">&quot;run&quot;</span>, <span class=\"string\">&quot;standalone&quot;</span>]  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">seccomp:unconfined</span>  <span class=\"comment\"># 安全选项</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ETCD_ENDPOINTS:</span> <span class=\"string\">etcd:2379</span>  <span class=\"comment\"># etcd 服务地址</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ADDRESS:</span> <span class=\"string\">minio:9000</span>  <span class=\"comment\"># MinIO 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9091/healthz&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">90s</span>  <span class=\"comment\"># 启动等待时间</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;19530:19530&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9091:9091&quot;</span>  <span class=\"comment\"># 管理端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;etcd&quot;</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;minio&quot;</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus Dashboard 服务</span></span><br><span class=\"line\">  <span class=\"attr\">dashboard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zilliz/attu:v2.5</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-dashboard</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MILVUS_URL:</span> <span class=\"string\">http://standalone:19530</span>  <span class=\"comment\"># Milvus 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:3000&quot;</span>  <span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">standalone</span>  <span class=\"comment\"># 依赖 Milvus 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">etcd</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">minio</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义网络配置</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">      <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看客户端，</strong> 输入地址 <code>http://localhost:8000/</code><br>进入如下界面：此时什么都不要填写，直接点【连接】按钮</p>\n<p><img src=\"/typora-user-images/image-20250429181131778.png\" alt=\"image-20250429181131778\"></p>\n<p>进入系统后</p>\n<p><img src=\"/typora-user-images/image-20250429181039571.png\" alt=\"image-20250429181039571\"></p>\n<p>创建用户：用户名：&#96;&#96;milvus<code>, 密码： </code>milvus-4321<code>(这里要和我们spring工程里的配置一致)，角色我们选</code>admin&#96;, </p>\n<p><img src=\"/typora-user-images/image-20250429181312813.png\" alt=\"image-20250429181312813\"></p>\n<p>修改依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-milvus-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">uris:</span> <span class=\"string\">http://127.0.0.1:9200</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">milvus:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">port:</span> <span class=\"number\">19530</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;milvus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;milvus-4321&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">databaseName:</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">collectionName:</span> <span class=\"string\">&quot;vector_store&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">embeddingDimension:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">indexType:</span> <span class=\"string\">IVF_FLAT</span></span><br><span class=\"line\">        <span class=\"attr\">metricType:</span> <span class=\"string\">COSINE</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。</p>\n<p>使用加载接口</p>\n<p><img src=\"/typora-user-images/image-20250429183142516.png\" alt=\"image-20250429183142516\"></p>\n"},{"_content":"# Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n\n[toc]\n\n\n\n## 概述\n\n\n\n### **Tool Calling 的核心优势在于：**\n\n简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。\n增强扩展性：工具可以动态注册和调用，支持快速集成新服务。\n提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。\n在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。\n\n\n\n### 功能介绍\n\nSpring AI 的 Tool Calling 提供了以下核心功能：\n\n1. **工具注册与管理**：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。\n2. **工具调用链**：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。\n\n\n\n\n\n在本案例中，我们将实现以下功能：\n\n- 调用外部天气 API，获取指定城市的天气预报。\n- 调用内部 OA 服务，查询员工剩余假期和提交请假申请。\n- 通过 RAG 找到医生后，进行挂号\n- 挂号当日在医院附近找饭店\n- 对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。\n\n\n\n## 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **天气服务**：需要注册天气服务 API [账号申请](https://www.weatherapi.com/)\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**Tool calling 相关服务**\n\n1. **医院挂号服务**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"医院挂号的功能\")\npublic class HospitalService {\n\n    @Tool(description = \"挂号接口，帮患者在线挂号的接口\")\n    String registeInHos (@ToolParam(description = \"医生名称\", required = true) String docName,\n                         @ToolParam(description = \"时间\", required = true) String time ,\n                         @ToolParam(description = \"病情描述\", required = false) String desc,\n                         @ToolParam(description = \"患者ID\") String userId) {\n\n\n        String rtn1 = \"好的，已经为您挂了【\"+docName+\"】医生的号，就诊时间【\"+time+\"】，人数为【\"+desc+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您挂到医生【\"+docName+\"】的号，请稍后再试\";\n\n\n\n\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n\n}\n\n\n~~~\n\n2. 办公OA服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"OA相关服务，主要用于假期查询和请假\")\npublic class OaService {\n\n    private static int LEFT_DAYS = 5;\n    @Tool(description = \"员工剩余假期查询：查询员工还有几天的假期可以请\")\n    public String getCurrentDateTime() {\n        return \"目前，你还有 【\"+LEFT_DAYS+\"】 天的假期可以使用\";\n    }\n\n    @Tool(description = \"员工请假，需要传用户id(userId),和需要请假的天数 (days)\")\n    String askForLeave(@ToolParam(description = \"员工工号\") String userId ,@ToolParam(description = \"需要请假的天数\") String days) {\n        if(!StringUtils.isNumeric(days)){\n            throw new IllegalArgumentException(\"days参数必须是数字\");\n        }\n        int dayInt = Integer.parseInt(days);\n        String rtn1 = \"好的，员工【\"+userId+\"】,已经请假【\"+days+\"】天，请好好享受假期\";\n        String rtn2 = \"你的假期不足，无法请假\";\n        return dayInt>=LEFT_DAYS?rtn2:rtn1;\n    }\n}\n\n\n\n~~~\n\n\n\n3. 饭店查询服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\nimport java.util.Set;\n\n@Slf4j\n@Description(\"饭店查询和预定服务\")\npublic class RestaurantService {\n\n    private static int LEFT_DAYS = 5;\n    private static Set<String> RESTAURANT_NAME = Set.of( \"红龙餐厅\", \"金莲小馆\", \"樱花寿司吧\", \"丝绸之路餐馆\", \"意大利小酒馆\");\n\n    @Tool(description = \"查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃\")\n    public String queryRestaurantName(@ToolParam(description = \"当前位置\", required = true) String location) {\n        // 从 RESTAURANT_NAME 中随机选择\n        String rtn = RESTAURANT_NAME.stream().skip((int) (Math.random() * RESTAURANT_NAME.size())).limit(3).reduce((a, b) -> a + \"，\" + b).get();\n        return \"当前位置\" + location + \"，推荐 restaurantName：\" + rtn;\n    }\n\n    @Tool(description = \"预定餐厅，需要提供饭店名称，时间和人数\")\n    String bookRestaurant (@ToolParam(description = \"饭店名称\", required = true) String restName,\n                           @ToolParam(description = \"订餐时间\", required = true) String time ,\n                           @ToolParam(description = \"就餐人数\", required = true) String userNumber) {\n        String rtn1 = \"好的，已经为您预定了【\"+restName+\"】，就餐时间为【\"+time+\"】，人数为【\"+userNumber+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您预定【\"+restName+\"】，请稍后再试\";\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n}\n\n~~~\n\n\n\n **控制器（ToolCallController.java）**\n\n~~~\n  @GetMapping(value = \"/rag/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChat(@RequestParam String userId, @RequestParam String message) {\n        log.info(\"userId -> [{}], message --> [{}]\", userId, message);\n        String text = chatClient.prompt()\n                .user(message)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))\n                .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))\n                .call().content();\n        return text;\n    }\n~~~\n\n\n\n\n\n\n\n## 测试验证\n\n1、无工具调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n响应结果：\n\n![image-20250508161105090](typora-user-images/image-20250508161105090.png)\n\n**说明**：\n\n- 无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。\n- 这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心\n\n\n\n2、工具调用接口\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n\n\n![image-20250508161546610](typora-user-images/image-20250508161546610.png)\n\n继续调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店\n~~~\n\n\n\n![image-20250508162115569](typora-user-images/image-20250508162115569.png)\n\n\n\n**说明**：\n\n- 工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。\n- 这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性\n\n","source":"categories/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","raw":"# Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n\n[toc]\n\n\n\n## 概述\n\n\n\n### **Tool Calling 的核心优势在于：**\n\n简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。\n增强扩展性：工具可以动态注册和调用，支持快速集成新服务。\n提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。\n在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。\n\n\n\n### 功能介绍\n\nSpring AI 的 Tool Calling 提供了以下核心功能：\n\n1. **工具注册与管理**：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。\n2. **工具调用链**：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。\n\n\n\n\n\n在本案例中，我们将实现以下功能：\n\n- 调用外部天气 API，获取指定城市的天气预报。\n- 调用内部 OA 服务，查询员工剩余假期和提交请假申请。\n- 通过 RAG 找到医生后，进行挂号\n- 挂号当日在医院附近找饭店\n- 对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。\n\n\n\n## 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **天气服务**：需要注册天气服务 API [账号申请](https://www.weatherapi.com/)\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**Tool calling 相关服务**\n\n1. **医院挂号服务**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"医院挂号的功能\")\npublic class HospitalService {\n\n    @Tool(description = \"挂号接口，帮患者在线挂号的接口\")\n    String registeInHos (@ToolParam(description = \"医生名称\", required = true) String docName,\n                         @ToolParam(description = \"时间\", required = true) String time ,\n                         @ToolParam(description = \"病情描述\", required = false) String desc,\n                         @ToolParam(description = \"患者ID\") String userId) {\n\n\n        String rtn1 = \"好的，已经为您挂了【\"+docName+\"】医生的号，就诊时间【\"+time+\"】，人数为【\"+desc+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您挂到医生【\"+docName+\"】的号，请稍后再试\";\n\n\n\n\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n\n}\n\n\n~~~\n\n2. 办公OA服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"OA相关服务，主要用于假期查询和请假\")\npublic class OaService {\n\n    private static int LEFT_DAYS = 5;\n    @Tool(description = \"员工剩余假期查询：查询员工还有几天的假期可以请\")\n    public String getCurrentDateTime() {\n        return \"目前，你还有 【\"+LEFT_DAYS+\"】 天的假期可以使用\";\n    }\n\n    @Tool(description = \"员工请假，需要传用户id(userId),和需要请假的天数 (days)\")\n    String askForLeave(@ToolParam(description = \"员工工号\") String userId ,@ToolParam(description = \"需要请假的天数\") String days) {\n        if(!StringUtils.isNumeric(days)){\n            throw new IllegalArgumentException(\"days参数必须是数字\");\n        }\n        int dayInt = Integer.parseInt(days);\n        String rtn1 = \"好的，员工【\"+userId+\"】,已经请假【\"+days+\"】天，请好好享受假期\";\n        String rtn2 = \"你的假期不足，无法请假\";\n        return dayInt>=LEFT_DAYS?rtn2:rtn1;\n    }\n}\n\n\n\n~~~\n\n\n\n3. 饭店查询服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\nimport java.util.Set;\n\n@Slf4j\n@Description(\"饭店查询和预定服务\")\npublic class RestaurantService {\n\n    private static int LEFT_DAYS = 5;\n    private static Set<String> RESTAURANT_NAME = Set.of( \"红龙餐厅\", \"金莲小馆\", \"樱花寿司吧\", \"丝绸之路餐馆\", \"意大利小酒馆\");\n\n    @Tool(description = \"查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃\")\n    public String queryRestaurantName(@ToolParam(description = \"当前位置\", required = true) String location) {\n        // 从 RESTAURANT_NAME 中随机选择\n        String rtn = RESTAURANT_NAME.stream().skip((int) (Math.random() * RESTAURANT_NAME.size())).limit(3).reduce((a, b) -> a + \"，\" + b).get();\n        return \"当前位置\" + location + \"，推荐 restaurantName：\" + rtn;\n    }\n\n    @Tool(description = \"预定餐厅，需要提供饭店名称，时间和人数\")\n    String bookRestaurant (@ToolParam(description = \"饭店名称\", required = true) String restName,\n                           @ToolParam(description = \"订餐时间\", required = true) String time ,\n                           @ToolParam(description = \"就餐人数\", required = true) String userNumber) {\n        String rtn1 = \"好的，已经为您预定了【\"+restName+\"】，就餐时间为【\"+time+\"】，人数为【\"+userNumber+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您预定【\"+restName+\"】，请稍后再试\";\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n}\n\n~~~\n\n\n\n **控制器（ToolCallController.java）**\n\n~~~\n  @GetMapping(value = \"/rag/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChat(@RequestParam String userId, @RequestParam String message) {\n        log.info(\"userId -> [{}], message --> [{}]\", userId, message);\n        String text = chatClient.prompt()\n                .user(message)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))\n                .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))\n                .call().content();\n        return text;\n    }\n~~~\n\n\n\n\n\n\n\n## 测试验证\n\n1、无工具调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n响应结果：\n\n![image-20250508161105090](typora-user-images/image-20250508161105090.png)\n\n**说明**：\n\n- 无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。\n- 这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心\n\n\n\n2、工具调用接口\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n\n\n![image-20250508161546610](typora-user-images/image-20250508161546610.png)\n\n继续调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店\n~~~\n\n\n\n![image-20250508162115569](typora-user-images/image-20250508162115569.png)\n\n\n\n**说明**：\n\n- 工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。\n- 这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性\n\n","date":"2025-06-04T10:13:19.151Z","updated":"2025-05-08T08:21:55.849Z","path":"categories/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.html","_id":"cmbhshryf000cnffyfp1oebp1","title":"","comments":1,"layout":"page","content":"<h1 id=\"Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\"></a>Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程</h1><p>[toc]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"Tool-Calling-的核心优势在于：\"><a href=\"#Tool-Calling-的核心优势在于：\" class=\"headerlink\" title=\"Tool Calling 的核心优势在于：\"></a><strong>Tool Calling 的核心优势在于：</strong></h3><p>简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。<br>增强扩展性：工具可以动态注册和调用，支持快速集成新服务。<br>提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。<br>在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Spring AI 的 Tool Calling 提供了以下核心功能：</p>\n<ol>\n<li><strong>工具注册与管理</strong>：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。</li>\n<li><strong>工具调用链</strong>：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。</li>\n</ol>\n<p>在本案例中，我们将实现以下功能：</p>\n<ul>\n<li>调用外部天气 API，获取指定城市的天气预报。</li>\n<li>调用内部 OA 服务，查询员工剩余假期和提交请假申请。</li>\n<li>通过 RAG 找到医生后，进行挂号</li>\n<li>挂号当日在医院附近找饭店</li>\n<li>对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>天气服务</strong>：需要注册天气服务 API <a href=\"https://www.weatherapi.com/\">账号申请</a></li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>Tool calling 相关服务</strong></p>\n<ol>\n<li><strong>医院挂号服务</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;医院挂号的功能&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HospitalService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;挂号接口，帮患者在线挂号的接口&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">registeInHos</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;医生名称&quot;, required = true)</span> String docName,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;病情描述&quot;, required = false)</span> String desc,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;患者ID&quot;)</span> String userId)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您挂了【&quot;</span>+docName+<span class=\"string\">&quot;】医生的号，就诊时间【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+desc+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您挂到医生【&quot;</span>+docName+<span class=\"string\">&quot;】的号，请稍后再试&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>办公OA服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;OA相关服务，主要用于假期查询和请假&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OaService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工剩余假期查询：查询员工还有几天的假期可以请&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCurrentDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;目前，你还有 【&quot;</span>+LEFT_DAYS+<span class=\"string\">&quot;】 天的假期可以使用&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工请假，需要传用户id(userId),和需要请假的天数 (days)&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">askForLeave</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;员工工号&quot;)</span> String userId ,<span class=\"meta\">@ToolParam(description = &quot;需要请假的天数&quot;)</span> String days)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(days))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;days参数必须是数字&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dayInt</span> <span class=\"operator\">=</span> Integer.parseInt(days);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，员工【&quot;</span>+userId+<span class=\"string\">&quot;】,已经请假【&quot;</span>+days+<span class=\"string\">&quot;】天，请好好享受假期&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你的假期不足，无法请假&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayInt&gt;=LEFT_DAYS?rtn2:rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>饭店查询服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;饭店查询和预定服务&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestaurantService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; RESTAURANT_NAME = Set.of( <span class=\"string\">&quot;红龙餐厅&quot;</span>, <span class=\"string\">&quot;金莲小馆&quot;</span>, <span class=\"string\">&quot;樱花寿司吧&quot;</span>, <span class=\"string\">&quot;丝绸之路餐馆&quot;</span>, <span class=\"string\">&quot;意大利小酒馆&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryRestaurantName</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;当前位置&quot;, required = true)</span> String location)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从 RESTAURANT_NAME 中随机选择</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn</span> <span class=\"operator\">=</span> RESTAURANT_NAME.stream().skip((<span class=\"type\">int</span>) (Math.random() * RESTAURANT_NAME.size())).limit(<span class=\"number\">3</span>).reduce((a, b) -&gt; a + <span class=\"string\">&quot;，&quot;</span> + b).get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;当前位置&quot;</span> + location + <span class=\"string\">&quot;，推荐 restaurantName：&quot;</span> + rtn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;预定餐厅，需要提供饭店名称，时间和人数&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">bookRestaurant</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;饭店名称&quot;, required = true)</span> String restName,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;订餐时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;就餐人数&quot;, required = true)</span> String userNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您预定了【&quot;</span>+restName+<span class=\"string\">&quot;】，就餐时间为【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+userNumber+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您预定【&quot;</span>+restName+<span class=\"string\">&quot;】，请稍后再试&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>控制器（ToolCallController.java）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(value = &quot;/rag/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span><br><span class=\"line\">  public String ragChat(@RequestParam String userId, @RequestParam String message) &#123;</span><br><span class=\"line\">      log.info(&quot;userId -&gt; [&#123;&#125;], message --&gt; [&#123;&#125;]&quot;, userId, message);</span><br><span class=\"line\">      String text = chatClient.prompt()</span><br><span class=\"line\">              .user(message)</span><br><span class=\"line\">              .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))</span><br><span class=\"line\">              .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))</span><br><span class=\"line\">              .call().content();</span><br><span class=\"line\">      return text;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>1、无工具调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n<p>响应结果：</p>\n<p><img src=\"/typora-user-images/image-20250508161105090.png\" alt=\"image-20250508161105090\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。</li>\n<li>这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心</li>\n</ul>\n<p>2、工具调用接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508161546610.png\" alt=\"image-20250508161546610\"></p>\n<p>继续调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508162115569.png\" alt=\"image-20250508162115569\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。</li>\n<li>这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\"></a>Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程</h1><p>[toc]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"Tool-Calling-的核心优势在于：\"><a href=\"#Tool-Calling-的核心优势在于：\" class=\"headerlink\" title=\"Tool Calling 的核心优势在于：\"></a><strong>Tool Calling 的核心优势在于：</strong></h3><p>简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。<br>增强扩展性：工具可以动态注册和调用，支持快速集成新服务。<br>提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。<br>在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Spring AI 的 Tool Calling 提供了以下核心功能：</p>\n<ol>\n<li><strong>工具注册与管理</strong>：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。</li>\n<li><strong>工具调用链</strong>：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。</li>\n</ol>\n<p>在本案例中，我们将实现以下功能：</p>\n<ul>\n<li>调用外部天气 API，获取指定城市的天气预报。</li>\n<li>调用内部 OA 服务，查询员工剩余假期和提交请假申请。</li>\n<li>通过 RAG 找到医生后，进行挂号</li>\n<li>挂号当日在医院附近找饭店</li>\n<li>对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>天气服务</strong>：需要注册天气服务 API <a href=\"https://www.weatherapi.com/\">账号申请</a></li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>Tool calling 相关服务</strong></p>\n<ol>\n<li><strong>医院挂号服务</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;医院挂号的功能&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HospitalService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;挂号接口，帮患者在线挂号的接口&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">registeInHos</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;医生名称&quot;, required = true)</span> String docName,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;病情描述&quot;, required = false)</span> String desc,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;患者ID&quot;)</span> String userId)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您挂了【&quot;</span>+docName+<span class=\"string\">&quot;】医生的号，就诊时间【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+desc+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您挂到医生【&quot;</span>+docName+<span class=\"string\">&quot;】的号，请稍后再试&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>办公OA服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;OA相关服务，主要用于假期查询和请假&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OaService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工剩余假期查询：查询员工还有几天的假期可以请&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCurrentDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;目前，你还有 【&quot;</span>+LEFT_DAYS+<span class=\"string\">&quot;】 天的假期可以使用&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工请假，需要传用户id(userId),和需要请假的天数 (days)&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">askForLeave</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;员工工号&quot;)</span> String userId ,<span class=\"meta\">@ToolParam(description = &quot;需要请假的天数&quot;)</span> String days)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(days))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;days参数必须是数字&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dayInt</span> <span class=\"operator\">=</span> Integer.parseInt(days);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，员工【&quot;</span>+userId+<span class=\"string\">&quot;】,已经请假【&quot;</span>+days+<span class=\"string\">&quot;】天，请好好享受假期&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你的假期不足，无法请假&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayInt&gt;=LEFT_DAYS?rtn2:rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>饭店查询服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;饭店查询和预定服务&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestaurantService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; RESTAURANT_NAME = Set.of( <span class=\"string\">&quot;红龙餐厅&quot;</span>, <span class=\"string\">&quot;金莲小馆&quot;</span>, <span class=\"string\">&quot;樱花寿司吧&quot;</span>, <span class=\"string\">&quot;丝绸之路餐馆&quot;</span>, <span class=\"string\">&quot;意大利小酒馆&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryRestaurantName</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;当前位置&quot;, required = true)</span> String location)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从 RESTAURANT_NAME 中随机选择</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn</span> <span class=\"operator\">=</span> RESTAURANT_NAME.stream().skip((<span class=\"type\">int</span>) (Math.random() * RESTAURANT_NAME.size())).limit(<span class=\"number\">3</span>).reduce((a, b) -&gt; a + <span class=\"string\">&quot;，&quot;</span> + b).get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;当前位置&quot;</span> + location + <span class=\"string\">&quot;，推荐 restaurantName：&quot;</span> + rtn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;预定餐厅，需要提供饭店名称，时间和人数&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">bookRestaurant</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;饭店名称&quot;, required = true)</span> String restName,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;订餐时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;就餐人数&quot;, required = true)</span> String userNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您预定了【&quot;</span>+restName+<span class=\"string\">&quot;】，就餐时间为【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+userNumber+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您预定【&quot;</span>+restName+<span class=\"string\">&quot;】，请稍后再试&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>控制器（ToolCallController.java）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(value = &quot;/rag/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span><br><span class=\"line\">  public String ragChat(@RequestParam String userId, @RequestParam String message) &#123;</span><br><span class=\"line\">      log.info(&quot;userId -&gt; [&#123;&#125;], message --&gt; [&#123;&#125;]&quot;, userId, message);</span><br><span class=\"line\">      String text = chatClient.prompt()</span><br><span class=\"line\">              .user(message)</span><br><span class=\"line\">              .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))</span><br><span class=\"line\">              .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))</span><br><span class=\"line\">              .call().content();</span><br><span class=\"line\">      return text;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>1、无工具调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n<p>响应结果：</p>\n<p><img src=\"/typora-user-images/image-20250508161105090.png\" alt=\"image-20250508161105090\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。</li>\n<li>这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心</li>\n</ul>\n<p>2、工具调用接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508161546610.png\" alt=\"image-20250508161546610\"></p>\n<p>继续调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20250508162115569.png\" alt=\"image-20250508162115569\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。</li>\n<li>这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性</li>\n</ul>\n"},{"_content":"https://blog.csdn.net/chen2017sheng/article/details/145779143  AANl  投喂\n\n\n\nhttps://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502 二流吃货\n\n\n\nhttps://blog.csdn.net/weixin_42289362?type=blog","source":"categories/Untitled.md","raw":"https://blog.csdn.net/chen2017sheng/article/details/145779143  AANl  投喂\n\n\n\nhttps://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502 二流吃货\n\n\n\nhttps://blog.csdn.net/weixin_42289362?type=blog","date":"2025-06-04T10:13:19.226Z","updated":"2025-05-07T02:33:06.342Z","path":"categories/Untitled.html","_id":"cmbhshs0u000dnffy730h5s98","title":"","comments":1,"layout":"page","content":"<p><a href=\"https://blog.csdn.net/chen2017sheng/article/details/145779143\">https://blog.csdn.net/chen2017sheng/article/details/145779143</a>  AANl  投喂</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502\">https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502</a> 二流吃货</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362?type=blog\">https://blog.csdn.net/weixin_42289362?type=blog</a></p>\n","excerpt":"","more":"<p><a href=\"https://blog.csdn.net/chen2017sheng/article/details/145779143\">https://blog.csdn.net/chen2017sheng/article/details/145779143</a>  AANl  投喂</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502\">https://blog.csdn.net/weixin_42289362/article/details/146314875?spm=1001.2014.3001.5502</a> 二流吃货</p>\n<p><a href=\"https://blog.csdn.net/weixin_42289362?type=blog\">https://blog.csdn.net/weixin_42289362?type=blog</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"categories/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","date":"2025-06-04T10:31:53.477Z","updated":"2025-06-04T08:01:49.000Z","path":"categories/hello-world.html","_id":"cmbht5nsv0000fsfy0hbg0nhd","comments":1,"layout":"page","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-06-04T08:01:49.374Z","updated":"2025-06-04T08:01:49.374Z","comments":1,"layout":"post","photos":[],"_id":"cmbhrd5ei0001y2kyb7sccfmh","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}