{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/image/shouye.jpg","path":"image/shouye.jpg","modified":0,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","path":"typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","path":"typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","path":"typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","path":"typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","path":"typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","path":"typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","path":"typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","modified":0,"renderable":0},{"_id":"source/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","path":"typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419091747915.png","path":"typora-user-images/image-20250419091747915.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419092017527.png","path":"typora-user-images/image-20250419092017527.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419102848756.png","path":"typora-user-images/image-20250419102848756.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419105704031.png","path":"typora-user-images/image-20250419105704031.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419112758947.png","path":"typora-user-images/image-20250419112758947.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419113622811.png","path":"typora-user-images/image-20250419113622811.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419181524113.png","path":"typora-user-images/image-20250419181524113.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419181631076.png","path":"typora-user-images/image-20250419181631076.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250419181745960.png","path":"typora-user-images/image-20250419181745960.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250422114422258.png","path":"typora-user-images/image-20250422114422258.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250422114322913.png","path":"typora-user-images/image-20250422114322913.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250422114555482.png","path":"typora-user-images/image-20250422114555482.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250422114642336.png","path":"typora-user-images/image-20250422114642336.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250425174252871.png","path":"typora-user-images/image-20250425174252871.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250425104935964.png","path":"typora-user-images/image-20250425104935964.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250425104935964-5549379.png","path":"typora-user-images/image-20250425104935964-5549379.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429172724826.png","path":"typora-user-images/image-20250429172724826.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429174851066.png","path":"typora-user-images/image-20250429174851066.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429175228086.png","path":"typora-user-images/image-20250429175228086.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429174959408.png","path":"typora-user-images/image-20250429174959408.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429175342611.png","path":"typora-user-images/image-20250429175342611.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429175421998.png","path":"typora-user-images/image-20250429175421998.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429175540574.png","path":"typora-user-images/image-20250429175540574.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429180401580.png","path":"typora-user-images/image-20250429180401580.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429181131778.png","path":"typora-user-images/image-20250429181131778.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429181039571.png","path":"typora-user-images/image-20250429181039571.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429181312813.png","path":"typora-user-images/image-20250429181312813.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250429183142516.png","path":"typora-user-images/image-20250429183142516.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250508161105090.png","path":"typora-user-images/image-20250508161105090.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250508161546610.png","path":"typora-user-images/image-20250508161546610.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20250508162115569.png","path":"typora-user-images/image-20250508162115569.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/1134316536b140eda97bef40993a2072.png","path":"typora-user-images/1134316536b140eda97bef40993a2072.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png","path":"typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png","path":"typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png","path":"typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/2afdf3d7222117202a1069d7e1587c12.png#align=left&display=inline&height=655&name=image.png","path":"typora-user-images/2afdf3d7222117202a1069d7e1587c12.png#align=left&display=inline&height=655&name=image.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png","path":"typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/72746e97a2cd474bb21601f507779a25.png","path":"typora-user-images/72746e97a2cd474bb21601f507779a25.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/779689.png","path":"typora-user-images/779689.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png","path":"typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/afb25fa106bada4b37da64e902060269.png","path":"typora-user-images/afb25fa106bada4b37da64e902060269.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png","path":"typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png","path":"typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230627191528034.png","path":"typora-user-images/image-20230627191528034.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230628093611653.png","path":"typora-user-images/image-20230628093611653.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230628093823674.png","path":"typora-user-images/image-20230628093823674.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230628094058045.png","path":"typora-user-images/image-20230628094058045.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230628094428585.png","path":"typora-user-images/image-20230628094428585.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230628094521252.png","path":"typora-user-images/image-20230628094521252.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230921165730484.png","path":"typora-user-images/image-20230921165730484.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230921170222187.png","path":"typora-user-images/image-20230921170222187.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230921170734063.png","path":"typora-user-images/image-20230921170734063.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230921171005578.png","path":"typora-user-images/image-20230921171005578.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230921171251668.png","path":"typora-user-images/image-20230921171251668.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144124237.png","path":"typora-user-images/image-20230923144124237.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144238782.png","path":"typora-user-images/image-20230923144238782.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144315232.png","path":"typora-user-images/image-20230923144315232.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144347556.png","path":"typora-user-images/image-20230923144347556.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144414595.png","path":"typora-user-images/image-20230923144414595.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144526897.png","path":"typora-user-images/image-20230923144526897.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144634136.png","path":"typora-user-images/image-20230923144634136.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923144953818.png","path":"typora-user-images/image-20230923144953818.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923145029314.png","path":"typora-user-images/image-20230923145029314.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923145122020.png","path":"typora-user-images/image-20230923145122020.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923145717673.png","path":"typora-user-images/image-20230923145717673.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923145922760.png","path":"typora-user-images/image-20230923145922760.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923150103329.png","path":"typora-user-images/image-20230923150103329.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923151411555.png","path":"typora-user-images/image-20230923151411555.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923152344429.png","path":"typora-user-images/image-20230923152344429.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923154459874.png","path":"typora-user-images/image-20230923154459874.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923154644281.png","path":"typora-user-images/image-20230923154644281.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923162506692.png","path":"typora-user-images/image-20230923162506692.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20230923162555344.png","path":"typora-user-images/image-20230923162555344.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231008103734081.png","path":"typora-user-images/image-20231008103734081.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024092452701.png","path":"typora-user-images/image-20231024092452701.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024092756314.png","path":"typora-user-images/image-20231024092756314.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024092913063.png","path":"typora-user-images/image-20231024092913063.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024094558547.png","path":"typora-user-images/image-20231024094558547.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024095726856.png","path":"typora-user-images/image-20231024095726856.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024095816182.png","path":"typora-user-images/image-20231024095816182.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024095843156.png","path":"typora-user-images/image-20231024095843156.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024101307177.png","path":"typora-user-images/image-20231024101307177.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024102201145.png","path":"typora-user-images/image-20231024102201145.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231024104338016.png","path":"typora-user-images/image-20231024104338016.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231201143940420.png","path":"typora-user-images/image-20231201143940420.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231201144020748.png","path":"typora-user-images/image-20231201144020748.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231201144119343.png","path":"typora-user-images/image-20231201144119343.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20231201153117052.png","path":"typora-user-images/image-20231201153117052.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219113719157.png","path":"typora-user-images/image-20240219113719157.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219114233026.png","path":"typora-user-images/image-20240219114233026.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219114343151.png","path":"typora-user-images/image-20240219114343151.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219114515952.png","path":"typora-user-images/image-20240219114515952.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219144606520.png","path":"typora-user-images/image-20240219144606520.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219150634816.png","path":"typora-user-images/image-20240219150634816.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219150821657.png","path":"typora-user-images/image-20240219150821657.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219150910898.png","path":"typora-user-images/image-20240219150910898.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219151031448.png","path":"typora-user-images/image-20240219151031448.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219151212695.png","path":"typora-user-images/image-20240219151212695.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219152607457.png","path":"typora-user-images/image-20240219152607457.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219152638390.png","path":"typora-user-images/image-20240219152638390.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219153810692.png","path":"typora-user-images/image-20240219153810692.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240219154032740.png","path":"typora-user-images/image-20240219154032740.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220094227461.png","path":"typora-user-images/image-20240220094227461.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220095107292.png","path":"typora-user-images/image-20240220095107292.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220095645324.png","path":"typora-user-images/image-20240220095645324.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220101010503.png","path":"typora-user-images/image-20240220101010503.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220101429844.png","path":"typora-user-images/image-20240220101429844.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220101701432.png","path":"typora-user-images/image-20240220101701432.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220102231198.png","path":"typora-user-images/image-20240220102231198.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220102332812.png","path":"typora-user-images/image-20240220102332812.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220102431979.png","path":"typora-user-images/image-20240220102431979.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220102457440.png","path":"typora-user-images/image-20240220102457440.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220102621265.png","path":"typora-user-images/image-20240220102621265.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220102752041.png","path":"typora-user-images/image-20240220102752041.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220103006353.png","path":"typora-user-images/image-20240220103006353.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220103217414.png","path":"typora-user-images/image-20240220103217414.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240220144907721.png","path":"typora-user-images/image-20240220144907721.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221091441127.png","path":"typora-user-images/image-20240221091441127.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221091728143.png","path":"typora-user-images/image-20240221091728143.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221091837069.png","path":"typora-user-images/image-20240221091837069.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221092028120.png","path":"typora-user-images/image-20240221092028120.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221092353574.png","path":"typora-user-images/image-20240221092353574.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221092419244.png","path":"typora-user-images/image-20240221092419244.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221092834785.png","path":"typora-user-images/image-20240221092834785.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221093021265.png","path":"typora-user-images/image-20240221093021265.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221093711599.png","path":"typora-user-images/image-20240221093711599.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221093819873.png","path":"typora-user-images/image-20240221093819873.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221094018816.png","path":"typora-user-images/image-20240221094018816.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221094225094.png","path":"typora-user-images/image-20240221094225094.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221094244920.png","path":"typora-user-images/image-20240221094244920.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221094447664.png","path":"typora-user-images/image-20240221094447664.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221094852671.png","path":"typora-user-images/image-20240221094852671.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221095745495.png","path":"typora-user-images/image-20240221095745495.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240221155333042.png","path":"typora-user-images/image-20240221155333042.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222152145318.png","path":"typora-user-images/image-20240222152145318.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222164404555.png","path":"typora-user-images/image-20240222164404555.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222164433038.png","path":"typora-user-images/image-20240222164433038.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222164517003.png","path":"typora-user-images/image-20240222164517003.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222164533515.png","path":"typora-user-images/image-20240222164533515.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222175326047.png","path":"typora-user-images/image-20240222175326047.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222175403127.png","path":"typora-user-images/image-20240222175403127.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222180227522.png","path":"typora-user-images/image-20240222180227522.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222180306582.png","path":"typora-user-images/image-20240222180306582.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222180325402.png","path":"typora-user-images/image-20240222180325402.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222180337721.png","path":"typora-user-images/image-20240222180337721.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240222181235735.png","path":"typora-user-images/image-20240222181235735.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240223110332038.png","path":"typora-user-images/image-20240223110332038.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240223110630296.png","path":"typora-user-images/image-20240223110630296.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240318202804603.png","path":"typora-user-images/image-20240318202804603.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240412121048381.png","path":"typora-user-images/image-20240412121048381.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240415090937231.png","path":"typora-user-images/image-20240415090937231.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240415091018922.png","path":"typora-user-images/image-20240415091018922.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240415094839642.png","path":"typora-user-images/image-20240415094839642.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240416113821316.png","path":"typora-user-images/image-20240416113821316.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240416114024941.png","path":"typora-user-images/image-20240416114024941.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240416114808884.png","path":"typora-user-images/image-20240416114808884.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240416114924463.png","path":"typora-user-images/image-20240416114924463.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240416120116317.png","path":"typora-user-images/image-20240416120116317.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240417091316659.png","path":"typora-user-images/image-20240417091316659.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240417092003988.png","path":"typora-user-images/image-20240417092003988.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240417092118543.png","path":"typora-user-images/image-20240417092118543.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240507111933014.png","path":"typora-user-images/image-20240507111933014.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240507112405845.png","path":"typora-user-images/image-20240507112405845.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240507112941777.png","path":"typora-user-images/image-20240507112941777.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240507112114709.png","path":"typora-user-images/image-20240507112114709.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240509105505568.png","path":"typora-user-images/image-20240509105505568.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240509105539663.png","path":"typora-user-images/image-20240509105539663.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240510121326830.png","path":"typora-user-images/image-20240510121326830.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240510121631586.png","path":"typora-user-images/image-20240510121631586.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240510121854650.png","path":"typora-user-images/image-20240510121854650.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240514095424805.png","path":"typora-user-images/image-20240514095424805.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240514095650303.png","path":"typora-user-images/image-20240514095650303.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240514095835213.png","path":"typora-user-images/image-20240514095835213.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240516094845785.png","path":"typora-user-images/image-20240516094845785.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240520161819461.png","path":"typora-user-images/image-20240520161819461.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240521094502177.png","path":"typora-user-images/image-20240521094502177.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240522090312508.png","path":"typora-user-images/image-20240522090312508.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240522090352573.png","path":"typora-user-images/image-20240522090352573.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240522090958255.png","path":"typora-user-images/image-20240522090958255.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240522091143334.png","path":"typora-user-images/image-20240522091143334.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240524174544128.png","path":"typora-user-images/image-20240524174544128.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240524175254196.png","path":"typora-user-images/image-20240524175254196.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/image-20240524175527451.png","path":"typora-user-images/image-20240524175527451.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png","path":"typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png","path":"typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png","path":"typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70.png","path":"typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70.png","modified":0,"renderable":0},{"_id":"source/typora-user-images/webp","path":"typora-user-images/webp","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"1d076d150ac008c580e43b38ef410b6fb577d993","modified":1749034204525},{"_id":"source/about/index.md","hash":"6f31565e4e99bb6fbf55be5771c727ada0bb6bdb","modified":1749030067185},{"_id":"source/categories/index.md","hash":"063dbfa737baf9009645a00100ec0cec8d0eb92b","modified":1749030043836},{"_id":"source/comments/index.md","hash":"7b6b47f281ec1a444ee3e4cc13d6f47d11b17534","modified":1749030059963},{"_id":"source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1748598547000},{"_id":"source/link/index.md","hash":"d25bfd8890c1a4680257bafd013de0323a449965","modified":1749030063718},{"_id":"source/movies/index.md","hash":"e903c93c69e2e624fd3aad6be2efafad14c612ab","modified":1749030056487},{"_id":"source/music/index.md","hash":"a98702749c899f0b85eea15eccf737e5fd13b09d","modified":1749030048081},{"_id":"source/picture/index.md","hash":"9d8a79dcdd7be979da2d4aef0a3c8e67a34cad5e","modified":1749030052571},{"_id":"source/tags/index-1.md","hash":"64e1a23855a7dbd195d4db7219d48f7b240476e4","modified":1749030035728},{"_id":"source/tags/index.md","hash":"5fdc6f265d17bd71664bb6b844bf6e1a36e1755b","modified":1749029228364},{"_id":"source/image/shouye.jpg","hash":"e75ad850c0d85a460832e196ab1940ce99841c8f","modified":1748598528000},{"_id":"themes/butterfly/.gitignore","hash":"76e6365d33cec02b90d00699da3c0ddef1cd7efa","modified":1748584750000},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1748584750000},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1748584750000},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1748584750000},{"_id":"themes/butterfly/_config.butterfly.yml","hash":"7166aff350fcf84cbc01835fad5731eb855cecd7","modified":1748584750000},{"_id":"themes/butterfly/package.json","hash":"dd598502734c702eed104a3f955f75568e18a29e","modified":1748584750000},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1748584750000},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1748584750000},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1748584750000},{"_id":"themes/butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1748584750000},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1748584750000},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1748584750000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1748584750000},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1748584750000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1748584750000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1748584750000},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1748584750000},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1748584750000},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1748584750000},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1748584750000},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1748584750000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1748584750000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1748584750000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1748584750000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1748584750000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"6bd41add3a45e55d5e51eab5285a2d1a909d37f3","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"43f951b639038f3bc01deea03368d8dcf492cbb0","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1748584750000},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1748584750000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1748584750000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"a07b586b510aa2df953102d998e84207acc34f9b","modified":1748584750000},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"10ffed853a935498f1f5da2c5b57200c957874a7","modified":1748584750000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1748584750000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1748584750000},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1748584750000},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1748584750000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1748584750000},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1748584750000},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1748584750000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1748584750000},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1748584750000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1748584750000},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"efe4f8019632b51c92c4f7628758538305e06e47","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1748584750000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"d7b988d8588207086670f39aa49fce442c429f7a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1748584750000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1748584750000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1748584750000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1748584750000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1748584750000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1748584750000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1748584750000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1748584750000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1748584750000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1748584750000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"febff991595504d8e850ced0b9cc090f02ed97f0","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1748584750000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1748584750000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1748584750000},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1748584750000},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/comments/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/link/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/movies/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/music/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/picture/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/tags/index-1.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/2025/06/04/hello-world/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/archives/2025/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/archives/2025/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1749030102757},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1749030102757},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1749030102757},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1749030102757},{"_id":"public/css/index.css","hash":"a134b9ab9b0d4ca6444a66bdcc55bd8f600244f7","modified":1749030102757},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749030102757},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1749030102757},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1749030102757},{"_id":"public/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1749030102757},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1749030102757},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1749030102757},{"_id":"public/image/shouye.jpg","hash":"e75ad850c0d85a460832e196ab1940ce99841c8f","modified":1749030102757},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1749030102757},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/.DS_Store","hash":"f265e4b85368bb93c3a912886e5b4397d2b85f99","modified":1745918838711},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","hash":"f928e205aed451715e66fcdabeda40acc17016a4","modified":1745053627459},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","hash":"ca777da537d0a7d9f37c3ee40b05b5c5004e2b05","modified":1745053849829},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","hash":"731bac951d911ce1d06ab2fffad52071e9e173ec","modified":1745053521350},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","hash":"9ae3c7049609cfddf93e501d51c6f6b2f9c54fe1","modified":1745053653702},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419105704031.png","hash":"ad3c04f5ceef79bac1791e61f283a27491face21","modified":1745031424039},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429172724826.png","hash":"da273dc2bd390a26138020b93e706ca8fbf8b261","modified":1745918844838},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181131778.png","hash":"0e4282464cd34c9a1222095b0922267be1422f08","modified":1745921491779},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181312813.png","hash":"aebd7fad268451f30150c11f08cc75190e10f78b","modified":1745921592816},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","hash":"6ee6552a20c710aa26ace986d93c09f17ab35a8d","modified":1745053715414},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","hash":"9881da6dc6387905b676019588e4d61dc9be066f","modified":1745053779852},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419113622811.png","hash":"c5263c854a53d3d911d53bc11404b5867969c0a5","modified":1745033782812},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425174252871.png","hash":"c33f809927ec425d0ec5a5de446efeb804cc0714","modified":1745574172883},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429181039571.png","hash":"ac3ff91bad60dd8fcf32470de8468bd10c0a1cc3","modified":1745921439575},{"_id":"source/categories/Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势.md","hash":"d7b384fc0abb9cc26595b28c6a8fdff5513e4b08","modified":1745396492161},{"_id":"source/categories/Spring AI Alibaba/.DS_Store","hash":"ab66dc2c07d915c77eb7ae77d9f6a17171b49e61","modified":1746758325209},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","hash":"3e8e52832ab059338441700da2ef5edc38a17989","modified":1745056576496},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","hash":"4614676542fda9942a414b8c7b7b49991cc26181","modified":1745056587668},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","hash":"66a8cc5009fe492b9eefab173931e9138130c6ae","modified":1745923292331},{"_id":"source/categories/Spring AI Alibaba/Untitled.md","hash":"852945edd8f145c8130c9a32a924b6daf4b284bb","modified":1746585186342},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","hash":"a935ba41973210a2d25f32608240378e56fccc66","modified":1745923323405},{"_id":"source/categories/Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","hash":"c30f71ce919f7384e101a058c6deeb1d673d36c8","modified":1746692515849},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","hash":"3f5c8e5d220e8ee80edd693aa28b38db2042606f","modified":1745053412261},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181745960.png","hash":"202acd3f001b8bc0c1eeae98b758b1651f83021a","modified":1745057865972},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419092017527.png","hash":"651a6f76b900f6d32f5c8dcef8b24803841dc1c2","modified":1745025617528},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","hash":"9a12d9ec34beb4470dd34ee9cdbf24795a8ce8ba","modified":1745053589651},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419102848756.png","hash":"46350b8cc65a3e542d3c721fff82d18b7f42cfc6","modified":1745029728757},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419112758947.png","hash":"472e0caec1f9bedaa1e95acdeb4e0a21b0b74ee0","modified":1745033278949},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114642336.png","hash":"2be0181072e00a32cf7c4ffc3da3fc9b59ee6bae","modified":1745293602337},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429183142516.png","hash":"344896ff25fb43bf4ee4b651041ac1cbceda290c","modified":1745922702519},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419091747915.png","hash":"abbb5a2b42a2feea4f067124327ba7a2e0b49844","modified":1745025467915},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181631076.png","hash":"30174e45262d9a229860a7cb6c8cc056d56a2f16","modified":1745057791077},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175540574.png","hash":"99de9164e275203a2e77465a3c79b96e1ce6dcd4","modified":1745920540584},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508161546610.png","hash":"b278e1e74774ebf76673cd87797fd25599530a42","modified":1746692146612},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425104935964-5549379.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508161105090.png","hash":"c5baca122ea19651a96d3e2008e7eefb815794fa","modified":1746691865104},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175342611.png","hash":"9ab1b9aaa6241fbe4c8d2e16f82f09bfdba51311","modified":1745920422612},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250425104935964.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250419181524113.png","hash":"f0a282ddcc5dd3b69d8cfa679c4bcd976ad82e5b","modified":1745057724118},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114322913.png","hash":"6a02df96a96bb0544d1d009868bdba0a8fe5850a","modified":1745293402925},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114422258.png","hash":"6d9b7578a561388f37ad2647180a50dcaa735b07","modified":1745293462259},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175228086.png","hash":"698a2ecc2f30b5c94f52121a41290c671451afa9","modified":1745920348093},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429175421998.png","hash":"fe77c6a9999c12a0148bb1990ae045b2bcb63418","modified":1745920462000},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250508162115569.png","hash":"a05a74331a80ea339f895adfcd63f451569a9f23","modified":1746692475571},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250422114555482.png","hash":"e33332a744c886e568bfe33b306d6f57b0e54f49","modified":1745293555482},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429180401580.png","hash":"a9206b3cba0d01688e0feac3ccba76ce81b93408","modified":1745921041592},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429174851066.png","hash":"1e66607d3f47bb278267622dd24df86e4e26237e","modified":1745920131077},{"_id":"source/categories/Spring AI Alibaba/typora-user-images/image-20250429174959408.png","hash":"12c835276e5309ffd874ab41de15a9148b6d65ca","modified":1745920199410},{"_id":"source/categories/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","hash":"f928e205aed451715e66fcdabeda40acc17016a4","modified":1745053627459},{"_id":"source/categories/typora-user-images/.DS_Store","hash":"f265e4b85368bb93c3a912886e5b4397d2b85f99","modified":1745918838711},{"_id":"source/categories/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","hash":"ca777da537d0a7d9f37c3ee40b05b5c5004e2b05","modified":1745053849829},{"_id":"source/categories/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","hash":"731bac951d911ce1d06ab2fffad52071e9e173ec","modified":1745053521350},{"_id":"source/categories/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","hash":"9ae3c7049609cfddf93e501d51c6f6b2f9c54fe1","modified":1745053653702},{"_id":"source/categories/typora-user-images/image-20250419105704031.png","hash":"ad3c04f5ceef79bac1791e61f283a27491face21","modified":1745031424039},{"_id":"source/categories/typora-user-images/image-20250429172724826.png","hash":"da273dc2bd390a26138020b93e706ca8fbf8b261","modified":1745918844838},{"_id":"source/categories/typora-user-images/image-20250429181131778.png","hash":"0e4282464cd34c9a1222095b0922267be1422f08","modified":1745921491779},{"_id":"source/categories/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","hash":"6ee6552a20c710aa26ace986d93c09f17ab35a8d","modified":1745053715414},{"_id":"source/categories/typora-user-images/image-20250429181312813.png","hash":"aebd7fad268451f30150c11f08cc75190e10f78b","modified":1745921592816},{"_id":"source/categories/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","hash":"9881da6dc6387905b676019588e4d61dc9be066f","modified":1745053779852},{"_id":"source/categories/typora-user-images/image-20250419113622811.png","hash":"c5263c854a53d3d911d53bc11404b5867969c0a5","modified":1745033782812},{"_id":"source/categories/typora-user-images/image-20250425174252871.png","hash":"c33f809927ec425d0ec5a5de446efeb804cc0714","modified":1745574172883},{"_id":"source/categories/typora-user-images/image-20250429181039571.png","hash":"ac3ff91bad60dd8fcf32470de8468bd10c0a1cc3","modified":1745921439575},{"_id":"source/categories/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","hash":"3f5c8e5d220e8ee80edd693aa28b38db2042606f","modified":1745053412261},{"_id":"source/categories/typora-user-images/image-20250419181745960.png","hash":"202acd3f001b8bc0c1eeae98b758b1651f83021a","modified":1745057865972},{"_id":"source/categories/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","hash":"9a12d9ec34beb4470dd34ee9cdbf24795a8ce8ba","modified":1745053589651},{"_id":"source/categories/typora-user-images/image-20250419092017527.png","hash":"651a6f76b900f6d32f5c8dcef8b24803841dc1c2","modified":1745025617528},{"_id":"source/categories/typora-user-images/image-20250419102848756.png","hash":"46350b8cc65a3e542d3c721fff82d18b7f42cfc6","modified":1745029728757},{"_id":"source/categories/typora-user-images/image-20250419112758947.png","hash":"472e0caec1f9bedaa1e95acdeb4e0a21b0b74ee0","modified":1745033278949},{"_id":"source/categories/typora-user-images/image-20250422114642336.png","hash":"2be0181072e00a32cf7c4ffc3da3fc9b59ee6bae","modified":1745293602337},{"_id":"source/categories/typora-user-images/image-20250429183142516.png","hash":"344896ff25fb43bf4ee4b651041ac1cbceda290c","modified":1745922702519},{"_id":"source/categories/typora-user-images/image-20250419091747915.png","hash":"abbb5a2b42a2feea4f067124327ba7a2e0b49844","modified":1745025467915},{"_id":"source/categories/typora-user-images/image-20250419181631076.png","hash":"30174e45262d9a229860a7cb6c8cc056d56a2f16","modified":1745057791077},{"_id":"source/categories/typora-user-images/image-20250429175540574.png","hash":"99de9164e275203a2e77465a3c79b96e1ce6dcd4","modified":1745920540584},{"_id":"source/categories/typora-user-images/image-20250508161546610.png","hash":"b278e1e74774ebf76673cd87797fd25599530a42","modified":1746692146612},{"_id":"source/categories/typora-user-images/image-20250425104935964.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/typora-user-images/image-20250425104935964-5549379.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/categories/typora-user-images/image-20250429175342611.png","hash":"9ab1b9aaa6241fbe4c8d2e16f82f09bfdba51311","modified":1745920422612},{"_id":"source/categories/typora-user-images/image-20250508161105090.png","hash":"c5baca122ea19651a96d3e2008e7eefb815794fa","modified":1746691865104},{"_id":"source/categories/typora-user-images/image-20250422114322913.png","hash":"6a02df96a96bb0544d1d009868bdba0a8fe5850a","modified":1745293402925},{"_id":"source/categories/typora-user-images/image-20250419181524113.png","hash":"f0a282ddcc5dd3b69d8cfa679c4bcd976ad82e5b","modified":1745057724118},{"_id":"source/categories/typora-user-images/image-20250422114422258.png","hash":"6d9b7578a561388f37ad2647180a50dcaa735b07","modified":1745293462259},{"_id":"source/categories/typora-user-images/image-20250429175421998.png","hash":"fe77c6a9999c12a0148bb1990ae045b2bcb63418","modified":1745920462000},{"_id":"source/categories/typora-user-images/image-20250429175228086.png","hash":"698a2ecc2f30b5c94f52121a41290c671451afa9","modified":1745920348093},{"_id":"source/categories/typora-user-images/image-20250508162115569.png","hash":"a05a74331a80ea339f895adfcd63f451569a9f23","modified":1746692475571},{"_id":"source/categories/typora-user-images/image-20250422114555482.png","hash":"e33332a744c886e568bfe33b306d6f57b0e54f49","modified":1745293555482},{"_id":"source/categories/typora-user-images/image-20250429174851066.png","hash":"1e66607d3f47bb278267622dd24df86e4e26237e","modified":1745920131077},{"_id":"source/categories/typora-user-images/image-20250429180401580.png","hash":"a9206b3cba0d01688e0feac3ccba76ce81b93408","modified":1745921041592},{"_id":"source/categories/typora-user-images/image-20250429174959408.png","hash":"12c835276e5309ffd874ab41de15a9148b6d65ca","modified":1745920199410},{"_id":"source/categories/Spring AI Agent未来智能应用的发展趋势.md","hash":"09b37f49cbb6f15990b273d57f1fbf2195591d4f","modified":1749033074977},{"_id":"source/categories/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","hash":"4614676542fda9942a414b8c7b7b49991cc26181","modified":1745056587668},{"_id":"source/categories/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","hash":"66a8cc5009fe492b9eefab173931e9138130c6ae","modified":1745923292331},{"_id":"source/categories/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","hash":"3e8e52832ab059338441700da2ef5edc38a17989","modified":1745056576496},{"_id":"source/categories/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","hash":"a935ba41973210a2d25f32608240378e56fccc66","modified":1745923323405},{"_id":"source/categories/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","hash":"c30f71ce919f7384e101a058c6deeb1d673d36c8","modified":1746692515849},{"_id":"source/categories/Untitled.md","hash":"852945edd8f145c8130c9a32a924b6daf4b284bb","modified":1746585186342},{"_id":"source/categories/.DS_Store","hash":"35a1c54ece7ada401ae8a4fe999cd92211d26d8e","modified":1749032004230},{"_id":"source/.DS_Store","hash":"55e507a54f68f4fe0662b2c0816130e920d24400","modified":1749034889408},{"_id":"source/categories/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1749024109000},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419105704031.png","hash":"ad3c04f5ceef79bac1791e61f283a27491face21","modified":1745031424039},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429172724826.png","hash":"da273dc2bd390a26138020b93e706ca8fbf8b261","modified":1745918844838},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429181131778.png","hash":"0e4282464cd34c9a1222095b0922267be1422f08","modified":1745921491779},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429181312813.png","hash":"aebd7fad268451f30150c11f08cc75190e10f78b","modified":1745921592816},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419113622811.png","hash":"c5263c854a53d3d911d53bc11404b5867969c0a5","modified":1745033782812},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250425174252871.png","hash":"c33f809927ec425d0ec5a5de446efeb804cc0714","modified":1745574172883},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429181039571.png","hash":"ac3ff91bad60dd8fcf32470de8468bd10c0a1cc3","modified":1745921439575},{"_id":"source/_posts/Spring AI Alibaba/Untitled.md","hash":"852945edd8f145c8130c9a32a924b6daf4b284bb","modified":1746585186342},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419181745960.png","hash":"202acd3f001b8bc0c1eeae98b758b1651f83021a","modified":1745057865972},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419092017527.png","hash":"651a6f76b900f6d32f5c8dcef8b24803841dc1c2","modified":1745025617528},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419102848756.png","hash":"46350b8cc65a3e542d3c721fff82d18b7f42cfc6","modified":1745029728757},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419112758947.png","hash":"472e0caec1f9bedaa1e95acdeb4e0a21b0b74ee0","modified":1745033278949},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250422114642336.png","hash":"2be0181072e00a32cf7c4ffc3da3fc9b59ee6bae","modified":1745293602337},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429183142516.png","hash":"344896ff25fb43bf4ee4b651041ac1cbceda290c","modified":1745922702519},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419091747915.png","hash":"abbb5a2b42a2feea4f067124327ba7a2e0b49844","modified":1745025467915},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419181631076.png","hash":"30174e45262d9a229860a7cb6c8cc056d56a2f16","modified":1745057791077},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429175540574.png","hash":"99de9164e275203a2e77465a3c79b96e1ce6dcd4","modified":1745920540584},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250425104935964.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429175342611.png","hash":"9ab1b9aaa6241fbe4c8d2e16f82f09bfdba51311","modified":1745920422612},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250508161105090.png","hash":"c5baca122ea19651a96d3e2008e7eefb815794fa","modified":1746691865104},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250419181524113.png","hash":"f0a282ddcc5dd3b69d8cfa679c4bcd976ad82e5b","modified":1745057724118},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250422114422258.png","hash":"6d9b7578a561388f37ad2647180a50dcaa735b07","modified":1745293462259},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250422114322913.png","hash":"6a02df96a96bb0544d1d009868bdba0a8fe5850a","modified":1745293402925},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429175228086.png","hash":"698a2ecc2f30b5c94f52121a41290c671451afa9","modified":1745920348093},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429175421998.png","hash":"fe77c6a9999c12a0148bb1990ae045b2bcb63418","modified":1745920462000},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250508161546610.png","hash":"b278e1e74774ebf76673cd87797fd25599530a42","modified":1746692146612},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250422114555482.png","hash":"e33332a744c886e568bfe33b306d6f57b0e54f49","modified":1745293555482},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429174851066.png","hash":"1e66607d3f47bb278267622dd24df86e4e26237e","modified":1745920131077},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429180401580.png","hash":"a9206b3cba0d01688e0feac3ccba76ce81b93408","modified":1745921041592},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250429174959408.png","hash":"12c835276e5309ffd874ab41de15a9148b6d65ca","modified":1745920199410},{"_id":"source/_posts/链路追踪Skywalking/Untitled.md","hash":"2b8dc79927f969db6ec808b1b26a1197d77388b6","modified":1716456899230},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","hash":"f928e205aed451715e66fcdabeda40acc17016a4","modified":1745053627459},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/.DS_Store","hash":"f265e4b85368bb93c3a912886e5b4397d2b85f99","modified":1745918838711},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","hash":"9ae3c7049609cfddf93e501d51c6f6b2f9c54fe1","modified":1745053653702},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","hash":"731bac951d911ce1d06ab2fffad52071e9e173ec","modified":1745053521350},{"_id":"source/_posts/Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势.md","hash":"7d90d1cdefcd21cb5ce6e1b2e63c5265bd956cc2","modified":1749033843478},{"_id":"source/_posts/Spring AI Alibaba/.DS_Store","hash":"ab66dc2c07d915c77eb7ae77d9f6a17171b49e61","modified":1746758325209},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","hash":"6ee6552a20c710aa26ace986d93c09f17ab35a8d","modified":1745053715414},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","hash":"9881da6dc6387905b676019588e4d61dc9be066f","modified":1745053779852},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","hash":"3f5c8e5d220e8ee80edd693aa28b38db2042606f","modified":1745053412261},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","hash":"9a12d9ec34beb4470dd34ee9cdbf24795a8ce8ba","modified":1745053589651},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250425104935964-5549379.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/image-20250508162115569.png","hash":"a05a74331a80ea339f895adfcd63f451569a9f23","modified":1746692475571},{"_id":"source/_posts/Spring AI Alibaba/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","hash":"ca777da537d0a7d9f37c3ee40b05b5c5004e2b05","modified":1745053849829},{"_id":"source/_posts/Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","hash":"31e300640ee4364a8342c7f9df0ae591c000889d","modified":1749034196785},{"_id":"source/_posts/Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","hash":"f5cbc235a6616f224cab4d4c41dae56faa68433d","modified":1749034196741},{"_id":"source/_posts/Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","hash":"99c93be4332e926636fdbf7c8d445a6b7271c568","modified":1749034196775},{"_id":"source/_posts/Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","hash":"672e43c1dc85540e12b1554390a3eb7f22326093","modified":1749034196759},{"_id":"source/_posts/Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","hash":"1905fde13c8b79daa3cfa74a788312fd435118db","modified":1749034196730},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230628093611653.png","hash":"e65a781d388d67b94ec024f11df0ac23c62a9f77","modified":1687916171654},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/.DS_Store","hash":"59ae33c178ac5ec44343d6286454e883b1ff2d2b","modified":1715823483185},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/afb25fa106bada4b37da64e902060269.png","hash":"6590c9d6fe25132a7ad233925fb74c12f99378a3","modified":1708398236439},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230628093823674.png","hash":"2a20d7c05ada9fd931f4785fb83a027484e204f9","modified":1687916303675},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923145029314.png","hash":"3672cc9eefa8fd90fb67b6e34e39a7a56a98b8ce","modified":1695451829315},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024095726856.png","hash":"154f847ec928c50cd100095339c2e345a1136c2b","modified":1698112646856},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024095816182.png","hash":"17c9a3ec2fea9d3f9e6520e7b38babebd5fba5f3","modified":1698112696182},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024092452701.png","hash":"1704780e7d642ee53865c4e76846273a9c8140b6","modified":1698110692701},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024095843156.png","hash":"d1ae6931331a864aa6c62fdf995942035f501cf8","modified":1698112723156},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024092913063.png","hash":"c85d5c02104a13abb53561f20b023068586d7462","modified":1698110953063},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219151212695.png","hash":"574ef7b7b393248e20b88fcb4b26a71d627ad618","modified":1708326732696},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231201153117052.png","hash":"a26438f05ec3d15b64a29063cfe83a0aceedd880","modified":1701415877054},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220102457440.png","hash":"00c0b12ce12e6ea0c49548d33b403687cfdc0189","modified":1708395897440},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220144907721.png","hash":"d37668b1aad5f030616464724deb8f0db117a507","modified":1708411747722},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220094227461.png","hash":"1448a7ab99d3ad8d704c3210d4c63faaa2b380f3","modified":1708393347462},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220102231198.png","hash":"13781da444bffea1fa86f57dce57761b6d9b41fd","modified":1708395751198},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221094244920.png","hash":"bd1cc1cf8e360a26b53d7d713d4d96dd5c646194","modified":1708479764921},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222152145318.png","hash":"ea0bfdcb4d5b983eddc66470b884e3184cac0dc7","modified":1708586505320},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222164404555.png","hash":"8cee0474bbe622aabb71ccc0e98bb19865c7e8a9","modified":1708591444557},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222164533515.png","hash":"3918c9d39bab53b1274d95e023882faf9d933afe","modified":1708591533515},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222164433038.png","hash":"5ec85e744795a997dd2bd6bae4d5cfecc5b87a7e","modified":1708591473038},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240415094839642.png","hash":"aadd5058a4a39b4066d1fc8cce856c21d9b6ae23","modified":1713145719643},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/1134316536b140eda97bef40993a2072.png","hash":"7b8ca16e7db13f3c62b1e2623598f8e6a98978c2","modified":1708657293338},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230921170222187.png","hash":"37856e5ff5e106ecfe0c2bddae56cb1ac3bd8513","modified":1695286942187},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230628094058045.png","hash":"2638081ba870b1a217a1cd2df33e6a370b012d24","modified":1687916458046},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144315232.png","hash":"804a761075a2d1f9cd89802a5863696dfaab950b","modified":1695451395232},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144526897.png","hash":"65a4d29e2aa8f042d86b68d2640c6bbbcb27268b","modified":1695451526898},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923152344429.png","hash":"424baff60afbd3ee54a43081fc2a5e6b87855e56","modified":1695453824430},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221091728143.png","hash":"9922743caba2ccc606b79b076dcdbb108dcca8f8","modified":1708478248144},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系.md","hash":"470b283b120a4ad7d1a11817c2046f11756419b4","modified":1717727317208},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/.DS_Store","hash":"8c76adecaea10e5c97842d95843b7e5cf89937db","modified":1749034904069},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-01-微服务介绍.md","hash":"23589aebcae47a7953c56983efeda4ec418beae8","modified":1717148204224},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-06-Sleuth链路追踪.md","hash":"5ae125c0185ce06a94b45fc5523798c5a8059955","modified":1713316948705},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate).md","hash":"7648244966a32ea78aab39f8064062d9130a36c2","modified":1708657200466},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923145922760.png","hash":"11d4561b7e8111a8185c1704d85b1fde21e0386f","modified":1695452362760},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221091837069.png","hash":"028d6df4053a834c1b8e2b57fccbb9d0a6cd4cc7","modified":1708478317070},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222180325402.png","hash":"d78f6b372e50726b2494420829013994150acd7c","modified":1708596205402},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240223110630296.png","hash":"bfc87b3d6fa611ce06ab14bd35b9ccca47d70048","modified":1708657590296},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230921171005578.png","hash":"475e87595ea06dfe13ef06aeb6f88ee1c17723e1","modified":1695287405578},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144634136.png","hash":"d567d6a6f01e575f315824c3417e510e16b6eb05","modified":1695451594137},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230921170734063.png","hash":"e3db4d79b4eb89d8a7e6ca0703e7e6c55604a9c0","modified":1695287254063},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923145717673.png","hash":"e8bc3c7beab2f62218290f38a636714d4af5e3f5","modified":1695452237673},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222180306582.png","hash":"97a69d286a268a115e21cac5d1cbcb3e0f53b1f7","modified":1708596186582},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240514095650303.png","hash":"1e3bbddc41c515dd5c19429d68264bbaf08e3371","modified":1715651810303},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240509105539663.png","hash":"1db876cda46958efbf6c4d19a5b8f8aa7a4dd97c","modified":1715223339664},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240522090312508.png","hash":"3139ccea0ce9f8ff4089b7a920e87c0763c81f68","modified":1716339792519},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png","hash":"b5d3395e2ce2b2834898b81d5d0c77eba2680494","modified":1716340401877},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221092834785.png","hash":"69ff079a54850f2141298e697bd4ea539e26af53","modified":1708478914788},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240223110332038.png","hash":"f6602e6e7b303d2116561200abfbeebbafb737ec","modified":1708657412038},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png","hash":"361d07b792b4efb822a20044471ed1c9c5e0fc39","modified":1708592052132},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240516094845785.png","hash":"3d3999ff1248f9e98f822f133fdc07d7f111f26f","modified":1715824125786},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230921171251668.png","hash":"c2918e0518513a92d9186de9312aa7fb5ccc0225","modified":1695287571669},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240417091316659.png","hash":"c05a5eee17c67ffac9e8e46396a42768b702f1e0","modified":1713316396661},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240417092003988.png","hash":"aec1f1669ef01a5965d955dc982877b7a14acf1f","modified":1713316803990},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240416114924463.png","hash":"e9d239af67f13fae73f92d2c36e7470b36eea866","modified":1713239364463},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png","hash":"60bc69303831eaa5a06110f5a4147931940cc101","modified":1709257029801},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png","hash":"c5e244e5336cc471095a64bee8a67f28d8ba149b","modified":1708398181346},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png","hash":"f2f87a7079f1a7fe567471813b2882046a826468","modified":1708400595152},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230627191528034.png","hash":"9b76a4f7807f96de5504e9727ad5b5fe8d870038","modified":1687864528034},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230628094521252.png","hash":"7dc31c03583543027a1693d549b62fbdf365ce1d","modified":1687916721253},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230628094428585.png","hash":"7036b3a680755d8e95691c50a36aebcfb48b6723","modified":1687916668586},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231008103734081.png","hash":"34b1863b5414b5631199561e25b1b85f2a80562c","modified":1696732654082},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024092756314.png","hash":"281de629b5fe60b2e44c607939f9ea15ffb1fb98","modified":1698110876314},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024094558547.png","hash":"91523ddf4349efd4b748b7f2ae0a407a5c4827ce","modified":1698111958548},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024104338016.png","hash":"6cc18536d413a7a3f6ca1f5c19d33750ba092dbb","modified":1698115418017},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231201144020748.png","hash":"1392543f061f1ce9d1d52892d526e3f8e28fd679","modified":1701412820749},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231201143940420.png","hash":"4247c1336893ff8b052a11eb2d4cd5f1e6a73b6b","modified":1701412780421},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231201144119343.png","hash":"a820cf629adeb01acd835846a78b29a086c5c8da","modified":1701412879344},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219114233026.png","hash":"1be9d5bfa4b1ca6461ca8ab935f4bad98ad22dd9","modified":1708314153026},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219114515952.png","hash":"1d882390262cf4e71a4e3547b93f7ac0a6bc8745","modified":1708314315953},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219144606520.png","hash":"de6e7555a2365a23bc9a9450d02f0ebc632012a1","modified":1708325166521},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219150634816.png","hash":"85234fcc2d67718c5a68ef510aefe5f11bba6a81","modified":1708326394819},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219150821657.png","hash":"6adf92a4a7c88db5264fb9492ffe0df84dfb0114","modified":1708326501657},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219150910898.png","hash":"7a134a3ca9b7c3c2f719637364a51739cf553dd4","modified":1708326550898},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219151031448.png","hash":"a3f4c7cd2accae54259c9679c448f70442afe403","modified":1708326631448},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219152638390.png","hash":"e48fcf5cad156e92ec5f77874371df4df6fe03ec","modified":1708327598391},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219153810692.png","hash":"dcf90eff4ec211e449491b5f63ff0efb3ec03e42","modified":1708328290694},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219154032740.png","hash":"3ecd3821b36206bb69c3dd57e28c5c0687ba004e","modified":1708328432740},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220095645324.png","hash":"631e4c210d3bcc234ab9af63699e9ec87d4313c7","modified":1708394205325},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220101429844.png","hash":"59758bd263655f5b58b534dbfc81be39a5a89b14","modified":1708395269845},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220102332812.png","hash":"ed9db142789f1c8ca74018a4cd1745da10947a45","modified":1708395812813},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220103006353.png","hash":"4d3b13b8784cd20a6a0e3356f3c079450288bf93","modified":1708396206354},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220102621265.png","hash":"ec54793adff3e22aa977f7a838302497efc592a5","modified":1708395981265},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220102752041.png","hash":"67bd31742cd7960739a0bab4da5675904aa84f99","modified":1708396072042},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220103217414.png","hash":"218f2e2ced5e54f34a1200c684bcbd712f8ca2d8","modified":1708396337414},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221092419244.png","hash":"fd61d9abaceb1d713a4c8fa976df8a6ea4635004","modified":1708478659245},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221093021265.png","hash":"132880d4de49a3f95fc8b3653b35492348edf2c0","modified":1708479021266},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221094225094.png","hash":"59b02ba2161ba7d6a9cc1d17a04b4ba1aa9b1255","modified":1708479745096},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221155333042.png","hash":"c3f9d29db5350eaf1a35696a29772681237faf15","modified":1708502013046},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222164517003.png","hash":"dc07595b9a529bf01b82425000b486aa4199d6f5","modified":1708591517003},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240507111933014.png","hash":"e53c218c730e9aee66f7a8f65f85e229596d5f58","modified":1715051973015},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240507112405845.png","hash":"e65a781d388d67b94ec024f11df0ac23c62a9f77","modified":1715052245847},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240507112114709.png","hash":"e65a781d388d67b94ec024f11df0ac23c62a9f77","modified":1715052074710},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/webp","hash":"f917f3e033ab2d6dbad539dde95f8caebdf07a02","modified":1708591877163},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144124237.png","hash":"f68b880a2863b7529ade8e592c6bec5afdfe4a05","modified":1695451284239},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144238782.png","hash":"6dd6156846efaa9f344a3aab4e02e552a8edec35","modified":1695451358783},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144347556.png","hash":"107bbe2e4e44f49d21293eb4da1d57ba4db5df75","modified":1695451427556},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144953818.png","hash":"c57fb2a037a97415f885c118f6fe0ca4b9a6964d","modified":1695451793820},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923144414595.png","hash":"2d05bc76b351bc883a7195a787f920c2c19ca85f","modified":1695451454595},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923154459874.png","hash":"65c0f272b6964bd2e03e376e15938f148bd8b9f8","modified":1695455099874},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024101307177.png","hash":"6d2c18dab3d07a9b86acb5e73ebcfbbc5c5170b1","modified":1698113587177},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20231024102201145.png","hash":"42a805c7ee1585218f5cb4038a7b85ae56eeffc9","modified":1698114121145},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219114343151.png","hash":"dc3e3955b4b26107db0d98badbe43363803f3db4","modified":1708314223152},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220095107292.png","hash":"dc3e1488b33e1af2b21370a8c72a538801049f5a","modified":1708393867293},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220101701432.png","hash":"27638722b6c87cc3953b44dcf9df8432133ab43d","modified":1708395421433},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220101010503.png","hash":"63b7c6935ee80b5eb36ffe375b04f8010a5d896c","modified":1708395010504},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240220102431979.png","hash":"e2b7ee4d99c89aed792b71b39a16bbb43f4ea4f5","modified":1708395871980},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221092028120.png","hash":"b38336f634e9b3fbf8dc3750e5098dbd2adfba60","modified":1708478428122},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221093819873.png","hash":"61aaece6568ebdb28ebfe1d4d7673c7db038d9b7","modified":1708479499873},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221094447664.png","hash":"3fad626e34213498460b69d420911eadc4798f03","modified":1708479887665},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221094852671.png","hash":"65d823ae285eb6e7d4501ba580be05737b242409","modified":1708480132672},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222175403127.png","hash":"759466b76af037d17aef71082b60fd4444d98e88","modified":1708595643127},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222181235735.png","hash":"446d65cd2cabfc3739546eb9e34bfde3bc74c9c0","modified":1708596755736},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240510121326830.png","hash":"99d7ea26194892bb37cc2d600bee0c6c62681773","modified":1715314406831},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240522090958255.png","hash":"de082694dac20df20c7e703b65b5fdf41d3ced15","modified":1716340198255},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png","hash":"5f3cf68545f65e6efa160e5a7a8b20b8b12f31b9","modified":1708591997910},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70.png","hash":"2ed39a0c534189dabb51f290d50af84c5a1e0bd4","modified":1708397424132},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png","hash":"a5f7c41c0f29418b336a08d9aab3a0ae3b1e1938","modified":1709257198169},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/2afdf3d7222117202a1069d7e1587c12.png#align=left&display=inline&height=655&name=image.png","hash":"d2ef63ee6c52898e5271ae7c016ea21db4e3f410","modified":1708397853737},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/72746e97a2cd474bb21601f507779a25.png","hash":"8c2982ef63c0fb718af012618fd2c1086ec86006","modified":1715075069072},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png","hash":"de0940531ee2b6f2dbe186229aa8c46557ffb9b0","modified":1709255988564},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923151411555.png","hash":"dc0765cd34e084e0e7cc11c061fd2ec32cf00077","modified":1695453251556},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923162555344.png","hash":"04db850e51d79aacb52a8fc0bf54a3c812ddf2fa","modified":1695457555344},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219152607457.png","hash":"4bf67bf0a76285cd265b4d31ad23b3496ce0b1ba","modified":1708327567459},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221091441127.png","hash":"779e8c8a4e9d6a99f3f5b46ddd3042ba9b460f63","modified":1708478081128},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221092353574.png","hash":"78d606391142724c4b2712cf14f9ffb835c0dbfd","modified":1708478633575},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222175326047.png","hash":"1ee1c1c6ef47ad9dc08a842dcb351cec04516f2d","modified":1708595606050},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222180337721.png","hash":"d78f6b372e50726b2494420829013994150acd7c","modified":1708596217721},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240318202804603.png","hash":"0cd6675c6685aadccde6ef503a660d4195e5e127","modified":1710764884603},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240514095424805.png","hash":"0fa4fd657fc9095c29a2c785ae0eac834eacd8d8","modified":1715651664806},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240510121631586.png","hash":"cab1a82b5ee99a68a80e57388cf5ce794f103f22","modified":1715314591586},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240520161819461.png","hash":"854829d75e3ef499d7a3dd8ca2071b14107e9009","modified":1716193099463},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png","hash":"ae473891e1ba05f2a0b04d2869a033a8c9e5993d","modified":1709256578297},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230921165730484.png","hash":"8005d88378965d391adfeb682849a8eb7bc0fb36","modified":1695286650485},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923150103329.png","hash":"465b742fedcf9e9dd5df14a08c771fc8c4fb5900","modified":1695452463330},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923162506692.png","hash":"66f03aba21d26d5d9657d526548731cc0c471162","modified":1695457506693},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-03-过滤器(Filter)使用.md","hash":"7f53f3f18c3db0fd1ed98752cd6c84b41b08c179","modified":1708660206990},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-02-Nacos Discovery服务治理.md","hash":"94dca49c3a8ac08181dcce7721398efd8befaa0a","modified":1698113992216},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-04-Sentinel规则持久化全面Nacos方式.md","hash":"69ec7d058e5044320d897567d423be6682cc32e4","modified":1708502128076},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-04-Sentinel服务容错.md","hash":"baefbe52a804dec148d5925bcd0cce9aaf6b1c0d","modified":1708504203704},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-08- SMS短信服务.md","hash":"8fd963ff6d2f850e15469f75ff8e1e4174d61525","modified":1715651164726},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-07-RocketMQ消息驱动.md","hash":"7d1add2270c1ea8af176a175a60778629377557f","modified":1715648833826},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置.md","hash":"38296e1c350359e1f0083167954f76d914a9c9db","modified":1708660361497},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-09-Seata 分布式事务.md","hash":"ecd3708c0f9efac8568d4ecfc6f3ed5314615dd1","modified":1717146259065},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240219113719157.png","hash":"57072961b1982c890772c45a63a8af2e91a206c3","modified":1708313839158},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221093711599.png","hash":"9949b95d1c4786a60a3cabf92b9d75ec1307042f","modified":1708479431602},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240222180227522.png","hash":"cb2f2b1268d7a5bdec1b62d4c519f746427116ee","modified":1708596147522},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240514095835213.png","hash":"63057deacd2e3305690510e373dfb70ea9840c45","modified":1715651915214},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240521094502177.png","hash":"da4af49b8625772c350829061e5cf7b938cd2884","modified":1716255902180},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240522090352573.png","hash":"798df439306b8a08434548db9708abdf04de70e8","modified":1716339832574},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923154644281.png","hash":"63e926e126ebe21693302a25cadaeebb19a3c3dc","modified":1695455204282},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221094018816.png","hash":"ad37fce1f1a49fc8661c15c0dbcb38e0aa550bb8","modified":1708479618817},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240221095745495.png","hash":"5cc59fb94af18c29a44aaaae205f4cb7f5c8312a","modified":1708480665499},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240416114808884.png","hash":"b85644b2c128279c75d62b3c98075df968add195","modified":1713239288885},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240522091143334.png","hash":"1f855cb2c4f4b55621718607774f1a84470094f2","modified":1716340303335},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240524175527451.png","hash":"980dfd1cef619a0e13811c6acc129cef9a7a8cc4","modified":1716544527451},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240415090937231.png","hash":"5f5d421b8b2a6e61ece77cb038e75449096f2e1a","modified":1713143377242},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240416120116317.png","hash":"b85e3326515586bcc2a49a86eed1223639032eb2","modified":1713240076321},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240524175254196.png","hash":"2b3e657322d36faa28bf1a10fd72c021a16732ee","modified":1716544374196},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/779689.png","hash":"7b5c3c50868191d92a2e8735e5b5faf7c4cabf20","modified":1708658957355},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/.DS_Store","hash":"517152b7b3befe16546b5ebb9b61c4c598520183","modified":1730721789447},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/1196304-20200826192341898-2141471475.png","hash":"320c3057bd406d77868002eb328ef5d907561f3f","modified":1717398031480},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/afa0f46d4bd1929b2f0035cccec7ec54.png","hash":"cf9ae142fb5b46cac9ef87103fdeaad6c38720c7","modified":1717467350623},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603164717128.png","hash":"b018830445e89005831a371cbd5a0b9a36402425","modified":1717404437129},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603162823348.png","hash":"4c1fa91781e26da2dc63122053bc086d7fede868","modified":1717403303349},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603161843912.png","hash":"d214a388d26b9730ddac6009a4447d6e5d8c1568","modified":1717402723923},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240607151332996.png","hash":"c836e521c700ba4518d01266140b8276173b5d55","modified":1717744412998},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240607152105463.png","hash":"ca56dd718172bd59eeb4b4b8e4231bcc3d6712d1","modified":1717744865465},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240607153316591.png","hash":"f4a422045aeae3e01d945e65ce4d5ba78dc31e2a","modified":1717745596593},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240607152107972-7744869.png","hash":"ca56dd718172bd59eeb4b4b8e4231bcc3d6712d1","modified":1717744867986},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240607152546090.png","hash":"0a496d63e11b45a33e869c596f50d145885f282c","modified":1717745146091},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240607152107972.png","hash":"ca56dd718172bd59eeb4b4b8e4231bcc3d6712d1","modified":1717744867986},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/u=268724271,3366193905&fm=253&fmt=auto&app=138&f=JPEG.jpeg","hash":"a07974467f997e8e8e41306b426d7af58e51d441","modified":1717467532027},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240509105505568.png","hash":"f3d974c6c56fa3228cb715a853a25766e5b13f44","modified":1715223305572},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603162356643.png","hash":"d340d76fce9df5dd94add8f3f8aed079740c8c24","modified":1717403036644},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603183228302.png","hash":"b16fafafdcc9aa79c463e5facfa3b60f78c8829b","modified":1717410748303},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240604102635317.png","hash":"10ceeb9dfd3a8b87110dbd054483ca2d091c72c7","modified":1717467995317},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240412121048381.png","hash":"e514a0de2cf0d42557d81e97bf51e65cdfa56067","modified":1712895048382},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240415091018922.png","hash":"9d03c61ddacaf863607e74d8fd4cef929367fd9a","modified":1713143418922},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240416113821316.png","hash":"2b971242ebf91ad5c1f3fb81ba7be8c8bafcb497","modified":1713238701320},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240417092118543.png","hash":"350e8c068bfc9e7009e2d5d023c860cf29b0739e","modified":1713316878545},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240510121854650.png","hash":"7fc521f21df0b3261fdb8520eeb89f809614bfdd","modified":1715314734651},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20230923145122020.png","hash":"49917b80ba7d58da9c0a93bb12d31caf292812d9","modified":1695451882021},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240530162145444.png","hash":"3789f03b9584b12c64eea94c340f5c0fbbe731a2","modified":1717057305444},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603152303347.png","hash":"71ace59a06f9c135e5845e662e7447e6d6948687","modified":1717399383354},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603182405443.png","hash":"511c4d8553c742f28a749345bea88b49b759b92b","modified":1717410245444},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240606160509365.png","hash":"376bb9e6d4d349f77c17477c53103b54d72de714","modified":1717661109366},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603171252335.png","hash":"fc4cdcd1b6360db74769b2018ba0c29058bf17f1","modified":1717405972350},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240604104220375.png","hash":"ceb767c6ff7574586f04c27a114386a65d1908b4","modified":1717468940376},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240604104307531.png","hash":"2aae2df9a8c1d25c44b045d990fb9f4c91250de2","modified":1717468987532},{"_id":"source/_posts/Spring Scurity认证服务/.DS_Store","hash":"44220161d815bf26c302e50cd61365178f4ef801","modified":1730722700258},{"_id":"source/_posts/Spring Scurity认证服务/Spring Security-03-Spring Security实现授权.md","hash":"528a2f7c7dac8a4a849de6c4f31fd31e6ee2a133","modified":1742635492239},{"_id":"source/_posts/Spring Scurity认证服务/Spring Security-02-Spring Security认证方式HTTP基本认证、Form表单认证、HTTP摘要认证.md","hash":"eb0248f4f28b165d9a1ed737199ff54317b148d1","modified":1730721969599},{"_id":"source/_posts/Spring Scurity认证服务/Spring Security-01-Spring Security简介、SpringBoot集成.md","hash":"10c0b0ef90d0cea58687908d9a0b67959e58c46a","modified":1717404942160},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240604104434062.png","hash":"ad5114be20fa8a4701d22bc64db688ee611168ba","modified":1717469074077},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240604103555842.png","hash":"d388f5cd2068d9f89e9598b08c89b3542add9900","modified":1717468555856},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240524174544128.png","hash":"59654553ec675ebf49fdb7bbbdd03501a57afff5","modified":1716543944129},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240416114024941.png","hash":"78cd820b26821a4b72b0eefabb88439df7114340","modified":1713238824943},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603195422293.png","hash":"d488534ad5b4fb02c967eef93b95df45e3bc4b0b","modified":1717415662295},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png","hash":"8f6ce07ff86f5258b92f78c5af534b409edc5f8d","modified":1709256686636},{"_id":"source/_posts/Spring Scurity认证服务/typora-user-images/image-20240603202016962.png","hash":"286487fbf41128214102f3a138154de79978377d","modified":1717417216963},{"_id":"source/_posts/Spring Cloud Alibaba 基础应用/typora-user-images/image-20240507112941777.png","hash":"b66d1a949da64143e32e83de63df6403051fa111","modified":1715052581779},{"_id":"source/typora-user-images/.DS_Store","hash":"f265e4b85368bb93c3a912886e5b4397d2b85f99","modified":1745918838711},{"_id":"source/typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png","hash":"f928e205aed451715e66fcdabeda40acc17016a4","modified":1745053627459},{"_id":"source/typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg","hash":"ca777da537d0a7d9f37c3ee40b05b5c5004e2b05","modified":1745053849829},{"_id":"source/typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg","hash":"9ae3c7049609cfddf93e501d51c6f6b2f9c54fe1","modified":1745053653702},{"_id":"source/typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg","hash":"731bac951d911ce1d06ab2fffad52071e9e173ec","modified":1745053521350},{"_id":"source/typora-user-images/image-20250419105704031.png","hash":"ad3c04f5ceef79bac1791e61f283a27491face21","modified":1745031424039},{"_id":"source/typora-user-images/image-20250429172724826.png","hash":"da273dc2bd390a26138020b93e706ca8fbf8b261","modified":1745918844838},{"_id":"source/typora-user-images/image-20250429181131778.png","hash":"0e4282464cd34c9a1222095b0922267be1422f08","modified":1745921491779},{"_id":"source/typora-user-images/image-20250429181312813.png","hash":"aebd7fad268451f30150c11f08cc75190e10f78b","modified":1745921592816},{"_id":"source/typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg","hash":"6ee6552a20c710aa26ace986d93c09f17ab35a8d","modified":1745053715414},{"_id":"source/typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg","hash":"9881da6dc6387905b676019588e4d61dc9be066f","modified":1745053779852},{"_id":"source/typora-user-images/image-20250419113622811.png","hash":"c5263c854a53d3d911d53bc11404b5867969c0a5","modified":1745033782812},{"_id":"source/typora-user-images/image-20250425174252871.png","hash":"c33f809927ec425d0ec5a5de446efeb804cc0714","modified":1745574172883},{"_id":"source/typora-user-images/image-20250429181039571.png","hash":"ac3ff91bad60dd8fcf32470de8468bd10c0a1cc3","modified":1745921439575},{"_id":"source/typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png","hash":"3f5c8e5d220e8ee80edd693aa28b38db2042606f","modified":1745053412261},{"_id":"source/typora-user-images/image-20250419181745960.png","hash":"202acd3f001b8bc0c1eeae98b758b1651f83021a","modified":1745057865972},{"_id":"source/typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg","hash":"9a12d9ec34beb4470dd34ee9cdbf24795a8ce8ba","modified":1745053589651},{"_id":"source/typora-user-images/image-20250419092017527.png","hash":"651a6f76b900f6d32f5c8dcef8b24803841dc1c2","modified":1745025617528},{"_id":"source/typora-user-images/image-20250419102848756.png","hash":"46350b8cc65a3e542d3c721fff82d18b7f42cfc6","modified":1745029728757},{"_id":"source/typora-user-images/image-20250419112758947.png","hash":"472e0caec1f9bedaa1e95acdeb4e0a21b0b74ee0","modified":1745033278949},{"_id":"source/typora-user-images/image-20250422114642336.png","hash":"2be0181072e00a32cf7c4ffc3da3fc9b59ee6bae","modified":1745293602337},{"_id":"source/typora-user-images/image-20250429183142516.png","hash":"344896ff25fb43bf4ee4b651041ac1cbceda290c","modified":1745922702519},{"_id":"source/typora-user-images/image-20250419091747915.png","hash":"abbb5a2b42a2feea4f067124327ba7a2e0b49844","modified":1745025467915},{"_id":"source/typora-user-images/image-20250419181631076.png","hash":"30174e45262d9a229860a7cb6c8cc056d56a2f16","modified":1745057791077},{"_id":"source/typora-user-images/image-20250429175540574.png","hash":"99de9164e275203a2e77465a3c79b96e1ce6dcd4","modified":1745920540584},{"_id":"source/typora-user-images/image-20250508161546610.png","hash":"b278e1e74774ebf76673cd87797fd25599530a42","modified":1746692146612},{"_id":"source/typora-user-images/image-20250425104935964.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/typora-user-images/image-20250425104935964-5549379.png","hash":"1dc84b0dce69f0dd8ffdbedeb352ac0884390285","modified":1745549375966},{"_id":"source/typora-user-images/image-20250429175342611.png","hash":"9ab1b9aaa6241fbe4c8d2e16f82f09bfdba51311","modified":1745920422612},{"_id":"source/typora-user-images/image-20250508161105090.png","hash":"c5baca122ea19651a96d3e2008e7eefb815794fa","modified":1746691865104},{"_id":"source/typora-user-images/image-20250419181524113.png","hash":"f0a282ddcc5dd3b69d8cfa679c4bcd976ad82e5b","modified":1745057724118},{"_id":"source/typora-user-images/image-20250422114422258.png","hash":"6d9b7578a561388f37ad2647180a50dcaa735b07","modified":1745293462259},{"_id":"source/typora-user-images/image-20250422114322913.png","hash":"6a02df96a96bb0544d1d009868bdba0a8fe5850a","modified":1745293402925},{"_id":"source/typora-user-images/image-20250429175228086.png","hash":"698a2ecc2f30b5c94f52121a41290c671451afa9","modified":1745920348093},{"_id":"source/typora-user-images/image-20250429175421998.png","hash":"fe77c6a9999c12a0148bb1990ae045b2bcb63418","modified":1745920462000},{"_id":"source/typora-user-images/image-20250508162115569.png","hash":"a05a74331a80ea339f895adfcd63f451569a9f23","modified":1746692475571},{"_id":"source/typora-user-images/image-20250422114555482.png","hash":"e33332a744c886e568bfe33b306d6f57b0e54f49","modified":1745293555482},{"_id":"source/typora-user-images/image-20250429174851066.png","hash":"1e66607d3f47bb278267622dd24df86e4e26237e","modified":1745920131077},{"_id":"source/typora-user-images/image-20250429180401580.png","hash":"a9206b3cba0d01688e0feac3ccba76ce81b93408","modified":1745921041592},{"_id":"source/typora-user-images/image-20250429174959408.png","hash":"12c835276e5309ffd874ab41de15a9148b6d65ca","modified":1745920199410},{"_id":"source/_posts/.DS_Store","hash":"086a01cb4a2c491a1fbcb7e203362e349bf7199d","modified":1749034899057},{"_id":"source/typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png","hash":"60bc69303831eaa5a06110f5a4147931940cc101","modified":1709257029801},{"_id":"source/typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png","hash":"c5e244e5336cc471095a64bee8a67f28d8ba149b","modified":1708398181346},{"_id":"source/typora-user-images/afb25fa106bada4b37da64e902060269.png","hash":"6590c9d6fe25132a7ad233925fb74c12f99378a3","modified":1708398236439},{"_id":"source/typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png","hash":"f2f87a7079f1a7fe567471813b2882046a826468","modified":1708400595152},{"_id":"source/typora-user-images/image-20230627191528034.png","hash":"9b76a4f7807f96de5504e9727ad5b5fe8d870038","modified":1687864528034},{"_id":"source/typora-user-images/image-20230628093611653.png","hash":"e65a781d388d67b94ec024f11df0ac23c62a9f77","modified":1687916171654},{"_id":"source/typora-user-images/image-20230628093823674.png","hash":"2a20d7c05ada9fd931f4785fb83a027484e204f9","modified":1687916303675},{"_id":"source/typora-user-images/image-20230628094428585.png","hash":"7036b3a680755d8e95691c50a36aebcfb48b6723","modified":1687916668586},{"_id":"source/typora-user-images/image-20230628094521252.png","hash":"7dc31c03583543027a1693d549b62fbdf365ce1d","modified":1687916721253},{"_id":"source/typora-user-images/image-20230923145029314.png","hash":"3672cc9eefa8fd90fb67b6e34e39a7a56a98b8ce","modified":1695451829315},{"_id":"source/typora-user-images/image-20231008103734081.png","hash":"34b1863b5414b5631199561e25b1b85f2a80562c","modified":1696732654082},{"_id":"source/typora-user-images/image-20231024092452701.png","hash":"1704780e7d642ee53865c4e76846273a9c8140b6","modified":1698110692701},{"_id":"source/typora-user-images/image-20231024092756314.png","hash":"281de629b5fe60b2e44c607939f9ea15ffb1fb98","modified":1698110876314},{"_id":"source/typora-user-images/image-20231024092913063.png","hash":"c85d5c02104a13abb53561f20b023068586d7462","modified":1698110953063},{"_id":"source/typora-user-images/image-20231024094558547.png","hash":"91523ddf4349efd4b748b7f2ae0a407a5c4827ce","modified":1698111958548},{"_id":"source/typora-user-images/image-20231024095726856.png","hash":"154f847ec928c50cd100095339c2e345a1136c2b","modified":1698112646856},{"_id":"source/typora-user-images/image-20231024095816182.png","hash":"17c9a3ec2fea9d3f9e6520e7b38babebd5fba5f3","modified":1698112696182},{"_id":"source/typora-user-images/image-20231024095843156.png","hash":"d1ae6931331a864aa6c62fdf995942035f501cf8","modified":1698112723156},{"_id":"source/typora-user-images/image-20231024104338016.png","hash":"6cc18536d413a7a3f6ca1f5c19d33750ba092dbb","modified":1698115418017},{"_id":"source/typora-user-images/image-20231201143940420.png","hash":"4247c1336893ff8b052a11eb2d4cd5f1e6a73b6b","modified":1701412780421},{"_id":"source/typora-user-images/image-20231201144020748.png","hash":"1392543f061f1ce9d1d52892d526e3f8e28fd679","modified":1701412820749},{"_id":"source/typora-user-images/image-20231201144119343.png","hash":"a820cf629adeb01acd835846a78b29a086c5c8da","modified":1701412879344},{"_id":"source/typora-user-images/image-20231201153117052.png","hash":"a26438f05ec3d15b64a29063cfe83a0aceedd880","modified":1701415877054},{"_id":"source/typora-user-images/image-20240219114233026.png","hash":"1be9d5bfa4b1ca6461ca8ab935f4bad98ad22dd9","modified":1708314153026},{"_id":"source/typora-user-images/image-20240219114515952.png","hash":"1d882390262cf4e71a4e3547b93f7ac0a6bc8745","modified":1708314315953},{"_id":"source/typora-user-images/image-20240219144606520.png","hash":"de6e7555a2365a23bc9a9450d02f0ebc632012a1","modified":1708325166521},{"_id":"source/typora-user-images/image-20240219150634816.png","hash":"85234fcc2d67718c5a68ef510aefe5f11bba6a81","modified":1708326394819},{"_id":"source/typora-user-images/image-20240219150821657.png","hash":"6adf92a4a7c88db5264fb9492ffe0df84dfb0114","modified":1708326501657},{"_id":"source/typora-user-images/image-20240219150910898.png","hash":"7a134a3ca9b7c3c2f719637364a51739cf553dd4","modified":1708326550898},{"_id":"source/typora-user-images/image-20240219151031448.png","hash":"a3f4c7cd2accae54259c9679c448f70442afe403","modified":1708326631448},{"_id":"source/typora-user-images/image-20240219151212695.png","hash":"574ef7b7b393248e20b88fcb4b26a71d627ad618","modified":1708326732696},{"_id":"source/typora-user-images/image-20240219152638390.png","hash":"e48fcf5cad156e92ec5f77874371df4df6fe03ec","modified":1708327598391},{"_id":"source/typora-user-images/image-20240219153810692.png","hash":"dcf90eff4ec211e449491b5f63ff0efb3ec03e42","modified":1708328290694},{"_id":"source/typora-user-images/image-20240219154032740.png","hash":"3ecd3821b36206bb69c3dd57e28c5c0687ba004e","modified":1708328432740},{"_id":"source/typora-user-images/image-20240220094227461.png","hash":"1448a7ab99d3ad8d704c3210d4c63faaa2b380f3","modified":1708393347462},{"_id":"source/typora-user-images/image-20240220095645324.png","hash":"631e4c210d3bcc234ab9af63699e9ec87d4313c7","modified":1708394205325},{"_id":"source/typora-user-images/image-20240220101429844.png","hash":"59758bd263655f5b58b534dbfc81be39a5a89b14","modified":1708395269845},{"_id":"source/typora-user-images/image-20240220102231198.png","hash":"13781da444bffea1fa86f57dce57761b6d9b41fd","modified":1708395751198},{"_id":"source/typora-user-images/image-20240220102332812.png","hash":"ed9db142789f1c8ca74018a4cd1745da10947a45","modified":1708395812813},{"_id":"source/typora-user-images/image-20240220102457440.png","hash":"00c0b12ce12e6ea0c49548d33b403687cfdc0189","modified":1708395897440},{"_id":"source/typora-user-images/image-20240220102752041.png","hash":"67bd31742cd7960739a0bab4da5675904aa84f99","modified":1708396072042},{"_id":"source/typora-user-images/image-20240220102621265.png","hash":"ec54793adff3e22aa977f7a838302497efc592a5","modified":1708395981265},{"_id":"source/typora-user-images/image-20240220103006353.png","hash":"4d3b13b8784cd20a6a0e3356f3c079450288bf93","modified":1708396206354},{"_id":"source/typora-user-images/image-20240220103217414.png","hash":"218f2e2ced5e54f34a1200c684bcbd712f8ca2d8","modified":1708396337414},{"_id":"source/typora-user-images/image-20240220144907721.png","hash":"d37668b1aad5f030616464724deb8f0db117a507","modified":1708411747722},{"_id":"source/typora-user-images/image-20240221092419244.png","hash":"fd61d9abaceb1d713a4c8fa976df8a6ea4635004","modified":1708478659245},{"_id":"source/typora-user-images/image-20240221093021265.png","hash":"132880d4de49a3f95fc8b3653b35492348edf2c0","modified":1708479021266},{"_id":"source/typora-user-images/image-20240221094225094.png","hash":"59b02ba2161ba7d6a9cc1d17a04b4ba1aa9b1255","modified":1708479745096},{"_id":"source/typora-user-images/image-20240221094244920.png","hash":"bd1cc1cf8e360a26b53d7d713d4d96dd5c646194","modified":1708479764921},{"_id":"source/typora-user-images/image-20240221155333042.png","hash":"c3f9d29db5350eaf1a35696a29772681237faf15","modified":1708502013046},{"_id":"source/typora-user-images/image-20240222152145318.png","hash":"ea0bfdcb4d5b983eddc66470b884e3184cac0dc7","modified":1708586505320},{"_id":"source/typora-user-images/image-20240222164404555.png","hash":"8cee0474bbe622aabb71ccc0e98bb19865c7e8a9","modified":1708591444557},{"_id":"source/typora-user-images/image-20240222164433038.png","hash":"5ec85e744795a997dd2bd6bae4d5cfecc5b87a7e","modified":1708591473038},{"_id":"source/typora-user-images/image-20240222164517003.png","hash":"dc07595b9a529bf01b82425000b486aa4199d6f5","modified":1708591517003},{"_id":"source/typora-user-images/image-20240222164533515.png","hash":"3918c9d39bab53b1274d95e023882faf9d933afe","modified":1708591533515},{"_id":"source/typora-user-images/image-20240415094839642.png","hash":"aadd5058a4a39b4066d1fc8cce856c21d9b6ae23","modified":1713145719643},{"_id":"source/typora-user-images/image-20240507111933014.png","hash":"e53c218c730e9aee66f7a8f65f85e229596d5f58","modified":1715051973015},{"_id":"source/typora-user-images/image-20240507112405845.png","hash":"e65a781d388d67b94ec024f11df0ac23c62a9f77","modified":1715052245847},{"_id":"source/typora-user-images/image-20240507112114709.png","hash":"e65a781d388d67b94ec024f11df0ac23c62a9f77","modified":1715052074710},{"_id":"source/typora-user-images/webp","hash":"f917f3e033ab2d6dbad539dde95f8caebdf07a02","modified":1708591877163},{"_id":"source/typora-user-images/1134316536b140eda97bef40993a2072.png","hash":"7b8ca16e7db13f3c62b1e2623598f8e6a98978c2","modified":1708657293338},{"_id":"source/typora-user-images/image-20230628094058045.png","hash":"2638081ba870b1a217a1cd2df33e6a370b012d24","modified":1687916458046},{"_id":"source/typora-user-images/image-20230921170222187.png","hash":"37856e5ff5e106ecfe0c2bddae56cb1ac3bd8513","modified":1695286942187},{"_id":"source/typora-user-images/image-20230923144124237.png","hash":"f68b880a2863b7529ade8e592c6bec5afdfe4a05","modified":1695451284239},{"_id":"source/typora-user-images/image-20230923144238782.png","hash":"6dd6156846efaa9f344a3aab4e02e552a8edec35","modified":1695451358783},{"_id":"source/typora-user-images/image-20230923144315232.png","hash":"804a761075a2d1f9cd89802a5863696dfaab950b","modified":1695451395232},{"_id":"source/typora-user-images/image-20230923144347556.png","hash":"107bbe2e4e44f49d21293eb4da1d57ba4db5df75","modified":1695451427556},{"_id":"source/typora-user-images/image-20230923144414595.png","hash":"2d05bc76b351bc883a7195a787f920c2c19ca85f","modified":1695451454595},{"_id":"source/typora-user-images/image-20230923144953818.png","hash":"c57fb2a037a97415f885c118f6fe0ca4b9a6964d","modified":1695451793820},{"_id":"source/typora-user-images/image-20230923144526897.png","hash":"65a4d29e2aa8f042d86b68d2640c6bbbcb27268b","modified":1695451526898},{"_id":"source/typora-user-images/image-20230923152344429.png","hash":"424baff60afbd3ee54a43081fc2a5e6b87855e56","modified":1695453824430},{"_id":"source/typora-user-images/image-20230923154459874.png","hash":"65c0f272b6964bd2e03e376e15938f148bd8b9f8","modified":1695455099874},{"_id":"source/typora-user-images/image-20231024101307177.png","hash":"6d2c18dab3d07a9b86acb5e73ebcfbbc5c5170b1","modified":1698113587177},{"_id":"source/typora-user-images/image-20231024102201145.png","hash":"42a805c7ee1585218f5cb4038a7b85ae56eeffc9","modified":1698114121145},{"_id":"source/typora-user-images/image-20240219114343151.png","hash":"dc3e3955b4b26107db0d98badbe43363803f3db4","modified":1708314223152},{"_id":"source/typora-user-images/image-20240220095107292.png","hash":"dc3e1488b33e1af2b21370a8c72a538801049f5a","modified":1708393867293},{"_id":"source/typora-user-images/image-20240220101010503.png","hash":"63b7c6935ee80b5eb36ffe375b04f8010a5d896c","modified":1708395010504},{"_id":"source/typora-user-images/image-20240220101701432.png","hash":"27638722b6c87cc3953b44dcf9df8432133ab43d","modified":1708395421433},{"_id":"source/typora-user-images/image-20240220102431979.png","hash":"e2b7ee4d99c89aed792b71b39a16bbb43f4ea4f5","modified":1708395871980},{"_id":"source/typora-user-images/image-20240221091728143.png","hash":"9922743caba2ccc606b79b076dcdbb108dcca8f8","modified":1708478248144},{"_id":"source/typora-user-images/image-20240221092028120.png","hash":"b38336f634e9b3fbf8dc3750e5098dbd2adfba60","modified":1708478428122},{"_id":"source/typora-user-images/image-20240221093819873.png","hash":"61aaece6568ebdb28ebfe1d4d7673c7db038d9b7","modified":1708479499873},{"_id":"source/typora-user-images/image-20240221094447664.png","hash":"3fad626e34213498460b69d420911eadc4798f03","modified":1708479887665},{"_id":"source/typora-user-images/image-20240221094852671.png","hash":"65d823ae285eb6e7d4501ba580be05737b242409","modified":1708480132672},{"_id":"source/typora-user-images/image-20240222175403127.png","hash":"759466b76af037d17aef71082b60fd4444d98e88","modified":1708595643127},{"_id":"source/typora-user-images/image-20240222181235735.png","hash":"446d65cd2cabfc3739546eb9e34bfde3bc74c9c0","modified":1708596755736},{"_id":"source/typora-user-images/image-20240510121326830.png","hash":"99d7ea26194892bb37cc2d600bee0c6c62681773","modified":1715314406831},{"_id":"source/typora-user-images/image-20240522090958255.png","hash":"de082694dac20df20c7e703b65b5fdf41d3ced15","modified":1716340198255},{"_id":"source/typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png","hash":"5f3cf68545f65e6efa160e5a7a8b20b8b12f31b9","modified":1708591997910},{"_id":"source/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70.png","hash":"2ed39a0c534189dabb51f290d50af84c5a1e0bd4","modified":1708397424132},{"_id":"source/typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png","hash":"a5f7c41c0f29418b336a08d9aab3a0ae3b1e1938","modified":1709257198169},{"_id":"source/typora-user-images/2afdf3d7222117202a1069d7e1587c12.png#align=left&display=inline&height=655&name=image.png","hash":"d2ef63ee6c52898e5271ae7c016ea21db4e3f410","modified":1708397853737},{"_id":"source/typora-user-images/72746e97a2cd474bb21601f507779a25.png","hash":"8c2982ef63c0fb718af012618fd2c1086ec86006","modified":1715075069072},{"_id":"source/typora-user-images/image-20230923145922760.png","hash":"11d4561b7e8111a8185c1704d85b1fde21e0386f","modified":1695452362760},{"_id":"source/typora-user-images/image-20230923151411555.png","hash":"dc0765cd34e084e0e7cc11c061fd2ec32cf00077","modified":1695453251556},{"_id":"source/typora-user-images/image-20230923162555344.png","hash":"04db850e51d79aacb52a8fc0bf54a3c812ddf2fa","modified":1695457555344},{"_id":"source/typora-user-images/image-20240219152607457.png","hash":"4bf67bf0a76285cd265b4d31ad23b3496ce0b1ba","modified":1708327567459},{"_id":"source/typora-user-images/image-20240221091441127.png","hash":"779e8c8a4e9d6a99f3f5b46ddd3042ba9b460f63","modified":1708478081128},{"_id":"source/typora-user-images/image-20240221092353574.png","hash":"78d606391142724c4b2712cf14f9ffb835c0dbfd","modified":1708478633575},{"_id":"source/typora-user-images/image-20240222180325402.png","hash":"d78f6b372e50726b2494420829013994150acd7c","modified":1708596205402},{"_id":"source/typora-user-images/image-20240514095424805.png","hash":"0fa4fd657fc9095c29a2c785ae0eac834eacd8d8","modified":1715651664806},{"_id":"source/typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png","hash":"de0940531ee2b6f2dbe186229aa8c46557ffb9b0","modified":1709255988564},{"_id":"source/typora-user-images/image-20230921165730484.png","hash":"8005d88378965d391adfeb682849a8eb7bc0fb36","modified":1695286650485},{"_id":"source/typora-user-images/image-20230921171005578.png","hash":"475e87595ea06dfe13ef06aeb6f88ee1c17723e1","modified":1695287405578},{"_id":"source/typora-user-images/image-20230923162506692.png","hash":"66f03aba21d26d5d9657d526548731cc0c471162","modified":1695457506693},{"_id":"source/typora-user-images/image-20240221091837069.png","hash":"028d6df4053a834c1b8e2b57fccbb9d0a6cd4cc7","modified":1708478317070},{"_id":"source/typora-user-images/image-20240222175326047.png","hash":"1ee1c1c6ef47ad9dc08a842dcb351cec04516f2d","modified":1708595606050},{"_id":"source/typora-user-images/image-20240222180337721.png","hash":"d78f6b372e50726b2494420829013994150acd7c","modified":1708596217721},{"_id":"source/typora-user-images/image-20240318202804603.png","hash":"0cd6675c6685aadccde6ef503a660d4195e5e127","modified":1710764884603},{"_id":"source/typora-user-images/image-20240510121631586.png","hash":"cab1a82b5ee99a68a80e57388cf5ce794f103f22","modified":1715314591586},{"_id":"source/typora-user-images/image-20240520161819461.png","hash":"854829d75e3ef499d7a3dd8ca2071b14107e9009","modified":1716193099463},{"_id":"source/typora-user-images/image-20240521094502177.png","hash":"da4af49b8625772c350829061e5cf7b938cd2884","modified":1716255902180},{"_id":"source/typora-user-images/image-20240522090312508.png","hash":"3139ccea0ce9f8ff4089b7a920e87c0763c81f68","modified":1716339792519},{"_id":"source/typora-user-images/image-20240522090352573.png","hash":"798df439306b8a08434548db9708abdf04de70e8","modified":1716339832574},{"_id":"source/typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png","hash":"ae473891e1ba05f2a0b04d2869a033a8c9e5993d","modified":1709256578297},{"_id":"source/typora-user-images/image-20230923144634136.png","hash":"d567d6a6f01e575f315824c3417e510e16b6eb05","modified":1695451594137},{"_id":"source/typora-user-images/image-20230923145717673.png","hash":"e8bc3c7beab2f62218290f38a636714d4af5e3f5","modified":1695452237673},{"_id":"source/typora-user-images/image-20230923150103329.png","hash":"465b742fedcf9e9dd5df14a08c771fc8c4fb5900","modified":1695452463330},{"_id":"source/typora-user-images/image-20230923154644281.png","hash":"63e926e126ebe21693302a25cadaeebb19a3c3dc","modified":1695455204282},{"_id":"source/typora-user-images/image-20240222180227522.png","hash":"cb2f2b1268d7a5bdec1b62d4c519f746427116ee","modified":1708596147522},{"_id":"source/typora-user-images/image-20240222180306582.png","hash":"97a69d286a268a115e21cac5d1cbcb3e0f53b1f7","modified":1708596186582},{"_id":"source/typora-user-images/image-20240223110630296.png","hash":"bfc87b3d6fa611ce06ab14bd35b9ccca47d70048","modified":1708657590296},{"_id":"source/typora-user-images/image-20240509105539663.png","hash":"1db876cda46958efbf6c4d19a5b8f8aa7a4dd97c","modified":1715223339664},{"_id":"source/typora-user-images/image-20240514095835213.png","hash":"63057deacd2e3305690510e373dfb70ea9840c45","modified":1715651915214},{"_id":"source/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png","hash":"b5d3395e2ce2b2834898b81d5d0c77eba2680494","modified":1716340401877},{"_id":"source/typora-user-images/image-20240221093711599.png","hash":"9949b95d1c4786a60a3cabf92b9d75ec1307042f","modified":1708479431602},{"_id":"source/typora-user-images/image-20240514095650303.png","hash":"1e3bbddc41c515dd5c19429d68264bbaf08e3371","modified":1715651810303},{"_id":"source/typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png","hash":"361d07b792b4efb822a20044471ed1c9c5e0fc39","modified":1708592052132},{"_id":"source/typora-user-images/image-20230921170734063.png","hash":"e3db4d79b4eb89d8a7e6ca0703e7e6c55604a9c0","modified":1695287254063},{"_id":"source/typora-user-images/image-20240219113719157.png","hash":"57072961b1982c890772c45a63a8af2e91a206c3","modified":1708313839158},{"_id":"source/typora-user-images/image-20240416114808884.png","hash":"b85644b2c128279c75d62b3c98075df968add195","modified":1713239288885},{"_id":"source/typora-user-images/image-20240516094845785.png","hash":"3d3999ff1248f9e98f822f133fdc07d7f111f26f","modified":1715824125786},{"_id":"source/typora-user-images/image-20240524175527451.png","hash":"980dfd1cef619a0e13811c6acc129cef9a7a8cc4","modified":1716544527451},{"_id":"source/typora-user-images/779689.png","hash":"7b5c3c50868191d92a2e8735e5b5faf7c4cabf20","modified":1708658957355},{"_id":"source/typora-user-images/image-20240221092834785.png","hash":"69ff079a54850f2141298e697bd4ea539e26af53","modified":1708478914788},{"_id":"source/typora-user-images/image-20240221095745495.png","hash":"5cc59fb94af18c29a44aaaae205f4cb7f5c8312a","modified":1708480665499},{"_id":"source/typora-user-images/image-20240415090937231.png","hash":"5f5d421b8b2a6e61ece77cb038e75449096f2e1a","modified":1713143377242},{"_id":"source/typora-user-images/image-20240416120116317.png","hash":"b85e3326515586bcc2a49a86eed1223639032eb2","modified":1713240076321},{"_id":"source/typora-user-images/image-20240524175254196.png","hash":"2b3e657322d36faa28bf1a10fd72c021a16732ee","modified":1716544374196},{"_id":"source/typora-user-images/image-20240223110332038.png","hash":"f6602e6e7b303d2116561200abfbeebbafb737ec","modified":1708657412038},{"_id":"source/typora-user-images/image-20240509105505568.png","hash":"f3d974c6c56fa3228cb715a853a25766e5b13f44","modified":1715223305572},{"_id":"source/typora-user-images/image-20240221094018816.png","hash":"ad37fce1f1a49fc8661c15c0dbcb38e0aa550bb8","modified":1708479618817},{"_id":"source/typora-user-images/image-20240412121048381.png","hash":"e514a0de2cf0d42557d81e97bf51e65cdfa56067","modified":1712895048382},{"_id":"source/typora-user-images/image-20240416113821316.png","hash":"2b971242ebf91ad5c1f3fb81ba7be8c8bafcb497","modified":1713238701320},{"_id":"source/typora-user-images/image-20240417091316659.png","hash":"c05a5eee17c67ffac9e8e46396a42768b702f1e0","modified":1713316396661},{"_id":"source/typora-user-images/image-20240417092003988.png","hash":"aec1f1669ef01a5965d955dc982877b7a14acf1f","modified":1713316803990},{"_id":"source/typora-user-images/image-20240417092118543.png","hash":"350e8c068bfc9e7009e2d5d023c860cf29b0739e","modified":1713316878545},{"_id":"source/typora-user-images/image-20240522091143334.png","hash":"1f855cb2c4f4b55621718607774f1a84470094f2","modified":1716340303335},{"_id":"source/typora-user-images/image-20230921171251668.png","hash":"c2918e0518513a92d9186de9312aa7fb5ccc0225","modified":1695287571669},{"_id":"source/typora-user-images/image-20240510121854650.png","hash":"7fc521f21df0b3261fdb8520eeb89f809614bfdd","modified":1715314734651},{"_id":"source/typora-user-images/image-20240415091018922.png","hash":"9d03c61ddacaf863607e74d8fd4cef929367fd9a","modified":1713143418922},{"_id":"source/typora-user-images/image-20230923145122020.png","hash":"49917b80ba7d58da9c0a93bb12d31caf292812d9","modified":1695451882021},{"_id":"source/typora-user-images/image-20240524174544128.png","hash":"59654553ec675ebf49fdb7bbbdd03501a57afff5","modified":1716543944129},{"_id":"source/typora-user-images/image-20240416114924463.png","hash":"e9d239af67f13fae73f92d2c36e7470b36eea866","modified":1713239364463},{"_id":"source/typora-user-images/image-20240416114024941.png","hash":"78cd820b26821a4b72b0eefabb88439df7114340","modified":1713238824943},{"_id":"source/typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png","hash":"8f6ce07ff86f5258b92f78c5af534b409edc5f8d","modified":1709256686636},{"_id":"source/typora-user-images/image-20240507112941777.png","hash":"b66d1a949da64143e32e83de63df6403051fa111","modified":1715052581779}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2025-06-04T09:41:07.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-06-04 17:41:07\n---\n","updated":"2025-06-04T09:41:07.185Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmbhrd5ec0000y2ky26zdfx4j","content":"","excerpt":"","more":""},{"title":"comments","date":"2025-06-04T09:40:59.000Z","_content":"","source":"comments/index.md","raw":"---\ntitle: comments\ndate: 2025-06-04 17:40:59\n---\n","updated":"2025-06-04T09:40:59.963Z","path":"comments/index.html","comments":1,"layout":"page","_id":"cmbhrd5er0003y2ky8q73ez2h","content":"","excerpt":"","more":""},{"title":"link","date":"2025-06-04T09:41:03.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2025-06-04 17:41:03\n---\n","updated":"2025-06-04T09:41:03.718Z","path":"link/index.html","comments":1,"layout":"page","_id":"cmbhrd5et0004y2ky1ru54cv8","content":"","excerpt":"","more":""},{"title":"movies","date":"2025-06-04T09:40:56.000Z","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2025-06-04 17:40:56\n---\n","updated":"2025-06-04T09:40:56.487Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cmbhrd5eu0005y2ky26b53sdm","content":"","excerpt":"","more":""},{"title":"music","date":"2025-06-04T09:40:48.000Z","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2025-06-04 17:40:48\n---\n","updated":"2025-06-04T09:40:48.081Z","path":"music/index.html","comments":1,"layout":"page","_id":"cmbhrd5ev0006y2ky8s9b93kb","content":"","excerpt":"","more":""},{"title":"picture","date":"2025-06-04T09:40:52.000Z","_content":"","source":"picture/index.md","raw":"---\ntitle: picture\ndate: 2025-06-04 17:40:52\n---\n","updated":"2025-06-04T09:40:52.571Z","path":"picture/index.html","comments":1,"layout":"page","_id":"cmbhrd5ew0007y2kygtkm4721","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-06-04T09:40:35.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2025-06-04 17:40:35\n---\n","updated":"2025-06-04T09:40:35.728Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"cmbhrd5ey0008y2ky25jaec7q","content":"","excerpt":"","more":""},{"title":"tags","date":"2025-06-04T09:27:08.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2025-06-04 17:27:08\n---\n","updated":"2025-06-04T09:27:08.364Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cmbhrd5f10009y2kydwr7ctxx","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2025-03-17T10:43:18.000Z","_content":"LIson [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n_## Quick Start_\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n![图片](image/shouye.jpg)\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2025-03-17 18:43:18\n---\nLIson [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n_## Quick Start_\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n![图片](image/shouye.jpg)\n\n","slug":"hello-world","published":1,"updated":"2025-06-04T10:50:04.525Z","_id":"cmbhrd5ei0001y2kyb7sccfmh","comments":1,"layout":"post","photos":[],"content":"<p>LIson <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p><em>## Quick Start</em></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<p><img src=\"/image/shouye.jpg\" alt=\"图片\"></p>\n","excerpt":"","more":"<p>LIson <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<p><em>## Quick Start</em></p>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<p><img src=\"/image/shouye.jpg\" alt=\"图片\"></p>\n"},{"title":"Spring AI Agent 未来智能应用的发展趋势","date":"2025-04-17T10:43:18.000Z","_content":"现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n\n# Spring AI Agent 未来智能应用的发展趋势\n\n\n\n一、引言\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n二、Spring AI 概述\nSpring AI 是啥玩意儿\nSpring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。\n\n它能干啥，有啥好处\nSpring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。\n\n那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。\n\n三、Agent 的基本概念\nAgent 是啥\nAgent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。\n\n它有啥特点，能干些啥\nAgent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。\n\n具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。\n\n它在 AI 里有啥用\n在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。\n\n四、Spring AI 中的 Agent\n它的架构和设计是啥样的\n在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。\n\n它是怎么工作的\nAgent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。\n\n怎么实现它\n在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。\n\n五、Spring AI Agent 的应用场景\n1. 智能客服里的 Agent\n在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。\n\n自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。\n多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。\n情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。\n2. 机器人控制里的 Agent\n在机器人领域，Agent 能让机器人变得更聪明、更灵活。\n\n路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。\n物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。\n人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。\n3. 数据分析里的 Agent\n在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。\n\n数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。\n模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。\n实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。\n4. 智能家居里的 Agent\n在智能家居领域，Agent 能让我们的家变得更智能、更舒适。\n\n设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。\n安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。\n用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。\n5. 医疗健康里的 Agent\n在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。\n\n病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。\n患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。\n医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。\n6. 金融领域的 Agent\n在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。\n\n风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。\n交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。\n客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。\n7. 交通物流里的 Agent\n在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。\n\n交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。\n车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。\n物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。\n8. 教育领域的 Agent\n在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。\n\n个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。\n智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。\n学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。\n六、Spring AI Agent 的发展趋势\n随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：\n\n学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。\n自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。\n交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。\n安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。\n七、结语\nSpring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。\n\n虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。\n\n\n\n# RAG  \n\n一、RAG是什么\n1.1 RAG的定义\nRAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。\n\n1.2 RAG的发展历程\nRAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。\n\n1.3 RAG与其他技术的关系\nRAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。\n\n二、RAG的应用场景\n2.1 智能问答系统\n2.1.1 提高问答准确性\n在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。\n\n2.1.2 处理复杂问题\n面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。\n\n2.2 文本生成任务\n2.2.1 辅助创作内容\n在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。\n\n2.2.2 生成多样化文本\nRAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。\n\n2.3 信息检索增强\n2.3.1 提升检索效率\n传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。\n\n2.3.2 深入挖掘信息\nRAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。\n\n四、RAG的优势与挑战\n4.1 RAG的优势\n4.1.1 提高模型性能\nRAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。\n\n4.1.2 增强可解释性\n由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。\n\n4.1.3 适应多种任务\nRAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。\n\n4.2 RAG的挑战\n4.2.1 数据质量与规模要求\nRAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。\n\nRAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。\n\n4.2.2 检索与生成的协调\n在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。\n\n检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。\n\n五、结语\n展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。\n","source":"_posts/Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势.md","raw":"---\ntitle: Spring AI Agent 未来智能应用的发展趋势\ndate: 2025-04-17 18:43:18\n---\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n\n# Spring AI Agent 未来智能应用的发展趋势\n\n\n\n一、引言\n现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。\n\n二、Spring AI 概述\nSpring AI 是啥玩意儿\nSpring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。\n\n它能干啥，有啥好处\nSpring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。\n\n那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。\n\n三、Agent 的基本概念\nAgent 是啥\nAgent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。\n\n它有啥特点，能干些啥\nAgent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。\n\n具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。\n\n它在 AI 里有啥用\n在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。\n\n四、Spring AI 中的 Agent\n它的架构和设计是啥样的\n在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。\n\n它是怎么工作的\nAgent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。\n\n怎么实现它\n在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。\n\n五、Spring AI Agent 的应用场景\n1. 智能客服里的 Agent\n在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。\n\n自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。\n多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。\n情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。\n2. 机器人控制里的 Agent\n在机器人领域，Agent 能让机器人变得更聪明、更灵活。\n\n路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。\n物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。\n人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。\n3. 数据分析里的 Agent\n在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。\n\n数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。\n模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。\n实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。\n4. 智能家居里的 Agent\n在智能家居领域，Agent 能让我们的家变得更智能、更舒适。\n\n设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。\n安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。\n用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。\n5. 医疗健康里的 Agent\n在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。\n\n病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。\n患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。\n医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。\n6. 金融领域的 Agent\n在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。\n\n风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。\n交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。\n客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。\n7. 交通物流里的 Agent\n在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。\n\n交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。\n车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。\n物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。\n8. 教育领域的 Agent\n在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。\n\n个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。\n智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。\n学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。\n六、Spring AI Agent 的发展趋势\n随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：\n\n学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。\n自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。\n交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。\n安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。\n七、结语\nSpring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。\n\n虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。\n\n\n\n# RAG  \n\n一、RAG是什么\n1.1 RAG的定义\nRAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。\n\n1.2 RAG的发展历程\nRAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。\n\n1.3 RAG与其他技术的关系\nRAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。\n\n二、RAG的应用场景\n2.1 智能问答系统\n2.1.1 提高问答准确性\n在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。\n\n2.1.2 处理复杂问题\n面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。\n\n2.2 文本生成任务\n2.2.1 辅助创作内容\n在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。\n\n2.2.2 生成多样化文本\nRAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。\n\n2.3 信息检索增强\n2.3.1 提升检索效率\n传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。\n\n2.3.2 深入挖掘信息\nRAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。\n\n四、RAG的优势与挑战\n4.1 RAG的优势\n4.1.1 提高模型性能\nRAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。\n\n4.1.2 增强可解释性\n由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。\n\n4.1.3 适应多种任务\nRAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。\n\n4.2 RAG的挑战\n4.2.1 数据质量与规模要求\nRAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。\n\nRAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。\n\n4.2.2 检索与生成的协调\n在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。\n\n检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。\n\n五、结语\n展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。\n","slug":"Spring AI Alibaba/Spring AI Agent未来智能应用的发展趋势","published":1,"updated":"2025-06-04T10:44:03.478Z","_id":"cmbhtdwy0000ao6fyadum0229","comments":1,"layout":"post","photos":[],"content":"<p>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<h1 id=\"Spring-AI-Agent-未来智能应用的发展趋势\"><a href=\"#Spring-AI-Agent-未来智能应用的发展趋势\" class=\"headerlink\" title=\"Spring AI Agent 未来智能应用的发展趋势\"></a>Spring AI Agent 未来智能应用的发展趋势</h1><p>一、引言<br>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<p>二、Spring AI 概述<br>Spring AI 是啥玩意儿<br>Spring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。</p>\n<p>它能干啥，有啥好处<br>Spring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。</p>\n<p>那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。</p>\n<p>三、Agent 的基本概念<br>Agent 是啥<br>Agent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。</p>\n<p>它有啥特点，能干些啥<br>Agent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。</p>\n<p>具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。</p>\n<p>它在 AI 里有啥用<br>在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。</p>\n<p>四、Spring AI 中的 Agent<br>它的架构和设计是啥样的<br>在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。</p>\n<p>它是怎么工作的<br>Agent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。</p>\n<p>怎么实现它<br>在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。</p>\n<p>五、Spring AI Agent 的应用场景</p>\n<ol>\n<li>智能客服里的 Agent<br>在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。</li>\n</ol>\n<p>自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。<br>多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。<br>情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。<br>2. 机器人控制里的 Agent<br>在机器人领域，Agent 能让机器人变得更聪明、更灵活。</p>\n<p>路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。<br>物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。<br>人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。<br>3. 数据分析里的 Agent<br>在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。</p>\n<p>数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。<br>模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。<br>实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。<br>4. 智能家居里的 Agent<br>在智能家居领域，Agent 能让我们的家变得更智能、更舒适。</p>\n<p>设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。<br>安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。<br>用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。<br>5. 医疗健康里的 Agent<br>在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。</p>\n<p>病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。<br>患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。<br>医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。<br>6. 金融领域的 Agent<br>在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。</p>\n<p>风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。<br>交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。<br>客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。<br>7. 交通物流里的 Agent<br>在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。</p>\n<p>交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。<br>车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。<br>物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。<br>8. 教育领域的 Agent<br>在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。</p>\n<p>个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。<br>智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。<br>学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。<br>六、Spring AI Agent 的发展趋势<br>随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：</p>\n<p>学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。<br>自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。<br>交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。<br>安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。<br>七、结语<br>Spring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。</p>\n<p>虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。</p>\n<h1 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h1><p>一、RAG是什么<br>1.1 RAG的定义<br>RAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。</p>\n<p>1.2 RAG的发展历程<br>RAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。</p>\n<p>1.3 RAG与其他技术的关系<br>RAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。</p>\n<p>二、RAG的应用场景<br>2.1 智能问答系统<br>2.1.1 提高问答准确性<br>在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。</p>\n<p>2.1.2 处理复杂问题<br>面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。</p>\n<p>2.2 文本生成任务<br>2.2.1 辅助创作内容<br>在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。</p>\n<p>2.2.2 生成多样化文本<br>RAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。</p>\n<p>2.3 信息检索增强<br>2.3.1 提升检索效率<br>传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。</p>\n<p>2.3.2 深入挖掘信息<br>RAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。</p>\n<p>四、RAG的优势与挑战<br>4.1 RAG的优势<br>4.1.1 提高模型性能<br>RAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。</p>\n<p>4.1.2 增强可解释性<br>由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。</p>\n<p>4.1.3 适应多种任务<br>RAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。</p>\n<p>4.2 RAG的挑战<br>4.2.1 数据质量与规模要求<br>RAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。</p>\n<p>RAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。</p>\n<p>4.2.2 检索与生成的协调<br>在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。</p>\n<p>检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。</p>\n<p>五、结语<br>展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。</p>\n","excerpt":"","more":"<p>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<h1 id=\"Spring-AI-Agent-未来智能应用的发展趋势\"><a href=\"#Spring-AI-Agent-未来智能应用的发展趋势\" class=\"headerlink\" title=\"Spring AI Agent 未来智能应用的发展趋势\"></a>Spring AI Agent 未来智能应用的发展趋势</h1><p>一、引言<br>现在，人工智能（AI）已经像空气一样，悄悄地融入了我们的生活。从家里的智能音箱，到手机上的语音助手，再到各种智能设备，AI 都在背后默默发力。你有没有想过，这些智能系统是怎么变得这么“聪明”的呢？其实，这里面有一个关键角色，那就是 Agent。今天，我们就来聊聊 Spring AI 里的 Agent，看看它到底是个啥，能干些啥，还有它在未来会怎么发展。</p>\n<p>二、Spring AI 概述<br>Spring AI 是啥玩意儿<br>Spring AI 其实就是在咱们熟悉的 Spring 框架基础上，加了一些“智能”的东西。就像给一辆普通汽车装上了自动驾驶系统一样，Spring AI 让传统的 Java 开发也能轻松搞定 AI 项目。为啥会有这个呢？因为以前开发 AI 系统，那可太复杂了，得懂一大堆数学公式和计算机知识，还得自己从头写代码。Spring AI 就是想把这事儿变简单，让更多的开发者能轻松上手。</p>\n<p>它能干啥，有啥好处<br>Spring AI 的本事可不小，能用的地方也很多。比如，它可以帮企业做个智能客服，自动回答客户的问题，省心又省力；还能帮分析师处理海量数据，找出有用的信息，给决策做参考。除了这些，机器人控制、智能家居、医疗健康等领域，Spring AI 都能大显身手。</p>\n<p>那它的好处呢？首先，它简单易学，基于 Spring 框架，上手快得很；其次，它跟 Spring 生态里的其他模块玩得很好，能轻松组合成一个完整的应用；再者，它很灵活，想用啥算法、想怎么改都行；最后，它背后有个庞大的开发者社区，有问题随时能找到答案。</p>\n<p>三、Agent 的基本概念<br>Agent 是啥<br>Agent 这个词听起来有点高大上，其实它就是个能感知周围环境，并且能根据环境做出反应的小家伙。在 Spring AI 里，Agent 就是实现各种智能功能的核心。你可以把它想象成一个有脑子、有眼睛、有手的小机器人，它能看、能想、能动，还能学习，最终完成各种任务。</p>\n<p>它有啥特点，能干些啥<br>Agent 的特点可以用四个词概括：自主、社交、反应快、主动。自主就是说它能自己做决定，不用别人一直指挥；社交就是它能和别的 Agent 或者人交流协作；反应快就是它能迅速应对环境变化；主动就是它能主动去完成任务，不用别人催。</p>\n<p>具体能干啥呢？简单来说，它能感知环境，比如通过摄像头看东西、通过麦克风听声音；它能做决策，比如根据看到的东西决定怎么行动；它能执行行动，比如控制设备、发送信息；它还能学习优化，越用越聪明。</p>\n<p>它在 AI 里有啥用<br>在 AI 世界里，Agent 的作用可太大了。它就像是一个个小兵，每个小兵都能独立完成任务，组合起来就能干大事。无论是简单的自动化任务，还是复杂的智能系统，Agent 都是实现它们的基础。在 Spring AI 里，Agent 就是连接 AI 算法和实际应用的桥梁，有了它，开发者就能把 AI 技术轻松用到项目里。</p>\n<p>四、Spring AI 中的 Agent<br>它的架构和设计是啥样的<br>在 Spring AI 里，Agent 的设计很讲究模块化和可扩展性。一个 Agent 通常由几个部分组成：感知器、决策器和执行器。感知器负责收集信息，决策器负责思考怎么干，执行器负责把想法变成行动。这种分层的设计，让每个部分都能独立开发和优化，开发者也能根据需要轻松定制。</p>\n<p>它是怎么工作的<br>Agent 的工作流程其实挺简单的，就像我们人类做事情一样。首先，它通过感知器“看”或者“听”周围的环境，获取信息；然后，决策器根据这些信息和设定的目标，用 AI 算法（比如机器学习模型）来决定怎么做；接着，执行器把决定变成实际行动，比如控制设备或者回复信息；最后，Agent 还会根据行动的结果和环境反馈，学习经验，优化自己的决策过程，下次做得更好。</p>\n<p>怎么实现它<br>在 Spring AI 里，实现 Agent 的方式很灵活。开发者可以根据自己的需求，选择不同的 AI 算法和框架。比如，可以用机器学习算法来让决策器更聪明，也可以用规则引擎来实现简单的逻辑。Spring AI 提供了很多工具和库，方便开发者快速搭建 Agent 的各个部分。而且，它还能和其他强大的 AI 框架（比如 TensorFlow、PyTorch）一起用，让 Agent 的性能更上一层楼。</p>\n<p>五、Spring AI Agent 的应用场景</p>\n<ol>\n<li>智能客服里的 Agent<br>在智能客服领域，Agent 可以干好多事儿，让客户服务变得超级高效。</li>\n</ol>\n<p>自动回答问题：Agent 能通过自然语言处理技术，理解客户的问题，然后快速给出准确答案。这样，客服人员就能省下好多时间，客户也能更快得到回复。<br>多语言服务：Agent 可以支持多种语言，不管客户说啥语言，都能轻松应对。这对于跨国企业来说，简直是太方便了。<br>情感分析和个性化服务：Agent 能分析客户的情绪，根据客户的心情提供贴心的服务。比如，客户生气了，Agent 就能用更温和的语气安抚客户，让客户感觉被重视。<br>2. 机器人控制里的 Agent<br>在机器人领域，Agent 能让机器人变得更聪明、更灵活。</p>\n<p>路径规划和导航：Agent 能根据环境信息，给机器人规划出最优的行走路线，并且还能实时调整，避开障碍物。<br>物体识别和抓取：Agent 能通过计算机视觉技术，识别出环境中的物体，然后控制机器人去抓取。这对于物流、制造业来说，简直是太实用了。<br>人机交互：Agent 能让机器人和人类自然地交流，理解人类的指令，做出相应的反应。这样一来，机器人就能更好地协助人类工作。<br>3. 数据分析里的 Agent<br>在数据分析领域，Agent 能帮企业和组织从海量数据里挖出有用的信息。</p>\n<p>数据清洗和预处理：Agent 能自动清理数据，把那些没用的、错误的数据去掉，让数据变得干净整洁。<br>模式识别和预测分析：Agent 能通过机器学习算法，找出数据里的规律和趋势，还能预测未来的情况。比如，预测市场需求、客户流失等，给企业决策提供依据。<br>实时监控和警报：Agent 能实时盯着数据的变化，一旦发现异常情况，就会立刻发出警报。这样，企业就能及时发现问题，减少损失。<br>4. 智能家居里的 Agent<br>在智能家居领域，Agent 能让我们的家变得更智能、更舒适。</p>\n<p>设备自动化控制：Agent 能根据我们的生活习惯和环境信息，自动控制家里的设备。比如，在我们回家前，自动打开灯光、调节室内温度。<br>安全监控和警报：Agent 能实时监控家里的安全情况，一旦发现异常（比如门窗被打开、烟雾报警），就会立刻发出警报，并通知我们。<br>用户行为分析和个性化场景设置：Agent 能分析我们的行为模式，根据我们的需求设置个性化的场景。比如，晚上看电影的时候，Agent 就会自动调整灯光、音响，给我们最佳的观影体验。<br>5. 医疗健康里的 Agent<br>在医疗健康领域，Agent 能为患者和医疗机构提供好多帮助。</p>\n<p>病历数据分析和辅助诊断：Agent 能分析患者的病历数据，通过机器学习算法，找出疾病的特征和模式，给医生提供诊断建议。<br>患者健康监测和预警：Agent 能实时监测患者的健康数据（比如心率、血压），一旦发现异常，就会立刻发出预警。这样，就能及时发现患者的健康问题，提高患者的生存率。<br>医疗设备自动化管理：Agent 能自动管理医疗设备，比如自动调整设备参数、提醒设备维护。这样，不仅能提高设备的使用效率，还能减少设备故障的风险。<br>6. 金融领域的 Agent<br>在金融领域，Agent 能帮金融机构更好地管理风险，提供更好的客户服务。</p>\n<p>风险评估和预测：Agent 能分析客户的财务数据和市场信息，评估客户的信用风险和市场风险。通过机器学习算法，Agent 还能预测风险的变化趋势，给金融机构提供决策依据。<br>交易监控和欺诈检测：Agent 能实时监控金融交易，识别异常交易行为，进行欺诈检测。这样一来，金融机构就能及时发现欺诈行为，减少损失。<br>客户投资建议和理财规划：Agent 能根据客户的风险偏好和财务状况，为客户量身定制投资建议和理财规划。这样，不仅能提高客户的投资回报率，还能增强客户的满意度。<br>7. 交通物流里的 Agent<br>在交通物流领域，Agent 能为交通管理和物流配送提供优化方案，提高效率和安全性。</p>\n<p>交通流量预测和优化：Agent 能分析交通数据，预测交通流量的变化趋势，并给交通管理部门提供优化建议。比如，调整信号灯时间、规划交通路线。<br>车辆调度和路径规划：Agent 能根据车辆的位置和任务信息，进行车辆调度和路径规划。这样，不仅能提高车辆的利用率，还能减少运输时间和成本。<br>物流配送监控和优化：Agent 能实时监控物流配送过程，优化配送路线和时间。同时，Agent 还能自动管理物流设备，提高物流配送的效率和可靠性。<br>8. 教育领域的 Agent<br>在教育领域，Agent 能为学生和教师提供个性化的学习支持，提高教育质量和效果。</p>\n<p>个性化学习路径规划：Agent 能根据学生的学习进度和能力，为学生量身定制学习路径。这样，学生就能更好地掌握知识，提高学习效果。<br>智能辅导和答疑：Agent 能为学生提供智能辅导和答疑服务。通过自然语言处理技术，Agent 能理解学生的问题，并给出详细的解答。<br>学习进度监测和反馈：Agent 能实时监测学生的学习进度，并根据学习情况给教师提供反馈。这样，教师就能及时了解学生的学习情况，调整教学策略，提高教学质量。<br>六、Spring AI Agent 的发展趋势<br>随着人工智能技术的不断发展，Spring AI 的 Agent 也在不断进步。未来，Agent 的技术发展趋势主要有以下几个方面：</p>\n<p>学习能力更强：Agent 会变得越来越聪明，能够通过深度学习等技术快速适应新的环境和任务。<br>自主性更高：Agent 会更加独立，在复杂的环境中也能自己完成任务，不需要人类太多干预。<br>交互能力更好：Agent 能和人类进行更自然、更流畅的交流，促进人机协作的发展。<br>安全性更高：随着 Agent 的广泛应用，安全性会越来越重要。未来，Agent 会具备更高的安全性，能够有效防止数据泄露和恶意攻击。<br>七、结语<br>Spring AI 的 Agent 真的是个很厉害的东西，它已经在好多领域展现出了强大的能力。它不仅能提高工作效率，还能让我们的生活更方便、更舒适。随着技术的不断发展，我相信 Spring AI 的 Agent 会在未来发挥更大的作用。希望这篇文章能帮你更好地了解 Spring AI 和 Agent，也希望它能激发你对这个领域的兴趣，去探索更多有趣的东西。</p>\n<p>虽然 Spring AI 的 Agent 有好多好处，但它在发展过程中也面临一些挑战。比如，怎么保证 Agent 的决策符合伦理和法律标准，怎么让 Agent 的决策过程更容易理解。不过，这些挑战也带来了新的机遇。开发者和研究人员可以通过不断探索和创新，解决这些问题，推动 Agent 技术的发展。</p>\n<h1 id=\"RAG\"><a href=\"#RAG\" class=\"headerlink\" title=\"RAG\"></a>RAG</h1><p>一、RAG是什么<br>1.1 RAG的定义<br>RAG（Retrieval-Augmented Generation，检索增强生成）是一种创新的自然语言处理技术，它巧妙地融合了检索和生成两种方法，旨在为各种语言相关任务提供更为精准且富有逻辑性的解决方案。简单来说，RAG先通过检索获取与任务相关的信息，再利用这些信息来指导文本的生成过程，从而让生成结果更贴合实际需求。它将检索模型（设计用于搜索大型数据集或知识库）和生成模型（例如大型语言模型 (LLM)，此类模型会使用检索到的信息生成可供阅读的文本回复）结合在一起。</p>\n<p>1.2 RAG的发展历程<br>RAG的诞生源于对传统生成模型局限性的反思。早期的生成模型，虽然能够生成流畅的文本，但常常会出现幻觉、逻辑不连贯等问题。为了解决这些问题，研究者们开始探索将检索技术引入生成过程。2020年左右，相关研究逐渐增多，随着深度学习技术的不断进步以及大数据处理能力的提升，RAG技术得到了快速发展。研究者们在检索算法、生成模型架构以及检索与生成的融合方式等方面进行了大量创新，使得RAG在多种自然语言处理任务上展现出了强大的性能。</p>\n<p>1.3 RAG与其他技术的关系<br>RAG与传统的检索技术和生成技术既相互独立又紧密联系。它借鉴了传统检索技术精准信息获取的能力，能够从海量数据中迅速定位与任务相关的部分；同时，它也吸收了生成技术灵活文本产出的优势，可以根据具体需求创造出符合语法规则和逻辑的文本。通过这种创新性的融合，RAG弥补了单一技术的不足，为自然语言处理领域开辟了新的道路。</p>\n<p>二、RAG的应用场景<br>2.1 智能问答系统<br>2.1.1 提高问答准确性<br>在智能问答系统中，RAG发挥着至关重要的作用。当用户提出一个问题时，RAG先利用检索器在大规模的知识库或文档集合中，快速找到与问题高度相关的信息片段。这些信息就像是为问题量身定制的“参考答案”，为后续的生成过程提供了坚实的依据。然后，生成器根据这些检索到的信息，结合问题的具体要求，生成最终的答案。这种方式使得答案能够精准地贴合问题，避免了仅依靠模型自身知识可能导致的偏差和错误，大大提高了问答的准确性。</p>\n<p>2.1.2 处理复杂问题<br>面对复杂问题时，RAG的优势更加凸显。复杂问题往往涉及多个知识点、不同的角度和深层次的逻辑关系。RAG能够检索到多方面的相关信息，对这些信息进行综合分析和整合，从而生成全面且有深度的答案。例如，在回答一个专业领域的学术问题时，RAG可以检索到相关的研究论文、实验数据、理论知识等，经过分析后，为用户提供一个系统、准确且易于理解的答案，帮助用户更好地理解和解决复杂问题。</p>\n<p>2.2 文本生成任务<br>2.2.1 辅助创作内容<br>在文本创作领域，RAG可以成为创作者的得力助手。无论是小说、剧本、新闻报道还是广告文案等创作，RAG都能发挥重要作用。它能够检索到与创作主题相关的各种素材，如类似题材的情节、人物设定、背景知识、经典语句等，为创作者提供丰富的灵感和参考。创作者可以在此基础上进行进一步的加工和创新，使创作过程更加高效，同时也能保证创作内容的质量和多样性。</p>\n<p>2.2.2 生成多样化文本<br>RAG能够根据不同的风格、语气和格式要求，生成多样化的文本内容。通过对大量不同风格文本的学习和分析，RAG可以掌握各种语言表达的特点和规律。在生成时，它可以根据具体需求，如正式严肃的商务报告、轻松幽默的社交媒体文案、简洁明了的新闻标题等，生成符合相应风格和语气的文本，满足不同领域和场景对文本多样化的需求。</p>\n<p>2.3 信息检索增强<br>2.3.1 提升检索效率<br>传统的信息检索方式往往需要用户自己在海量的搜索结果中筛选出真正有用的信息，这不仅耗时费力，而且可能会遗漏一些关键内容。RAG通过理解用户的具体检索意图，能够更精准地定位与之相关的信息，快速筛选出最符合需求的部分，大大减少了用户在无关信息中筛选的时间，提高了检索效率。</p>\n<p>2.3.2 深入挖掘信息<br>RAG不仅能够找到表面相关的文档或数据，还能进一步挖掘数据之间的潜在关联和深层次信息。例如，在进行市场调研时，RAG不仅可以找到相关的市场报告、行业分析等文档，还能通过分析这些文档中的数据和趋势，挖掘出隐藏的市场机会、潜在的风险以及竞争对手的策略等信息，为用户提供更全面、深入的决策支持。</p>\n<p>四、RAG的优势与挑战<br>4.1 RAG的优势<br>4.1.1 提高模型性能<br>RAG在多种自然语言处理任务上展现出了卓越的性能。通过结合检索和生成的优势，它能够生成更高质量的文本，回答更准确的问题，检索更高效且深入的信息。相比传统的单一技术，RAG在处理复杂任务和多样化需求时表现更加出色，为自然语言处理领域带来了显著的性能提升。</p>\n<p>4.1.2 增强可解释性<br>由于RAG在生成过程中有明确的检索依据，其生成结果的来源和逻辑更加清晰可追溯。用户可以了解生成文本所依据的信息和推理过程，从而更容易理解模型的行为和决策。这种增强的可解释性使得RAG在一些对安全性、可靠性要求较高的领域，如医疗诊断、法律咨询等，具有更大的应用价值。</p>\n<p>4.1.3 适应多种任务<br>RAG具有很强的通用性和适应性，能够广泛应用于多种自然语言处理任务。无论是智能问答、文本生成、信息检索，还是其他的语言相关任务，RAG都可以通过调整检索策略和生成模型，灵活地适应不同的需求，展现出良好的跨任务能力。</p>\n<p>4.2 RAG的挑战<br>4.2.1 数据质量与规模要求<br>RAG对数据的质量和规模有着较高的要求。为了保证检索和生成的效果，需要提供大量高质量、相关性强且准确的数据作为支撑。如果数据质量不佳，存在噪声、错误或不完整的情况，可能会导致检索不到有效信息或生成质量下降。同时，大规模的数据存储和管理也需要相应的资源和技术支持。</p>\n<p>RAG系统的性能高度依赖于外部知识库的质量和规模。如果知识库中的信息不准确、不完整或过时，将直接影响检索结果和生成文本的质量。例如，在医疗领域，知识库中的医学知识需要不断更新和验证，以确保提供给患者的信息准确可靠。此外，构建和维护大规模、高质量的知识库需要耗费大量的人力、物力和时间成本。</p>\n<p>4.2.2 检索与生成的协调<br>在RAG中，检索和生成是两个相互关联但又独立的过程，需要紧密配合才能达到最佳效果。如何确保检索到的信息与生成需求高度匹配，如何在生成过程中充分利用检索到的信息，这些都是需要解决的协调问题。如果协调不好，可能会出现检索信息无法有效指导生成，或者生成结果与检索信息不一致的情况，影响最终的输出质量。</p>\n<p>检索模块和生成模块之间的一致性问题是RAG系统面临的一个重要挑战。有时检索到的信息与生成的文本之间可能存在逻辑不一致、信息不匹配等问题，导致生成的文本质量下降。例如，检索到的文档片段中提到某种药物的副作用是头痛和恶心，但生成的文本却错误地描述为头晕和呕吐，这种不一致会影响用户对系统的信任。此外，由于检索和生成过程的复杂性，要保证两者之间的一致性在技术实现上具有一定的难度。</p>\n<p>五、结语<br>展望未来，RAG有望在技术上取得更多突破。一方面，研究者们将继续优化检索算法，提高检索速度和准确性，使其能够在更短的时间内从海量数据中找到最有用的信息；另一方面，生成模型也将不断改进，提高生成文本的质量、多样性和逻辑性，使其更接近人类的表达方式。此外，RAG的应用领域也将进一步拓展，除了现有的常见领域外，还将在医疗健康、教育培训、商业智能等更多领域发挥重要作用，为人们的生活和工作带来更多便利和创新。</p>\n"},{"title":"Spring AI Alibaba-00-Spring Ai Alibaba介绍","_content":"# Spring AI Alibaba-00-Spring Ai Alibaba介绍\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.12`\n\n\n\n[toc]\n\n\n\n## 简介\n\n[Spring AI](https://docs.spring.io/spring-ai/reference/index.html) 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。\n\n\n\n\n\n## 什么是 Spring AI Alibaba？\n\n\n\nSpring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。\n\n![img](../../typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png)\n\nSpring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。\n\n- 开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient\n- 提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等\n- 支持的模型类型包括聊天、文生图、音频转录、文生语音等\n- 支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）\n- 支持 Structured Output，即将 AI 模型输出映射到 POJOs\n- 支持矢量数据库存储与检索\n- 支持函数调用 Function Calling\n- 支持构建 AI Agent 所需要的工具调用和对话内存记忆能力\n- 支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索\n\n以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。\n\n\n\n## 核心概念\n\n### 模型（Model）\n\nAI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。\n\nAI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。\n\n\n\n![spring-ai-concepts-model-types](../../typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg)\n\nSpring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。\n\nGPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。\n\n\n\n### 提示（Prompt）\n\nPrompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。\n\nChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。\n\n撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。\n\n这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。\n\n分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。\n\n### 提示词模板（Prompt Template）\n\n创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。\n\n例如，考虑以下简单的 Prompt 模板：\n\n>Tell me a {adjective} joke about {content}.\n\n在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。\n\n传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。\n\n\n\n### 嵌入（Embedding）\n\n嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。\n\n通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。\n\n![spring-ai-embeddings](../../typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg)\n\n作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。\n\nEmbedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。\n\n您可以将这个语义空间视为一个向量。\n\n### Token\n\ntoken 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。\n\n在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。\n\n![spring-ai-concepts-tokens](../../typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png)\n\n\n\n也许更重要的是 “token = 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。\n\n此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。\n\n例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。\n\n要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。\n\n### 结构化输出（Structured Output）\n\n即使您要求回复为 JSON ，AI 模型的输出通常也会以 `java.lang.String` 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。\n\n这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。\n\n![结构化输出转换器架构](../../typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg)\n\n\n\n[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。\n\n\n\n### 将您的数据和 API 引入 AI 模型\n\n如何让人工智能模型与不在训练集中的数据一同工作？\n\n请注意，GPT 3.5/4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。\n\n有三种技术可以定制 AI 模型以整合您的数据：\n\n- `Fine Tuning` 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。\n- `Prompt Stuffing` 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为[检索增强生成 (RAG)]()实现解决方案。\n\n![prompt-stuffing](../../typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg)\n\n- Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。\n\n\n\n\n\n### 检索增强生成（RAG）\n\n一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。\n\n该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。\n\n在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：\n\n1. 将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。\n2. 将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。\n\nRAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。\n\n![Spring AI RAG](../../typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg)\n\n\n\n\n\n- [ETL 管道](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html) 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。\n- [ChatClient - RAG] 解释了如何使用`QuestionAnswerAdvisor` Advisor 在您的应用程序中启用 RAG 功能。\n\n### 函数调用（Function Calling）\n\n大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。\n\n[Function Calling](https://docs.spring.io/spring-ai/reference/api/functions.html)机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。\n\nSpring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，`@Bean`然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。\n\n![Spring AI Function Calling](../../typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg)\n\n- （1）执行聊天请求并发送函数定义信息。后者提供`name`（`description`例如，解释模型何时应调用该函数）和`input parameters`（例如，函数的输入参数模式）。\n- （2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。\n- （3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。\n- （4）模型可以执行多个函数调用来检索所需的所有信息。\n- （5）一旦获取了所有需要的信息，模型就会生成响应。\n\n请关注[函数调用](https://docs.spring.io/spring-ai/reference/api/functions.html)文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。\n\n### 评估人工智能的回答（Evaluation）\n\n有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。\n\nEvaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。\n\n一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。\n\n此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。","source":"_posts/Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍.md","raw":"---\ntitle: Spring AI Alibaba-00-Spring Ai Alibaba介绍\n---\n# Spring AI Alibaba-00-Spring Ai Alibaba介绍\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.12`\n\n\n\n[toc]\n\n\n\n## 简介\n\n[Spring AI](https://docs.spring.io/spring-ai/reference/index.html) 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。\n\n\n\n\n\n## 什么是 Spring AI Alibaba？\n\n\n\nSpring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。\n\n![img](../../typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png)\n\nSpring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。\n\n- 开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient\n- 提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等\n- 支持的模型类型包括聊天、文生图、音频转录、文生语音等\n- 支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）\n- 支持 Structured Output，即将 AI 模型输出映射到 POJOs\n- 支持矢量数据库存储与检索\n- 支持函数调用 Function Calling\n- 支持构建 AI Agent 所需要的工具调用和对话内存记忆能力\n- 支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索\n\n以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。\n\n\n\n## 核心概念\n\n### 模型（Model）\n\nAI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。\n\nAI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。\n\n\n\n![spring-ai-concepts-model-types](../../typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg)\n\nSpring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。\n\nGPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。\n\n\n\n### 提示（Prompt）\n\nPrompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。\n\nChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。\n\n撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。\n\n这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。\n\n分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。\n\n### 提示词模板（Prompt Template）\n\n创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。\n\n例如，考虑以下简单的 Prompt 模板：\n\n>Tell me a {adjective} joke about {content}.\n\n在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。\n\n传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。\n\n\n\n### 嵌入（Embedding）\n\n嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。\n\n通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。\n\n![spring-ai-embeddings](../../typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg)\n\n作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。\n\nEmbedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。\n\n您可以将这个语义空间视为一个向量。\n\n### Token\n\ntoken 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。\n\n在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。\n\n![spring-ai-concepts-tokens](../../typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png)\n\n\n\n也许更重要的是 “token = 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。\n\n此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。\n\n例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。\n\n要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。\n\n### 结构化输出（Structured Output）\n\n即使您要求回复为 JSON ，AI 模型的输出通常也会以 `java.lang.String` 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。\n\n这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。\n\n![结构化输出转换器架构](../../typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg)\n\n\n\n[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。\n\n\n\n### 将您的数据和 API 引入 AI 模型\n\n如何让人工智能模型与不在训练集中的数据一同工作？\n\n请注意，GPT 3.5/4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。\n\n有三种技术可以定制 AI 模型以整合您的数据：\n\n- `Fine Tuning` 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。\n- `Prompt Stuffing` 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为[检索增强生成 (RAG)]()实现解决方案。\n\n![prompt-stuffing](../../typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg)\n\n- Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。\n\n\n\n\n\n### 检索增强生成（RAG）\n\n一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。\n\n该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。\n\n在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：\n\n1. 将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。\n2. 将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。\n\nRAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。\n\n![Spring AI RAG](../../typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg)\n\n\n\n\n\n- [ETL 管道](https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html) 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。\n- [ChatClient - RAG] 解释了如何使用`QuestionAnswerAdvisor` Advisor 在您的应用程序中启用 RAG 功能。\n\n### 函数调用（Function Calling）\n\n大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。\n\n[Function Calling](https://docs.spring.io/spring-ai/reference/api/functions.html)机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。\n\nSpring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，`@Bean`然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。\n\n![Spring AI Function Calling](../../typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg)\n\n- （1）执行聊天请求并发送函数定义信息。后者提供`name`（`description`例如，解释模型何时应调用该函数）和`input parameters`（例如，函数的输入参数模式）。\n- （2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。\n- （3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。\n- （4）模型可以执行多个函数调用来检索所需的所有信息。\n- （5）一旦获取了所有需要的信息，模型就会生成响应。\n\n请关注[函数调用](https://docs.spring.io/spring-ai/reference/api/functions.html)文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。\n\n### 评估人工智能的回答（Evaluation）\n\n有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。\n\nEvaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。\n\n一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。\n\n此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。","slug":"Spring AI Alibaba/Spring AI Alibaba-00-Spring Ai Alibaba介绍","published":1,"date":"2025-04-19T09:00:52.554Z","updated":"2025-06-04T10:49:56.785Z","_id":"cmbhtdwzu000bo6fyey077nfs","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\"><a href=\"#Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\" class=\"headerlink\" title=\"Spring AI Alibaba-00-Spring Ai Alibaba介绍\"></a>Spring AI Alibaba-00-Spring Ai Alibaba介绍</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.12</code></p>\n<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://docs.spring.io/spring-ai/reference/index.html\">Spring AI</a> 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。</p>\n<h2 id=\"什么是-Spring-AI-Alibaba？\"><a href=\"#什么是-Spring-AI-Alibaba？\" class=\"headerlink\" title=\"什么是 Spring AI Alibaba？\"></a>什么是 Spring AI Alibaba？</h2><p>Spring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。</p>\n<p><img src=\"/../../typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png\" alt=\"img\"></p>\n<p>Spring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。</p>\n<ul>\n<li>开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient</li>\n<li>提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等</li>\n<li>支持的模型类型包括聊天、文生图、音频转录、文生语音等</li>\n<li>支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）</li>\n<li>支持 Structured Output，即将 AI 模型输出映射到 POJOs</li>\n<li>支持矢量数据库存储与检索</li>\n<li>支持函数调用 Function Calling</li>\n<li>支持构建 AI Agent 所需要的工具调用和对话内存记忆能力</li>\n<li>支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索</li>\n</ul>\n<p>以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"模型（Model）\"><a href=\"#模型（Model）\" class=\"headerlink\" title=\"模型（Model）\"></a>模型（Model）</h3><p>AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。</p>\n<p>AI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。</p>\n<p><img src=\"/../../typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg\" alt=\"spring-ai-concepts-model-types\"></p>\n<p>Spring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。</p>\n<p>GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。</p>\n<h3 id=\"提示（Prompt）\"><a href=\"#提示（Prompt）\" class=\"headerlink\" title=\"提示（Prompt）\"></a>提示（Prompt）</h3><p>Prompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。</p>\n<p>ChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。</p>\n<p>撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。</p>\n<p>这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。</p>\n<p>分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。</p>\n<h3 id=\"提示词模板（Prompt-Template）\"><a href=\"#提示词模板（Prompt-Template）\" class=\"headerlink\" title=\"提示词模板（Prompt Template）\"></a>提示词模板（Prompt Template）</h3><p>创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。</p>\n<p>例如，考虑以下简单的 Prompt 模板：</p>\n<blockquote>\n<p>Tell me a {adjective} joke about {content}.</p>\n</blockquote>\n<p>在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。</p>\n<p>传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。</p>\n<h3 id=\"嵌入（Embedding）\"><a href=\"#嵌入（Embedding）\" class=\"headerlink\" title=\"嵌入（Embedding）\"></a>嵌入（Embedding）</h3><p>嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。</p>\n<p>通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。</p>\n<p><img src=\"/../../typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg\" alt=\"spring-ai-embeddings\"></p>\n<p>作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。</p>\n<p>Embedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。</p>\n<p>您可以将这个语义空间视为一个向量。</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>token 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。</p>\n<p>在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。</p>\n<p><img src=\"/../../typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png\" alt=\"spring-ai-concepts-tokens\"></p>\n<p>也许更重要的是 “token &#x3D; 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。</p>\n<p>此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。</p>\n<p>例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。</p>\n<p>要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。</p>\n<h3 id=\"结构化输出（Structured-Output）\"><a href=\"#结构化输出（Structured-Output）\" class=\"headerlink\" title=\"结构化输出（Structured Output）\"></a>结构化输出（Structured Output）</h3><p>即使您要求回复为 JSON ，AI 模型的输出通常也会以 <code>java.lang.String</code> 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。</p>\n<p>这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。</p>\n<p><img src=\"/../../typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg\" alt=\"结构化输出转换器架构\"></p>\n<p>[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。</p>\n<h3 id=\"将您的数据和-API-引入-AI-模型\"><a href=\"#将您的数据和-API-引入-AI-模型\" class=\"headerlink\" title=\"将您的数据和 API 引入 AI 模型\"></a>将您的数据和 API 引入 AI 模型</h3><p>如何让人工智能模型与不在训练集中的数据一同工作？</p>\n<p>请注意，GPT 3.5&#x2F;4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。</p>\n<p>有三种技术可以定制 AI 模型以整合您的数据：</p>\n<ul>\n<li><code>Fine Tuning</code> 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。</li>\n<li><code>Prompt Stuffing</code> 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为<a href=\"\">检索增强生成 (RAG)</a>实现解决方案。</li>\n</ul>\n<p><img src=\"/../../typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg\" alt=\"prompt-stuffing\"></p>\n<ul>\n<li>Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。</li>\n</ul>\n<h3 id=\"检索增强生成（RAG）\"><a href=\"#检索增强生成（RAG）\" class=\"headerlink\" title=\"检索增强生成（RAG）\"></a>检索增强生成（RAG）</h3><p>一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。</p>\n<p>该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。</p>\n<p>在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：</p>\n<ol>\n<li>将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。</li>\n<li>将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。</li>\n</ol>\n<p>RAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。</p>\n<p><img src=\"/../../typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg\" alt=\"Spring AI RAG\"></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html\">ETL 管道</a> 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。</li>\n<li>[ChatClient - RAG] 解释了如何使用<code>QuestionAnswerAdvisor</code> Advisor 在您的应用程序中启用 RAG 功能。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a>函数调用（Function Calling）</h3><p>大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。</p>\n<p><a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">Function Calling</a>机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。</p>\n<p>Spring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，<code>@Bean</code>然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。</p>\n<p><img src=\"/../../typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg\" alt=\"Spring AI Function Calling\"></p>\n<ul>\n<li>（1）执行聊天请求并发送函数定义信息。后者提供<code>name</code>（<code>description</code>例如，解释模型何时应调用该函数）和<code>input parameters</code>（例如，函数的输入参数模式）。</li>\n<li>（2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。</li>\n<li>（3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。</li>\n<li>（4）模型可以执行多个函数调用来检索所需的所有信息。</li>\n<li>（5）一旦获取了所有需要的信息，模型就会生成响应。</li>\n</ul>\n<p>请关注<a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">函数调用</a>文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。</p>\n<h3 id=\"评估人工智能的回答（Evaluation）\"><a href=\"#评估人工智能的回答（Evaluation）\" class=\"headerlink\" title=\"评估人工智能的回答（Evaluation）\"></a>评估人工智能的回答（Evaluation）</h3><p>有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。</p>\n<p>Evaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。</p>\n<p>一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。</p>\n<p>此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\"><a href=\"#Spring-AI-Alibaba-00-Spring-Ai-Alibaba介绍\" class=\"headerlink\" title=\"Spring AI Alibaba-00-Spring Ai Alibaba介绍\"></a>Spring AI Alibaba-00-Spring Ai Alibaba介绍</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.12</code></p>\n<p>[toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://docs.spring.io/spring-ai/reference/index.html\">Spring AI</a> 项目由 Spring 官方开源并维护的 AI 应用开发框架，该项目目标是简化包含人工智能（AI）功能的应用程序的开发，避免不必要的复杂性。该项目从著名的 Python 项目（例如 LangChain 和 LlamaIndex）中汲取灵感，但 Spring AI 并非这些项目的直接移植，该项目的成立基于这样的信念：下一波生成式 AI 应用将不仅面向 Python 开发人员，还将遍及多种编程语言。从本质上讲，Spring AI 解决了 AI 集成的基本挑战：Connecting your enterprise Data and APIs with the AI Models。</p>\n<h2 id=\"什么是-Spring-AI-Alibaba？\"><a href=\"#什么是-Spring-AI-Alibaba？\" class=\"headerlink\" title=\"什么是 Spring AI Alibaba？\"></a>什么是 Spring AI Alibaba？</h2><p>Spring AI Alibaba 开源项目基于 Spring AI 构建，是阿里云通义系列模型及服务在 Java AI 应用开发领域的最佳实践，提供高层次的 AI API 抽象与云原生基础设施集成方案，帮助开发者快速构建 AI 应用。</p>\n<p><img src=\"/../../typora-user-images/O1CN01uhDvMY22HZ4q1OZMM_!!6000000007095-2-tps-5440-2928.png\" alt=\"img\"></p>\n<p>Spring AI Alibaba 作为开发 AI 应用程序的基础框架，定义了以下抽象概念与 API，并提供了 API 与通义系列模型的适配。</p>\n<ul>\n<li>开发复杂 AI 应用的高阶抽象 Fluent API — ChatClient</li>\n<li>提供多种大模型服务对接能力，包括主流开源与阿里云通义大模型服务（百炼）等</li>\n<li>支持的模型类型包括聊天、文生图、音频转录、文生语音等</li>\n<li>支持同步和流式 API，在保持应用层 API 不变的情况下支持灵活切换底层模型服务，支持特定模型的定制化能力（参数传递）</li>\n<li>支持 Structured Output，即将 AI 模型输出映射到 POJOs</li>\n<li>支持矢量数据库存储与检索</li>\n<li>支持函数调用 Function Calling</li>\n<li>支持构建 AI Agent 所需要的工具调用和对话内存记忆能力</li>\n<li>支持 RAG 开发模式，包括离线文档处理如 DocumentReader、Splitter、Embedding、VectorStore 等，支持 Retrieve 检索</li>\n</ul>\n<p>以上框架功能可让您实现常见 AI 应用的快速开发，例如 “通过文档进行问答” 或 “通过文档进行聊天” 等。</p>\n<h2 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h2><h3 id=\"模型（Model）\"><a href=\"#模型（Model）\" class=\"headerlink\" title=\"模型（Model）\"></a>模型（Model）</h3><p>AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。通过从大型数据集中学习模式和见解，这些模型可以做出预测、文本、图像或其他输出，从而增强各个行业的各种应用。</p>\n<p>AI 模型有很多种，每种都适用于特定的用例。虽然 ChatGPT 及其生成 AI 功能通过文本输入和输出吸引了用户，但许多模型和公司都提供不同的输入和输出。在 ChatGPT 之前，许多人都对文本到图像的生成模型着迷，例如 Midjourney 和 Stable Diffusion。</p>\n<p><img src=\"/../../typora-user-images/O1CN01otCVsl22MbQzFKYzJ_!!6000000007106-0-tps-2472-1618.jpg\" alt=\"spring-ai-concepts-model-types\"></p>\n<p>Spring AI 目前支持以语言、图像和音频形式处理输入和输出的模型。上表中的最后一行接受文本作为输入并输出数字，通常称为嵌入文本（Embedding Text），用来表示 AI 模型中使用的内部数据结构。Spring AI 提供了对 Embedding 的支持以支持开发更高级的应用场景。</p>\n<p>GPT 等模型的独特之处在于其预训练特性，正如 GPT 中的“P”所示——Chat Generative Pre-trained Transformer。这种预训练功能将 AI 转变为通用的开发工具，开发者使用这种工具不再需要广泛的机器学习或模型训练背景。</p>\n<h3 id=\"提示（Prompt）\"><a href=\"#提示（Prompt）\" class=\"headerlink\" title=\"提示（Prompt）\"></a>提示（Prompt）</h3><p>Prompt 作为语言基础输入的基础，指导 AI 模型生成特定的输出。对于熟悉 ChatGPT 的人来说，Prompt 似乎只是输入到对话框中的文本，然后发送到 API。然而，它的内涵远不止于此。在许多 AI 模型中，Prompt 的文本不仅仅是一个简单的字符串。</p>\n<p>ChatGPT 的 API 包含多个文本输入，每个文本输入都有其角色。例如，系统角色用于告知模型如何行为并设定交互的背景。还有用户角色，通常是来自用户的输入。</p>\n<p>撰写有效的 Prompt 既是一门艺术，也是一门科学。ChatGPT 旨在模拟人类对话，这与使用 SQL“提问”有很大的区别。与 AI 模型的交流就像与另外一个人对话一样。</p>\n<p>这种互动风格的重要性使得“Prompt 工程”这一学科应运而生。现在有越来越多的技术被提出，以提高 Prompt 的有效性。投入时间去精心设计 Prompt 可以显著改善生成的输出。</p>\n<p>分享 Prompt 已成为一种共同的实践，且正在进行积极的学术研究。例如，最近的一篇研究论文发现，最有效的 Prompt 之一可以以“深呼吸一下，分步进行此任务”开头。这表明语言的重要性之高。我们尚未完全了解如何充分利用这一技术的前几代版本，例如 ChatGPT 3.5，更不用说正在开发的新版本了。</p>\n<h3 id=\"提示词模板（Prompt-Template）\"><a href=\"#提示词模板（Prompt-Template）\" class=\"headerlink\" title=\"提示词模板（Prompt Template）\"></a>提示词模板（Prompt Template）</h3><p>创建有效的 Prompt 涉及建立请求的上下文，并用用户输入的特定值替换请求的部分内容。这个过程使用传统的基于文本的模板引擎来进行 Prompt 的创建和管理。Spring AI 采用开源库 StringTemplate 来实现这一目的。</p>\n<p>例如，考虑以下简单的 Prompt 模板：</p>\n<blockquote>\n<p>Tell me a {adjective} joke about {content}.</p>\n</blockquote>\n<p>在 Spring AI 中，Prompt 模板可以类比于 Spring MVC 架构中的“视图”。一个模型对象，通常是 java.util.Map，提供给 Template，以填充模板中的占位符。渲染后的字符串成为传递给 AI 模型的 Prompt 的内容。</p>\n<p>传递给模型的 Prompt 在具体数据格式上有相当大的变化。从最初的简单字符串开始，Prompt 逐渐演变为包含多条消息的格式，其中每条消息中的每个字符串代表模型的不同角色。</p>\n<h3 id=\"嵌入（Embedding）\"><a href=\"#嵌入（Embedding）\" class=\"headerlink\" title=\"嵌入（Embedding）\"></a>嵌入（Embedding）</h3><p>嵌入（Embedding）是文本、图像或视频的数值表示，能够捕捉输入之间的关系，Embedding 通过将文本、图像和视频转换为称为向量（Vector）的浮点数数组来工作。这些向量旨在捕捉文本、图像和视频的含义，Embedding 数组的长度称为向量的维度。</p>\n<p>通过计算两个文本片段的向量表示之间的数值距离，应用程序可以确定用于生成嵌入向量的对象之间的相似性。</p>\n<p><img src=\"/../../typora-user-images/O1CN01EnE3i61j2vin5eTGV_!!6000000004491-0-tps-3518-1136.jpg\" alt=\"spring-ai-embeddings\"></p>\n<p>作为一名探索人工智能的 Java 开发者，理解这些向量表示背后的复杂数学理论或具体实现并不是必需的。对它们在人工智能系统中的作用和功能有基本的了解就足够了，尤其是在将人工智能功能集成到您的应用程序中时。</p>\n<p>Embedding 在实际应用中，特别是在检索增强生成（RAG）模式中，具有重要意义。它们使数据能够在语义空间中表示为点，这类似于欧几里得几何的二维空间，但在更高的维度中。这意味着，就像欧几里得几何中平面上的点可以根据其坐标的远近关系而接近或远离一样，在语义空间中，点的接近程度反映了意义的相似性。关于相似主题的句子在这个多维空间中的位置较近，就像图表上彼此靠近的点。这种接近性有助于文本分类、语义搜索，甚至产品推荐等任务，因为它允许人工智能根据这些点在扩展的语义空间中的“位置”来辨别和分组相关概念。</p>\n<p>您可以将这个语义空间视为一个向量。</p>\n<h3 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h3><p>token 是 AI 模型工作原理的基石。输入时，模型将单词转换为 token。输出时，它们将 token 转换回单词。</p>\n<p>在英语中，一个 token 大约对应一个单词的 75%。作为参考，莎士比亚的全集总共约 90 万个单词，翻译过来大约有 120 万个 token。</p>\n<p><img src=\"/../../typora-user-images/O1CN01ciNztT1nJCFhQodzH_!!6000000005068-2-tps-1345-246.png\" alt=\"spring-ai-concepts-tokens\"></p>\n<p>也许更重要的是 “token &#x3D; 金钱”。在托管 AI 模型的背景下，您的费用由使用的 token 数量决定。输入和输出都会影响总 token 数量。</p>\n<p>此外，模型还受到 token 限制，这会限制单个 API 调用中处理的文本量。此阈值通常称为“上下文窗口”。模型不会处理超出此限制的任何文本。</p>\n<p>例如，ChatGPT3 的 token 限制为 4K，而 GPT4 则提供不同的选项，例如 8K、16K 和 32K。Anthropic 的 Claude AI 模型的 token 限制为 100K，而 Meta 的最新研究则产生了 1M token 限制模型。</p>\n<p>要使用 GPT4 总结莎士比亚全集，您需要制定软件工程策略来切分数据并在模型的上下文窗口限制内呈现数据。Spring AI 项目可以帮助您完成此任务。</p>\n<h3 id=\"结构化输出（Structured-Output）\"><a href=\"#结构化输出（Structured-Output）\" class=\"headerlink\" title=\"结构化输出（Structured Output）\"></a>结构化输出（Structured Output）</h3><p>即使您要求回复为 JSON ，AI 模型的输出通常也会以 <code>java.lang.String</code> 的形式出现。它可能是正确的 JSON，但它可能并不是你想要的 JSON 数据结构，它只是一个字符串。此外，在提示词 Prompt 中要求 “返回 JSON” 并非 100% 准确。</p>\n<p>这种复杂性导致了一个专门领域的出现，涉及创建 Prompt 以产生预期的输出，然后将生成的简单字符串转换为可用于应用程序集成的数据结构。</p>\n<p><img src=\"/../../typora-user-images/O1CN01lqCPAC1Xbwc1MfYv7_!!6000000002943-0-tps-2809-1423.jpg\" alt=\"结构化输出转换器架构\"></p>\n<p>[结构化输出转换]采用精心设计的提示，通常需要与模型进行多次交互才能实现所需的格式。</p>\n<h3 id=\"将您的数据和-API-引入-AI-模型\"><a href=\"#将您的数据和-API-引入-AI-模型\" class=\"headerlink\" title=\"将您的数据和 API 引入 AI 模型\"></a>将您的数据和 API 引入 AI 模型</h3><p>如何让人工智能模型与不在训练集中的数据一同工作？</p>\n<p>请注意，GPT 3.5&#x2F;4.0 数据集仅支持截止到 2021 年 9 月之前的数据。因此，该模型表示它不知道该日期之后的知识，因此它无法很好的应对需要用最新知识才能回答的问题。一个有趣的小知识是，这个数据集大约有 650GB。</p>\n<p>有三种技术可以定制 AI 模型以整合您的数据：</p>\n<ul>\n<li><code>Fine Tuning</code> 微调：这种传统的机器学习技术涉及定制模型并更改其内部权重。然而，即使对于机器学习专家来说，这是一个具有挑战性的过程，而且由于 GPT 等模型的大小，它极其耗费资源。此外，有些模型可能不提供此选项。</li>\n<li><code>Prompt Stuffing</code> 提示词填充：一种更实用的替代方案是将您的数据嵌入到提供给模型的提示中。考虑到模型的令牌限制，我们需要具备过滤相关数据的能力，并将过滤出的数据填充到在模型交互的上下文窗口中，这种方法俗称“提示词填充”。Spring AI 库可帮助您基于“提示词填充” 技术，也称为<a href=\"\">检索增强生成 (RAG)</a>实现解决方案。</li>\n</ul>\n<p><img src=\"/../../typora-user-images/O1CN01hRUT291k1O09cdQEU_!!6000000004623-0-tps-3249-1230.jpg\" alt=\"prompt-stuffing\"></p>\n<ul>\n<li>Function Calling：此技术允许注册自定义的用户函数，将大型语言模型连接到外部系统的 API。Spring AI 大大简化了支持 [函数调用] 所需编写的代码。</li>\n</ul>\n<h3 id=\"检索增强生成（RAG）\"><a href=\"#检索增强生成（RAG）\" class=\"headerlink\" title=\"检索增强生成（RAG）\"></a>检索增强生成（RAG）</h3><p>一种称为检索增强生成 (RAG) 的技术已经出现，旨在解决为 AI 模型提供额外的知识输入，以辅助模型更好的回答问题。</p>\n<p>该方法涉及批处理式的编程模型，其中涉及到：从文档中读取非结构化数据、对其进行转换、然后将其写入矢量数据库。从高层次上讲，这是一个 ETL（提取、转换和加载）管道。矢量数据库则用于 RAG 技术的检索部分。</p>\n<p>在将非结构化数据加载到矢量数据库的过程中，最重要的转换之一是将原始文档拆分成较小的部分。将原始文档拆分成较小部分的过程有两个重要步骤：</p>\n<ol>\n<li>将文档拆分成几部分，同时保留内容的语义边界。例如，对于包含段落和表格的文档，应避免在段落或表格中间拆分文档；对于代码，应避免在方法实现的中间拆分代码。</li>\n<li>将文档的各部分进一步拆分成大小仅为 AI 模型令牌 token 限制的一小部分的部分。</li>\n</ol>\n<p>RAG 的下一个阶段是处理用户输入。当用户的问题需要由 AI 模型回答时，问题和所有“类似”的文档片段都会被放入发送给 AI 模型的提示中。这就是使用矢量数据库的原因，它非常擅长查找具有一定相似度的“类似”内容。</p>\n<p><img src=\"/../../typora-user-images/O1CN01zEQSHu1sQ8KTQSA2E_!!6000000005760-0-tps-3360-1859.jpg\" alt=\"Spring AI RAG\"></p>\n<ul>\n<li><a href=\"https://docs.spring.io/spring-ai/reference/api/etl-pipeline.html\">ETL 管道</a> 提供了有关协调从数据源提取数据并将其存储在结构化向量存储中的流程的更多信息，确保在将数据传递给 AI 模型时数据具有最佳的检索格式。</li>\n<li>[ChatClient - RAG] 解释了如何使用<code>QuestionAnswerAdvisor</code> Advisor 在您的应用程序中启用 RAG 功能。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a>函数调用（Function Calling）</h3><p>大型语言模型 (LLM) 在训练后即被冻结，导致知识陈旧，并且无法访问或修改外部数据。</p>\n<p><a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">Function Calling</a>机制解决了这些缺点，它允许您注册自己的函数，以将大型语言模型连接到外部系统的 API。这些系统可以为 LLM 提供实时数据并代表它们执行数据处理操作。</p>\n<p>Spring AI 大大简化了您需要编写的代码以支持函数调用。它为您处理函数调用对话。您可以将函数作为提供，<code>@Bean</code>然后在提示选项中提供该函数的 bean 名称以激活该函数。此外，您可以在单个提示中定义和引用多个函数。</p>\n<p><img src=\"/../../typora-user-images/O1CN01kiQh6L1hnWmm5gCAW_!!6000000004322-0-tps-3400-1838.jpg\" alt=\"Spring AI Function Calling\"></p>\n<ul>\n<li>（1）执行聊天请求并发送函数定义信息。后者提供<code>name</code>（<code>description</code>例如，解释模型何时应调用该函数）和<code>input parameters</code>（例如，函数的输入参数模式）。</li>\n<li>（2）当模型决定调用该函数时，它将使用输入参数调用该函数，并将输出返回给模型。</li>\n<li>（3）Spring AI 为您处理此对话。它将函数调用分派给适当的函数，并将结果返回给模型。</li>\n<li>（4）模型可以执行多个函数调用来检索所需的所有信息。</li>\n<li>（5）一旦获取了所有需要的信息，模型就会生成响应。</li>\n</ul>\n<p>请关注<a href=\"https://docs.spring.io/spring-ai/reference/api/functions.html\">函数调用</a>文档以获取有关如何在不同 AI 模型中使用此功能的更多信息。</p>\n<h3 id=\"评估人工智能的回答（Evaluation）\"><a href=\"#评估人工智能的回答（Evaluation）\" class=\"headerlink\" title=\"评估人工智能的回答（Evaluation）\"></a>评估人工智能的回答（Evaluation）</h3><p>有效评估人工智能系统回答的正确性，对于确保最终应用程序的准确性和实用性非常重要，一些新兴技术使得预训练模型本身能够用于此目的。</p>\n<p>Evaluation 评估过程涉及分析响应是否符合用户的意图、与查询的上下文强相关，一些指标如相关性、连贯性和事实正确性等都被用于衡量 AI 生成的响应的质量。</p>\n<p>一种方法是把用户的请求、模型的响应一同作为输入给到模型服务，对比模型给的响应或回答是否与提供的响应数据一致。</p>\n<p>此外，利用矢量数据库（Vector Database）中存储的信息作为补充数据可以增强评估过程，有助于确定响应的相关性。</p>\n"},{"title":"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始","_content":"# Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n\n\nSpring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。\n\n## 依赖\n\n开发工具:IntelliJ IDEA\n\nJDK17+, 可以使用idea自带\n\n阿里云百炼：https://bailian.console.aliyun.com/\n\n\n\n## 准备\n\n### 使用IDEA 创建demo\n\n\n\n![image-20250419091747915](../../typora-user-images/image-20250419091747915.png)\n\n然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上\n\n![image-20250419092017527](../../typora-user-images/image-20250419092017527.png)\n\n\n\n\n\n###  Pom依赖\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n### **新建ChatController.java**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatController {\n\n\n    private final ChatClient chatClient;\n\n    public ChatController(ChatClient.Builder chatClientBuilder) {\n        this.chatClient = chatClientBuilder\n                // 实现 Chat Memory 的 Advisor\n                // 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。\n                .defaultAdvisors(\n                        new MessageChatMemoryAdvisor(new InMemoryChatMemory())\n                )\n                // 实现 Logger 的 Advisor\n                .defaultAdvisors(\n                        new SimpleLoggerAdvisor()\n                )\n                // 设置 ChatClient 中 ChatModel 的 Options 参数\n                .defaultOptions(\n                        DashScopeChatOptions.builder()\n                                .withTopP(0.7)\n                                .build()\n                )\n                .build();\n    }\n\n    @GetMapping(\"/simple/chat\")\n    public String simpleChat(String query) {\n        log.info(\"query: {}\",query );\n        String text =  chatClient.prompt(query).call().content();\n        log.info(\"text: {}\",text );\n        return text;\n    }\n\n    @GetMapping(\"/chat\")\n    public String chat(String message) {\n\n        return this.chatClient.prompt()\n                .user(message)\n                .call()\n                .content();\n    }\n\n\n    @GetMapping(\"/hello\")\n    public String hello(String message) {\n\n        return \"Hello \" + message;\n    }\n\n}\n\n~~~\n\nspring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建`chatClient`时添加两行代码。\n\n~~~java\nprivate ChatMemory chatMemory = new InMemoryChatMemory();                                            \n\npublic ChatController(ChatClient.Builder builder) {\n                                                   \n    this.chatClient = builder                                                                        \n            .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory, UUID.randomUUID().toString(), 10))\n            .build();                                                                                \n}\n\n~~~\n\nUUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。\n\n这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。\n\n\n\n这里有两个事项需要注意：\n\n1. Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。\n2. spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。\n\n~~~xml\n<repositories>\n  <repository>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n\n~~~\n\n\n\napplication.yml配置\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n~~~\n\n\n\n\n\n### 对话页面\n\n\n\n\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"js/marked.min.js\"></script>\n    <title></title>\n    <style>\n        body {\n\n            background-color: #f8f9fa;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n\n            margin: 50px auto;\n            width: 800px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        label {\n\n            display: block;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        input[type=\"text\"] {\n\n            width: 85%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        input[type=\"submit\"] {\n\n            background-color: #2ecc71;\n            color: #fff;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 3px;\n            cursor: pointer;\n            width: 10%;\n        }\n\n        .chat-box {\n\n            width: 100%;\n            height: 500px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n            overflow-y: scroll;\n        }\n\n        .message {\n\n            margin-bottom: 10px;\n            padding: 10px;\n            background-color: #f1f1f1;\n            border-radius: 3px;\n        }\n\n        .user-message {\n\n            background-color: #2ecc71;\n            color: #fff;\n        }\n\n        .bot-message {\n\n            background-color: #e6aa6b;\n            color: #fff;\n        }\n\n        .loader {\n\n            text-align: center;\n        }\n\n        .loader::after {\n\n            content: \"\";\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #ccc;\n            border-top-color: #2ecc71;\n            animation: spin 1s infinite linear;\n        }\n\n        @keyframes spin {\n\n            to {\n\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>AI 对话</h1>\n    <form id=\"form\" style=\"width: 47%;position: absolute;bottom: 150px;margin-left:15px\">\n        <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"输入你的问题\">\n        <input type=\"submit\" value=\"发送\">\n    </form>\n    <br>\n    <div id=\"loader\" class=\"loader\" style=\"display: none;\"></div>\n    <div id=\"chat-box\" class=\"chat-box\"></div>\n</div>\n\n<script>\n    var loader = document.getElementById(\"loader\");\n\n    document.getElementById(\"form\").addEventListener(\"submit\", function(event) {\n\n        event.preventDefault();\n\n        var messageInput = document.getElementById(\"message\");\n        var message = messageInput.value;\n        messageInput.value = \"\";\n\n        var chatBox = document.getElementById(\"chat-box\");\n\n        var userMessage = document.createElement(\"div\");\n        userMessage.className = \"message\";\n        userMessage.textContent = \"我: \" + message;\n        chatBox.appendChild(userMessage);\n        chatBox.scrollTop = chatBox.scrollHeight;\n\n        loader.style.display = \"block\";\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"http://localhost:8080/ai/v1/chat?message=\" + encodeURIComponent(message), true);\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState === 4) {\n\n                loader.style.display = \"none\";\n\n                if (xhr.status === 200) {\n\n                    var response = xhr.responseText;\n\n                    var botMessage = document.createElement(\"div\");\n                    botMessage.className = \"message bot-message\";\n\n                    var botMessageText = document.createElement(\"span\");\n                    botMessageText.className = \"message-text\";\n                    botMessage.appendChild(botMessageText);\n                    botMessageText.innerHTML = marked.marked(response);\n\n                    chatBox.appendChild(botMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else if (xhr.status === 400) {\n\n                    var error = JSON.parse(xhr.responseText);\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: \" + error.message;\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else {\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: Failed to connect to the backend service. Please make sure the backend service is running.\";\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                }\n            }\n        };\n\n        xhr.onloadstart = function() {\n\n            loader.style.display = \"block\";\n        };\n\n        xhr.onloadend = function() {\n\n            loader.style.display = \"none\";\n        };\n\n        xhr.send();\n    });\n</script>\n</body>\n</html>\n\n~~~\n\n注意：js 引入的 `marked.min.js`\n\n可以去 [GitHub](https://github.com/cundream/marked) 或联系我\n\n### 注册配置APi\n\n[阿里云百练文档地址](https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1)\n\n\n\n![image-20250419102848756](../../typora-user-images/image-20250419102848756.png)\n\n\n\n创建Key\n\n![image-20250419105704031](../../typora-user-images/image-20250419105704031.png)\n\n\n\n## 测试验证\n\n访问：http://localhost:8080/chat.html\n\n输入对话\n\n\n\n![image-20250419113622811](../../typora-user-images/image-20250419113622811.png)\n\n测试二：\n\nhttp://localhost:8080/ai/v1/simple/chat?query=你是谁\n\n![image-20250419112758947](../../typora-user-images/image-20250419112758947.png)\n\n\n\n## 需要了解的基本知识\n\n\n\n上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。\n\n- AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。\n- Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。\n- Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。\n- 模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。\n\n对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。\n\n\n\n\n\n# 总结\n\nSpring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。","source":"_posts/Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始.md","raw":"---\ntitle: Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n---\n# Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n\n\nSpring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。\n\n## 依赖\n\n开发工具:IntelliJ IDEA\n\nJDK17+, 可以使用idea自带\n\n阿里云百炼：https://bailian.console.aliyun.com/\n\n\n\n## 准备\n\n### 使用IDEA 创建demo\n\n\n\n![image-20250419091747915](../../typora-user-images/image-20250419091747915.png)\n\n然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上\n\n![image-20250419092017527](../../typora-user-images/image-20250419092017527.png)\n\n\n\n\n\n###  Pom依赖\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.4</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>1.0.0-M3.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n### **新建ChatController.java**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatController {\n\n\n    private final ChatClient chatClient;\n\n    public ChatController(ChatClient.Builder chatClientBuilder) {\n        this.chatClient = chatClientBuilder\n                // 实现 Chat Memory 的 Advisor\n                // 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。\n                .defaultAdvisors(\n                        new MessageChatMemoryAdvisor(new InMemoryChatMemory())\n                )\n                // 实现 Logger 的 Advisor\n                .defaultAdvisors(\n                        new SimpleLoggerAdvisor()\n                )\n                // 设置 ChatClient 中 ChatModel 的 Options 参数\n                .defaultOptions(\n                        DashScopeChatOptions.builder()\n                                .withTopP(0.7)\n                                .build()\n                )\n                .build();\n    }\n\n    @GetMapping(\"/simple/chat\")\n    public String simpleChat(String query) {\n        log.info(\"query: {}\",query );\n        String text =  chatClient.prompt(query).call().content();\n        log.info(\"text: {}\",text );\n        return text;\n    }\n\n    @GetMapping(\"/chat\")\n    public String chat(String message) {\n\n        return this.chatClient.prompt()\n                .user(message)\n                .call()\n                .content();\n    }\n\n\n    @GetMapping(\"/hello\")\n    public String hello(String message) {\n\n        return \"Hello \" + message;\n    }\n\n}\n\n~~~\n\nspring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建`chatClient`时添加两行代码。\n\n~~~java\nprivate ChatMemory chatMemory = new InMemoryChatMemory();                                            \n\npublic ChatController(ChatClient.Builder builder) {\n                                                   \n    this.chatClient = builder                                                                        \n            .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory, UUID.randomUUID().toString(), 10))\n            .build();                                                                                \n}\n\n~~~\n\nUUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。\n\n这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。\n\n\n\n这里有两个事项需要注意：\n\n1. Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。\n2. spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。\n\n~~~xml\n<repositories>\n  <repository>\n    <id>spring-milestones</id>\n    <name>Spring Milestones</name>\n    <url>https://repo.spring.io/milestone</url>\n    <snapshots>\n      <enabled>false</enabled>\n    </snapshots>\n  </repository>\n</repositories>\n\n~~~\n\n\n\napplication.yml配置\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n~~~\n\n\n\n\n\n### 对话页面\n\n\n\n\n\n~~~html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"js/marked.min.js\"></script>\n    <title></title>\n    <style>\n        body {\n\n            background-color: #f8f9fa;\n            font-family: Arial, sans-serif;\n        }\n\n        .container {\n\n            margin: 50px auto;\n            width: 800px;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 5px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n\n            text-align: center;\n            margin-bottom: 30px;\n        }\n\n        label {\n\n            display: block;\n            margin-bottom: 10px;\n            color: #333;\n        }\n\n        input[type=\"text\"] {\n\n            width: 85%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n        }\n\n        input[type=\"submit\"] {\n\n            background-color: #2ecc71;\n            color: #fff;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 3px;\n            cursor: pointer;\n            width: 10%;\n        }\n\n        .chat-box {\n\n            width: 100%;\n            height: 500px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 3px;\n            overflow-y: scroll;\n        }\n\n        .message {\n\n            margin-bottom: 10px;\n            padding: 10px;\n            background-color: #f1f1f1;\n            border-radius: 3px;\n        }\n\n        .user-message {\n\n            background-color: #2ecc71;\n            color: #fff;\n        }\n\n        .bot-message {\n\n            background-color: #e6aa6b;\n            color: #fff;\n        }\n\n        .loader {\n\n            text-align: center;\n        }\n\n        .loader::after {\n\n            content: \"\";\n            display: inline-block;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid #ccc;\n            border-top-color: #2ecc71;\n            animation: spin 1s infinite linear;\n        }\n\n        @keyframes spin {\n\n            to {\n\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>AI 对话</h1>\n    <form id=\"form\" style=\"width: 47%;position: absolute;bottom: 150px;margin-left:15px\">\n        <input type=\"text\" id=\"message\" name=\"message\" placeholder=\"输入你的问题\">\n        <input type=\"submit\" value=\"发送\">\n    </form>\n    <br>\n    <div id=\"loader\" class=\"loader\" style=\"display: none;\"></div>\n    <div id=\"chat-box\" class=\"chat-box\"></div>\n</div>\n\n<script>\n    var loader = document.getElementById(\"loader\");\n\n    document.getElementById(\"form\").addEventListener(\"submit\", function(event) {\n\n        event.preventDefault();\n\n        var messageInput = document.getElementById(\"message\");\n        var message = messageInput.value;\n        messageInput.value = \"\";\n\n        var chatBox = document.getElementById(\"chat-box\");\n\n        var userMessage = document.createElement(\"div\");\n        userMessage.className = \"message\";\n        userMessage.textContent = \"我: \" + message;\n        chatBox.appendChild(userMessage);\n        chatBox.scrollTop = chatBox.scrollHeight;\n\n        loader.style.display = \"block\";\n\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", \"http://localhost:8080/ai/v1/chat?message=\" + encodeURIComponent(message), true);\n        xhr.onreadystatechange = function() {\n\n            if (xhr.readyState === 4) {\n\n                loader.style.display = \"none\";\n\n                if (xhr.status === 200) {\n\n                    var response = xhr.responseText;\n\n                    var botMessage = document.createElement(\"div\");\n                    botMessage.className = \"message bot-message\";\n\n                    var botMessageText = document.createElement(\"span\");\n                    botMessageText.className = \"message-text\";\n                    botMessage.appendChild(botMessageText);\n                    botMessageText.innerHTML = marked.marked(response);\n\n                    chatBox.appendChild(botMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else if (xhr.status === 400) {\n\n                    var error = JSON.parse(xhr.responseText);\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: \" + error.message;\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                } else {\n\n                    var errorMessage = document.createElement(\"div\");\n                    errorMessage.className = \"message bot-message\";\n                    errorMessage.textContent = \"Bot: Failed to connect to the backend service. Please make sure the backend service is running.\";\n                    chatBox.appendChild(errorMessage);\n                    chatBox.scrollTop = chatBox.scrollHeight;\n                }\n            }\n        };\n\n        xhr.onloadstart = function() {\n\n            loader.style.display = \"block\";\n        };\n\n        xhr.onloadend = function() {\n\n            loader.style.display = \"none\";\n        };\n\n        xhr.send();\n    });\n</script>\n</body>\n</html>\n\n~~~\n\n注意：js 引入的 `marked.min.js`\n\n可以去 [GitHub](https://github.com/cundream/marked) 或联系我\n\n### 注册配置APi\n\n[阿里云百练文档地址](https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1)\n\n\n\n![image-20250419102848756](../../typora-user-images/image-20250419102848756.png)\n\n\n\n创建Key\n\n![image-20250419105704031](../../typora-user-images/image-20250419105704031.png)\n\n\n\n## 测试验证\n\n访问：http://localhost:8080/chat.html\n\n输入对话\n\n\n\n![image-20250419113622811](../../typora-user-images/image-20250419113622811.png)\n\n测试二：\n\nhttp://localhost:8080/ai/v1/simple/chat?query=你是谁\n\n![image-20250419112758947](../../typora-user-images/image-20250419112758947.png)\n\n\n\n## 需要了解的基本知识\n\n\n\n上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。\n\n- AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。\n- Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。\n- Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。\n- 模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。\n\n对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。\n\n\n\n\n\n# 总结\n\nSpring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。","slug":"Spring AI Alibaba/Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始","published":1,"date":"2025-04-19T01:08:52.534Z","updated":"2025-06-04T10:49:56.775Z","_id":"cmbhtdwzu000co6fy7z2x03i7","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\"><a href=\"#Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\" class=\"headerlink\" title=\"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\"></a>Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>Spring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>开发工具:IntelliJ IDEA</p>\n<p>JDK17+, 可以使用idea自带</p>\n<p>阿里云百炼：<a href=\"https://bailian.console.aliyun.com/\">https://bailian.console.aliyun.com/</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"使用IDEA-创建demo\"><a href=\"#使用IDEA-创建demo\" class=\"headerlink\" title=\"使用IDEA 创建demo\"></a>使用IDEA 创建demo</h3><p><img src=\"/../../typora-user-images/image-20250419091747915.png\" alt=\"image-20250419091747915\"></p>\n<p>然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上</p>\n<p><img src=\"/../../typora-user-images/image-20250419092017527.png\" alt=\"image-20250419092017527\"></p>\n<h3 id=\"Pom依赖\"><a href=\"#Pom依赖\" class=\"headerlink\" title=\"Pom依赖\"></a>Pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建ChatController-java\"><a href=\"#新建ChatController-java\" class=\"headerlink\" title=\"新建ChatController.java\"></a><strong>新建ChatController.java</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = chatClientBuilder</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">                <span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>())</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">                .defaultOptions(</span><br><span class=\"line\">                        DashScopeChatOptions.builder()</span><br><span class=\"line\">                                .withTopP(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">                                .build()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/simple/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query: &#123;&#125;&quot;</span>,query );</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span>  chatClient.prompt(query).call().content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text: &#123;&#125;&quot;</span>,text );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.chatClient.prompt()</span><br><span class=\"line\">                .user(message)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>spring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建<code>chatClient</code>时添加两行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ChatMemory</span> <span class=\"variable\">chatMemory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();                                            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">                                                   </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder                                                                        </span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, UUID.randomUUID().toString(), <span class=\"number\">10</span>))</span><br><span class=\"line\">            .build();                                                                                </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>UUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。</p>\n<p>这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。</p>\n<p>这里有两个事项需要注意：</p>\n<ol>\n<li>Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。</li>\n<li>spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>application.yml配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"对话页面\"><a href=\"#对话页面\" class=\"headerlink\" title=\"对话页面\"></a>对话页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/marked.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f9fa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">85%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.chat-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow-y</span>: scroll;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.user-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.bot-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#e6aa6b</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">animation</span>: spin <span class=\"number\">1s</span> infinite linear;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"keyword\">@keyframes</span> spin &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>AI 对话<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 47%;position: absolute;bottom: 150px;margin-left:15px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入你的问题&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-box&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> loader = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loader&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;form&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;submit&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        event.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> messageInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> message = messageInput.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        messageInput.<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> chatBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;chat-box&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> userMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;我: &quot;</span> + message;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"title function_\">appendChild</span>(userMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:8080/ai/v1/chat?message=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(message), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> response = xhr.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessageText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">className</span> = <span class=\"string\">&quot;message-text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"title function_\">appendChild</span>(botMessageText);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">innerHTML</span> = marked.<span class=\"title function_\">marked</span>(response);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(botMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">400</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: &quot;</span> + error.<span class=\"property\">message</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: Failed to connect to the backend service. Please make sure the backend service is running.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：js 引入的 <code>marked.min.js</code></p>\n<p>可以去 <a href=\"https://github.com/cundream/marked\">GitHub</a> 或联系我</p>\n<h3 id=\"注册配置APi\"><a href=\"#注册配置APi\" class=\"headerlink\" title=\"注册配置APi\"></a>注册配置APi</h3><p><a href=\"https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1\">阿里云百练文档地址</a></p>\n<p><img src=\"/../../typora-user-images/image-20250419102848756.png\" alt=\"image-20250419102848756\"></p>\n<p>创建Key</p>\n<p><img src=\"/../../typora-user-images/image-20250419105704031.png\" alt=\"image-20250419105704031\"></p>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>访问：<a href=\"http://localhost:8080/chat.html\">http://localhost:8080/chat.html</a></p>\n<p>输入对话</p>\n<p><img src=\"/../../typora-user-images/image-20250419113622811.png\" alt=\"image-20250419113622811\"></p>\n<p>测试二：</p>\n<p><a href=\"http://localhost:8080/ai/v1/simple/chat?query=%E4%BD%A0%E6%98%AF%E8%B0%81\">http://localhost:8080/ai/v1/simple/chat?query=你是谁</a></p>\n<p><img src=\"/../../typora-user-images/image-20250419112758947.png\" alt=\"image-20250419112758947\"></p>\n<h2 id=\"需要了解的基本知识\"><a href=\"#需要了解的基本知识\" class=\"headerlink\" title=\"需要了解的基本知识\"></a>需要了解的基本知识</h2><p>上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。</p>\n<ul>\n<li>AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。</li>\n<li>Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。</li>\n<li>Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。</li>\n<li>模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。</li>\n</ul>\n<p>对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。</p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\"><a href=\"#Spring-AI-Alibaba-01-SpringBoot集成SpringAI-Alibaba-快速开始\" class=\"headerlink\" title=\"Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始\"></a>Spring AI Alibaba-01-SpringBoot集成SpringAI Alibaba 快速开始</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>Spring 官方自从发布了 Spring AI，基于 Spring AI 和通义千问大模型的 Spring AI Alibaba 也跟随其后。Alibaba 的出现也就意味着国内的 Javaer 们也能很轻松的开发AI应用了。那么本文就基于 Spring AI Alibaba 开发一个简单的 AI 对话应用。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>开发工具:IntelliJ IDEA</p>\n<p>JDK17+, 可以使用idea自带</p>\n<p>阿里云百炼：<a href=\"https://bailian.console.aliyun.com/\">https://bailian.console.aliyun.com/</a></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"使用IDEA-创建demo\"><a href=\"#使用IDEA-创建demo\" class=\"headerlink\" title=\"使用IDEA 创建demo\"></a>使用IDEA 创建demo</h3><p><img src=\"/../../typora-user-images/image-20250419091747915.png\" alt=\"image-20250419091747915\"></p>\n<p>然后选择web项目，lambok等常用的依赖，，java的版本最好是17之后，springboot的版本也要选择3.4以上</p>\n<p><img src=\"/../../typora-user-images/image-20250419092017527.png\" alt=\"image-20250419092017527\"></p>\n<h3 id=\"Pom依赖\"><a href=\"#Pom依赖\" class=\"headerlink\" title=\"Pom依赖\"></a>Pom依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-M3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建ChatController-java\"><a href=\"#新建ChatController-java\" class=\"headerlink\" title=\"新建ChatController.java\"></a><strong>新建ChatController.java</strong></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.cloud.ai.dashscope.chat.DashScopeChatOptions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder chatClientBuilder)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = chatClientBuilder</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Chat Memory 的 Advisor</span></span><br><span class=\"line\">                <span class=\"comment\">// 在使用 Chat Memory 时，需要指定对话 ID，以便 Spring AI 处理上下文。</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>())</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 实现 Logger 的 Advisor</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLoggerAdvisor</span>()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                <span class=\"comment\">// 设置 ChatClient 中 ChatModel 的 Options 参数</span></span><br><span class=\"line\">                .defaultOptions(</span><br><span class=\"line\">                        DashScopeChatOptions.builder()</span><br><span class=\"line\">                                .withTopP(<span class=\"number\">0.7</span>)</span><br><span class=\"line\">                                .build()</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/simple/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">simpleChat</span><span class=\"params\">(String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query: &#123;&#125;&quot;</span>,query );</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span>  chatClient.prompt(query).call().content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text: &#123;&#125;&quot;</span>,text );</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.chatClient.prompt()</span><br><span class=\"line\">                .user(message)</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String message)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello &quot;</span> + message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>spring-ai 支持基于chat memory的对话记忆。在上面的代码中，只需要在构建<code>chatClient</code>时添加两行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ChatMemory</span> <span class=\"variable\">chatMemory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();                                            </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ChatController</span><span class=\"params\">(ChatClient.Builder builder)</span> &#123;</span><br><span class=\"line\">                                                   </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.chatClient = builder                                                                        </span><br><span class=\"line\">            .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, UUID.randomUUID().toString(), <span class=\"number\">10</span>))</span><br><span class=\"line\">            .build();                                                                                </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>UUID 会作为此次对话的唯一标识，ChatMemory会将之前的对话内容记录下来，每次对模型的输入就是历史的对话记录，最终实现对话记忆。</p>\n<p>这种做法最终会影响使用大模型的成本，就如上面所说，输入和输出都会影响总token数量，而token就相当于金钱。</p>\n<p>这里有两个事项需要注意：</p>\n<ol>\n<li>Spring AI Alibaba 基于 Spring Boot 3.x 开发，所以JDK 版本要求为 17 及以上。</li>\n<li>spring-ai 相关依赖包还没有发布到中央仓库，本地 Maven 仓库要添加以下配置。</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>application.yml配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"对话页面\"><a href=\"#对话页面\" class=\"headerlink\" title=\"对话页面\"></a>对话页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/marked.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">body</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f8f9fa</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">font-family</span>: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">50px</span> auto;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;text&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">85%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=<span class=\"string\">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.chat-box</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">overflow-y</span>: scroll;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#f1f1f1</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.user-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.bot-message</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">background-color</span>: <span class=\"number\">#e6aa6b</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.loader</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">border-top-color</span>: <span class=\"number\">#2ecc71</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">animation</span>: spin <span class=\"number\">1s</span> infinite linear;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"keyword\">@keyframes</span> spin &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"selector-tag\">to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">                <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>AI 对话<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;form&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;width: 47%;position: absolute;bottom: 150px;margin-left:15px&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;message&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;输入你的问题&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;发送&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;loader&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: none;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;chat-box&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chat-box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> loader = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;loader&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;form&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;submit&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        event.<span class=\"title function_\">preventDefault</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> messageInput = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;message&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> message = messageInput.<span class=\"property\">value</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        messageInput.<span class=\"property\">value</span> = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> chatBox = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;chat-box&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> userMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        userMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;我: &quot;</span> + message;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"title function_\">appendChild</span>(userMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;http://localhost:8080/ai/v1/chat?message=&quot;</span> + <span class=\"built_in\">encodeURIComponent</span>(message), <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> response = xhr.<span class=\"property\">responseText</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> botMessageText = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">className</span> = <span class=\"string\">&quot;message-text&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessage.<span class=\"title function_\">appendChild</span>(botMessageText);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    botMessageText.<span class=\"property\">innerHTML</span> = marked.<span class=\"title function_\">marked</span>(response);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(botMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (xhr.<span class=\"property\">status</span> === <span class=\"number\">400</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> error = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: &quot;</span> + error.<span class=\"property\">message</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">var</span> errorMessage = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">className</span> = <span class=\"string\">&quot;message bot-message&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    errorMessage.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;Bot: Failed to connect to the backend service. Please make sure the backend service is running.&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"title function_\">appendChild</span>(errorMessage);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    chatBox.<span class=\"property\">scrollTop</span> = chatBox.<span class=\"property\">scrollHeight</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadstart</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;block&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">            loader.<span class=\"property\">style</span>.<span class=\"property\">display</span> = <span class=\"string\">&quot;none&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        xhr.<span class=\"title function_\">send</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：js 引入的 <code>marked.min.js</code></p>\n<p>可以去 <a href=\"https://github.com/cundream/marked\">GitHub</a> 或联系我</p>\n<h3 id=\"注册配置APi\"><a href=\"#注册配置APi\" class=\"headerlink\" title=\"注册配置APi\"></a>注册配置APi</h3><p><a href=\"https://help.aliyun.com/zh/model-studio/first-api-call-to-qwen?spm=a2c4g.11186623.help-menu-2400256.d_0_0_1.7adc2562bAay6p&scm=20140722.H_2840915._.OR_help-T_cn~zh-V_1\">阿里云百练文档地址</a></p>\n<p><img src=\"/../../typora-user-images/image-20250419102848756.png\" alt=\"image-20250419102848756\"></p>\n<p>创建Key</p>\n<p><img src=\"/../../typora-user-images/image-20250419105704031.png\" alt=\"image-20250419105704031\"></p>\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>访问：<a href=\"http://localhost:8080/chat.html\">http://localhost:8080/chat.html</a></p>\n<p>输入对话</p>\n<p><img src=\"/../../typora-user-images/image-20250419113622811.png\" alt=\"image-20250419113622811\"></p>\n<p>测试二：</p>\n<p><a href=\"http://localhost:8080/ai/v1/simple/chat?query=%E4%BD%A0%E6%98%AF%E8%B0%81\">http://localhost:8080/ai/v1/simple/chat?query=你是谁</a></p>\n<p><img src=\"/../../typora-user-images/image-20250419112758947.png\" alt=\"image-20250419112758947\"></p>\n<h2 id=\"需要了解的基本知识\"><a href=\"#需要了解的基本知识\" class=\"headerlink\" title=\"需要了解的基本知识\"></a>需要了解的基本知识</h2><p>上面的示例其实就是一个SpringBoot项目，对于Javaer肯定不陌生。而对于没有人工智能相关背景的人来说，如果想要基于 Spring AI 开发一个AI应用产品，还是需要了解一些基本概念的。</p>\n<ul>\n<li>AI 模型：AI 模型是旨在处理和生成信息的算法，通常模仿人类的认知功能。我们现在基本上听到的大模型都属于生成式AI模型，例如通义千问。</li>\n<li>Prompt：提示词作为生成式大模型的输入，可以指导模型生成特定的输出。如果搭建过智能体就会知道，创建一个智能体首先要设置一些提示词。</li>\n<li>Token：token作为 AI 模型工作原理的基石，输入时，模型将单词转换为token，输出时，将token转换回单词。在现在的AI模型背景下，token就相当于金钱，一次调用的费用就越高。</li>\n<li>模型的认知：一个模型的诞生需要在海量的训练集中进行学习，所以它的认知中没有未来的知识。如果想让模型对现有知识产生认知，有微调、检索增强生成 (RAG)、函数调用这几种方式。</li>\n</ul>\n<p>对于本文示例中来说，每一次的对话就是模型的一次token输入和输出。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spring AI解决了AI集成的核心难题：即无缝连接企业数据、API与AI模型，同时也简化了Java 开发人员对AI应用的编程复杂度，还提供检索增强生成 (RAG)、函数调用等关键功能。对于Java 开发人员来讲，通过 Spring AI 可以探索更多的 AI 应用场景。</p>\n"},{"title":"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程","_content":"\n# Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n\n\n\n在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。**Spring AI**，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，\n\n[toc]\n\n\n\n\n\n## Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\n\n### Spring AI 介绍\n\n#### Spring AI的版本演进\n\nSpring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：\n\n* 2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。\n* 2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。\n* 2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。\n* 2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。\n* 2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性\n\n\n\n#### Spring AI的主要功能\n\nSpring AI为开发者提供了多种AI功能的支持，包括：\n\n* 智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。\n* 文本生成：利用AI模型生成创意文本内容，例如文章、故事等。\n* 图像生成：通过文本提示生成图像，支持多种图像生成模型。\n* 音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。\n* 功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。\n\n### **函数调用（Function Calling）**\n\n#### 功能与作用\n\n在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。\n\n#### 实现方式\n\n在Spring AI中，函数调用的实现步骤如下：\n\n**1、定义函数**：开发者创建一个实现`Function`接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：\n\n~~~java\n@Component\npublic class WeatherFunction implements Function<WeatherFunction.WeatherRequest, String> {\n    @Override\n    public String apply(WeatherRequest request) {\n        return \"The weather in \" + request.getCity() + \" is sunny.\";\n    }\n    public static class WeatherRequest {\n        private String city;\n        public String getCity() { return city; }\n        public void setCity(String city) { this.city = city; }\n    }\n}\n\n~~~\n\n**2、注册函数**：将函数注册为Spring Bean，使其能被Spring AI识别和调用\n\n~~~java\n@Configuration\npublic class FunctionConfig {\n    @Bean\n    @Description(\"获取指定城市的天气信息\")\n    public Function<WeatherFunction.WeatherRequest, String> weatherFunction() {\n        return new WeatherFunction();\n    }\n}\n~~~\n\n**3、配置模型**：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withFunction(\"weatherFunction\").build())\n                .build();\n    }\n}\n~~~\n\n**4、模型调用函数**：模型在生成响应时，可以通过请求调用外部函数，得到结果：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        WeatherFunction.WeatherRequest request = new WeatherFunction.WeatherRequest();\n        request.setCity(input);\n        String response = chatClient.prompt().user(input).functions(\"weatherFunction\").call().content();\n        return response;\n    }\n}\n~~~\n\n**注意**：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用**工具调用**（Tool Calling）来实现类似功能。\n\n### **工具调用（Tool Calling）**\n\n#### **功能与作用**\n\n工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。\n\n#### 实现方式\n\n工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：\n\n**1、定义工具接口**：开发者定义一个接口，声明工具的方法：\n\n~~~java\npublic interface WeatherTool {\n    String getWeather(String city);\n}\n~~~\n\n**2、实现工具接口**：编写具体的工具实现类，处理工具的业务逻辑：\n\n~~~java\n@Component\npublic class WeatherToolImpl implements WeatherTool {\n    @Override\n    public String getWeather(String city) {\n        return \"The weather in \" + city + \" is sunny.\";\n    }\n}\n~~~\n\n**3、注册工具为Spring Bean**：将工具实现类注册为Spring Bean，以便Spring容器管理：\n\n~~~java\n@Configuration\npublic class ToolConfig {\n    @Bean\n    public WeatherTool weatherTool() {\n        return new WeatherToolImpl();\n    }\n}\n~~~\n\n**4、配置模型使用工具**：在Spring AI配置中，指定模型使用的工具：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withTool(\"weatherTool\").build())\n                .build();\n    }\n}\n\n~~~\n\n**5、模型调用工具**：模型在与用户交互时，通过工具调用获取所需的响应：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        String response = chatClient.prompt().user(input).tools(\"weatherTool\").call().content();\n        return response;\n    }\n}\n\n~~~\n\n### 智能体（Agent）\n\n#### 功能与作用\n\n智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。\n\n#### 实现方式\n\n智能体的实现涉及多个关键组件，主要包括：\n\n模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。\n智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。\n智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。\n注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。\n\n### 从函数调用（FunctionCallbac）到工具调用（ToolCallback）\n\n随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。\n\n**为什么从FunctionCallback迁移到ToolCallback**\n\nSpring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：\n\n* 功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。\n* 一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。\n* 未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。\n\n\n\n因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。\n\n\n\n## Spring AI + DeepSeek-R1 + ES/Milvus + RAG + Tool Calling：智能对话应用开发\n\n### 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n\n\n![image-20250425104935964](../../typora-user-images/image-20250425104935964-5549379.png)\n\n\n\n**Elasticsearch安装**\n\n\n\n~~~yaml\n# base 基础组件服务\nversion: '3.8'\nservices:\n\telasticsearch1:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4\n    hostname: \"elasticsearch1\"\n    environment:\n      - TZ=Asia/Shanghai\n      - \"ES_JAVA_OPTS=-Xms84m -Xmx512m\"\n    ports:\n      - 9200:9200\n      - 9300:9300\n    volumes:\n      - /Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data \n      - /Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins \n      - /Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config  \n      - /Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs  \n    privileged: true\n    #restart: always\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.7\n\n  vsftpd:\n    image: \"fauria/vsftpd\"\n    hostname: \"rabbitmq1\"\n    environment:\n      - FTP_USER=admin \n      - FTP_PASS=123456 \n      - PASV_MIN_PORT=21100\n      - PASV_MAX_PORT=21110 \n      - PASV_ADDRESS=172.18.0.8\n    ports:\n      - 21:21\n      - 21100-21110:21100-21110\n    volumes:\n      - /Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd\n      - /Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd\n    privileged: true\n    #restart: always\n    networks:\n      - nt_dev\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n![image-20250425174252871](../../typora-user-images/image-20250425174252871.png)\n\n### 功能介绍\n\n1. 集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。\n2. 集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。\n3. 基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。\n4. 通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。\n5. Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：\n   * 场景 1：通过 RAG 找到医生后，进行挂号\n   * 场景 2：挂号当日请假\n   * 场景 3：挂号当日在医院附近找饭店\n\n\n\n通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 \n\n\n\n## 代码实现\n\n**Maven 核心依赖**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>3.4.3</spring-boot.version>\n        <spring-ai.version>1.0.0-M6</spring-ai.version>\n        <alibaba.ai.version>1.0.0-M6.1</alibaba.ai.version>\n        <spring.ai.ollama.version>1.0.0-M6</spring.ai.ollama.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>${alibaba.ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-elasticsearch-store-spring-boot-starter</artifactId>\n            <version>${spring-ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n            <version>${spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>spring-snapshots</id>\n            <name>Spring Snapshots</name>\n            <url>https://repo.spring.io/snapshot</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.36</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n~~~\n\n上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。\n\n**核心配置 （`application.yml`）**\n\n这里一定要注意的是文本推理模型 `model: deepseek-r1`, 嵌入模型`model: text-embedding-v2`用来生成文本的向量数据\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      elasticsearch:\n        initialize-schema: true\n        index-name: spring-ai-tag\n        # 这里一定要注意，维度是默认1536，需要和向量模型的维度一致\n        dimensions: 1536\n        similarity: cosine\n        batching-strategy: TOKEN_COUNT\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n       @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                // 设置系统的默认行为和风格\n                .defaultSystem(\"你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。\")\n                // 注册向量检索顾问，用于从向量存储中检索相关信息\n                .defaultAdvisors(\n                        new QuestionAnswerAdvisor(\n                                vectorStore,\n                                SearchRequest.builder()\n                                        .similarityThreshold(0.1) // 设置相似度阈值\n                                        .topK(10) // 设置返回最多 10 条相关结果\n                                        .build()\n                        )\n                )\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n\n\n**编写核心控制器（DeepseekChatController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.rag.Query;\nimport org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;\nimport org.springframework.ai.reader.TextReader;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @ClassName DeepseekChatController  //类名称\n * @Description:\n * @Author: 200900681 李村\n * @CreateDate: 2025/4/25\n * @Version: 1.0    //版本号\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class DeepseekChatController {\n\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private VectorStore vectorStore;\n    @Autowired\n    private ChatMemory chatMemory;\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(\"/data/load\")\n    public String loadData() throws IOException {\n        // 1. 读取文件\n        DocumentReader reader = new TextReader(\"static/hospitalInfo.txt\");\n        List<Document> documents = reader.get();\n\n        // 2.切分文件：根据空白行进行分割\n        List<Document> splitDocuments =  new ArrayList<>();\n        for (Document document : documents) {\n            // 获取文档内容\n            String content = document.getText();\n            // 使用正则表达式按空白行分割\n            String[] parts = content.split(\"\\\\n\\\\s*\\\\n\");\n            // 将分割后的部分封装为新的 Document 对象\n            for (String part : parts) {\n                splitDocuments.add(new Document(part.trim()));\n            }\n        }\n\n        log.info(\"文件切分为 [{}]\", splitDocuments.size());\n\n        // 3.写入数据\n        vectorStore.add(splitDocuments);\n\n        return \"success\";\n    }\n\n    @GetMapping(\"/select\")\n    public String search(@RequestParam(\"query\") String query) {\n        log.info(\"query is  [{}]\", query);\n        List<Document> results = vectorStore.similaritySearch(\n//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n\n        );\n        log.info(\"results is [{}]\", results);\n        return results.toString();\n    }\n\n    /**\n     * 查询重写\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/rewrite/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByRewrite(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1、构建查询重写转换器\n        QueryTransformer queryTransformer = RewriteQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n        // 2、执行查询重写\n        Query queryByTransform = queryTransformer.transform(new Query(inputMsg));\n        // 3、输出重写后的查询文案\n        return queryByTransform.text();\n    }\n\n\n    /**\n     * 上下文感知查询\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/history/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByHistory(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1. 获取历史消息\n        List<Message> history = chatMemory.get(userId, CHAT_HISTORY_SIZE);\n        // 2. 构建查询对象\n        Query query = Query.builder()\n                .text(inputMsg)\n                .history(history)\n                .build();\n\n        // 3. 创建 CompressionQueryTransformer\n        CompressionQueryTransformer queryTransformerByHis = CompressionQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n\n        // 4、执行历史信息后查询\n        Query queryByHistory = queryTransformerByHis.transform(query);\n\n        // 5、输出重写后的查询文案\n        return queryByHistory.text();\n    }\n    \n}\n\n~~~\n\n\n\n\n\n\n\n\n\n**数据准备**\n\n我让kimi帮我生成了一个医院的介绍，包含\n\n- 医院`小智口腔医院`的介绍，\n- 3个科室的介绍，分别是 `口腔修复科`,`口腔正畸科`,`儿童口腔科`\n- 每个科室也有对应的20位医生信息\n\n~~~\n1. 医院介绍\n小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。\n2. 科室介绍\n(1)口腔修复科:\n口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信\n(2)口腔正畸科:\n是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。\n(3)儿童口腔科:\n儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。\n\n3. 医生介绍\n(1) 李明轩\n性别 ：男\n出生年月 ：1985年3月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。\n介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(2) 王晓彤\n性别 ：女\n出生年月 ：1990年7月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(3) 张伟杰\n性别 ：男\n出生年月 ：1982年11月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。\n介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(4) 陈静怡\n性别 ：女\n出生年月 ：1988年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(5) 刘志远\n性别 ：男\n出生年月 ：1980年9月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。\n介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(6) 孙悦宁\n性别 ：女\n出生年月 ：1993年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。\n介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(7) 赵天宇\n性别 ：男\n出生年月 ：1987年5月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(8) 林晓慧\n性别 ：女\n出生年月 ：1991年8月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(9) 黄志强\n性别 ：男\n出生年月 ：1979年12月\n医生职称 ：主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。\n介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务\n\n(10) 高雅婷\n性别 ：女\n出生年月 ：1986年2月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。\n\n(11) 王浩然\n性别 ：男\n出生年月 ：1983年7月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。\n介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(12) 李佳琪\n性别 ：女\n出生年月 ：1992年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。\n介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(13) 周文博\n性别 ：男\n出生年月 ：1981年10月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。\n介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(14) 张馨月\n性别 ：女\n出生年月 ：1989年6月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(15) 王志鹏\n性别 ：男\n出生年月 ：1984年11月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(16) 赵雪梅\n性别 ：女\n出生年月 ：1990年3月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(17) 陈子豪\n性别 ：男\n出生年月 ：1988年9月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。\n介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(18) 李梦瑶\n性别 ：女\n出生年月 ：1994年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(19) 黄晓峰\n性别 ：男\n出生年月 ：1985年8月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(20) 刘欣怡\n性别 ：女\n出生年月 ：1991年5月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n~~~\n\n\n\n\n\n## 测试验证\n\n\n\n~~~\n数据写入的接口\nhttp://127.0.0.1:8080/ai/v1/data/load\n获取数据向量的接口\nhttp://127.0.0.1:8080/ai/v1/select\n连读对话的接口\nhttp://127.0.0.1:8080/ai/v1/rag/chat\n~~~\n\n\n\n**数据写入**\n\n>数据写入的接口\n>http://127.0.0.1:8080/ai/v1/data/load\n\n\n\n![image-20250429172724826](../../typora-user-images/image-20250429172724826.png)\n\n![image-20250429180401580](../../typora-user-images/image-20250429180401580.png)\n\n>获取数据向量的接口\n>http://127.0.0.1:8080/ai/v1/select?query=医院介绍\n\n![image-20250429174959408](../../typora-user-images/image-20250429174959408.png)\n\n可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek\n\n接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题\n\n>- 请介绍一下医院\n>- 请介绍一下医院都有哪些科室\n>- 医院有哪些主任医师\n>- 张馨月医生怎么样\n>- 我刚才都问了哪些问题\n\n\n\n![image-20250429174851066](../../typora-user-images/image-20250429174851066.png)\n\n\n\n\n\n![image-20250429175228086](../../typora-user-images/image-20250429175228086.png)\n\n\n\n![image-20250429175342611](../../typora-user-images/image-20250429175342611.png)\n\n\n\n![image-20250429175421998](../../typora-user-images/image-20250429175421998.png)\n\n\n\n\n\n![image-20250429175540574](../../typora-user-images/image-20250429175540574.png)\n\n\n\n\n\n## 附：向量数据库milvus 存储数据\n\n\n\n### Milvus安装\n\n**Docker-compose 配置**\n\n~~~yaml\n# 配置 etcd 服务\n  etcd:\n    container_name: milvus-etcd  # 容器名称\n    image: quay.io/coreos/etcd:v3.5.16  # 使用的镜像\n    environment:\n      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式\n      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留的修订版本数\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储限制\n      - ETCD_SNAPSHOT_COUNT=50000  # 快照计数\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据卷挂载\n    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir /etcd  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"etcdctl\", \"endpoint\", \"health\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n\n  # 配置 MinIO 服务\n  minio:\n    container_name: milvus-minio  # 容器名称\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用的镜像\n    environment:\n      MINIO_ACCESS_KEY: minioadmin  # MinIO 访问密钥\n      MINIO_SECRET_KEY: minioadmin  # MinIO 密钥\n    ports:\n      - \"9001:9001\"  # 控制台端口映射\n      - \"9000:9000\"  # 服务端口映射\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # 数据卷挂载\n    command: minio server /minio_data --console-address \":9001\"  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.8   \n\n  # 配置 Milvus 服务\n  standalone:\n    container_name: milvus-standalone  # 容器名称\n    image: milvusdb/milvus:v2.5.4  # 使用的镜像\n    command: [\"milvus\", \"run\", \"standalone\"]  # 启动命令\n    security_opt:\n    - seccomp:unconfined  # 安全选项\n    environment:\n      ETCD_ENDPOINTS: etcd:2379  # etcd 服务地址\n      MINIO_ADDRESS: minio:9000  # MinIO 服务地址\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # 数据卷挂载\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      start_period: 90s  # 启动等待时间\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    ports:\n      - \"19530:19530\"  # 服务端口映射\n      - \"9091:9091\"  # 管理端口映射\n    depends_on:\n      - \"etcd\"  # 依赖 etcd 服务\n      - \"minio\"  # 依赖 MinIO 服务\n\n  # 配置 Milvus Dashboard 服务\n  dashboard:\n    image: zilliz/attu:v2.5  # 使用的镜像\n    container_name: milvus-dashboard  # 容器名称\n    environment:\n      MILVUS_URL: http://standalone:19530  # Milvus 服务地址\n    ports:\n      - \"8000:3000\"  # 端口映射\n    depends_on:\n      - standalone  # 依赖 Milvus 服务\n      - etcd  # 依赖 etcd 服务\n      - minio  # 依赖 MinIO 服务\n\n# 定义网络配置\nnetworks:\n  nt_dev:\n      external: true\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n**查看客户端，** 输入地址 `http://localhost:8000/`\n进入如下界面：此时什么都不要填写，直接点【连接】按钮\n\n\n\n![image-20250429181131778](../../typora-user-images/image-20250429181131778.png)\n\n进入系统后\n\n![image-20250429181039571](../../typora-user-images/image-20250429181039571.png)\n\n\n\n创建用户：用户名：``milvus`, 密码： `milvus-4321` (这里要和我们spring工程里的配置一致)，角色我们选 `admin`, \n\n\n\n\n\n![image-20250429181312813](../../typora-user-images/image-20250429181312813.png)\n\n\n\n\n\n修改依赖：\n\n~~~xml\n  <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-milvus-store-spring-boot-starter</artifactId>\n </dependency>\n~~~\n\n\n\n\n\n修改配置\n\n\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  elasticsearch:\n    uris: http://127.0.0.1:9200\n    username:\n    password:\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      milvus:\n        client:\n          host: \"localhost\"\n          port: 19530\n          username: \"milvus\"\n          password: \"milvus-4321\"\n        databaseName: \"default\"\n        collectionName: \"vector_store\"\n        embeddingDimension: 1536\n        indexType: IVF_FLAT\n        metricType: COSINE\n        initialize-schema: true\n\n\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。\n\n\n\n使用加载接口\n\n![image-20250429183142516](../../typora-user-images/image-20250429183142516.png)\n","source":"_posts/Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程.md","raw":"---\ntitle: Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n---\n\n# Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES/Milvus + RAG 智能对话应用开发全流程\n\n\n\n在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。**Spring AI**，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，\n\n[toc]\n\n\n\n\n\n## Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\n\n### Spring AI 介绍\n\n#### Spring AI的版本演进\n\nSpring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：\n\n* 2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。\n* 2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。\n* 2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。\n* 2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。\n* 2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性\n\n\n\n#### Spring AI的主要功能\n\nSpring AI为开发者提供了多种AI功能的支持，包括：\n\n* 智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。\n* 文本生成：利用AI模型生成创意文本内容，例如文章、故事等。\n* 图像生成：通过文本提示生成图像，支持多种图像生成模型。\n* 音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。\n* 功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。\n\n### **函数调用（Function Calling）**\n\n#### 功能与作用\n\n在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。\n\n#### 实现方式\n\n在Spring AI中，函数调用的实现步骤如下：\n\n**1、定义函数**：开发者创建一个实现`Function`接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：\n\n~~~java\n@Component\npublic class WeatherFunction implements Function<WeatherFunction.WeatherRequest, String> {\n    @Override\n    public String apply(WeatherRequest request) {\n        return \"The weather in \" + request.getCity() + \" is sunny.\";\n    }\n    public static class WeatherRequest {\n        private String city;\n        public String getCity() { return city; }\n        public void setCity(String city) { this.city = city; }\n    }\n}\n\n~~~\n\n**2、注册函数**：将函数注册为Spring Bean，使其能被Spring AI识别和调用\n\n~~~java\n@Configuration\npublic class FunctionConfig {\n    @Bean\n    @Description(\"获取指定城市的天气信息\")\n    public Function<WeatherFunction.WeatherRequest, String> weatherFunction() {\n        return new WeatherFunction();\n    }\n}\n~~~\n\n**3、配置模型**：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withFunction(\"weatherFunction\").build())\n                .build();\n    }\n}\n~~~\n\n**4、模型调用函数**：模型在生成响应时，可以通过请求调用外部函数，得到结果：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        WeatherFunction.WeatherRequest request = new WeatherFunction.WeatherRequest();\n        request.setCity(input);\n        String response = chatClient.prompt().user(input).functions(\"weatherFunction\").call().content();\n        return response;\n    }\n}\n~~~\n\n**注意**：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用**工具调用**（Tool Calling）来实现类似功能。\n\n### **工具调用（Tool Calling）**\n\n#### **功能与作用**\n\n工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。\n\n#### 实现方式\n\n工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：\n\n**1、定义工具接口**：开发者定义一个接口，声明工具的方法：\n\n~~~java\npublic interface WeatherTool {\n    String getWeather(String city);\n}\n~~~\n\n**2、实现工具接口**：编写具体的工具实现类，处理工具的业务逻辑：\n\n~~~java\n@Component\npublic class WeatherToolImpl implements WeatherTool {\n    @Override\n    public String getWeather(String city) {\n        return \"The weather in \" + city + \" is sunny.\";\n    }\n}\n~~~\n\n**3、注册工具为Spring Bean**：将工具实现类注册为Spring Bean，以便Spring容器管理：\n\n~~~java\n@Configuration\npublic class ToolConfig {\n    @Bean\n    public WeatherTool weatherTool() {\n        return new WeatherToolImpl();\n    }\n}\n~~~\n\n**4、配置模型使用工具**：在Spring AI配置中，指定模型使用的工具：\n\n~~~java\n@Configuration\npublic class ChatConfig {\n    @Autowired\n    private ChatClient.Builder chatClientBuilder;\n\n    @Bean\n    public ChatClient chatClient() {\n        return chatClientBuilder\n                .withOptions(ChatOptions.builder().withTool(\"weatherTool\").build())\n                .build();\n    }\n}\n\n~~~\n\n**5、模型调用工具**：模型在与用户交互时，通过工具调用获取所需的响应：\n\n~~~java\n@RestController\npublic class ChatController {\n    @Autowired\n    private ChatClient chatClient;\n\n    @GetMapping(\"/chat\")\n    public String chat(@RequestParam String input) {\n        String response = chatClient.prompt().user(input).tools(\"weatherTool\").call().content();\n        return response;\n    }\n}\n\n~~~\n\n### 智能体（Agent）\n\n#### 功能与作用\n\n智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。\n\n#### 实现方式\n\n智能体的实现涉及多个关键组件，主要包括：\n\n模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。\n智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。\n智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。\n注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。\n\n### 从函数调用（FunctionCallbac）到工具调用（ToolCallback）\n\n随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。\n\n**为什么从FunctionCallback迁移到ToolCallback**\n\nSpring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：\n\n* 功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。\n* 一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。\n* 未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。\n\n\n\n因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。\n\n\n\n## Spring AI + DeepSeek-R1 + ES/Milvus + RAG + Tool Calling：智能对话应用开发\n\n### 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n\n\n![image-20250425104935964](../../typora-user-images/image-20250425104935964-5549379.png)\n\n\n\n**Elasticsearch安装**\n\n\n\n~~~yaml\n# base 基础组件服务\nversion: '3.8'\nservices:\n\telasticsearch1:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4\n    hostname: \"elasticsearch1\"\n    environment:\n      - TZ=Asia/Shanghai\n      - \"ES_JAVA_OPTS=-Xms84m -Xmx512m\"\n    ports:\n      - 9200:9200\n      - 9300:9300\n    volumes:\n      - /Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data \n      - /Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins \n      - /Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config  \n      - /Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs  \n    privileged: true\n    #restart: always\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.7\n\n  vsftpd:\n    image: \"fauria/vsftpd\"\n    hostname: \"rabbitmq1\"\n    environment:\n      - FTP_USER=admin \n      - FTP_PASS=123456 \n      - PASV_MIN_PORT=21100\n      - PASV_MAX_PORT=21110 \n      - PASV_ADDRESS=172.18.0.8\n    ports:\n      - 21:21\n      - 21100-21110:21100-21110\n    volumes:\n      - /Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd\n      - /Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd\n    privileged: true\n    #restart: always\n    networks:\n      - nt_dev\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n![image-20250425174252871](../../typora-user-images/image-20250425174252871.png)\n\n### 功能介绍\n\n1. 集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。\n2. 集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。\n3. 基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。\n4. 通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。\n5. Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：\n   * 场景 1：通过 RAG 找到医生后，进行挂号\n   * 场景 2：挂号当日请假\n   * 场景 3：挂号当日在医院附近找饭店\n\n\n\n通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 \n\n\n\n## 代码实现\n\n**Maven 核心依赖**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>3.4.3</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison.ai</groupId>\n    <artifactId>spring_ai_alibaba_demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring_ai_alibaba_demo</name>\n    <description>第一个 Spring AI Alibaba 项目</description>\n    <properties>\n        <java.version>23</java.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-boot.version>3.4.3</spring-boot.version>\n        <spring-ai.version>1.0.0-M6</spring-ai.version>\n        <alibaba.ai.version>1.0.0-M6.1</alibaba.ai.version>\n        <spring.ai.ollama.version>1.0.0-M6</spring.ai.ollama.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>com.alibaba.cloud.ai</groupId>\n            <artifactId>spring-ai-alibaba-starter</artifactId>\n            <version>${alibaba.ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-elasticsearch-store-spring-boot-starter</artifactId>\n            <version>${spring-ai.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-beans</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n            <version>${spring-boot.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <repositories>\n        <repository>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/public</url>\n        </repository>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>https://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n        <repository>\n            <id>spring-snapshots</id>\n            <name>Spring Snapshots</name>\n            <url>https://repo.spring.io/snapshot</url>\n            <releases>\n                <enabled>false</enabled>\n            </releases>\n        </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.36</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <excludes>\n                        <exclude>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                        </exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n\n~~~\n\n上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。\n\n**核心配置 （`application.yml`）**\n\n这里一定要注意的是文本推理模型 `model: deepseek-r1`, 嵌入模型`model: text-embedding-v2`用来生成文本的向量数据\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      elasticsearch:\n        initialize-schema: true\n        index-name: spring-ai-tag\n        # 这里一定要注意，维度是默认1536，需要和向量模型的维度一致\n        dimensions: 1536\n        similarity: cosine\n        batching-strategy: TOKEN_COUNT\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n       @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                // 设置系统的默认行为和风格\n                .defaultSystem(\"你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。\")\n                // 注册向量检索顾问，用于从向量存储中检索相关信息\n                .defaultAdvisors(\n                        new QuestionAnswerAdvisor(\n                                vectorStore,\n                                SearchRequest.builder()\n                                        .similarityThreshold(0.1) // 设置相似度阈值\n                                        .topK(10) // 设置返回最多 10 条相关结果\n                                        .build()\n                        )\n                )\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n\n\n**编写核心控制器（DeepseekChatController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.Message;\nimport org.springframework.ai.document.Document;\nimport org.springframework.ai.document.DocumentReader;\nimport org.springframework.ai.rag.Query;\nimport org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;\nimport org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;\nimport org.springframework.ai.reader.TextReader;\nimport org.springframework.ai.vectorstore.SearchRequest;\nimport org.springframework.ai.vectorstore.VectorStore;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @ClassName DeepseekChatController  //类名称\n * @Description:\n * @Author: 200900681 李村\n * @CreateDate: 2025/4/25\n * @Version: 1.0    //版本号\n */\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class DeepseekChatController {\n\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private VectorStore vectorStore;\n    @Autowired\n    private ChatMemory chatMemory;\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(\"/data/load\")\n    public String loadData() throws IOException {\n        // 1. 读取文件\n        DocumentReader reader = new TextReader(\"static/hospitalInfo.txt\");\n        List<Document> documents = reader.get();\n\n        // 2.切分文件：根据空白行进行分割\n        List<Document> splitDocuments =  new ArrayList<>();\n        for (Document document : documents) {\n            // 获取文档内容\n            String content = document.getText();\n            // 使用正则表达式按空白行分割\n            String[] parts = content.split(\"\\\\n\\\\s*\\\\n\");\n            // 将分割后的部分封装为新的 Document 对象\n            for (String part : parts) {\n                splitDocuments.add(new Document(part.trim()));\n            }\n        }\n\n        log.info(\"文件切分为 [{}]\", splitDocuments.size());\n\n        // 3.写入数据\n        vectorStore.add(splitDocuments);\n\n        return \"success\";\n    }\n\n    @GetMapping(\"/select\")\n    public String search(@RequestParam(\"query\") String query) {\n        log.info(\"query is  [{}]\", query);\n        List<Document> results = vectorStore.similaritySearch(\n//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()\n\n        );\n        log.info(\"results is [{}]\", results);\n        return results.toString();\n    }\n\n    /**\n     * 查询重写\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/rewrite/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByRewrite(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1、构建查询重写转换器\n        QueryTransformer queryTransformer = RewriteQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n        // 2、执行查询重写\n        Query queryByTransform = queryTransformer.transform(new Query(inputMsg));\n        // 3、输出重写后的查询文案\n        return queryByTransform.text();\n    }\n\n\n    /**\n     * 上下文感知查询\n     * @param userId\n     * @param inputMsg\n     * @return\n     */\n    @GetMapping(value = \"/rag/history/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChatByHistory(@RequestParam String userId, @RequestParam String inputMsg) {\n        // 1. 获取历史消息\n        List<Message> history = chatMemory.get(userId, CHAT_HISTORY_SIZE);\n        // 2. 构建查询对象\n        Query query = Query.builder()\n                .text(inputMsg)\n                .history(history)\n                .build();\n\n        // 3. 创建 CompressionQueryTransformer\n        CompressionQueryTransformer queryTransformerByHis = CompressionQueryTransformer.builder()\n                .chatClientBuilder(chatClient.mutate())\n                .build();\n\n        // 4、执行历史信息后查询\n        Query queryByHistory = queryTransformerByHis.transform(query);\n\n        // 5、输出重写后的查询文案\n        return queryByHistory.text();\n    }\n    \n}\n\n~~~\n\n\n\n\n\n\n\n\n\n**数据准备**\n\n我让kimi帮我生成了一个医院的介绍，包含\n\n- 医院`小智口腔医院`的介绍，\n- 3个科室的介绍，分别是 `口腔修复科`,`口腔正畸科`,`儿童口腔科`\n- 每个科室也有对应的20位医生信息\n\n~~~\n1. 医院介绍\n小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。\n2. 科室介绍\n(1)口腔修复科:\n口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信\n(2)口腔正畸科:\n是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。\n(3)儿童口腔科:\n儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。\n\n3. 医生介绍\n(1) 李明轩\n性别 ：男\n出生年月 ：1985年3月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。\n介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(2) 王晓彤\n性别 ：女\n出生年月 ：1990年7月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(3) 张伟杰\n性别 ：男\n出生年月 ：1982年11月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。\n介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(4) 陈静怡\n性别 ：女\n出生年月 ：1988年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(5) 刘志远\n性别 ：男\n出生年月 ：1980年9月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。\n介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(6) 孙悦宁\n性别 ：女\n出生年月 ：1993年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。\n介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(7) 赵天宇\n性别 ：男\n出生年月 ：1987年5月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(8) 林晓慧\n性别 ：女\n出生年月 ：1991年8月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(9) 黄志强\n性别 ：男\n出生年月 ：1979年12月\n医生职称 ：主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。\n介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务\n\n(10) 高雅婷\n性别 ：女\n出生年月 ：1986年2月\n医生职称 ：主治医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。\n\n(11) 王浩然\n性别 ：男\n出生年月 ：1983年7月\n医生职称 ：副主任医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。\n介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(12) 李佳琪\n性别 ：女\n出生年月 ：1992年4月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。\n介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。\n\n(13) 周文博\n性别 ：男\n出生年月 ：1981年10月\n医生职称 ：主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。\n介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。\n\n(14) 张馨月\n性别 ：女\n出生年月 ：1989年6月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n\n(15) 王志鹏\n性别 ：男\n出生年月 ：1984年11月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。\n介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。\n\n(16) 赵雪梅\n性别 ：女\n出生年月 ：1990年3月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。\n介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。\n\n(17) 陈子豪\n性别 ：男\n出生年月 ：1988年9月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。\n介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。\n\n(18) 李梦瑶\n性别 ：女\n出生年月 ：1994年1月\n医生职称 ：住院医师\n所在科室 ：儿童口腔科\n毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。\n介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。\n\n(19) 黄晓峰\n性别 ：男\n出生年月 ：1985年8月\n医生职称 ：副主任医师\n所在科室 ：口腔修复科\n毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。\n介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。\n\n(20) 刘欣怡\n性别 ：女\n出生年月 ：1991年5月\n医生职称 ：主治医师\n所在科室 ：口腔正畸科\n毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。\n介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。\n~~~\n\n\n\n\n\n## 测试验证\n\n\n\n~~~\n数据写入的接口\nhttp://127.0.0.1:8080/ai/v1/data/load\n获取数据向量的接口\nhttp://127.0.0.1:8080/ai/v1/select\n连读对话的接口\nhttp://127.0.0.1:8080/ai/v1/rag/chat\n~~~\n\n\n\n**数据写入**\n\n>数据写入的接口\n>http://127.0.0.1:8080/ai/v1/data/load\n\n\n\n![image-20250429172724826](../../typora-user-images/image-20250429172724826.png)\n\n![image-20250429180401580](../../typora-user-images/image-20250429180401580.png)\n\n>获取数据向量的接口\n>http://127.0.0.1:8080/ai/v1/select?query=医院介绍\n\n![image-20250429174959408](../../typora-user-images/image-20250429174959408.png)\n\n可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek\n\n接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题\n\n>- 请介绍一下医院\n>- 请介绍一下医院都有哪些科室\n>- 医院有哪些主任医师\n>- 张馨月医生怎么样\n>- 我刚才都问了哪些问题\n\n\n\n![image-20250429174851066](../../typora-user-images/image-20250429174851066.png)\n\n\n\n\n\n![image-20250429175228086](../../typora-user-images/image-20250429175228086.png)\n\n\n\n![image-20250429175342611](../../typora-user-images/image-20250429175342611.png)\n\n\n\n![image-20250429175421998](../../typora-user-images/image-20250429175421998.png)\n\n\n\n\n\n![image-20250429175540574](../../typora-user-images/image-20250429175540574.png)\n\n\n\n\n\n## 附：向量数据库milvus 存储数据\n\n\n\n### Milvus安装\n\n**Docker-compose 配置**\n\n~~~yaml\n# 配置 etcd 服务\n  etcd:\n    container_name: milvus-etcd  # 容器名称\n    image: quay.io/coreos/etcd:v3.5.16  # 使用的镜像\n    environment:\n      - ETCD_AUTO_COMPACTION_MODE=revision  # 自动压缩模式\n      - ETCD_AUTO_COMPACTION_RETENTION=1000  # 保留的修订版本数\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296  # 后端存储限制\n      - ETCD_SNAPSHOT_COUNT=50000  # 快照计数\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd  # 数据卷挂载\n    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls=http://0.0.0.0:2379 --data-dir /etcd  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"etcdctl\", \"endpoint\", \"health\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n\n  # 配置 MinIO 服务\n  minio:\n    container_name: milvus-minio  # 容器名称\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z  # 使用的镜像\n    environment:\n      MINIO_ACCESS_KEY: minioadmin  # MinIO 访问密钥\n      MINIO_SECRET_KEY: minioadmin  # MinIO 密钥\n    ports:\n      - \"9001:9001\"  # 控制台端口映射\n      - \"9000:9000\"  # 服务端口映射\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data  # 数据卷挂载\n    command: minio server /minio_data --console-address \":9001\"  # 启动命令\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    networks:\n      nt_dev:\n        ipv4_address: 172.18.0.8   \n\n  # 配置 Milvus 服务\n  standalone:\n    container_name: milvus-standalone  # 容器名称\n    image: milvusdb/milvus:v2.5.4  # 使用的镜像\n    command: [\"milvus\", \"run\", \"standalone\"]  # 启动命令\n    security_opt:\n    - seccomp:unconfined  # 安全选项\n    environment:\n      ETCD_ENDPOINTS: etcd:2379  # etcd 服务地址\n      MINIO_ADDRESS: minio:9000  # MinIO 服务地址\n    volumes:\n      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus  # 数据卷挂载\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9091/healthz\"]  # 健康检查命令\n      interval: 30s  # 检查间隔\n      start_period: 90s  # 启动等待时间\n      timeout: 20s  # 超时时间\n      retries: 3  # 重试次数\n    ports:\n      - \"19530:19530\"  # 服务端口映射\n      - \"9091:9091\"  # 管理端口映射\n    depends_on:\n      - \"etcd\"  # 依赖 etcd 服务\n      - \"minio\"  # 依赖 MinIO 服务\n\n  # 配置 Milvus Dashboard 服务\n  dashboard:\n    image: zilliz/attu:v2.5  # 使用的镜像\n    container_name: milvus-dashboard  # 容器名称\n    environment:\n      MILVUS_URL: http://standalone:19530  # Milvus 服务地址\n    ports:\n      - \"8000:3000\"  # 端口映射\n    depends_on:\n      - standalone  # 依赖 Milvus 服务\n      - etcd  # 依赖 etcd 服务\n      - minio  # 依赖 MinIO 服务\n\n# 定义网络配置\nnetworks:\n  nt_dev:\n      external: true\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n**查看客户端，** 输入地址 `http://localhost:8000/`\n进入如下界面：此时什么都不要填写，直接点【连接】按钮\n\n\n\n![image-20250429181131778](../../typora-user-images/image-20250429181131778.png)\n\n进入系统后\n\n![image-20250429181039571](../../typora-user-images/image-20250429181039571.png)\n\n\n\n创建用户：用户名：``milvus`, 密码： `milvus-4321` (这里要和我们spring工程里的配置一致)，角色我们选 `admin`, \n\n\n\n\n\n![image-20250429181312813](../../typora-user-images/image-20250429181312813.png)\n\n\n\n\n\n修改依赖：\n\n~~~xml\n  <dependency>\n            <groupId>org.springframework.ai</groupId>\n            <artifactId>spring-ai-milvus-store-spring-boot-starter</artifactId>\n </dependency>\n~~~\n\n\n\n\n\n修改配置\n\n\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      database: 0\n  elasticsearch:\n    uris: http://127.0.0.1:9200\n    username:\n    password:\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n      model: deepseek-r1\n      embedding:\n        options:\n          model: text-embedding-v2\n    vectorstore:\n      milvus:\n        client:\n          host: \"localhost\"\n          port: 19530\n          username: \"milvus\"\n          password: \"milvus-4321\"\n        databaseName: \"default\"\n        collectionName: \"vector_store\"\n        embeddingDimension: 1536\n        indexType: IVF_FLAT\n        metricType: COSINE\n        initialize-schema: true\n\n\n\n\n~~~\n\n在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。\n\n\n\n使用加载接口\n\n![image-20250429183142516](../../typora-user-images/image-20250429183142516.png)\n","slug":"Spring AI Alibaba/Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ESMilvus + RAG 智能对话应用开发全流程","published":1,"date":"2025-04-24T04:08:24.860Z","updated":"2025-06-04T10:49:56.759Z","_id":"cmbhtdwzu000do6fyb22kb21b","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程\"></a>Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程</h1><p>在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。<strong>Spring AI</strong>，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，</p>\n<p>[toc]</p>\n<h2 id=\"Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\"><a href=\"#Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\" class=\"headerlink\" title=\"Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\"></a>Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系</h2><h3 id=\"Spring-AI-介绍\"><a href=\"#Spring-AI-介绍\" class=\"headerlink\" title=\"Spring AI 介绍\"></a>Spring AI 介绍</h3><h4 id=\"Spring-AI的版本演进\"><a href=\"#Spring-AI的版本演进\" class=\"headerlink\" title=\"Spring AI的版本演进\"></a>Spring AI的版本演进</h4><p>Spring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：</p>\n<ul>\n<li>2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。</li>\n<li>2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。</li>\n<li>2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。</li>\n<li>2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。</li>\n<li>2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性</li>\n</ul>\n<h4 id=\"Spring-AI的主要功能\"><a href=\"#Spring-AI的主要功能\" class=\"headerlink\" title=\"Spring AI的主要功能\"></a>Spring AI的主要功能</h4><p>Spring AI为开发者提供了多种AI功能的支持，包括：</p>\n<ul>\n<li>智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。</li>\n<li>文本生成：利用AI模型生成创意文本内容，例如文章、故事等。</li>\n<li>图像生成：通过文本提示生成图像，支持多种图像生成模型。</li>\n<li>音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。</li>\n<li>功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a><strong>函数调用（Function Calling）</strong></h3><h4 id=\"功能与作用\"><a href=\"#功能与作用\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>在Spring AI中，函数调用的实现步骤如下：</p>\n<p><strong>1、定义函数</strong>：开发者创建一个实现<code>Function</code>接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Function</span>&lt;WeatherFunction.WeatherRequest, String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(WeatherRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + request.getCity() + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherRequest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getCity</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> city; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCity</span><span class=\"params\">(String city)</span> &#123; <span class=\"built_in\">this</span>.city = city; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、注册函数</strong>：将函数注册为Spring Bean，使其能被Spring AI识别和调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;获取指定城市的天气信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;WeatherFunction.WeatherRequest, String&gt; weatherFunction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置模型</strong>：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withFunction(<span class=\"string\">&quot;weatherFunction&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模型调用函数</strong>：模型在生成响应时，可以通过请求调用外部函数，得到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        WeatherFunction.<span class=\"type\">WeatherRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>.WeatherRequest();</span><br><span class=\"line\">        request.setCity(input);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).functions(<span class=\"string\">&quot;weatherFunction&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用<strong>工具调用</strong>（Tool Calling）来实现类似功能。</p>\n<h3 id=\"工具调用（Tool-Calling）\"><a href=\"#工具调用（Tool-Calling）\" class=\"headerlink\" title=\"工具调用（Tool Calling）\"></a><strong>工具调用（Tool Calling）</strong></h3><h4 id=\"功能与作用-1\"><a href=\"#功能与作用-1\" class=\"headerlink\" title=\"功能与作用\"></a><strong>功能与作用</strong></h4><p>工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：</p>\n<p><strong>1、定义工具接口</strong>：开发者定义一个接口，声明工具的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、实现工具接口</strong>：编写具体的工具实现类，处理工具的业务逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherToolImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + city + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、注册工具为Spring Bean</strong>：将工具实现类注册为Spring Bean，以便Spring容器管理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WeatherTool <span class=\"title function_\">weatherTool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherToolImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、配置模型使用工具</strong>：在Spring AI配置中，指定模型使用的工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withTool(<span class=\"string\">&quot;weatherTool&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、模型调用工具</strong>：模型在与用户交互时，通过工具调用获取所需的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).tools(<span class=\"string\">&quot;weatherTool&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"智能体（Agent）\"><a href=\"#智能体（Agent）\" class=\"headerlink\" title=\"智能体（Agent）\"></a>智能体（Agent）</h3><h4 id=\"功能与作用-2\"><a href=\"#功能与作用-2\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。</p>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>智能体的实现涉及多个关键组件，主要包括：</p>\n<p>模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。<br>智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。<br>智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。<br>注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。</p>\n<h3 id=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"><a href=\"#从函数调用（FunctionCallbac）到工具调用（ToolCallback）\" class=\"headerlink\" title=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"></a>从函数调用（FunctionCallbac）到工具调用（ToolCallback）</h3><p>随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。</p>\n<p><strong>为什么从FunctionCallback迁移到ToolCallback</strong></p>\n<p>Spring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：</p>\n<ul>\n<li>功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。</li>\n<li>一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。</li>\n<li>未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。</li>\n</ul>\n<p>因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。</p>\n<h2 id=\"Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\"><a href=\"#Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\" class=\"headerlink\" title=\"Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发\"></a>Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p><img src=\"/../../typora-user-images/image-20250425104935964-5549379.png\" alt=\"image-20250425104935964\"></p>\n<p><strong>Elasticsearch安装</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"attr\">elasticsearch1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;elasticsearch1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms84m -Xmx512m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs</span>  </span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vsftpd:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;fauria/vsftpd&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;rabbitmq1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_USER=admin</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_PASS=123456</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MIN_PORT=21100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MAX_PORT=21110</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_ADDRESS=172.18.0.8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21</span><span class=\"string\">:21</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21100</span><span class=\"number\">-21110</span><span class=\"string\">:21100-21110</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nt_dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../../typora-user-images/image-20250425174252871.png\" alt=\"image-20250425174252871\"></p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><ol>\n<li>集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。</li>\n<li>集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。</li>\n<li>基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。</li>\n<li>通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。</li>\n<li>Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：<ul>\n<li>场景 1：通过 RAG 找到医生后，进行挂号</li>\n<li>场景 2：挂号当日请假</li>\n<li>场景 3：挂号当日在医院附近找饭店</li>\n</ul>\n</li>\n</ol>\n<p>通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>Maven 核心依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-ai.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring-ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">alibaba.ai.version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">alibaba.ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.ai.ollama.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring.ai.ollama.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;alibaba.ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-elasticsearch-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Snapshots<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。</p>\n<p><strong>核心配置 （<code>application.yml</code>）</strong></p>\n<p>这里一定要注意的是文本推理模型 <code>model: deepseek-r1</code>, 嵌入模型<code>model: text-embedding-v2</code>用来生成文本的向量数据</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">index-name:</span> <span class=\"string\">spring-ai-tag</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里一定要注意，维度是默认1536，需要和向量模型的维度一致</span></span><br><span class=\"line\">        <span class=\"attr\">dimensions:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">similarity:</span> <span class=\"string\">cosine</span></span><br><span class=\"line\">        <span class=\"attr\">batching-strategy:</span> <span class=\"string\">TOKEN_COUNT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储</p>\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                <span class=\"comment\">// 设置系统的默认行为和风格</span></span><br><span class=\"line\">                .defaultSystem(<span class=\"string\">&quot;你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 注册向量检索顾问，用于从向量存储中检索相关信息</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(</span><br><span class=\"line\">                                vectorStore,</span><br><span class=\"line\">                                SearchRequest.builder()</span><br><span class=\"line\">                                        .similarityThreshold(<span class=\"number\">0.1</span>) <span class=\"comment\">// 设置相似度阈值</span></span><br><span class=\"line\">                                        .topK(<span class=\"number\">10</span>) <span class=\"comment\">// 设置返回最多 10 条相关结果</span></span><br><span class=\"line\">                                        .build()</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编写核心控制器（DeepseekChatController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.DocumentReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.reader.TextReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.VectorStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DeepseekChatController  //类名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 200900681 李村</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2025/4/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>: 1.0    //版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeepseekChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/data/load&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">loadData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取文件</span></span><br><span class=\"line\">        <span class=\"type\">DocumentReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(<span class=\"string\">&quot;static/hospitalInfo.txt&quot;</span>);</span><br><span class=\"line\">        List&lt;Document&gt; documents = reader.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.切分文件：根据空白行进行分割</span></span><br><span class=\"line\">        List&lt;Document&gt; splitDocuments =  <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取文档内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> document.getText();</span><br><span class=\"line\">            <span class=\"comment\">// 使用正则表达式按空白行分割</span></span><br><span class=\"line\">            String[] parts = content.split(<span class=\"string\">&quot;\\\\n\\\\s*\\\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将分割后的部分封装为新的 Document 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                splitDocuments.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(part.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件切分为 [&#123;&#125;]&quot;</span>, splitDocuments.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.写入数据</span></span><br><span class=\"line\">        vectorStore.add(splitDocuments);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/select&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;query&quot;)</span> String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query is  [&#123;&#125;]&quot;</span>, query);</span><br><span class=\"line\">        List&lt;Document&gt; results = vectorStore.similaritySearch(</span><br><span class=\"line\"><span class=\"comment\">//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()</span></span><br><span class=\"line\">                SearchRequest.builder().query(query).similarityThreshold(<span class=\"number\">0.1</span>).topK(<span class=\"number\">10</span>).build()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;results is [&#123;&#125;]&quot;</span>, results);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询重写</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/rewrite/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByRewrite</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、构建查询重写转换器</span></span><br><span class=\"line\">        <span class=\"type\">QueryTransformer</span> <span class=\"variable\">queryTransformer</span> <span class=\"operator\">=</span> RewriteQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 2、执行查询重写</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByTransform</span> <span class=\"operator\">=</span> queryTransformer.transform(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(inputMsg));</span><br><span class=\"line\">        <span class=\"comment\">// 3、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByTransform.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文感知查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/history/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByHistory</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取历史消息</span></span><br><span class=\"line\">        List&lt;Message&gt; history = chatMemory.get(userId, CHAT_HISTORY_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 构建查询对象</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.builder()</span><br><span class=\"line\">                .text(inputMsg)</span><br><span class=\"line\">                .history(history)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 创建 CompressionQueryTransformer</span></span><br><span class=\"line\">        <span class=\"type\">CompressionQueryTransformer</span> <span class=\"variable\">queryTransformerByHis</span> <span class=\"operator\">=</span> CompressionQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4、执行历史信息后查询</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByHistory</span> <span class=\"operator\">=</span> queryTransformerByHis.transform(query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByHistory.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>数据准备</strong></p>\n<p>我让kimi帮我生成了一个医院的介绍，包含</p>\n<ul>\n<li>医院<code>小智口腔医院</code>的介绍，</li>\n<li>3个科室的介绍，分别是 <code>口腔修复科</code>,<code>口腔正畸科</code>,<code>儿童口腔科</code></li>\n<li>每个科室也有对应的20位医生信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 医院介绍</span><br><span class=\"line\">小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。</span><br><span class=\"line\">2. 科室介绍</span><br><span class=\"line\">(1)口腔修复科:</span><br><span class=\"line\">口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信</span><br><span class=\"line\">(2)口腔正畸科:</span><br><span class=\"line\">是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。</span><br><span class=\"line\">(3)儿童口腔科:</span><br><span class=\"line\">儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 医生介绍</span><br><span class=\"line\">(1) 李明轩</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年3月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。</span><br><span class=\"line\">介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 王晓彤</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年7月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 张伟杰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1982年11月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。</span><br><span class=\"line\">介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(4) 陈静怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1988年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(5) 刘志远</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1980年9月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。</span><br><span class=\"line\">介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(6) 孙悦宁</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1993年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。</span><br><span class=\"line\">介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(7) 赵天宇</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1987年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(8) 林晓慧</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年8月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(9) 黄志强</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1979年12月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。</span><br><span class=\"line\">介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务</span><br><span class=\"line\"></span><br><span class=\"line\">(10) 高雅婷</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1986年2月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。</span><br><span class=\"line\"></span><br><span class=\"line\">(11) 王浩然</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1983年7月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。</span><br><span class=\"line\">介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(12) 李佳琪</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1992年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。</span><br><span class=\"line\">介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(13) 周文博</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1981年10月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。</span><br><span class=\"line\">介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(14) 张馨月</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1989年6月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(15) 王志鹏</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1984年11月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(16) 赵雪梅</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年3月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(17) 陈子豪</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1988年9月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。</span><br><span class=\"line\">介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(18) 李梦瑶</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1994年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(19) 黄晓峰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年8月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(20) 刘欣怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据写入的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/data/load</span><br><span class=\"line\">获取数据向量的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/select</span><br><span class=\"line\">连读对话的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/rag/chat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>数据写入</strong></p>\n<blockquote>\n<p>数据写入的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/data/load\">http://127.0.0.1:8080/ai/v1/data/load</a></p>\n</blockquote>\n<p><img src=\"/../../typora-user-images/image-20250429172724826.png\" alt=\"image-20250429172724826\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429180401580.png\" alt=\"image-20250429180401580\"></p>\n<blockquote>\n<p>获取数据向量的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/select?query=%E5%8C%BB%E9%99%A2%E4%BB%8B%E7%BB%8D\">http://127.0.0.1:8080/ai/v1/select?query=医院介绍</a></p>\n</blockquote>\n<p><img src=\"/../../typora-user-images/image-20250429174959408.png\" alt=\"image-20250429174959408\"></p>\n<p>可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek</p>\n<p>接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题</p>\n<blockquote>\n<ul>\n<li>请介绍一下医院</li>\n<li>请介绍一下医院都有哪些科室</li>\n<li>医院有哪些主任医师</li>\n<li>张馨月医生怎么样</li>\n<li>我刚才都问了哪些问题</li>\n</ul>\n</blockquote>\n<p><img src=\"/../../typora-user-images/image-20250429174851066.png\" alt=\"image-20250429174851066\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175228086.png\" alt=\"image-20250429175228086\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175342611.png\" alt=\"image-20250429175342611\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175421998.png\" alt=\"image-20250429175421998\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175540574.png\" alt=\"image-20250429175540574\"></p>\n<h2 id=\"附：向量数据库milvus-存储数据\"><a href=\"#附：向量数据库milvus-存储数据\" class=\"headerlink\" title=\"附：向量数据库milvus 存储数据\"></a>附：向量数据库milvus 存储数据</h2><h3 id=\"Milvus安装\"><a href=\"#Milvus安装\" class=\"headerlink\" title=\"Milvus安装\"></a>Milvus安装</h3><p><strong>Docker-compose 配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 etcd 服务</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-etcd</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">quay.io/coreos/etcd:v3.5.16</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_MODE=revision</span>  <span class=\"comment\"># 自动压缩模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_RETENTION=1000</span>  <span class=\"comment\"># 保留的修订版本数</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_QUOTA_BACKEND_BYTES=4294967296</span>  <span class=\"comment\"># 后端存储限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_SNAPSHOT_COUNT=50000</span>  <span class=\"comment\"># 快照计数</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">etcd</span> <span class=\"string\">-advertise-client-urls=http://127.0.0.1:2379</span> <span class=\"string\">-listen-client-urls=http://0.0.0.0:2379</span> <span class=\"string\">--data-dir</span> <span class=\"string\">/etcd</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;etcdctl&quot;</span>, <span class=\"string\">&quot;endpoint&quot;</span>, <span class=\"string\">&quot;health&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 MinIO 服务</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-minio</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:RELEASE.2023-03-20T20-16-18Z</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 访问密钥</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 密钥</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9001&quot;</span>  <span class=\"comment\"># 控制台端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">minio</span> <span class=\"string\">server</span> <span class=\"string\">/minio_data</span> <span class=\"string\">--console-address</span> <span class=\"string\">&quot;:9001&quot;</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.8</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus 服务</span></span><br><span class=\"line\">  <span class=\"attr\">standalone:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-standalone</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">milvusdb/milvus:v2.5.4</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;milvus&quot;</span>, <span class=\"string\">&quot;run&quot;</span>, <span class=\"string\">&quot;standalone&quot;</span>]  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">seccomp:unconfined</span>  <span class=\"comment\"># 安全选项</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ETCD_ENDPOINTS:</span> <span class=\"string\">etcd:2379</span>  <span class=\"comment\"># etcd 服务地址</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ADDRESS:</span> <span class=\"string\">minio:9000</span>  <span class=\"comment\"># MinIO 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9091/healthz&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">90s</span>  <span class=\"comment\"># 启动等待时间</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;19530:19530&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9091:9091&quot;</span>  <span class=\"comment\"># 管理端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;etcd&quot;</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;minio&quot;</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus Dashboard 服务</span></span><br><span class=\"line\">  <span class=\"attr\">dashboard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zilliz/attu:v2.5</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-dashboard</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MILVUS_URL:</span> <span class=\"string\">http://standalone:19530</span>  <span class=\"comment\"># Milvus 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:3000&quot;</span>  <span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">standalone</span>  <span class=\"comment\"># 依赖 Milvus 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">etcd</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">minio</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义网络配置</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">      <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看客户端，</strong> 输入地址 <code>http://localhost:8000/</code><br>进入如下界面：此时什么都不要填写，直接点【连接】按钮</p>\n<p><img src=\"/../../typora-user-images/image-20250429181131778.png\" alt=\"image-20250429181131778\"></p>\n<p>进入系统后</p>\n<p><img src=\"/../../typora-user-images/image-20250429181039571.png\" alt=\"image-20250429181039571\"></p>\n<p>创建用户：用户名：&#96;&#96;milvus<code>, 密码： </code>milvus-4321<code>(这里要和我们spring工程里的配置一致)，角色我们选</code>admin&#96;, </p>\n<p><img src=\"/../../typora-user-images/image-20250429181312813.png\" alt=\"image-20250429181312813\"></p>\n<p>修改依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-milvus-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">uris:</span> <span class=\"string\">http://127.0.0.1:9200</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">milvus:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">port:</span> <span class=\"number\">19530</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;milvus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;milvus-4321&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">databaseName:</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">collectionName:</span> <span class=\"string\">&quot;vector_store&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">embeddingDimension:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">indexType:</span> <span class=\"string\">IVF_FLAT</span></span><br><span class=\"line\">        <span class=\"attr\">metricType:</span> <span class=\"string\">COSINE</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。</p>\n<p>使用加载接口</p>\n<p><img src=\"/../../typora-user-images/image-20250429183142516.png\" alt=\"image-20250429183142516\"></p>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-03-Spring-AI-DeepSeek-R1-ES-Milvus-RAG-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程\"></a>Spring AI Alibaba-03- Spring AI + DeepSeek-R1 +  ES&#x2F;Milvus + RAG 智能对话应用开发全流程</h1><p>在[人工智能]（AI）应用中，模型通常需要访问外部资源或执行特定操作，例如数据库查询、调用外部API或执行计算任务。<strong>Spring AI</strong>，作为Spring官方开源的[AI应用]开发框架，旨在简化将AI功能集成到应用程序的过程，避免不必要的复杂性，</p>\n<p>[toc]</p>\n<h2 id=\"Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\"><a href=\"#Spring-AI-中-Function-Calling、Tool-Calling-和-Agent-是什么关系\" class=\"headerlink\" title=\"Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系\"></a>Spring AI 中 Function Calling、Tool Calling 和 Agent 是什么关系</h2><h3 id=\"Spring-AI-介绍\"><a href=\"#Spring-AI-介绍\" class=\"headerlink\" title=\"Spring AI 介绍\"></a>Spring AI 介绍</h3><h4 id=\"Spring-AI的版本演进\"><a href=\"#Spring-AI的版本演进\" class=\"headerlink\" title=\"Spring AI的版本演进\"></a>Spring AI的版本演进</h4><p>Spring AI自发布以来，经过了多个版本的迭代更新，每个版本都带来了新的特性和改进，以下是一些重要版本的发布情况：</p>\n<ul>\n<li>2024年5月30日：发布了1.0.0 Milestone 1版本，标志着API的基本确定，功能逐步完善。</li>\n<li>2024年8月23日：发布了1.0.0 Milestone 2版本，增强了可观察性功能，提高了监控和调试能力。</li>\n<li>2024年10月8日：发布了1.0.0 Milestone 3版本，进一步扩展了对多种AI模型的支持。</li>\n<li>2024年11月20日：发布了1.0.0 Milestone 4版本，加入了对Amazon Bedrock Converse API的支持，提升了与Amazon模型的兼容性。</li>\n<li>2025年2月14日：发布了1.0.0 Milestone 6版本，带来了多项新特性和改进，进一步巩固了框架的稳定性</li>\n</ul>\n<h4 id=\"Spring-AI的主要功能\"><a href=\"#Spring-AI的主要功能\" class=\"headerlink\" title=\"Spring AI的主要功能\"></a>Spring AI的主要功能</h4><p>Spring AI为开发者提供了多种AI功能的支持，包括：</p>\n<ul>\n<li>智能聊天：集成大型语言模型（LLM），实现自然语言处理和对话生成。</li>\n<li>文本生成：利用AI模型生成创意文本内容，例如文章、故事等。</li>\n<li>图像生成：通过文本提示生成图像，支持多种图像生成模型。</li>\n<li>音频处理：实现语音转文本和文本转语音功能，增强应用的交互性。</li>\n<li>功能调用：允许模型请求执行客户端工具和函数，以访问实时信息。</li>\n</ul>\n<h3 id=\"函数调用（Function-Calling）\"><a href=\"#函数调用（Function-Calling）\" class=\"headerlink\" title=\"函数调用（Function Calling）\"></a><strong>函数调用（Function Calling）</strong></h3><h4 id=\"功能与作用\"><a href=\"#功能与作用\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>在AI应用中，模型常常需要访问外部资源或执行特定操作（如数据库查询、调用API等）。函数调用功能允许AI模型在生成响应时，调用预定义的外部函数或服务，以获取模型无法直接生成的信息。举个例子，模型可以通过调用天气查询函数，获取实时天气数据。</p>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>在Spring AI中，函数调用的实现步骤如下：</p>\n<p><strong>1、定义函数</strong>：开发者创建一个实现<code>Function</code>接口的Java类，明确函数的输入输出类型。例如，定义一个获取天气信息的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherFunction</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Function</span>&lt;WeatherFunction.WeatherRequest, String&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">apply</span><span class=\"params\">(WeatherRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + request.getCity() + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherRequest</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String city;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getCity</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> city; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setCity</span><span class=\"params\">(String city)</span> &#123; <span class=\"built_in\">this</span>.city = city; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、注册函数</strong>：将函数注册为Spring Bean，使其能被Spring AI识别和调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FunctionConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Description(&quot;获取指定城市的天气信息&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Function&lt;WeatherFunction.WeatherRequest, String&gt; weatherFunction() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、配置模型</strong>：在Spring AI的聊天客户端配置中，指定模型可以调用的函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withFunction(<span class=\"string\">&quot;weatherFunction&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、模型调用函数</strong>：模型在生成响应时，可以通过请求调用外部函数，得到结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        WeatherFunction.<span class=\"type\">WeatherRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherFunction</span>.WeatherRequest();</span><br><span class=\"line\">        request.setCity(input);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).functions(<span class=\"string\">&quot;weatherFunction&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：需要注意的是，Spring AI中的函数调用功能已被弃用，建议使用<strong>工具调用</strong>（Tool Calling）来实现类似功能。</p>\n<h3 id=\"工具调用（Tool-Calling）\"><a href=\"#工具调用（Tool-Calling）\" class=\"headerlink\" title=\"工具调用（Tool Calling）\"></a><strong>工具调用（Tool Calling）</strong></h3><h4 id=\"功能与作用-1\"><a href=\"#功能与作用-1\" class=\"headerlink\" title=\"功能与作用\"></a><strong>功能与作用</strong></h4><p>工具调用允许AI模型在生成响应时调用外部工具或服务。这些工具能够帮助模型获取实时数据、执行特定操作或增强其功能。例如，模型可以调用天气查询工具来获取实时天气信息，或调用计算工具进行复杂的数学运算。</p>\n<h4 id=\"实现方式-1\"><a href=\"#实现方式-1\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>工具调用的实现步骤与函数调用类似，但使用的是外部工具而非预定义的函数。以下是具体步骤：</p>\n<p><strong>1、定义工具接口</strong>：开发者定义一个接口，声明工具的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、实现工具接口</strong>：编写具体的工具实现类，处理工具的业务逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeatherToolImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WeatherTool</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWeather</span><span class=\"params\">(String city)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;The weather in &quot;</span> + city + <span class=\"string\">&quot; is sunny.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、注册工具为Spring Bean</strong>：将工具实现类注册为Spring Bean，以便Spring容器管理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ToolConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> WeatherTool <span class=\"title function_\">weatherTool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WeatherToolImpl</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、配置模型使用工具</strong>：在Spring AI配置中，指定模型使用的工具：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient.Builder chatClientBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chatClientBuilder</span><br><span class=\"line\">                .withOptions(ChatOptions.builder().withTool(<span class=\"string\">&quot;weatherTool&quot;</span>).build())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>5、模型调用工具</strong>：模型在与用户交互时，通过工具调用获取所需的响应：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String input)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt().user(input).tools(<span class=\"string\">&quot;weatherTool&quot;</span>).call().content();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"智能体（Agent）\"><a href=\"#智能体（Agent）\" class=\"headerlink\" title=\"智能体（Agent）\"></a>智能体（Agent）</h3><h4 id=\"功能与作用-2\"><a href=\"#功能与作用-2\" class=\"headerlink\" title=\"功能与作用\"></a>功能与作用</h4><p>智能体（Agent）是能够自主决策并采取行动的软件实体。不同于函数调用和工具调用，智能体不仅能够执行预定义的操作，还能够根据环境变化和任务需求，动态选择并调用适当的工具或服务来完成复杂任务。</p>\n<h4 id=\"实现方式-2\"><a href=\"#实现方式-2\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>智能体的实现涉及多个关键组件，主要包括：</p>\n<p>模型上下文协议（MCP）：用于规范如何向大型语言模型（LLM）提供上下文信息。通过MCP，智能体可以与不同的数据源和工具交互，实现数据获取和处理。<br>智能体配置与实现：创建智能体并定义其行为。例如，可以创建一个与文件系统交互的智能体。<br>智能体与模型集成：在Spring AI配置中，定义智能体，并与AI模型进行集成，使其能够在生成响应时调用智能体的功能。<br>注意：在最新版本的Spring AI中，智能体功能已得到优化，建议开发者参考官方文档，了解最新实现方式和最佳实践。</p>\n<h3 id=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"><a href=\"#从函数调用（FunctionCallbac）到工具调用（ToolCallback）\" class=\"headerlink\" title=\"从函数调用（FunctionCallbac）到工具调用（ToolCallback）\"></a>从函数调用（FunctionCallbac）到工具调用（ToolCallback）</h3><p>随着Spring AI的持续发展，函数调用（Function Callback）功能已被标记为过时（Deprecated），未来的趋势是采用工具调用（Tool Callback）机制。这种转变旨在提供更高的灵活性和扩展性，使开发者能够更方便地将外部工具和服务集成到AI应用中。</p>\n<p><strong>为什么从FunctionCallback迁移到ToolCallback</strong></p>\n<p>Spring AI团队决定将函数调用功能从FunctionCallback迁移到ToolCallback，主要基于以下考虑：</p>\n<ul>\n<li>功能增强：ToolCallback提供了比FunctionCallback更丰富的功能，包括更灵活的工具定义和调用方式，使开发者能够更精确地控制工具的行为。</li>\n<li>一致性和标准化：采用ToolCallback有助于统一工具调用的接口和规范，提升代码的可读性和维护性，减少因使用过时接口而可能引发的问题。</li>\n<li>未来兼容性：由于FunctionCallback已被标记为过时，未来版本的Spring AI可能会移除对其的支持。为了确保应用的长期兼容性和稳定性，建议开发者尽早迁移至ToolCallback。</li>\n</ul>\n<p>因此，Spring AI强烈建议开发者将现有的FunctionCallback实现迁移到ToolCallback，以充分利用新版本带来的改进和优势，确保应用的可维护性和可扩展性。</p>\n<h2 id=\"Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\"><a href=\"#Spring-AI-DeepSeek-R1-ES-Milvus-RAG-Tool-Calling：智能对话应用开发\" class=\"headerlink\" title=\"Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发\"></a>Spring AI + DeepSeek-R1 + ES&#x2F;Milvus + RAG + Tool Calling：智能对话应用开发</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p><img src=\"/../../typora-user-images/image-20250425104935964-5549379.png\" alt=\"image-20250425104935964\"></p>\n<p><strong>Elasticsearch安装</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># base 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">\t<span class=\"attr\">elasticsearch1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:8.13.4</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;elasticsearch1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms84m -Xmx512m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/data:/usr/share/elasticsearch/data</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/plugins:/usr/share/elasticsearch/plugins</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/config:/usr/share/elasticsearch/config</span>  </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/elasticsearch1/logs:/usr/share/elasticsearch/logs</span>  </span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.7</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">vsftpd:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">&quot;fauria/vsftpd&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">&quot;rabbitmq1&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_USER=admin</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">FTP_PASS=123456</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MIN_PORT=21100</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_MAX_PORT=21110</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">PASV_ADDRESS=172.18.0.8</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21</span><span class=\"string\">:21</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">21100</span><span class=\"number\">-21110</span><span class=\"string\">:21100-21110</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/file:/home/vsftpd</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/vsftpd/log/:/var/log/vsftpd</span></span><br><span class=\"line\">    <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">#restart: always</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">nt_dev</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../../typora-user-images/image-20250425174252871.png\" alt=\"image-20250425174252871\"></p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><ol>\n<li>集成 Spring AI 提供基础框架支持：Spring AI 作为对话系统开发的基础框架，提供了丰富的工具和库，帮助开发者快速搭建、训练和部署基于 AI 模型的应用程序，为整个项目提供了坚实的技术支撑。</li>\n<li>集成 Spring AI Alibaba，无缝对接阿里百炼平台：通过 Spring AI Alibaba，我们能够轻松调用阿里百炼平台提供的多种 AI 模型，包括高性能的大模型 DeepSeek-R1 和文本嵌入模型 text-embedding-v2。这些模型为对话系统提供了强大的生成能力和精准的向量表示能力。</li>\n<li>基于 Redis 实现记忆对话功能，并支持多种持久化方案：项目通过 Redis 实现了对话记忆功能，确保对话的连贯性和上下文一致性。同时，我们还提供了基于 Redis 的持久化方案，开发者可以根据需求灵活改造为 MySQL 持久化，或者采用 Redis + MySQL 的混合持久化方案，满足不同场景的需求。</li>\n<li>通过向量模型与 ElasticSearch 实现本地知识库功能（RAG 技术）：本项目采用阿里百炼平台提供的 text-embedding-v2 向量模型和 ElasticSearch 数据库，实现了本地知识库功能。通过 RAG 技术，系统能够从知识库中检索相关信息并融入对话生成过程。为了验证 RAG 的功能，我们通过工具生成了一份虚拟的医院介绍（“小智口腔医院”），以及 3 个科室介绍（“口腔修复科”、“口腔正畸科”、“儿童口腔科”）和 30 位医生的介绍。</li>\n<li>Tool Calling：通过串联场景实现复杂任务的自动化：项目通过模拟以下三个场景，展示了 Tool Calling 技术如何串联整个技术栈的能力：<ul>\n<li>场景 1：通过 RAG 找到医生后，进行挂号</li>\n<li>场景 2：挂号当日请假</li>\n<li>场景 3：挂号当日在医院附近找饭店</li>\n</ul>\n</li>\n</ol>\n<p>通过以上功能，本项目实现了从基础框架支持到复杂任务自动化的完整技术链条，包括 Spring AI + Spring AI Alibaba 调用阿里百炼平台、DeepSeek-R1 大模型、连续对话（Redis 实现）、RAG（向量模型 + ElasticSearch 实现）以及 Tool Calling（串联复杂场景）。这些技术的结合为开发者提供了一个强大的 AI 应用开发范例 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><strong>Maven 核心依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring_ai_alibaba_demo<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>第一个 Spring AI Alibaba 项目<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>23<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-boot.version</span>&gt;</span>3.4.3<span class=\"tag\">&lt;/<span class=\"name\">spring-boot.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-ai.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring-ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">alibaba.ai.version</span>&gt;</span>1.0.0-M6.1<span class=\"tag\">&lt;/<span class=\"name\">alibaba.ai.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring.ai.ollama.version</span>&gt;</span>1.0.0-M6<span class=\"tag\">&lt;/<span class=\"name\">spring.ai.ollama.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-alibaba-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;alibaba.ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-elasticsearch-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-ai.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-beans<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-milestones<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Milestones<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/milestone<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Spring Snapshots<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://repo.spring.io/snapshot<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">path</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">annotationProcessorPaths</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上述配置文件中，我们引入了Spring Boot、Spring AI、Alibaba Cloud AI等核心依赖，确保项目能够顺利构建和运行。同时，通过配置Maven插件和仓库，优化项目的构建流程和依赖管理。</p>\n<p><strong>核心配置 （<code>application.yml</code>）</strong></p>\n<p>这里一定要注意的是文本推理模型 <code>model: deepseek-r1</code>, 嵌入模型<code>model: text-embedding-v2</code>用来生成文本的向量数据</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"attr\">index-name:</span> <span class=\"string\">spring-ai-tag</span></span><br><span class=\"line\">        <span class=\"comment\"># 这里一定要注意，维度是默认1536，需要和向量模型的维度一致</span></span><br><span class=\"line\">        <span class=\"attr\">dimensions:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">similarity:</span> <span class=\"string\">cosine</span></span><br><span class=\"line\">        <span class=\"attr\">batching-strategy:</span> <span class=\"string\">TOKEN_COUNT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Elasticsearch地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。 后面可以使用向量数据库进行存储</p>\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                <span class=\"comment\">// 设置系统的默认行为和风格</span></span><br><span class=\"line\">                .defaultSystem(<span class=\"string\">&quot;你是一个专业的助手，遇到不确定或不明确的信息时，会主动询问用户以获取更多信息。在回答问题时，你倾向于使用条理清晰的格式，例如分点列举的方式，以便用户更容易理解和参考。&quot;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 注册向量检索顾问，用于从向量存储中检索相关信息</span></span><br><span class=\"line\">                .defaultAdvisors(</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> <span class=\"title class_\">QuestionAnswerAdvisor</span>(</span><br><span class=\"line\">                                vectorStore,</span><br><span class=\"line\">                                SearchRequest.builder()</span><br><span class=\"line\">                                        .similarityThreshold(<span class=\"number\">0.1</span>) <span class=\"comment\">// 设置相似度阈值</span></span><br><span class=\"line\">                                        .topK(<span class=\"number\">10</span>) <span class=\"comment\">// 设置返回最多 10 条相关结果</span></span><br><span class=\"line\">                                        .build()</span><br><span class=\"line\">                        )</span><br><span class=\"line\">                )</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>编写核心控制器（DeepseekChatController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.document.DocumentReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.Query;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.CompressionQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.QueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.rag.preretrieval.query.transformation.RewriteQueryTransformer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.reader.TextReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.SearchRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.vectorstore.VectorStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@ClassName</span> DeepseekChatController  //类名称</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Author</span>: 200900681 李村</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@CreateDate</span>: 2025/4/25</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@Version</span>: 1.0    //版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeepseekChatController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> VectorStore vectorStore;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/data/load&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">loadData</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 读取文件</span></span><br><span class=\"line\">        <span class=\"type\">DocumentReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextReader</span>(<span class=\"string\">&quot;static/hospitalInfo.txt&quot;</span>);</span><br><span class=\"line\">        List&lt;Document&gt; documents = reader.get();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.切分文件：根据空白行进行分割</span></span><br><span class=\"line\">        List&lt;Document&gt; splitDocuments =  <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Document document : documents) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取文档内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> document.getText();</span><br><span class=\"line\">            <span class=\"comment\">// 使用正则表达式按空白行分割</span></span><br><span class=\"line\">            String[] parts = content.split(<span class=\"string\">&quot;\\\\n\\\\s*\\\\n&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 将分割后的部分封装为新的 Document 对象</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String part : parts) &#123;</span><br><span class=\"line\">                splitDocuments.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Document</span>(part.trim()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;文件切分为 [&#123;&#125;]&quot;</span>, splitDocuments.size());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3.写入数据</span></span><br><span class=\"line\">        vectorStore.add(splitDocuments);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/select&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;query&quot;)</span> String query)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;query is  [&#123;&#125;]&quot;</span>, query);</span><br><span class=\"line\">        List&lt;Document&gt; results = vectorStore.similaritySearch(</span><br><span class=\"line\"><span class=\"comment\">//                SearchRequest.builder().query(query).similarityThreshold(0.1).topK(10).build()</span></span><br><span class=\"line\">                SearchRequest.builder().query(query).similarityThreshold(<span class=\"number\">0.1</span>).topK(<span class=\"number\">10</span>).build()</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;results is [&#123;&#125;]&quot;</span>, results);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> results.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询重写</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/rewrite/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByRewrite</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1、构建查询重写转换器</span></span><br><span class=\"line\">        <span class=\"type\">QueryTransformer</span> <span class=\"variable\">queryTransformer</span> <span class=\"operator\">=</span> RewriteQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">        <span class=\"comment\">// 2、执行查询重写</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByTransform</span> <span class=\"operator\">=</span> queryTransformer.transform(<span class=\"keyword\">new</span> <span class=\"title class_\">Query</span>(inputMsg));</span><br><span class=\"line\">        <span class=\"comment\">// 3、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByTransform.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 上下文感知查询</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> userId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> inputMsg</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/rag/history/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">ragChatByHistory</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取历史消息</span></span><br><span class=\"line\">        List&lt;Message&gt; history = chatMemory.get(userId, CHAT_HISTORY_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">// 2. 构建查询对象</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">query</span> <span class=\"operator\">=</span> Query.builder()</span><br><span class=\"line\">                .text(inputMsg)</span><br><span class=\"line\">                .history(history)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 创建 CompressionQueryTransformer</span></span><br><span class=\"line\">        <span class=\"type\">CompressionQueryTransformer</span> <span class=\"variable\">queryTransformerByHis</span> <span class=\"operator\">=</span> CompressionQueryTransformer.builder()</span><br><span class=\"line\">                .chatClientBuilder(chatClient.mutate())</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 4、执行历史信息后查询</span></span><br><span class=\"line\">        <span class=\"type\">Query</span> <span class=\"variable\">queryByHistory</span> <span class=\"operator\">=</span> queryTransformerByHis.transform(query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5、输出重写后的查询文案</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryByHistory.text();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>数据准备</strong></p>\n<p>我让kimi帮我生成了一个医院的介绍，包含</p>\n<ul>\n<li>医院<code>小智口腔医院</code>的介绍，</li>\n<li>3个科室的介绍，分别是 <code>口腔修复科</code>,<code>口腔正畸科</code>,<code>儿童口腔科</code></li>\n<li>每个科室也有对应的20位医生信息</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 医院介绍</span><br><span class=\"line\">小智口腔医院坐落在风景如画的苍云市，一所集临床、科研、教学、预防为一体的三级医院。医院是苍云市慈善医院、苍云市省老年友善医院、南阳市光荣院、南阳市牙病防治所所在地、南阳市中小学口腔保健教育基地。目前，医院已发展为“一院两区多门诊”，即两相路院区、光武路院区、新华路门诊、卧龙路门诊、关帝庙路门诊、工业路门诊等同步发展、同步运营、同质化服务的发展格局。两相路院区于2023年1月投入使用，建筑面积12.2万平米，规划床位1000张，口腔综合治疗台200台，耳鼻喉多功能治疗台20台，是以口腔、眼、耳鼻喉、整形美容为特色，内、外、妇、儿、中医、康复、肿瘤、放疗、体检等功能齐全的“大专科  小综合”三级医院。医院下设60个临床、医技科室，其中，口腔专业是苍云市省临床重点培育专科，耳鼻咽喉头颈外科是南阳市级临床重点专科。医院拥有计算机体层摄像系统、磁共振成像系统、彩色多普勒超声诊断仪、日本奥林巴斯NBI电子鼻咽喉镜、高清内窥镜摄像系统、全自动生化免疫流水线、口腔CBCT、多导睡眠诊断分析系统、日本奥林巴斯CV-290电子胃肠镜、眼科光学相干断层扫描仪OCT、蔡司700眼科手术显微镜、蔡司VisuMax SMILE 3.0微创全飞秒手术系统、CAD/CAM牙科扫描仪等先进设备。目前医院已开设内科、外科、妇产科、儿科、中医科、康复医学科、眼科、皮肤科、体检科、肿瘤放疗科、医养结合（无陪护康养）等综合医疗服务，先进的设备，优美的环境，精湛的技术，可满足患者优质医疗服务的需求。医院全体干部职工以“争创三级甲等口腔医院和省级区域性口腔医疗中心”为愿景，不断提高医疗技术和服务水平，更好地为人民群众提供更加安全、高效、高品质的口腔医疗保健服务和综合医疗服务。</span><br><span class=\"line\">2. 科室介绍</span><br><span class=\"line\">(1)口腔修复科:</span><br><span class=\"line\">口腔修复科是医院的核心科室之一，口腔修复科是‌专注于修复牙齿缺损、缺失，以及改善牙齿外观和功能的科室‌。主要通过人工修复体（如假牙、贴面、嵌体等）恢复牙齿的形态、咬合和美观，解决因龋齿、外伤、磨损或先天因素导致的牙齿问题，帮助患者重获正常的咀嚼、发音和笑容自信</span><br><span class=\"line\">(2)口腔正畸科:</span><br><span class=\"line\">是口腔科中专门负责治疗错𬌗畸形的部门。该科室主要收治因牙齿排列不齐、牙齿扭转错位、反𬌗、上颌前突、下颌后缩等牙颌面畸形问题前来就诊的患者。在专业范围上，科室通过运用矫治技术和设备，如固定矫治器、功能矫治器、隐形矫治器等，帮助患者恢复正常的牙齿排列和咬合关系，同时改善面部美观和口腔功能。在具体的科室设置上，口腔正畸科通常配备有专业的医护人员和先进的医疗设备，正畸专业医生多为本科毕业后教育，一般在本科阶段不涉及临床实习，都是在毕业后，通过研究生、进修或上级医师专业指导等方式获得正畸临床实践经验，确保患者能够得到全面、专业的治疗服务。</span><br><span class=\"line\">(3)儿童口腔科:</span><br><span class=\"line\">儿童口腔科是医院的新兴科室，提供儿童口腔疾病的预防与治疗，如龋齿、牙髓炎、牙周病等。我们还为儿童提供专门的牙科治疗设备和技术，以减轻他们的紧张情绪和疼痛感。</span><br><span class=\"line\"></span><br><span class=\"line\">3. 医生介绍</span><br><span class=\"line\">(1) 李明轩</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年3月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”，博士毕业于“上海交通大学医学院”。</span><br><span class=\"line\">介绍 ：李明轩医生是口腔修复科的骨干力量，临床经验丰富。他专注于复杂牙体修复和全瓷冠桥技术，熟练掌握数字化修复设备的应用。李医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(2) 王晓彤</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年7月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：王晓彤医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。王医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(3) 张伟杰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1982年11月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“四川大学华西口腔医学院”，硕士毕业于“德国法兰克福大学”，博士毕业于“美国哈佛大学牙学院”。</span><br><span class=\"line\">介绍 ：张伟杰医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于美学修复及咬合重建技术，尤其擅长复杂病例的综合设计与实施。张医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(4) 陈静怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1988年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：陈静怡医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。陈医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(5) 刘志远</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1980年9月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”，博士毕业于“日本东京医科齿科大学”。</span><br><span class=\"line\">介绍 ：刘志远医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。刘医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(6) 孙悦宁</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1993年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武当医学学院”，硕士毕业于“青城医学研究所”，博士毕业于“昆仑医学大学”。</span><br><span class=\"line\">介绍 ：孙悦宁医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。孙医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(7) 赵天宇</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1987年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：赵天宇医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。赵医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(8) 林晓慧</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年8月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：林晓慧医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。林医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(9) 黄志强</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1979年12月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“复旦大学医学院”，硕士毕业于“美国密歇根大学牙学院”。</span><br><span class=\"line\">介绍 ：黄志强医生是口腔正畸领域的权威专家，擅长复杂病例的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。黄医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务</span><br><span class=\"line\"></span><br><span class=\"line\">(10) 高雅婷</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1986年2月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“首都医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：高雅婷医生是口腔修复科的中坚力量，擅长美学修复及咬合重建技术。她熟练掌握数字化修复设备的应用，并注重患者的个性化需求。高医生积极参与学术交流，不断提升自身技术水平。她还通过线上科普视频，向患者普及修复相关知识，帮助更多人了解牙齿健康的重要性。</span><br><span class=\"line\"></span><br><span class=\"line\">(11) 王浩然</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1983年7月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“浙江大学医学院”，硕士毕业于“英国伦敦大学学院牙学院”。</span><br><span class=\"line\">介绍 ：王浩然医生是口腔正畸领域的资深专家，擅长成人复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。王医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(12) 李佳琪</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1992年4月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“天津医科大学”，硕士毕业于“南京大学医学院”。</span><br><span class=\"line\">介绍 ：李佳琪医生是儿童口腔科的新锐力量，专注于儿童龋病预防及早期干预。她熟练掌握乳牙及恒牙的治疗技术，并善于与孩子沟通，缓解他们的紧张情绪。李医生积极参与科研工作，研究方向包括儿童口腔健康管理及行为引导策略。她还经常参与幼儿园及学校的口腔健康讲座，为家长和孩子普及护牙知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(13) 周文博</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1981年10月</span><br><span class=\"line\">医生职称 ：主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“上海交通大学医学院”，硕士毕业于“德国慕尼黑大学牙学院”。</span><br><span class=\"line\">介绍 ：周文博医生是口腔修复领域的权威专家，拥有丰富的临床经验。他专注于复杂牙体修复及全口义齿修复技术，尤其擅长美学修复设计。周医生在国际学术界享有盛誉，曾多次受邀参加国际修复大会并作专题报告。他还致力于培养年轻医生，推动国内修复技术的发展。</span><br><span class=\"line\"></span><br><span class=\"line\">(14) 张馨月</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1989年6月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：张馨月医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。张医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(15) 王志鹏</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1984年11月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“华西医科大学”，硕士毕业于“北京大学口腔医学院”。</span><br><span class=\"line\">介绍 ：王志鹏医生是口腔修复科的骨干力量，擅长复杂牙体修复及种植修复技术。他熟练掌握显微修复技术，并注重患者的个性化需求。王医生多次参与国际学术交流，发表多篇高水平论文。他还积极参与社区义诊活动，普及口腔健康知识，为提高公众口腔保健意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(16) 赵雪梅</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1990年3月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“武汉大学口腔医学院”，硕士毕业于“浙江大学医学院”。</span><br><span class=\"line\">介绍 ：赵雪梅医生是儿童口腔科的新锐医生，专注于儿童龋病的早期诊断与治疗。她熟练掌握微创治疗技术，并善于用生动的方式与孩子互动。赵医生积极参与科研项目，研究方向包括低龄儿童龋病的预防策略。她还通过社区活动，向家长普及儿童口腔护理知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(17) 陈子豪</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1988年9月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“同济医科大学”，硕士毕业于“北京协和医学院”。</span><br><span class=\"line\">介绍 ：陈子豪医生是口腔正畸领域的资深专家，擅长复杂错颌畸形的矫正治疗。他熟练掌握隐形矫治技术，并注重患者的舒适体验及术后效果。陈医生在国内外发表了多篇学术论文，研究成果受到同行高度认可。他还积极参与公益事业，为偏远地区患者提供免费咨询服务。</span><br><span class=\"line\"></span><br><span class=\"line\">(18) 李梦瑶</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1994年1月</span><br><span class=\"line\">医生职称 ：住院医师</span><br><span class=\"line\">所在科室 ：儿童口腔科</span><br><span class=\"line\">毕业院校 ：本科毕业于“山东大学口腔医学院”，硕士毕业于“西安交通大学医学院”。</span><br><span class=\"line\">介绍 ：李梦瑶医生是儿童口腔科的新生力量，专业基础扎实。她专注于帮助儿童克服牙齿发育障碍，熟练掌握多种牙科评估工具和治疗方法。李医生积极参与科室的科研工作，发表多篇学术论文。她多次参与社区义诊活动，普及儿童口腔健康知识，为提高公众健康意识做出了积极贡献。</span><br><span class=\"line\"></span><br><span class=\"line\">(19) 黄晓峰</span><br><span class=\"line\">性别 ：男</span><br><span class=\"line\">出生年月 ：1985年8月</span><br><span class=\"line\">医生职称 ：副主任医师</span><br><span class=\"line\">所在科室 ：口腔修复科</span><br><span class=\"line\">毕业院校 ：本科毕业于“南京医科大学”，硕士毕业于“中国医科大学”。</span><br><span class=\"line\">介绍 ：黄晓峰医生是口腔修复科的中坚力量，擅长全口义齿修复及种植修复技术。他注重美学设计，能够根据患者需求制定个性化的修复方案。黄医生积极参与学术交流，不断提升自身技术水平。他还通过线上科普视频，向患者普及修复相关知识。</span><br><span class=\"line\"></span><br><span class=\"line\">(20) 刘欣怡</span><br><span class=\"line\">性别 ：女</span><br><span class=\"line\">出生年月 ：1991年5月</span><br><span class=\"line\">医生职称 ：主治医师</span><br><span class=\"line\">所在科室 ：口腔正畸科</span><br><span class=\"line\">毕业院校 ：本科毕业于“中山大学光华口腔医学院”，硕士毕业于“复旦大学附属口腔医院”。</span><br><span class=\"line\">介绍 ：刘欣怡医生是口腔正畸领域的新生力量，擅长儿童及成人错颌畸形的矫正治疗。她熟练掌握传统固定矫治器、隐形矫治器及功能性矫治器的应用，并注重个性化治疗方案的设计。刘医生积极参与科研项目，发表了多篇关于正畸治疗效果的研究论文。她还多次参与社区公益活动，为青少年普及口腔健康知识。</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数据写入的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/data/load</span><br><span class=\"line\">获取数据向量的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/select</span><br><span class=\"line\">连读对话的接口</span><br><span class=\"line\">http://127.0.0.1:8080/ai/v1/rag/chat</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>数据写入</strong></p>\n<blockquote>\n<p>数据写入的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/data/load\">http://127.0.0.1:8080/ai/v1/data/load</a></p>\n</blockquote>\n<p><img src=\"/../../typora-user-images/image-20250429172724826.png\" alt=\"image-20250429172724826\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429180401580.png\" alt=\"image-20250429180401580\"></p>\n<blockquote>\n<p>获取数据向量的接口<br><a href=\"http://127.0.0.1:8080/ai/v1/select?query=%E5%8C%BB%E9%99%A2%E4%BB%8B%E7%BB%8D\">http://127.0.0.1:8080/ai/v1/select?query=医院介绍</a></p>\n</blockquote>\n<p><img src=\"/../../typora-user-images/image-20250429174959408.png\" alt=\"image-20250429174959408\"></p>\n<p>可以通过elasticsearch 搜索到医院信息，也就是这些信息会通过聊天接口上传给deepseek</p>\n<p>接下来我们就准备验证RAG的能力，也就是检索+连续对话的能力了，我们设计了几个问题</p>\n<blockquote>\n<ul>\n<li>请介绍一下医院</li>\n<li>请介绍一下医院都有哪些科室</li>\n<li>医院有哪些主任医师</li>\n<li>张馨月医生怎么样</li>\n<li>我刚才都问了哪些问题</li>\n</ul>\n</blockquote>\n<p><img src=\"/../../typora-user-images/image-20250429174851066.png\" alt=\"image-20250429174851066\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175228086.png\" alt=\"image-20250429175228086\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175342611.png\" alt=\"image-20250429175342611\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175421998.png\" alt=\"image-20250429175421998\"></p>\n<p><img src=\"/../../typora-user-images/image-20250429175540574.png\" alt=\"image-20250429175540574\"></p>\n<h2 id=\"附：向量数据库milvus-存储数据\"><a href=\"#附：向量数据库milvus-存储数据\" class=\"headerlink\" title=\"附：向量数据库milvus 存储数据\"></a>附：向量数据库milvus 存储数据</h2><h3 id=\"Milvus安装\"><a href=\"#Milvus安装\" class=\"headerlink\" title=\"Milvus安装\"></a>Milvus安装</h3><p><strong>Docker-compose 配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置 etcd 服务</span></span><br><span class=\"line\">  <span class=\"attr\">etcd:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-etcd</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">quay.io/coreos/etcd:v3.5.16</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_MODE=revision</span>  <span class=\"comment\"># 自动压缩模式</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_AUTO_COMPACTION_RETENTION=1000</span>  <span class=\"comment\"># 保留的修订版本数</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_QUOTA_BACKEND_BYTES=4294967296</span>  <span class=\"comment\"># 后端存储限制</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ETCD_SNAPSHOT_COUNT=50000</span>  <span class=\"comment\"># 快照计数</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/etcd:/etcd</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">etcd</span> <span class=\"string\">-advertise-client-urls=http://127.0.0.1:2379</span> <span class=\"string\">-listen-client-urls=http://0.0.0.0:2379</span> <span class=\"string\">--data-dir</span> <span class=\"string\">/etcd</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;etcdctl&quot;</span>, <span class=\"string\">&quot;endpoint&quot;</span>, <span class=\"string\">&quot;health&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 MinIO 服务</span></span><br><span class=\"line\">  <span class=\"attr\">minio:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-minio</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">minio/minio:RELEASE.2023-03-20T20-16-18Z</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ACCESS_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 访问密钥</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_SECRET_KEY:</span> <span class=\"string\">minioadmin</span>  <span class=\"comment\"># MinIO 密钥</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9001:9001&quot;</span>  <span class=\"comment\"># 控制台端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9000:9000&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/minio:/minio_data</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">minio</span> <span class=\"string\">server</span> <span class=\"string\">/minio_data</span> <span class=\"string\">--console-address</span> <span class=\"string\">&quot;:9001&quot;</span>  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9000/minio/health/live&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">        <span class=\"attr\">ipv4_address:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.8</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus 服务</span></span><br><span class=\"line\">  <span class=\"attr\">standalone:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-standalone</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">milvusdb/milvus:v2.5.4</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> [<span class=\"string\">&quot;milvus&quot;</span>, <span class=\"string\">&quot;run&quot;</span>, <span class=\"string\">&quot;standalone&quot;</span>]  <span class=\"comment\"># 启动命令</span></span><br><span class=\"line\">    <span class=\"attr\">security_opt:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">seccomp:unconfined</span>  <span class=\"comment\"># 安全选项</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">ETCD_ENDPOINTS:</span> <span class=\"string\">etcd:2379</span>  <span class=\"comment\"># etcd 服务地址</span></span><br><span class=\"line\">      <span class=\"attr\">MINIO_ADDRESS:</span> <span class=\"string\">minio:9000</span>  <span class=\"comment\"># MinIO 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$&#123;DOCKER_VOLUME_DIRECTORY:-.&#125;/volumes/milvus:/var/lib/milvus</span>  <span class=\"comment\"># 数据卷挂载</span></span><br><span class=\"line\">    <span class=\"attr\">healthcheck:</span></span><br><span class=\"line\">      <span class=\"attr\">test:</span> [<span class=\"string\">&quot;CMD&quot;</span>, <span class=\"string\">&quot;curl&quot;</span>, <span class=\"string\">&quot;-f&quot;</span>, <span class=\"string\">&quot;http://localhost:9091/healthz&quot;</span>]  <span class=\"comment\"># 健康检查命令</span></span><br><span class=\"line\">      <span class=\"attr\">interval:</span> <span class=\"string\">30s</span>  <span class=\"comment\"># 检查间隔</span></span><br><span class=\"line\">      <span class=\"attr\">start_period:</span> <span class=\"string\">90s</span>  <span class=\"comment\"># 启动等待时间</span></span><br><span class=\"line\">      <span class=\"attr\">timeout:</span> <span class=\"string\">20s</span>  <span class=\"comment\"># 超时时间</span></span><br><span class=\"line\">      <span class=\"attr\">retries:</span> <span class=\"number\">3</span>  <span class=\"comment\"># 重试次数</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;19530:19530&quot;</span>  <span class=\"comment\"># 服务端口映射</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9091:9091&quot;</span>  <span class=\"comment\"># 管理端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;etcd&quot;</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;minio&quot;</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 配置 Milvus Dashboard 服务</span></span><br><span class=\"line\">  <span class=\"attr\">dashboard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">zilliz/attu:v2.5</span>  <span class=\"comment\"># 使用的镜像</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">milvus-dashboard</span>  <span class=\"comment\"># 容器名称</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MILVUS_URL:</span> <span class=\"string\">http://standalone:19530</span>  <span class=\"comment\"># Milvus 服务地址</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8000:3000&quot;</span>  <span class=\"comment\"># 端口映射</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">standalone</span>  <span class=\"comment\"># 依赖 Milvus 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">etcd</span>  <span class=\"comment\"># 依赖 etcd 服务</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">minio</span>  <span class=\"comment\"># 依赖 MinIO 服务</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义网络配置</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">nt_dev:</span></span><br><span class=\"line\">      <span class=\"attr\">external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看客户端，</strong> 输入地址 <code>http://localhost:8000/</code><br>进入如下界面：此时什么都不要填写，直接点【连接】按钮</p>\n<p><img src=\"/../../typora-user-images/image-20250429181131778.png\" alt=\"image-20250429181131778\"></p>\n<p>进入系统后</p>\n<p><img src=\"/../../typora-user-images/image-20250429181039571.png\" alt=\"image-20250429181039571\"></p>\n<p>创建用户：用户名：&#96;&#96;milvus<code>, 密码： </code>milvus-4321<code>(这里要和我们spring工程里的配置一致)，角色我们选</code>admin&#96;, </p>\n<p><img src=\"/../../typora-user-images/image-20250429181312813.png\" alt=\"image-20250429181312813\"></p>\n<p>修改依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.ai<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-ai-milvus-store-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>修改配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">uris:</span> <span class=\"string\">http://127.0.0.1:9200</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">model:</span> <span class=\"string\">deepseek-r1</span></span><br><span class=\"line\">      <span class=\"attr\">embedding:</span></span><br><span class=\"line\">        <span class=\"attr\">options:</span></span><br><span class=\"line\">          <span class=\"attr\">model:</span> <span class=\"string\">text-embedding-v2</span></span><br><span class=\"line\">    <span class=\"attr\">vectorstore:</span></span><br><span class=\"line\">      <span class=\"attr\">milvus:</span></span><br><span class=\"line\">        <span class=\"attr\">client:</span></span><br><span class=\"line\">          <span class=\"attr\">host:</span> <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">port:</span> <span class=\"number\">19530</span></span><br><span class=\"line\">          <span class=\"attr\">username:</span> <span class=\"string\">&quot;milvus&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">password:</span> <span class=\"string\">&quot;milvus-4321&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">databaseName:</span> <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">collectionName:</span> <span class=\"string\">&quot;vector_store&quot;</span></span><br><span class=\"line\">        <span class=\"attr\">embeddingDimension:</span> <span class=\"number\">1536</span></span><br><span class=\"line\">        <span class=\"attr\">indexType:</span> <span class=\"string\">IVF_FLAT</span></span><br><span class=\"line\">        <span class=\"attr\">metricType:</span> <span class=\"string\">COSINE</span></span><br><span class=\"line\">        <span class=\"attr\">initialize-schema:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中，我们设置了服务器端口、Redis连接信息、Milvus地址以及AI模型的相关参数。通过这些配置，项目能够正确连接到各个服务，并使用指定的模型进行对话处理和数据存储。</p>\n<p>使用加载接口</p>\n<p><img src=\"/../../typora-user-images/image-20250429183142516.png\" alt=\"image-20250429183142516\"></p>\n"},{"title":"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程","_content":"\n# Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n\n[toc]\n\n\n\n## 概述\n\n\n\n### **Tool Calling 的核心优势在于：**\n\n简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。\n增强扩展性：工具可以动态注册和调用，支持快速集成新服务。\n提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。\n在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。\n\n\n\n### 功能介绍\n\nSpring AI 的 Tool Calling 提供了以下核心功能：\n\n1. **工具注册与管理**：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。\n2. **工具调用链**：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。\n\n\n\n\n\n在本案例中，我们将实现以下功能：\n\n- 调用外部天气 API，获取指定城市的天气预报。\n- 调用内部 OA 服务，查询员工剩余假期和提交请假申请。\n- 通过 RAG 找到医生后，进行挂号\n- 挂号当日在医院附近找饭店\n- 对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。\n\n\n\n## 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **天气服务**：需要注册天气服务 API [账号申请](https://www.weatherapi.com/)\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**Tool calling 相关服务**\n\n1. **医院挂号服务**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"医院挂号的功能\")\npublic class HospitalService {\n\n    @Tool(description = \"挂号接口，帮患者在线挂号的接口\")\n    String registeInHos (@ToolParam(description = \"医生名称\", required = true) String docName,\n                         @ToolParam(description = \"时间\", required = true) String time ,\n                         @ToolParam(description = \"病情描述\", required = false) String desc,\n                         @ToolParam(description = \"患者ID\") String userId) {\n\n\n        String rtn1 = \"好的，已经为您挂了【\"+docName+\"】医生的号，就诊时间【\"+time+\"】，人数为【\"+desc+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您挂到医生【\"+docName+\"】的号，请稍后再试\";\n\n\n\n\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n\n}\n\n\n~~~\n\n2. 办公OA服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"OA相关服务，主要用于假期查询和请假\")\npublic class OaService {\n\n    private static int LEFT_DAYS = 5;\n    @Tool(description = \"员工剩余假期查询：查询员工还有几天的假期可以请\")\n    public String getCurrentDateTime() {\n        return \"目前，你还有 【\"+LEFT_DAYS+\"】 天的假期可以使用\";\n    }\n\n    @Tool(description = \"员工请假，需要传用户id(userId),和需要请假的天数 (days)\")\n    String askForLeave(@ToolParam(description = \"员工工号\") String userId ,@ToolParam(description = \"需要请假的天数\") String days) {\n        if(!StringUtils.isNumeric(days)){\n            throw new IllegalArgumentException(\"days参数必须是数字\");\n        }\n        int dayInt = Integer.parseInt(days);\n        String rtn1 = \"好的，员工【\"+userId+\"】,已经请假【\"+days+\"】天，请好好享受假期\";\n        String rtn2 = \"你的假期不足，无法请假\";\n        return dayInt>=LEFT_DAYS?rtn2:rtn1;\n    }\n}\n\n\n\n~~~\n\n\n\n3. 饭店查询服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\nimport java.util.Set;\n\n@Slf4j\n@Description(\"饭店查询和预定服务\")\npublic class RestaurantService {\n\n    private static int LEFT_DAYS = 5;\n    private static Set<String> RESTAURANT_NAME = Set.of( \"红龙餐厅\", \"金莲小馆\", \"樱花寿司吧\", \"丝绸之路餐馆\", \"意大利小酒馆\");\n\n    @Tool(description = \"查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃\")\n    public String queryRestaurantName(@ToolParam(description = \"当前位置\", required = true) String location) {\n        // 从 RESTAURANT_NAME 中随机选择\n        String rtn = RESTAURANT_NAME.stream().skip((int) (Math.random() * RESTAURANT_NAME.size())).limit(3).reduce((a, b) -> a + \"，\" + b).get();\n        return \"当前位置\" + location + \"，推荐 restaurantName：\" + rtn;\n    }\n\n    @Tool(description = \"预定餐厅，需要提供饭店名称，时间和人数\")\n    String bookRestaurant (@ToolParam(description = \"饭店名称\", required = true) String restName,\n                           @ToolParam(description = \"订餐时间\", required = true) String time ,\n                           @ToolParam(description = \"就餐人数\", required = true) String userNumber) {\n        String rtn1 = \"好的，已经为您预定了【\"+restName+\"】，就餐时间为【\"+time+\"】，人数为【\"+userNumber+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您预定【\"+restName+\"】，请稍后再试\";\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n}\n\n~~~\n\n\n\n **控制器（ToolCallController.java）**\n\n~~~\n  @GetMapping(value = \"/rag/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChat(@RequestParam String userId, @RequestParam String message) {\n        log.info(\"userId -> [{}], message --> [{}]\", userId, message);\n        String text = chatClient.prompt()\n                .user(message)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))\n                .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))\n                .call().content();\n        return text;\n    }\n~~~\n\n\n\n\n\n\n\n## 测试验证\n\n1、无工具调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n响应结果：\n\n![image-20250508161105090](../../typora-user-images/image-20250508161105090.png)\n\n**说明**：\n\n- 无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。\n- 这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心\n\n\n\n2、工具调用接口\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n\n\n![image-20250508161546610](../../typora-user-images/image-20250508161546610.png)\n\n继续调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店\n~~~\n\n\n\n![image-20250508162115569](../../typora-user-images/image-20250508162115569.png)\n\n\n\n**说明**：\n\n- 工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。\n- 这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性\n\n","source":"_posts/Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程.md","raw":"---\ntitle: Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n---\n\n# Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\n\n[toc]\n\n\n\n## 概述\n\n\n\n### **Tool Calling 的核心优势在于：**\n\n简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。\n增强扩展性：工具可以动态注册和调用，支持快速集成新服务。\n提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。\n在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。\n\n\n\n### 功能介绍\n\nSpring AI 的 Tool Calling 提供了以下核心功能：\n\n1. **工具注册与管理**：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。\n2. **工具调用链**：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。\n\n\n\n\n\n在本案例中，我们将实现以下功能：\n\n- 调用外部天气 API，获取指定城市的天气预报。\n- 调用内部 OA 服务，查询员工剩余假期和提交请假申请。\n- 通过 RAG 找到医生后，进行挂号\n- 挂号当日在医院附近找饭店\n- 对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。\n\n\n\n## 环境准备\n\n- **操作系统**：Windows 11\n- **Java 版本**：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库\n- **依赖管理**：Maven 3.8.3+\n- **天气服务**：需要注册天气服务 API [账号申请](https://www.weatherapi.com/)\n- **阿里云百炼平台**： [账号申请](https://bailian.console.aliyun.com/) 后，可以查看到以下模型的选择 [Deepseek接入](https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html)\n\n\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**Tool calling 相关服务**\n\n1. **医院挂号服务**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"医院挂号的功能\")\npublic class HospitalService {\n\n    @Tool(description = \"挂号接口，帮患者在线挂号的接口\")\n    String registeInHos (@ToolParam(description = \"医生名称\", required = true) String docName,\n                         @ToolParam(description = \"时间\", required = true) String time ,\n                         @ToolParam(description = \"病情描述\", required = false) String desc,\n                         @ToolParam(description = \"患者ID\") String userId) {\n\n\n        String rtn1 = \"好的，已经为您挂了【\"+docName+\"】医生的号，就诊时间【\"+time+\"】，人数为【\"+desc+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您挂到医生【\"+docName+\"】的号，请稍后再试\";\n\n\n\n\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n\n}\n\n\n~~~\n\n2. 办公OA服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\n@Slf4j\n@Description(\"OA相关服务，主要用于假期查询和请假\")\npublic class OaService {\n\n    private static int LEFT_DAYS = 5;\n    @Tool(description = \"员工剩余假期查询：查询员工还有几天的假期可以请\")\n    public String getCurrentDateTime() {\n        return \"目前，你还有 【\"+LEFT_DAYS+\"】 天的假期可以使用\";\n    }\n\n    @Tool(description = \"员工请假，需要传用户id(userId),和需要请假的天数 (days)\")\n    String askForLeave(@ToolParam(description = \"员工工号\") String userId ,@ToolParam(description = \"需要请假的天数\") String days) {\n        if(!StringUtils.isNumeric(days)){\n            throw new IllegalArgumentException(\"days参数必须是数字\");\n        }\n        int dayInt = Integer.parseInt(days);\n        String rtn1 = \"好的，员工【\"+userId+\"】,已经请假【\"+days+\"】天，请好好享受假期\";\n        String rtn2 = \"你的假期不足，无法请假\";\n        return dayInt>=LEFT_DAYS?rtn2:rtn1;\n    }\n}\n\n\n\n~~~\n\n\n\n3. 饭店查询服务\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.toolcalling;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.tool.annotation.Tool;\nimport org.springframework.ai.tool.annotation.ToolParam;\nimport org.springframework.context.annotation.Description;\n\nimport java.util.Set;\n\n@Slf4j\n@Description(\"饭店查询和预定服务\")\npublic class RestaurantService {\n\n    private static int LEFT_DAYS = 5;\n    private static Set<String> RESTAURANT_NAME = Set.of( \"红龙餐厅\", \"金莲小馆\", \"樱花寿司吧\", \"丝绸之路餐馆\", \"意大利小酒馆\");\n\n    @Tool(description = \"查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃\")\n    public String queryRestaurantName(@ToolParam(description = \"当前位置\", required = true) String location) {\n        // 从 RESTAURANT_NAME 中随机选择\n        String rtn = RESTAURANT_NAME.stream().skip((int) (Math.random() * RESTAURANT_NAME.size())).limit(3).reduce((a, b) -> a + \"，\" + b).get();\n        return \"当前位置\" + location + \"，推荐 restaurantName：\" + rtn;\n    }\n\n    @Tool(description = \"预定餐厅，需要提供饭店名称，时间和人数\")\n    String bookRestaurant (@ToolParam(description = \"饭店名称\", required = true) String restName,\n                           @ToolParam(description = \"订餐时间\", required = true) String time ,\n                           @ToolParam(description = \"就餐人数\", required = true) String userNumber) {\n        String rtn1 = \"好的，已经为您预定了【\"+restName+\"】，就餐时间为【\"+time+\"】，人数为【\"+userNumber+\"】\";\n        String rtn2 = \"抱歉，暂时无法为您预定【\"+restName+\"】，请稍后再试\";\n        return System.currentTimeMillis() % 4 == 0 ? rtn2 : rtn1;\n    }\n}\n\n~~~\n\n\n\n **控制器（ToolCallController.java）**\n\n~~~\n  @GetMapping(value = \"/rag/chat\", produces = \"text/plain; charset=UTF-8\")\n    public String ragChat(@RequestParam String userId, @RequestParam String message) {\n        log.info(\"userId -> [{}], message --> [{}]\", userId, message);\n        String text = chatClient.prompt()\n                .user(message)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))\n                .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))\n                .call().content();\n        return text;\n    }\n~~~\n\n\n\n\n\n\n\n## 测试验证\n\n1、无工具调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n响应结果：\n\n![image-20250508161105090](../../typora-user-images/image-20250508161105090.png)\n\n**说明**：\n\n- 无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。\n- 这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心\n\n\n\n2、工具调用接口\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，\n~~~\n\n\n\n![image-20250508161546610](../../typora-user-images/image-20250508161546610.png)\n\n继续调用\n\n~~~\nhttp://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店\n~~~\n\n\n\n![image-20250508162115569](../../typora-user-images/image-20250508162115569.png)\n\n\n\n**说明**：\n\n- 工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。\n- 这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性\n\n","slug":"Spring AI Alibaba/Spring AI Alibaba-04- Spring AI + + ToolCalling 智能对话应用开发全流程","published":1,"date":"2025-04-29T10:08:12.945Z","updated":"2025-06-04T10:49:56.730Z","_id":"cmbhtdwzv000eo6fy34oa1vqb","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\"></a>Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程</h1><p>[toc]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"Tool-Calling-的核心优势在于：\"><a href=\"#Tool-Calling-的核心优势在于：\" class=\"headerlink\" title=\"Tool Calling 的核心优势在于：\"></a><strong>Tool Calling 的核心优势在于：</strong></h3><p>简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。<br>增强扩展性：工具可以动态注册和调用，支持快速集成新服务。<br>提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。<br>在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Spring AI 的 Tool Calling 提供了以下核心功能：</p>\n<ol>\n<li><strong>工具注册与管理</strong>：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。</li>\n<li><strong>工具调用链</strong>：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。</li>\n</ol>\n<p>在本案例中，我们将实现以下功能：</p>\n<ul>\n<li>调用外部天气 API，获取指定城市的天气预报。</li>\n<li>调用内部 OA 服务，查询员工剩余假期和提交请假申请。</li>\n<li>通过 RAG 找到医生后，进行挂号</li>\n<li>挂号当日在医院附近找饭店</li>\n<li>对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>天气服务</strong>：需要注册天气服务 API <a href=\"https://www.weatherapi.com/\">账号申请</a></li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>Tool calling 相关服务</strong></p>\n<ol>\n<li><strong>医院挂号服务</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;医院挂号的功能&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HospitalService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;挂号接口，帮患者在线挂号的接口&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">registeInHos</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;医生名称&quot;, required = true)</span> String docName,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;病情描述&quot;, required = false)</span> String desc,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;患者ID&quot;)</span> String userId)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您挂了【&quot;</span>+docName+<span class=\"string\">&quot;】医生的号，就诊时间【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+desc+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您挂到医生【&quot;</span>+docName+<span class=\"string\">&quot;】的号，请稍后再试&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>办公OA服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;OA相关服务，主要用于假期查询和请假&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OaService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工剩余假期查询：查询员工还有几天的假期可以请&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCurrentDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;目前，你还有 【&quot;</span>+LEFT_DAYS+<span class=\"string\">&quot;】 天的假期可以使用&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工请假，需要传用户id(userId),和需要请假的天数 (days)&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">askForLeave</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;员工工号&quot;)</span> String userId ,<span class=\"meta\">@ToolParam(description = &quot;需要请假的天数&quot;)</span> String days)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(days))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;days参数必须是数字&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dayInt</span> <span class=\"operator\">=</span> Integer.parseInt(days);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，员工【&quot;</span>+userId+<span class=\"string\">&quot;】,已经请假【&quot;</span>+days+<span class=\"string\">&quot;】天，请好好享受假期&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你的假期不足，无法请假&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayInt&gt;=LEFT_DAYS?rtn2:rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>饭店查询服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;饭店查询和预定服务&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestaurantService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; RESTAURANT_NAME = Set.of( <span class=\"string\">&quot;红龙餐厅&quot;</span>, <span class=\"string\">&quot;金莲小馆&quot;</span>, <span class=\"string\">&quot;樱花寿司吧&quot;</span>, <span class=\"string\">&quot;丝绸之路餐馆&quot;</span>, <span class=\"string\">&quot;意大利小酒馆&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryRestaurantName</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;当前位置&quot;, required = true)</span> String location)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从 RESTAURANT_NAME 中随机选择</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn</span> <span class=\"operator\">=</span> RESTAURANT_NAME.stream().skip((<span class=\"type\">int</span>) (Math.random() * RESTAURANT_NAME.size())).limit(<span class=\"number\">3</span>).reduce((a, b) -&gt; a + <span class=\"string\">&quot;，&quot;</span> + b).get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;当前位置&quot;</span> + location + <span class=\"string\">&quot;，推荐 restaurantName：&quot;</span> + rtn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;预定餐厅，需要提供饭店名称，时间和人数&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">bookRestaurant</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;饭店名称&quot;, required = true)</span> String restName,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;订餐时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;就餐人数&quot;, required = true)</span> String userNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您预定了【&quot;</span>+restName+<span class=\"string\">&quot;】，就餐时间为【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+userNumber+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您预定【&quot;</span>+restName+<span class=\"string\">&quot;】，请稍后再试&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>控制器（ToolCallController.java）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(value = &quot;/rag/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span><br><span class=\"line\">  public String ragChat(@RequestParam String userId, @RequestParam String message) &#123;</span><br><span class=\"line\">      log.info(&quot;userId -&gt; [&#123;&#125;], message --&gt; [&#123;&#125;]&quot;, userId, message);</span><br><span class=\"line\">      String text = chatClient.prompt()</span><br><span class=\"line\">              .user(message)</span><br><span class=\"line\">              .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))</span><br><span class=\"line\">              .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))</span><br><span class=\"line\">              .call().content();</span><br><span class=\"line\">      return text;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>1、无工具调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n<p>响应结果：</p>\n<p><img src=\"/../../typora-user-images/image-20250508161105090.png\" alt=\"image-20250508161105090\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。</li>\n<li>这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心</li>\n</ul>\n<p>2、工具调用接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../../typora-user-images/image-20250508161546610.png\" alt=\"image-20250508161546610\"></p>\n<p>继续调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../../typora-user-images/image-20250508162115569.png\" alt=\"image-20250508162115569\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。</li>\n<li>这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\"><a href=\"#Spring-AI-Alibaba-04-Spring-AI-RAG-ToolCalling-智能对话应用开发全流程\" class=\"headerlink\" title=\"Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程\"></a>Spring AI Alibaba-04- Spring AI + RAG + ToolCalling 智能对话应用开发全流程</h1><p>[toc]</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"Tool-Calling-的核心优势在于：\"><a href=\"#Tool-Calling-的核心优势在于：\" class=\"headerlink\" title=\"Tool Calling 的核心优势在于：\"></a><strong>Tool Calling 的核心优势在于：</strong></h3><p>简化开发流程：通过统一的工具调用接口，开发者可以专注于业务逻辑，而无需处理繁琐的 HTTP 请求和响应解析。<br>增强扩展性：工具可以动态注册和调用，支持快速集成新服务。<br>提升用户体验：通过工具调用，应用可以实时获取外部数据（如天气、假期等），为用户提供了一个更智能、更全面的服务体验。<br>在本篇文章中，我们将通过一个具体的案例，展示如何使用 Spring AI 的 Tool Calling 功能来调用天气服务和 OA 服务，帮助开发者快速上手这一强大功能。</p>\n<h3 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h3><p>Spring AI 的 Tool Calling 提供了以下核心功能：</p>\n<ol>\n<li><strong>工具注册与管理</strong>：支持动态注册工具，并通过注解或配置文件定义工具的描述和参数。</li>\n<li><strong>工具调用链</strong>：通过方法链式调用，开发者可以轻松组合多个工具，实现复杂业务逻辑。</li>\n</ol>\n<p>在本案例中，我们将实现以下功能：</p>\n<ul>\n<li>调用外部天气 API，获取指定城市的天气预报。</li>\n<li>调用内部 OA 服务，查询员工剩余假期和提交请假申请。</li>\n<li>通过 RAG 找到医生后，进行挂号</li>\n<li>挂号当日在医院附近找饭店</li>\n<li>对比两种实现方式（无工具调用 vs 工具调用），展示 Tool Calling 的优势。</li>\n</ul>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><ul>\n<li><strong>操作系统</strong>：Windows 11</li>\n<li><strong>Java 版本</strong>：JDK 17+（请注意 Spring Boot 3.4.4 的兼容性）,Redis 、Elasticsearch、Milvus向量数据库</li>\n<li><strong>依赖管理</strong>：Maven 3.8.3+</li>\n<li><strong>天气服务</strong>：需要注册天气服务 API <a href=\"https://www.weatherapi.com/\">账号申请</a></li>\n<li><strong>阿里云百炼平台</strong>： <a href=\"https://bailian.console.aliyun.com/\">账号申请</a> 后，可以查看到以下模型的选择 <a href=\"https://bailian.console.aliyun.com/?tab=api#/api/?type=model&url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2868565.html\">Deepseek接入</a></li>\n</ul>\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>Tool calling 相关服务</strong></p>\n<ol>\n<li><strong>医院挂号服务</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;医院挂号的功能&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HospitalService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;挂号接口，帮患者在线挂号的接口&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">registeInHos</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;医生名称&quot;, required = true)</span> String docName,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;病情描述&quot;, required = false)</span> String desc,</span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"meta\">@ToolParam(description = &quot;患者ID&quot;)</span> String userId)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您挂了【&quot;</span>+docName+<span class=\"string\">&quot;】医生的号，就诊时间【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+desc+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您挂到医生【&quot;</span>+docName+<span class=\"string\">&quot;】的号，请稍后再试&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>办公OA服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;OA相关服务，主要用于假期查询和请假&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OaService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工剩余假期查询：查询员工还有几天的假期可以请&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getCurrentDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;目前，你还有 【&quot;</span>+LEFT_DAYS+<span class=\"string\">&quot;】 天的假期可以使用&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;员工请假，需要传用户id(userId),和需要请假的天数 (days)&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">askForLeave</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;员工工号&quot;)</span> String userId ,<span class=\"meta\">@ToolParam(description = &quot;需要请假的天数&quot;)</span> String days)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!StringUtils.isNumeric(days))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;days参数必须是数字&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dayInt</span> <span class=\"operator\">=</span> Integer.parseInt(days);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，员工【&quot;</span>+userId+<span class=\"string\">&quot;】,已经请假【&quot;</span>+days+<span class=\"string\">&quot;】天，请好好享受假期&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;你的假期不足，无法请假&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dayInt&gt;=LEFT_DAYS?rtn2:rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li>饭店查询服务</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.toolcalling;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.Tool;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.tool.annotation.ToolParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Description;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Description(&quot;饭店查询和预定服务&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RestaurantService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">LEFT_DAYS</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Set&lt;String&gt; RESTAURANT_NAME = Set.of( <span class=\"string\">&quot;红龙餐厅&quot;</span>, <span class=\"string\">&quot;金莲小馆&quot;</span>, <span class=\"string\">&quot;樱花寿司吧&quot;</span>, <span class=\"string\">&quot;丝绸之路餐馆&quot;</span>, <span class=\"string\">&quot;意大利小酒馆&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;查询不爱学习康复医院附近的饭店，餐厅，吃的，甜品，小吃&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">queryRestaurantName</span><span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;当前位置&quot;, required = true)</span> String location)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 从 RESTAURANT_NAME 中随机选择</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn</span> <span class=\"operator\">=</span> RESTAURANT_NAME.stream().skip((<span class=\"type\">int</span>) (Math.random() * RESTAURANT_NAME.size())).limit(<span class=\"number\">3</span>).reduce((a, b) -&gt; a + <span class=\"string\">&quot;，&quot;</span> + b).get();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;当前位置&quot;</span> + location + <span class=\"string\">&quot;，推荐 restaurantName：&quot;</span> + rtn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Tool(description = &quot;预定餐厅，需要提供饭店名称，时间和人数&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">bookRestaurant</span> <span class=\"params\">(<span class=\"meta\">@ToolParam(description = &quot;饭店名称&quot;, required = true)</span> String restName,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;订餐时间&quot;, required = true)</span> String time ,</span></span><br><span class=\"line\"><span class=\"params\">                           <span class=\"meta\">@ToolParam(description = &quot;就餐人数&quot;, required = true)</span> String userNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;好的，已经为您预定了【&quot;</span>+restName+<span class=\"string\">&quot;】，就餐时间为【&quot;</span>+time+<span class=\"string\">&quot;】，人数为【&quot;</span>+userNumber+<span class=\"string\">&quot;】&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rtn2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;抱歉，暂时无法为您预定【&quot;</span>+restName+<span class=\"string\">&quot;】，请稍后再试&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> System.currentTimeMillis() % <span class=\"number\">4</span> == <span class=\"number\">0</span> ? rtn2 : rtn1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p> <strong>控制器（ToolCallController.java）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(value = &quot;/rag/chat&quot;, produces = &quot;text/plain; charset=UTF-8&quot;)</span><br><span class=\"line\">  public String ragChat(@RequestParam String userId, @RequestParam String message) &#123;</span><br><span class=\"line\">      log.info(&quot;userId -&gt; [&#123;&#125;], message --&gt; [&#123;&#125;]&quot;, userId, message);</span><br><span class=\"line\">      String text = chatClient.prompt()</span><br><span class=\"line\">              .user(message)</span><br><span class=\"line\">              .advisors(new MessageChatMemoryAdvisor(chatMemory,userId,100))</span><br><span class=\"line\">              .tools(new OaService(), new RestaurantService(),new HospitalService(),new WeatherService(webClient))</span><br><span class=\"line\">              .call().content();</span><br><span class=\"line\">      return text;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"测试验证\"><a href=\"#测试验证\" class=\"headerlink\" title=\"测试验证\"></a>测试验证</h2><p>1、无工具调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/simpleChat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n<p>响应结果：</p>\n<p><img src=\"/../../typora-user-images/image-20250508161105090.png\" alt=\"image-20250508161105090\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>无工具调用接口只能基于预设的逻辑进行简单回复，无法调用外部服务获取实时数据。</li>\n<li>这种方式适合处理简单的聊天逻辑，但对于复杂需求（如实时天气查询和假期管理）显得力不从心</li>\n</ul>\n<p>2、工具调用接口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我计划明天从郑州到北京，帮我看一下这两个地方的天气，再帮我看一下我还剩几天假期，</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../../typora-user-images/image-20250508161546610.png\" alt=\"image-20250508161546610\"></p>\n<p>继续调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:8080/ai/v1/rag/chat?message=我需要修复牙齿缺损，帮我挂明天任意一位主任医师的号，然后帮我请2天假，并定一天的酒店</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/../../typora-user-images/image-20250508162115569.png\" alt=\"image-20250508162115569\"></p>\n<p><strong>说明</strong>：</p>\n<ul>\n<li>工具调用接口通过调用天气服务和 OA 服务，能够提供更全面和准确的响应。</li>\n<li>这种方式适合处理复杂的业务逻辑，但需要确保工具的稳定性和正确性</li>\n</ul>\n"},{"title":"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录","_content":"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n# Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。\n\n依赖：\n\n- **开发工具**：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）\n- **JDK**：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）\n- **阿里云百炼平台**：[阿里百炼平台](https://bailian.console.aliyun.com/)（提供强大的 AI 模型支持和训练服务）\n\n## 多轮对话\n\n\n\n**1、配置ChatMemory** \n\n```java\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    /**\n     * 创建一个基于内存的聊天模型\n     */\n    @Bean\n    public ChatMemory chatMemory() {\n        return new InMemoryChatMemory();\n    }\n}\n```\n\n**2、创建ChatMemoryController**\n\n这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦\n\n~~~java\n// 调用 chatClient.prompt() 方法开始构建聊天请求\nChatClient.CallResponseSpec response = chatClient.prompt()\n        // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n        .user(input)\n        // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n        .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n        // 调用 .call() 方法执行聊天请求并获取响应规格\n        .call();\n\n~~~\n\n\n\n全文：\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatMemoryController {\n    private final ChatClient chatClient;\n\n    // 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）\n    public ChatMemoryController(ChatModel chatModel, ChatMemory chatMemory) {\n        // 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor\n        this.chatClient = ChatClient.builder(chatModel)\n                .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory))\n                .build();\n    }\n\n    /**\n     * 多轮对话接口\n     * 每次调用时自动加载和更新该会话的历史记录。\n     */\n    @GetMapping(\"/multi/chat\")\n    public String chat(@RequestParam(value = \"userId\",defaultValue = \"10001\") String userId,\n                       @RequestParam(\"input\") String input) {\n        log.info(\"/multi/chat   input:  [{}]\", input);\n        // 调用 chatClient.prompt() 方法开始构建聊天请求\n        ChatClient.CallResponseSpec response = chatClient.prompt()\n                // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n                .user(input)\n                // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n                .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                        // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n                // 调用 .call() 方法执行聊天请求并获取响应规格\n                .call();\n        return response.content();\n    }\n}\n\n\n~~~\n\n\n\n\n\n通过以上代码，我们成功创建了一个对外接口：http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：\n\nuserId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。\ninput：用户输入的问题或消息。\n\n\n\n\n\n![image-20250419181524113](../../typora-user-images/image-20250419181524113.png)\n\n测试连续对话，继续问他们出生在什么地方\n\n![image-20250419181631076](../../typora-user-images/image-20250419181631076.png)\n\n\n\n**修改用户ID**\n\n修改用户ID 继续询问问题 lison002，看是否能够继续作答\n\n\n\n![image-20250419181745960](../../typora-user-images/image-20250419181745960.png)\n\n结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。\n\n\n\n\n\n## 对话持久-Redis\n\n\n\n**增加依赖**\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n    @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**编写核心控制器（ChatStorageMemoryController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatStorageMemoryController {\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private ChatMemory chatMemory;\n\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(value = \"/storage/chat\")\n    public String chat(@RequestParam String userId, @RequestParam String inputMsg) {\n\n        log.info(\"/redis/chat  userId: [{}],  input:  [{}]\", userId, inputMsg);\n\n        String text = chatClient.prompt()\n                .user(inputMsg)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory, userId, CHAT_HISTORY_SIZE))\n                .call()\n                .content();\n        log.info(\"text --> [{}]\", text);\n        return text;\n    }\n}\n\n~~~\n\n\n\n**application.yml**\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: xxxx\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n\n\n\n~~~\n\n\n\n**验证测试**\n\nhttp://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=中国近代3个名人\n\n**第一轮对话：**中国近代3个名人\n\n![image-20250422114322913](../../typora-user-images/image-20250422114322913.png)\n\n**第二轮对话：他们的出生地在哪**\n\n\n\n![image-20250422114422258](../../typora-user-images/image-20250422114422258.png)\n\n**第三轮对话：这些地方曾经出过哪些大的事件**\n\n![image-20250422114555482](../../typora-user-images/image-20250422114555482.png)\n\n\n\n **Redis 的存储**\n\n![image-20250422114642336](../../typora-user-images/image-20250422114642336.png)\n\n本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。","source":"_posts/Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录.md","raw":"---\ntitle: Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n---\nSpring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n# Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2025.04.19`\n\n[toc]\n\n本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。\n\n依赖：\n\n- **开发工具**：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）\n- **JDK**：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）\n- **阿里云百炼平台**：[阿里百炼平台](https://bailian.console.aliyun.com/)（提供强大的 AI 模型支持和训练服务）\n\n## 多轮对话\n\n\n\n**1、配置ChatMemory** \n\n```java\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    /**\n     * 创建一个基于内存的聊天模型\n     */\n    @Bean\n    public ChatMemory chatMemory() {\n        return new InMemoryChatMemory();\n    }\n}\n```\n\n**2、创建ChatMemoryController**\n\n这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦\n\n~~~java\n// 调用 chatClient.prompt() 方法开始构建聊天请求\nChatClient.CallResponseSpec response = chatClient.prompt()\n        // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n        .user(input)\n        // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n        .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n        // 调用 .call() 方法执行聊天请求并获取响应规格\n        .call();\n\n~~~\n\n\n\n全文：\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatMemoryController {\n    private final ChatClient chatClient;\n\n    // 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）\n    public ChatMemoryController(ChatModel chatModel, ChatMemory chatMemory) {\n        // 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor\n        this.chatClient = ChatClient.builder(chatModel)\n                .defaultAdvisors(new MessageChatMemoryAdvisor(chatMemory))\n                .build();\n    }\n\n    /**\n     * 多轮对话接口\n     * 每次调用时自动加载和更新该会话的历史记录。\n     */\n    @GetMapping(\"/multi/chat\")\n    public String chat(@RequestParam(value = \"userId\",defaultValue = \"10001\") String userId,\n                       @RequestParam(\"input\") String input) {\n        log.info(\"/multi/chat   input:  [{}]\", input);\n        // 调用 chatClient.prompt() 方法开始构建聊天请求\n        ChatClient.CallResponseSpec response = chatClient.prompt()\n                // 调用 .user(input) 方法，将用户输入作为聊天请求的内容\n                .user(input)\n                // 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数\n                .advisors(spec -> spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)\n                        // 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100\n                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, 100))\n                // 调用 .call() 方法执行聊天请求并获取响应规格\n                .call();\n        return response.content();\n    }\n}\n\n\n~~~\n\n\n\n\n\n通过以上代码，我们成功创建了一个对外接口：http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：\n\nuserId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。\ninput：用户输入的问题或消息。\n\n\n\n\n\n![image-20250419181524113](../../typora-user-images/image-20250419181524113.png)\n\n测试连续对话，继续问他们出生在什么地方\n\n![image-20250419181631076](../../typora-user-images/image-20250419181631076.png)\n\n\n\n**修改用户ID**\n\n修改用户ID 继续询问问题 lison002，看是否能够继续作答\n\n\n\n![image-20250419181745960](../../typora-user-images/image-20250419181745960.png)\n\n结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。\n\n\n\n\n\n## 对话持久-Redis\n\n\n\n**增加依赖**\n\n```\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n\n\n\n**Redis配置类（RedisConfig.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n\n@Configuration\npublic class RedisConfig {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.setHashKeySerializer(new StringRedisSerializer());\n        redisTemplate.setHashValueSerializer(new Jackson2JsonRedisSerializer<>(Object.class));\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n~~~\n\n>\n>\n>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。\n\n\n\n**创建消息实体（ChatEntity.java）**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config;\n\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.io.Serializable;\n\n@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class ChatEntity implements Serializable {\n    String chatId;\n    String type;\n    String text;\n}\n\n~~~\n\n>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。\n\n\n\n**实现 Redis 聊天记忆模型（ChatStorageMemory.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.messages.*;\nimport org.springframework.stereotype.Component;\nimport org.springframework.data.redis.core.RedisTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class ChatStorageMemory implements ChatMemory {\n\n    private static final String KEY_PREFIX = \"chat:history:\";\n    private final RedisTemplate<String, Object> redisTemplate;\n\n    public ChatStorageMemory(RedisTemplate<String, Object> redisTemplate) {\n        this.redisTemplate = redisTemplate;\n    }\n\n    @Override\n    public void add(String conversationId, List<Message> messages) {\n        String key = KEY_PREFIX + conversationId;\n        List<ChatEntity> listIn = new ArrayList<>();\n        for (Message msg : messages) {\n            String[] strs = msg.getText().split(\"</think>\");\n            String text = strs.length == 2 ? strs[1] : strs[0];\n\n            ChatEntity ent = new ChatEntity();\n            ent.setChatId(conversationId);\n            ent.setType(msg.getMessageType().getValue());\n            ent.setText(text);\n            listIn.add(ent);\n        }\n        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());\n        redisTemplate.expire(key, 30, TimeUnit.MINUTES);\n    }\n\n    @Override\n    public List<Message> get(String conversationId, int lastN) {\n        String key = KEY_PREFIX + conversationId;\n        Long size = redisTemplate.opsForList().size(key);\n        if (size == null || size == 0) {\n            return Collections.emptyList();\n        }\n\n        int start = Math.max(0, (int) (size - lastN));\n        List<Object> listTmp = redisTemplate.opsForList().range(key, start, -1);\n        List<Message> listOut = new ArrayList<>();\n        ObjectMapper objectMapper = new ObjectMapper();\n        for (Object obj : listTmp) {\n            ChatEntity chat = objectMapper.convertValue(obj, ChatEntity.class);\n            if (MessageType.USER.getValue().equals(chat.getType())) {\n                listOut.add(new UserMessage(chat.getText()));\n            } else if (MessageType.ASSISTANT.getValue().equals(chat.getType())) {\n                listOut.add(new AssistantMessage(chat.getText()));\n            } else if (MessageType.SYSTEM.getValue().equals(chat.getType())) {\n                listOut.add(new SystemMessage(chat.getText()));\n            }\n        }\n        return listOut;\n    }\n\n    @Override\n    public void clear(String conversationId) {\n        redisTemplate.delete(KEY_PREFIX + conversationId);\n    }\n}\n\n\n~~~\n\n实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。\n\n\n\n **SpringAiChatConfig 注入类**\n\n\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.config.chat;\n\n\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.ai.chat.memory.InMemoryChatMemory;\nimport org.springframework.ai.chat.model.ChatModel;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.core.RedisTemplate;\n\n@Configuration\npublic class SpringAiChatConfig {\n\n\n    @Autowired\n    private ChatModel chatModel;\n\n    @Bean\n    public ChatClient chatClient(ChatMemory chatMemory) {\n        return ChatClient.builder(chatModel)\n                .build();\n    }\n\n    @Bean\n    public ChatMemory chatMemory(RedisTemplate<String, Object> redisTemplate) {\n        return new ChatStorageMemory(redisTemplate);\n    }\n}\n\n~~~\n\n通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。\n\n**编写核心控制器（ChatStorageMemoryController.java）**\n\n~~~java\npackage com.lison.ai.spring_ai_alibaba_demo.controller;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ai.chat.client.ChatClient;\nimport org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;\nimport org.springframework.ai.chat.memory.ChatMemory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@Slf4j\n@RestController\n@RequestMapping(\"/ai/v1\")\npublic class ChatStorageMemoryController {\n    @Autowired\n    private ChatClient chatClient;\n    @Autowired\n    private ChatMemory chatMemory;\n\n    // 对话记忆长度\n    private final Integer CHAT_HISTORY_SIZE = 10;\n\n    @GetMapping(value = \"/storage/chat\")\n    public String chat(@RequestParam String userId, @RequestParam String inputMsg) {\n\n        log.info(\"/redis/chat  userId: [{}],  input:  [{}]\", userId, inputMsg);\n\n        String text = chatClient.prompt()\n                .user(inputMsg)\n                .advisors(new MessageChatMemoryAdvisor(chatMemory, userId, CHAT_HISTORY_SIZE))\n                .call()\n                .content();\n        log.info(\"text --> [{}]\", text);\n        return text;\n    }\n}\n\n~~~\n\n\n\n**application.yml**\n\n~~~yaml\nserver:\n  port: 8080\nspring:\n  application:\n    name: AI Demo\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: xxxx\n      database: 0\n  ai:\n    dashscope:\n      api-key: sk-xxxx\n\n\n\n~~~\n\n\n\n**验证测试**\n\nhttp://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=中国近代3个名人\n\n**第一轮对话：**中国近代3个名人\n\n![image-20250422114322913](../../typora-user-images/image-20250422114322913.png)\n\n**第二轮对话：他们的出生地在哪**\n\n\n\n![image-20250422114422258](../../typora-user-images/image-20250422114422258.png)\n\n**第三轮对话：这些地方曾经出过哪些大的事件**\n\n![image-20250422114555482](../../typora-user-images/image-20250422114555482.png)\n\n\n\n **Redis 的存储**\n\n![image-20250422114642336](../../typora-user-images/image-20250422114642336.png)\n\n本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。","slug":"Spring AI Alibaba/Spring AI Alibaba-02-多轮对话、持久化消息记录","published":1,"date":"2025-04-19T06:41:23.324Z","updated":"2025-06-04T10:49:56.741Z","_id":"cmbhtdwzw000fo6fyehjz8b1y","comments":1,"layout":"post","photos":[],"content":"<p>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</p>\n<h1 id=\"Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\"><a href=\"#Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\" class=\"headerlink\" title=\"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\"></a>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。</p>\n<p>依赖：</p>\n<ul>\n<li><strong>开发工具</strong>：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）</li>\n<li><strong>JDK</strong>：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）</li>\n<li><strong>阿里云百炼平台</strong>：<a href=\"https://bailian.console.aliyun.com/\">阿里百炼平台</a>（提供强大的 AI 模型支持和训练服务）</li>\n</ul>\n<h2 id=\"多轮对话\"><a href=\"#多轮对话\" class=\"headerlink\" title=\"多轮对话\"></a>多轮对话</h2><p><strong>1、配置ChatMemory</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个基于内存的聊天模型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、创建ChatMemoryController</strong></p>\n<p>这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">        .user(input)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">        .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">        .call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>全文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatMemoryController</span><span class=\"params\">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = ChatClient.builder(chatModel)</span><br><span class=\"line\">                .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多轮对话接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次调用时自动加载和更新该会话的历史记录。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/multi/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;userId&quot;,defaultValue = &quot;10001&quot;)</span> String userId,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;input&quot;)</span> String input)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/multi/chat   input:  [&#123;&#125;]&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">        ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">                .user(input)</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">                .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                        <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">                .call();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过以上代码，我们成功创建了一个对外接口：<a href=\"http://127.0.0.1:8080/ai/v1/multi/chat%E3%80%82%E8%AF%A5%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\">http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：</a></p>\n<p>userId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。<br>input：用户输入的问题或消息。</p>\n<p><img src=\"/../../typora-user-images/image-20250419181524113.png\" alt=\"image-20250419181524113\"></p>\n<p>测试连续对话，继续问他们出生在什么地方</p>\n<p><img src=\"/../../typora-user-images/image-20250419181631076.png\" alt=\"image-20250419181631076\"></p>\n<p><strong>修改用户ID</strong></p>\n<p>修改用户ID 继续询问问题 lison002，看是否能够继续作答</p>\n<p><img src=\"/../../typora-user-images/image-20250419181745960.png\" alt=\"image-20250419181745960\"></p>\n<p>结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。</p>\n<h2 id=\"对话持久-Redis\"><a href=\"#对话持久-Redis\" class=\"headerlink\" title=\"对话持久-Redis\"></a>对话持久-Redis</h2><p><strong>增加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>编写核心控制器（ChatStorageMemoryController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/storage/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/redis/chat  userId: [&#123;&#125;],  input:  [&#123;&#125;]&quot;</span>, userId, inputMsg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                .user(inputMsg)</span><br><span class=\"line\">                .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, userId, CHAT_HISTORY_SIZE))</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text --&gt; [&#123;&#125;]&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>验证测试</strong></p>\n<p><a href=\"http://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A33%E4%B8%AA%E5%90%8D%E4%BA%BA\">http://localhost:8080/ai/v1/storage/chat?userId=lison001&amp;inputMsg=中国近代3个名人</a></p>\n<p>**第一轮对话：**中国近代3个名人</p>\n<p><img src=\"/../../typora-user-images/image-20250422114322913.png\" alt=\"image-20250422114322913\"></p>\n<p><strong>第二轮对话：他们的出生地在哪</strong></p>\n<p><img src=\"/../../typora-user-images/image-20250422114422258.png\" alt=\"image-20250422114422258\"></p>\n<p><strong>第三轮对话：这些地方曾经出过哪些大的事件</strong></p>\n<p><img src=\"/../../typora-user-images/image-20250422114555482.png\" alt=\"image-20250422114555482\"></p>\n<p> <strong>Redis 的存储</strong></p>\n<p><img src=\"/../../typora-user-images/image-20250422114642336.png\" alt=\"image-20250422114642336\"></p>\n<p>本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。</p>\n","excerpt":"","more":"<p>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</p>\n<h1 id=\"Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\"><a href=\"#Spring-AI-Alibaba-02-多轮对话记忆、持久化消息记录\" class=\"headerlink\" title=\"Spring AI Alibaba-02-多轮对话记忆、持久化消息记录\"></a>Spring AI Alibaba-02-多轮对话记忆、持久化消息记录</h1><p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2025.04.19</code></p>\n<p>[toc]</p>\n<p>本次主要聚焦于多轮对话功能的实现，后续会逐步增加更多实用内容，也欢迎大家提出宝贵意见，共同完善。</p>\n<p>依赖：</p>\n<ul>\n<li><strong>开发工具</strong>：IntelliJ IDEA（推荐使用最新版本，以获得更好的兼容性和功能支持）</li>\n<li><strong>JDK</strong>：17 及以上版本（可利用 IDEA 自带的 JDK，安装便捷且配置简单）</li>\n<li><strong>阿里云百炼平台</strong>：<a href=\"https://bailian.console.aliyun.com/\">阿里百炼平台</a>（提供强大的 AI 模型支持和训练服务）</li>\n</ul>\n<h2 id=\"多轮对话\"><a href=\"#多轮对话\" class=\"headerlink\" title=\"多轮对话\"></a>多轮对话</h2><p><strong>1、配置ChatMemory</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建一个基于内存的聊天模型</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryChatMemory</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、创建ChatMemoryController</strong></p>\n<p>这里面注意这里可以设置用户ID等信息，咱们也就可以根据这个ID设置用户ID，以及会话ID，确保上下文连贯啦</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">        .user(input)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">        .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">        <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">        .call();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>全文：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.AbstractChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ChatClient chatClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 构造器中注入 ChatModel（底层与 AI 模型交互）和 ChatMemory（对话记忆实现）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatMemoryController</span><span class=\"params\">(ChatModel chatModel, ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 ChatClient.Builder 构建 ChatClient，同时加入对话记忆 Advisor</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.chatClient = ChatClient.builder(chatModel)</span><br><span class=\"line\">                .defaultAdvisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory))</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多轮对话接口</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次调用时自动加载和更新该会话的历史记录。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/multi/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;userId&quot;,defaultValue = &quot;10001&quot;)</span> String userId,</span></span><br><span class=\"line\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;input&quot;)</span> String input)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/multi/chat   input:  [&#123;&#125;]&quot;</span>, input);</span><br><span class=\"line\">        <span class=\"comment\">// 调用 chatClient.prompt() 方法开始构建聊天请求</span></span><br><span class=\"line\">        ChatClient.<span class=\"type\">CallResponseSpec</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .user(input) 方法，将用户输入作为聊天请求的内容</span></span><br><span class=\"line\">                .user(input)</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .advisors 方法，传入一个 Lambda 表达式，配置聊天顾问的参数</span></span><br><span class=\"line\">                .advisors(spec -&gt; spec.param(AbstractChatMemoryAdvisor.CHAT_MEMORY_CONVERSATION_ID_KEY, userId)</span><br><span class=\"line\">                        <span class=\"comment\">// 继续在 Lambda 表达式中调用 .param 方法，设置聊天记忆的检索大小为 100</span></span><br><span class=\"line\">                        .param(AbstractChatMemoryAdvisor.CHAT_MEMORY_RETRIEVE_SIZE_KEY, <span class=\"number\">100</span>))</span><br><span class=\"line\">                <span class=\"comment\">// 调用 .call() 方法执行聊天请求并获取响应规格</span></span><br><span class=\"line\">                .call();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.content();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>通过以上代码，我们成功创建了一个对外接口：<a href=\"http://127.0.0.1:8080/ai/v1/multi/chat%E3%80%82%E8%AF%A5%E6%8E%A5%E5%8F%A3%E6%8E%A5%E5%8F%97%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A\">http://127.0.0.1:8080/ai/v1/multi/chat。该接口接受两个参数：</a></p>\n<p>userId：代表用户 ID，在实际项目中，建议将其设置为用户 ID 与会话 ID 的组合，以便更精准地区分不同用户的对话。<br>input：用户输入的问题或消息。</p>\n<p><img src=\"/../../typora-user-images/image-20250419181524113.png\" alt=\"image-20250419181524113\"></p>\n<p>测试连续对话，继续问他们出生在什么地方</p>\n<p><img src=\"/../../typora-user-images/image-20250419181631076.png\" alt=\"image-20250419181631076\"></p>\n<p><strong>修改用户ID</strong></p>\n<p>修改用户ID 继续询问问题 lison002，看是否能够继续作答</p>\n<p><img src=\"/../../typora-user-images/image-20250419181745960.png\" alt=\"image-20250419181745960\"></p>\n<p>结果显示，AI 并未出现“串线”现象，对于新用户的提问，它无法获取之前用户的对话信息，只能要求我们提供更详细的资料，这证明了我们的多轮对话系统在不同用户间是相互独立且安全的。</p>\n<h2 id=\"对话持久-Redis\"><a href=\"#对话持久-Redis\" class=\"headerlink\" title=\"对话持久-Redis\"></a>对话持久-Redis</h2><p><strong>增加依赖</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Redis配置类（RedisConfig.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory factory)</span> &#123;</span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">        redisTemplate.setConnectionFactory(factory);</span><br><span class=\"line\">        redisTemplate.setKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.setHashKeySerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>());</span><br><span class=\"line\">        redisTemplate.setHashValueSerializer(<span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class));</span><br><span class=\"line\">        redisTemplate.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置了 RedisTemplate，使用 JSON 序列化器将对象存储为 JSON 格式，方便后续的存储和读取。</p>\n</blockquote>\n<p><strong>创建消息实体（ChatEntity.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.AllArgsConstructor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Data;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.NoArgsConstructor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@AllArgsConstructor</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatEntity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    String chatId;</span><br><span class=\"line\">    String type;</span><br><span class=\"line\">    String text;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定义了消息实体类，用于存储对话的 ID、类型和内容，实现了序列化接口以便在 Redis 中存储。</p>\n</blockquote>\n<p><strong>实现 Redis 聊天记忆模型（ChatStorageMemory.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.messages.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ChatMemory</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">KEY_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;chat:history:&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ChatStorageMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.redisTemplate = redisTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(String conversationId, List&lt;Message&gt; messages)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        List&lt;ChatEntity&gt; listIn = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Message msg : messages) &#123;</span><br><span class=\"line\">            String[] strs = msg.getText().split(<span class=\"string\">&quot;&lt;/think&gt;&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> strs.length == <span class=\"number\">2</span> ? strs[<span class=\"number\">1</span>] : strs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">ent</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatEntity</span>();</span><br><span class=\"line\">            ent.setChatId(conversationId);</span><br><span class=\"line\">            ent.setType(msg.getMessageType().getValue());</span><br><span class=\"line\">            ent.setText(text);</span><br><span class=\"line\">            listIn.add(ent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redisTemplate.opsForList().rightPushAll(key, listIn.toArray());</span><br><span class=\"line\">        redisTemplate.expire(key, <span class=\"number\">30</span>, TimeUnit.MINUTES);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Message&gt; <span class=\"title function_\">get</span><span class=\"params\">(String conversationId, <span class=\"type\">int</span> lastN)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> KEY_PREFIX + conversationId;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> redisTemplate.opsForList().size(key);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"literal\">null</span> || size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Collections.emptyList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> Math.max(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) (size - lastN));</span><br><span class=\"line\">        List&lt;Object&gt; listTmp = redisTemplate.opsForList().range(key, start, -<span class=\"number\">1</span>);</span><br><span class=\"line\">        List&lt;Message&gt; listOut = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object obj : listTmp) &#123;</span><br><span class=\"line\">            <span class=\"type\">ChatEntity</span> <span class=\"variable\">chat</span> <span class=\"operator\">=</span> objectMapper.convertValue(obj, ChatEntity.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (MessageType.USER.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">UserMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.ASSISTANT.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">AssistantMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MessageType.SYSTEM.getValue().equals(chat.getType())) &#123;</span><br><span class=\"line\">                listOut.add(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemMessage</span>(chat.getText()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> listOut;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">(String conversationId)</span> &#123;</span><br><span class=\"line\">        redisTemplate.delete(KEY_PREFIX + conversationId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>实现了 Redis 中的对话记忆功能，包括添加对话、获取对话历史和清除对话记录。</p>\n<p> <strong>SpringAiChatConfig 注入类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.config.chat;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.InMemoryChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.model.ChatModel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringAiChatConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatModel chatModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatClient <span class=\"title function_\">chatClient</span><span class=\"params\">(ChatMemory chatMemory)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ChatClient.builder(chatModel)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChatMemory <span class=\"title function_\">chatMemory</span><span class=\"params\">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChatStorageMemory</span>(redisTemplate);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过 Spring 的依赖注入机制，将 Redis 聊天记忆模型与 ChatClient 进行绑定，确保对话记忆功能能够正常工作。</p>\n<p><strong>编写核心控制器（ChatStorageMemoryController.java）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.ai.spring_ai_alibaba_demo.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.ChatClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ai.chat.memory.ChatMemory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/ai/v1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChatStorageMemoryController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatClient chatClient;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ChatMemory chatMemory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对话记忆长度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Integer</span> <span class=\"variable\">CHAT_HISTORY_SIZE</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/storage/chat&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">chat</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String userId, <span class=\"meta\">@RequestParam</span> String inputMsg)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;/redis/chat  userId: [&#123;&#125;],  input:  [&#123;&#125;]&quot;</span>, userId, inputMsg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">text</span> <span class=\"operator\">=</span> chatClient.prompt()</span><br><span class=\"line\">                .user(inputMsg)</span><br><span class=\"line\">                .advisors(<span class=\"keyword\">new</span> <span class=\"title class_\">MessageChatMemoryAdvisor</span>(chatMemory, userId, CHAT_HISTORY_SIZE))</span><br><span class=\"line\">                .call()</span><br><span class=\"line\">                .content();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;text --&gt; [&#123;&#125;]&quot;</span>, text);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>application.yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">AI</span> <span class=\"string\">Demo</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">      <span class=\"attr\">database:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">ai:</span></span><br><span class=\"line\">    <span class=\"attr\">dashscope:</span></span><br><span class=\"line\">      <span class=\"attr\">api-key:</span> <span class=\"string\">sk-xxxx</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>验证测试</strong></p>\n<p><a href=\"http://localhost:8080/ai/v1/storage/chat?userId=lison001&inputMsg=%E4%B8%AD%E5%9B%BD%E8%BF%91%E4%BB%A33%E4%B8%AA%E5%90%8D%E4%BA%BA\">http://localhost:8080/ai/v1/storage/chat?userId=lison001&amp;inputMsg=中国近代3个名人</a></p>\n<p>**第一轮对话：**中国近代3个名人</p>\n<p><img src=\"/../../typora-user-images/image-20250422114322913.png\" alt=\"image-20250422114322913\"></p>\n<p><strong>第二轮对话：他们的出生地在哪</strong></p>\n<p><img src=\"/../../typora-user-images/image-20250422114422258.png\" alt=\"image-20250422114422258\"></p>\n<p><strong>第三轮对话：这些地方曾经出过哪些大的事件</strong></p>\n<p><img src=\"/../../typora-user-images/image-20250422114555482.png\" alt=\"image-20250422114555482\"></p>\n<p> <strong>Redis 的存储</strong></p>\n<p><img src=\"/../../typora-user-images/image-20250422114642336.png\" alt=\"image-20250422114642336\"></p>\n<p>本次分享“可持久化的多轮对话”，以 Redis 为示例，实现对话记录的长期保存。当然，这一功能也可以拓展至数据库等其他存储方式。</p>\n"},{"_content":"\n\n\n\nhttps://blog.csdn.net/ruipeng250/category_10277351.html\n\n\n\n\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.05.07`\n\n# Spring Cloud Alibaba-01-微服务介绍\n\n[toc]\n\n\n\n## 微服务简介\n\n### **架构的演变**\n\n随着互联网的发展，网站应用的规模也不断的扩大，进而导致系统架构也在不断的进行变化，从互联网早起到现在，系统架构大体经历了下面几个过程：\n\n**单体应用架构：**\n把所有功能都集中在一个应用中，统一部署，开发成本、部署成本和维护成本低，我们会把它们做成一个web项目，然后部署到一台tomcat服务器上。\n\n![image-20230923144124237](typora-user-images/image-20230923144124237.png)\n\n* 优点：项目架构简单，适合用户量少的项目，开发成本低，项目部署在一个节点上，维护方便。\n* 缺点：功能集中在一个工程中，对于大型项目比一开发和维护，项目模块紧耦合，单点容错率低，无法对不同的模块功能进行针对性的优化和水平拓展\n\n**垂直应用架构：**\n所谓垂直应用架构，其实就是把之前的单体应用拆分成多个应用，以提升效率，比如电商系统可以拆分成：电商系统、后台系统、CMS系统\n\n![image-20230923144238782](typora-user-images/image-20230923144238782.png)\n\n* 优点：项目拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平拓展，同时不同的系统之间不会互相影响，提高容错率\n* 缺点：系统之间互相存在，无法进行相互调用，系统之间互相独立，会造成一部分功能的冗余\n\n**分布式架构**\n\n随着业务的增加，在垂直应用架构中冗余的业务代码越来越多，就需要将冗余的部分抽取出来，统一做成业务层单独处理，变成一个单独的服务，控制层调用不同的业务层服务就能完成不同的业务功能，具体表现就是一个项目拆分成表现层和服务层两个部分，服务层中包含业务逻辑，表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，这就是分布式架构。\n\n![image-20230923144315232](typora-user-images/image-20230923144315232.png)\n\n* 优点：抽取公共的功能作为服务层，提高代码复用行\n* 缺点：系统间耦合度变高，调用关系错综复杂，难以维护。\n\n**SOA架构**\n\n分布式架构中的缺点就是调用复杂，而且当服务越来越多，或者当某一个服务压力过大需要水平拓展和负载均衡，对于资源调度和治理就需要用到治理中心SOA（Service Oriented Architecture）为核心来解决，同时治理中心还可以帮助我们解决服务之间协议不同的问题。\n\n![image-20230923144347556](typora-user-images/image-20230923144347556.png)\n\n- 优点：使用治理中心（ESB\\dubbo）解决了服务见调用关系的自动调节\n- 缺点：服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩），服务关系复杂，运维、测试部署困难\n\n**微服务架构**\n\n微服务架构在某种程度上面架构SOA继续发展的下一步，它更加强调服务的“彻底拆分”，目的就是提高效率，微服务架构中，每个服务必须独立部署同时互不影响，微服务架构更加轻巧，轻量级。\n\n![image-20230923144414595](typora-user-images/image-20230923144414595.png)\n\n- 优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展\n- 缺点：分布式系统开发的技术成本高（容错、分布式事务等），复杂性更高，每个微服务进行分布式独立部署，当进行模块调用的时候，分布式将会变得更加麻烦\n\n\n\n### 微服务架构与SOA架构的不同\n\n1. 微服务架构比SOA架构会更加的精细，让专业的人去做专业的。\n2. 目的是提高效率每个服务之间互不影响，微服务架构中，每个服务需要独立部署\n3. SOA架构中可能数据库存储会发生共享，微服务强调每个服务都是单独数据库，保证每个服务之间互不影响。\n4. 微服务项目架构比SOA架构更加适合与互联网公司迅捷开发、快速迭代版本，因为粒度非常精细。\n\n### 微服务架构的常见问题\n\n一旦采用微服务系统架构，就势必会遇到这样几个问题:\n\n这么多小服务，如何管理他们?(服务治理 注册中心[服务注册 发现 剔除])\n这么多小服务，他们之间如何通讯?(restful rpc)\n这么多小服务，客户端怎么访问他们?(网关)\n这么多小服务，一旦出现问题了，应该如何自处理?(容错)\n这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)\n对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。\n\n![image-20230923144526897](typora-user-images/image-20230923144526897.png)\n\n\n\n### 微服务架构的常见概念\n\n#### 服务治理\n\n服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。\n\n服务注册:服务实例将自身服务信息注册到注册中心。\n\n服务发现:服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。\n\n服务剔除:服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。\n\n![image-20230923144634136](typora-user-images/image-20230923144634136.png)\n\n#### 服务调用\n\n在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于\nHTTP的RESTful接口以及基于TCP的RPC协议。\n\n* **REST(Representational State Transfer)**\n  这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议\n\n* **RPC(Remote Promote Call)**\n  一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服 务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使 用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。\n  区别与联系\n\n| 比较项   | RESTful    | RPC         |\n| -------- | ---------- | ----------- |\n| 通讯协议 | HTTP       | 一般使用TCP |\n| 性能     | 略低       | 较高        |\n| 灵活度   | 高         | 低          |\n| 应用     | 微服务架构 | SOA架构     |\n\n#### 服务网关\n\n随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现:\n\n* 客户端需要调用不同的url地址，增加难度\n* 在一定的场景下，存在跨域请求的问题\n* 每个微服务都需要进行单独的身份认证针\n\n\n\n对这些问题，API网关顺势而生。\n\nAPI网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的 基本功能有:统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问 题。\n\n![image-20230923144953818](typora-user-images/image-20230923144953818.png)\n\n#### 服务容错\n\n在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错话，极有可能会造成一连串的服务不可用，这就是雪崩效应.\n\n我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是:\n\n- 不被外界环境影响\n- 不被上游请求压垮\n- 不被下游响应拖垮\n\n\n\n![image-20230923145029314](typora-user-images/image-20230923145029314.png)\n\n\n\n#### 链路追踪\n\n随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪\n\n\n\n### 微服务架构的常见解决方案\n\n#### ServiceComb\n\n官方网址：https://servicecomb.apache.org/cn/\n\n![image-20230923145717673](typora-user-images/image-20230923145717673.png)\n\nApache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache 微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。\n\n\n\n#### SpringCloud\n\n官方网址：https://spring.io/projects/spring-cloud/\n\n![image-20230923145922760](typora-user-images/image-20230923145922760.png)\n\n\n\nSpring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。\n\nSpring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包\n\n\n\n#### SpringCloud Alibaba\n\n\n\n官方网址： https://spring.io/projects/spring-cloud-alibaba\n\n![image-20230923150103329](typora-user-images/image-20230923150103329.png)\n\nSpring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。\n\n## Spring Cloud Alibaba 主要功能与组件\n\nSpring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。\n\n依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。\n\n![image-20230923145122020](typora-user-images/image-20230923145122020.png)\n\n### **主要功能**\n\n* 服务限流降级 ：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。\n* 服务注册与发现 ：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。\n* 分布式配置管理 ：支持分布式系统中的外部化配置，配置更改时自动刷新。\n* 消息驱动能力 ：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。\n* 分布式事务 ：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。\n* 阿里云对象存储 ：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n* 分布式任务调度 ：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。\n* 阿里云短信服务 ：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。\n\n### 组件\n\n**[Sentinel] ：**阿里巴巴源产品，把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。\n\n**[Nacos] ：**一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\n\n**[RocketMQ] ：**一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。\n\n**[Dubbo] ：**Apache Dubbo™ 是一款高性能 Java RPC 框架。\n\n**[Seata] ：**阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。\n\n**[Alibaba Cloud OSS] :** 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n\n**[Alibaba Cloud SchedulerX]**: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。\n\n**[Alibaba Cloud SMS] :** 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。\n\n\n\n\n\n![img](typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png)\n\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-01-微服务介绍.md","raw":"\n\n\n\nhttps://blog.csdn.net/ruipeng250/category_10277351.html\n\n\n\n\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.05.07`\n\n# Spring Cloud Alibaba-01-微服务介绍\n\n[toc]\n\n\n\n## 微服务简介\n\n### **架构的演变**\n\n随着互联网的发展，网站应用的规模也不断的扩大，进而导致系统架构也在不断的进行变化，从互联网早起到现在，系统架构大体经历了下面几个过程：\n\n**单体应用架构：**\n把所有功能都集中在一个应用中，统一部署，开发成本、部署成本和维护成本低，我们会把它们做成一个web项目，然后部署到一台tomcat服务器上。\n\n![image-20230923144124237](typora-user-images/image-20230923144124237.png)\n\n* 优点：项目架构简单，适合用户量少的项目，开发成本低，项目部署在一个节点上，维护方便。\n* 缺点：功能集中在一个工程中，对于大型项目比一开发和维护，项目模块紧耦合，单点容错率低，无法对不同的模块功能进行针对性的优化和水平拓展\n\n**垂直应用架构：**\n所谓垂直应用架构，其实就是把之前的单体应用拆分成多个应用，以提升效率，比如电商系统可以拆分成：电商系统、后台系统、CMS系统\n\n![image-20230923144238782](typora-user-images/image-20230923144238782.png)\n\n* 优点：项目拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平拓展，同时不同的系统之间不会互相影响，提高容错率\n* 缺点：系统之间互相存在，无法进行相互调用，系统之间互相独立，会造成一部分功能的冗余\n\n**分布式架构**\n\n随着业务的增加，在垂直应用架构中冗余的业务代码越来越多，就需要将冗余的部分抽取出来，统一做成业务层单独处理，变成一个单独的服务，控制层调用不同的业务层服务就能完成不同的业务功能，具体表现就是一个项目拆分成表现层和服务层两个部分，服务层中包含业务逻辑，表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，这就是分布式架构。\n\n![image-20230923144315232](typora-user-images/image-20230923144315232.png)\n\n* 优点：抽取公共的功能作为服务层，提高代码复用行\n* 缺点：系统间耦合度变高，调用关系错综复杂，难以维护。\n\n**SOA架构**\n\n分布式架构中的缺点就是调用复杂，而且当服务越来越多，或者当某一个服务压力过大需要水平拓展和负载均衡，对于资源调度和治理就需要用到治理中心SOA（Service Oriented Architecture）为核心来解决，同时治理中心还可以帮助我们解决服务之间协议不同的问题。\n\n![image-20230923144347556](typora-user-images/image-20230923144347556.png)\n\n- 优点：使用治理中心（ESB\\dubbo）解决了服务见调用关系的自动调节\n- 缺点：服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩），服务关系复杂，运维、测试部署困难\n\n**微服务架构**\n\n微服务架构在某种程度上面架构SOA继续发展的下一步，它更加强调服务的“彻底拆分”，目的就是提高效率，微服务架构中，每个服务必须独立部署同时互不影响，微服务架构更加轻巧，轻量级。\n\n![image-20230923144414595](typora-user-images/image-20230923144414595.png)\n\n- 优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展\n- 缺点：分布式系统开发的技术成本高（容错、分布式事务等），复杂性更高，每个微服务进行分布式独立部署，当进行模块调用的时候，分布式将会变得更加麻烦\n\n\n\n### 微服务架构与SOA架构的不同\n\n1. 微服务架构比SOA架构会更加的精细，让专业的人去做专业的。\n2. 目的是提高效率每个服务之间互不影响，微服务架构中，每个服务需要独立部署\n3. SOA架构中可能数据库存储会发生共享，微服务强调每个服务都是单独数据库，保证每个服务之间互不影响。\n4. 微服务项目架构比SOA架构更加适合与互联网公司迅捷开发、快速迭代版本，因为粒度非常精细。\n\n### 微服务架构的常见问题\n\n一旦采用微服务系统架构，就势必会遇到这样几个问题:\n\n这么多小服务，如何管理他们?(服务治理 注册中心[服务注册 发现 剔除])\n这么多小服务，他们之间如何通讯?(restful rpc)\n这么多小服务，客户端怎么访问他们?(网关)\n这么多小服务，一旦出现问题了，应该如何自处理?(容错)\n这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)\n对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。\n\n![image-20230923144526897](typora-user-images/image-20230923144526897.png)\n\n\n\n### 微服务架构的常见概念\n\n#### 服务治理\n\n服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。\n\n服务注册:服务实例将自身服务信息注册到注册中心。\n\n服务发现:服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。\n\n服务剔除:服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。\n\n![image-20230923144634136](typora-user-images/image-20230923144634136.png)\n\n#### 服务调用\n\n在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于\nHTTP的RESTful接口以及基于TCP的RPC协议。\n\n* **REST(Representational State Transfer)**\n  这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议\n\n* **RPC(Remote Promote Call)**\n  一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服 务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使 用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。\n  区别与联系\n\n| 比较项   | RESTful    | RPC         |\n| -------- | ---------- | ----------- |\n| 通讯协议 | HTTP       | 一般使用TCP |\n| 性能     | 略低       | 较高        |\n| 灵活度   | 高         | 低          |\n| 应用     | 微服务架构 | SOA架构     |\n\n#### 服务网关\n\n随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现:\n\n* 客户端需要调用不同的url地址，增加难度\n* 在一定的场景下，存在跨域请求的问题\n* 每个微服务都需要进行单独的身份认证针\n\n\n\n对这些问题，API网关顺势而生。\n\nAPI网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的 基本功能有:统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问 题。\n\n![image-20230923144953818](typora-user-images/image-20230923144953818.png)\n\n#### 服务容错\n\n在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错话，极有可能会造成一连串的服务不可用，这就是雪崩效应.\n\n我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是:\n\n- 不被外界环境影响\n- 不被上游请求压垮\n- 不被下游响应拖垮\n\n\n\n![image-20230923145029314](typora-user-images/image-20230923145029314.png)\n\n\n\n#### 链路追踪\n\n随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪\n\n\n\n### 微服务架构的常见解决方案\n\n#### ServiceComb\n\n官方网址：https://servicecomb.apache.org/cn/\n\n![image-20230923145717673](typora-user-images/image-20230923145717673.png)\n\nApache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache 微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。\n\n\n\n#### SpringCloud\n\n官方网址：https://spring.io/projects/spring-cloud/\n\n![image-20230923145922760](typora-user-images/image-20230923145922760.png)\n\n\n\nSpring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。\n\nSpring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包\n\n\n\n#### SpringCloud Alibaba\n\n\n\n官方网址： https://spring.io/projects/spring-cloud-alibaba\n\n![image-20230923150103329](typora-user-images/image-20230923150103329.png)\n\nSpring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。\n\n## Spring Cloud Alibaba 主要功能与组件\n\nSpring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。\n\n依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。\n\n![image-20230923145122020](typora-user-images/image-20230923145122020.png)\n\n### **主要功能**\n\n* 服务限流降级 ：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。\n* 服务注册与发现 ：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。\n* 分布式配置管理 ：支持分布式系统中的外部化配置，配置更改时自动刷新。\n* 消息驱动能力 ：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。\n* 分布式事务 ：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。\n* 阿里云对象存储 ：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n* 分布式任务调度 ：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。\n* 阿里云短信服务 ：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。\n\n### 组件\n\n**[Sentinel] ：**阿里巴巴源产品，把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。\n\n**[Nacos] ：**一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\n\n**[RocketMQ] ：**一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。\n\n**[Dubbo] ：**Apache Dubbo™ 是一款高性能 Java RPC 框架。\n\n**[Seata] ：**阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。\n\n**[Alibaba Cloud OSS] :** 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。\n\n**[Alibaba Cloud SchedulerX]**: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。\n\n**[Alibaba Cloud SMS] :** 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。\n\n\n\n\n\n![img](typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png)\n\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-01-微服务介绍","published":1,"date":"2023-09-11T07:28:58.346Z","updated":"2024-05-31T09:36:44.224Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhe0000ecfye9gxbz7n","content":"<p><a href=\"https://blog.csdn.net/ruipeng250/category_10277351.html\">https://blog.csdn.net/ruipeng250/category_10277351.html</a></p>\n<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.05.07</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-01-微服务介绍\"><a href=\"#Spring-Cloud-Alibaba-01-微服务介绍\" class=\"headerlink\" title=\"Spring Cloud Alibaba-01-微服务介绍\"></a>Spring Cloud Alibaba-01-微服务介绍</h1><p>[toc]</p>\n<h2 id=\"微服务简介\"><a href=\"#微服务简介\" class=\"headerlink\" title=\"微服务简介\"></a>微服务简介</h2><h3 id=\"架构的演变\"><a href=\"#架构的演变\" class=\"headerlink\" title=\"架构的演变\"></a><strong>架构的演变</strong></h3><p>随着互联网的发展，网站应用的规模也不断的扩大，进而导致系统架构也在不断的进行变化，从互联网早起到现在，系统架构大体经历了下面几个过程：</p>\n<p><strong>单体应用架构：</strong><br>把所有功能都集中在一个应用中，统一部署，开发成本、部署成本和维护成本低，我们会把它们做成一个web项目，然后部署到一台tomcat服务器上。</p>\n<p><img src=\"/typora-user-images/image-20230923144124237.png\" alt=\"image-20230923144124237\"></p>\n<ul>\n<li>优点：项目架构简单，适合用户量少的项目，开发成本低，项目部署在一个节点上，维护方便。</li>\n<li>缺点：功能集中在一个工程中，对于大型项目比一开发和维护，项目模块紧耦合，单点容错率低，无法对不同的模块功能进行针对性的优化和水平拓展</li>\n</ul>\n<p><strong>垂直应用架构：</strong><br>所谓垂直应用架构，其实就是把之前的单体应用拆分成多个应用，以提升效率，比如电商系统可以拆分成：电商系统、后台系统、CMS系统</p>\n<p><img src=\"/typora-user-images/image-20230923144238782.png\" alt=\"image-20230923144238782\"></p>\n<ul>\n<li>优点：项目拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平拓展，同时不同的系统之间不会互相影响，提高容错率</li>\n<li>缺点：系统之间互相存在，无法进行相互调用，系统之间互相独立，会造成一部分功能的冗余</li>\n</ul>\n<p><strong>分布式架构</strong></p>\n<p>随着业务的增加，在垂直应用架构中冗余的业务代码越来越多，就需要将冗余的部分抽取出来，统一做成业务层单独处理，变成一个单独的服务，控制层调用不同的业务层服务就能完成不同的业务功能，具体表现就是一个项目拆分成表现层和服务层两个部分，服务层中包含业务逻辑，表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，这就是分布式架构。</p>\n<p><img src=\"/typora-user-images/image-20230923144315232.png\" alt=\"image-20230923144315232\"></p>\n<ul>\n<li>优点：抽取公共的功能作为服务层，提高代码复用行</li>\n<li>缺点：系统间耦合度变高，调用关系错综复杂，难以维护。</li>\n</ul>\n<p><strong>SOA架构</strong></p>\n<p>分布式架构中的缺点就是调用复杂，而且当服务越来越多，或者当某一个服务压力过大需要水平拓展和负载均衡，对于资源调度和治理就需要用到治理中心SOA（Service Oriented Architecture）为核心来解决，同时治理中心还可以帮助我们解决服务之间协议不同的问题。</p>\n<p><img src=\"/typora-user-images/image-20230923144347556.png\" alt=\"image-20230923144347556\"></p>\n<ul>\n<li>优点：使用治理中心（ESB\\dubbo）解决了服务见调用关系的自动调节</li>\n<li>缺点：服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩），服务关系复杂，运维、测试部署困难</li>\n</ul>\n<p><strong>微服务架构</strong></p>\n<p>微服务架构在某种程度上面架构SOA继续发展的下一步，它更加强调服务的“彻底拆分”，目的就是提高效率，微服务架构中，每个服务必须独立部署同时互不影响，微服务架构更加轻巧，轻量级。</p>\n<p><img src=\"/typora-user-images/image-20230923144414595.png\" alt=\"image-20230923144414595\"></p>\n<ul>\n<li>优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展</li>\n<li>缺点：分布式系统开发的技术成本高（容错、分布式事务等），复杂性更高，每个微服务进行分布式独立部署，当进行模块调用的时候，分布式将会变得更加麻烦</li>\n</ul>\n<h3 id=\"微服务架构与SOA架构的不同\"><a href=\"#微服务架构与SOA架构的不同\" class=\"headerlink\" title=\"微服务架构与SOA架构的不同\"></a>微服务架构与SOA架构的不同</h3><ol>\n<li>微服务架构比SOA架构会更加的精细，让专业的人去做专业的。</li>\n<li>目的是提高效率每个服务之间互不影响，微服务架构中，每个服务需要独立部署</li>\n<li>SOA架构中可能数据库存储会发生共享，微服务强调每个服务都是单独数据库，保证每个服务之间互不影响。</li>\n<li>微服务项目架构比SOA架构更加适合与互联网公司迅捷开发、快速迭代版本，因为粒度非常精细。</li>\n</ol>\n<h3 id=\"微服务架构的常见问题\"><a href=\"#微服务架构的常见问题\" class=\"headerlink\" title=\"微服务架构的常见问题\"></a>微服务架构的常见问题</h3><p>一旦采用微服务系统架构，就势必会遇到这样几个问题:</p>\n<p>这么多小服务，如何管理他们?(服务治理 注册中心[服务注册 发现 剔除])<br>这么多小服务，他们之间如何通讯?(restful rpc)<br>这么多小服务，客户端怎么访问他们?(网关)<br>这么多小服务，一旦出现问题了，应该如何自处理?(容错)<br>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)<br>对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。</p>\n<p><img src=\"/typora-user-images/image-20230923144526897.png\" alt=\"image-20230923144526897\"></p>\n<h3 id=\"微服务架构的常见概念\"><a href=\"#微服务架构的常见概念\" class=\"headerlink\" title=\"微服务架构的常见概念\"></a>微服务架构的常见概念</h3><h4 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h4><p>服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。</p>\n<p>服务注册:服务实例将自身服务信息注册到注册中心。</p>\n<p>服务发现:服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。</p>\n<p>服务剔除:服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。</p>\n<p><img src=\"/typora-user-images/image-20230923144634136.png\" alt=\"image-20230923144634136\"></p>\n<h4 id=\"服务调用\"><a href=\"#服务调用\" class=\"headerlink\" title=\"服务调用\"></a>服务调用</h4><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于<br>HTTP的RESTful接口以及基于TCP的RPC协议。</p>\n<ul>\n<li><p><strong>REST(Representational State Transfer)</strong><br>这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议</p>\n</li>\n<li><p><strong>RPC(Remote Promote Call)</strong><br>一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服 务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使 用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。<br>区别与联系</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>RESTful</th>\n<th>RPC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通讯协议</td>\n<td>HTTP</td>\n<td>一般使用TCP</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>略低</td>\n<td>较高</td>\n</tr>\n<tr>\n<td>灵活度</td>\n<td>高</td>\n<td>低</td>\n</tr>\n<tr>\n<td>应用</td>\n<td>微服务架构</td>\n<td>SOA架构</td>\n</tr>\n</tbody></table>\n<h4 id=\"服务网关\"><a href=\"#服务网关\" class=\"headerlink\" title=\"服务网关\"></a>服务网关</h4><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现:</p>\n<ul>\n<li>客户端需要调用不同的url地址，增加难度</li>\n<li>在一定的场景下，存在跨域请求的问题</li>\n<li>每个微服务都需要进行单独的身份认证针</li>\n</ul>\n<p>对这些问题，API网关顺势而生。</p>\n<p>API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的 基本功能有:统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问 题。</p>\n<p><img src=\"/typora-user-images/image-20230923144953818.png\" alt=\"image-20230923144953818\"></p>\n<h4 id=\"服务容错\"><a href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"></a>服务容错</h4><p>在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错话，极有可能会造成一连串的服务不可用，这就是雪崩效应.</p>\n<p>我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是:</p>\n<ul>\n<li>不被外界环境影响</li>\n<li>不被上游请求压垮</li>\n<li>不被下游响应拖垮</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20230923145029314.png\" alt=\"image-20230923145029314\"></p>\n<h4 id=\"链路追踪\"><a href=\"#链路追踪\" class=\"headerlink\" title=\"链路追踪\"></a>链路追踪</h4><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪</p>\n<h3 id=\"微服务架构的常见解决方案\"><a href=\"#微服务架构的常见解决方案\" class=\"headerlink\" title=\"微服务架构的常见解决方案\"></a>微服务架构的常见解决方案</h3><h4 id=\"ServiceComb\"><a href=\"#ServiceComb\" class=\"headerlink\" title=\"ServiceComb\"></a>ServiceComb</h4><p>官方网址：<a href=\"https://servicecomb.apache.org/cn/\">https://servicecomb.apache.org/cn/</a></p>\n<p><img src=\"/typora-user-images/image-20230923145717673.png\" alt=\"image-20230923145717673\"></p>\n<p>Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache 微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</p>\n<h4 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h4><p>官方网址：<a href=\"https://spring.io/projects/spring-cloud/\">https://spring.io/projects/spring-cloud/</a></p>\n<p><img src=\"/typora-user-images/image-20230923145922760.png\" alt=\"image-20230923145922760\"></p>\n<p>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。</p>\n<p>Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p>\n<h4 id=\"SpringCloud-Alibaba\"><a href=\"#SpringCloud-Alibaba\" class=\"headerlink\" title=\"SpringCloud Alibaba\"></a>SpringCloud Alibaba</h4><p>官方网址： <a href=\"https://spring.io/projects/spring-cloud-alibaba\">https://spring.io/projects/spring-cloud-alibaba</a></p>\n<p><img src=\"/typora-user-images/image-20230923150103329.png\" alt=\"image-20230923150103329\"></p>\n<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>\n<h2 id=\"Spring-Cloud-Alibaba-主要功能与组件\"><a href=\"#Spring-Cloud-Alibaba-主要功能与组件\" class=\"headerlink\" title=\"Spring Cloud Alibaba 主要功能与组件\"></a>Spring Cloud Alibaba 主要功能与组件</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>\n<p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>\n<p><img src=\"/typora-user-images/image-20230923145122020.png\" alt=\"image-20230923145122020\"></p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a><strong>主要功能</strong></h3><ul>\n<li>服务限流降级 ：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li>\n<li>服务注册与发现 ：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li>\n<li>分布式配置管理 ：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>\n<li>消息驱动能力 ：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li>\n<li>分布式事务 ：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li>\n<li>阿里云对象存储 ：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>\n<li>分布式任务调度 ：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li>\n<li>阿里云短信服务 ：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>**[Sentinel] ：**阿里巴巴源产品，把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>\n<p>**[Nacos] ：**一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>\n<p>**[RocketMQ] ：**一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>\n<p>**[Dubbo] ：**Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>\n<p>**[Seata] ：**阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>\n<p><strong>[Alibaba Cloud OSS] :</strong> 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>\n<p><strong>[Alibaba Cloud SchedulerX]</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>\n<p><strong>[Alibaba Cloud SMS] :</strong> 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>\n<p><img src=\"/typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png\" alt=\"img\"></p>\n","excerpt":"","more":"<p><a href=\"https://blog.csdn.net/ruipeng250/category_10277351.html\">https://blog.csdn.net/ruipeng250/category_10277351.html</a></p>\n<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.05.07</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-01-微服务介绍\"><a href=\"#Spring-Cloud-Alibaba-01-微服务介绍\" class=\"headerlink\" title=\"Spring Cloud Alibaba-01-微服务介绍\"></a>Spring Cloud Alibaba-01-微服务介绍</h1><p>[toc]</p>\n<h2 id=\"微服务简介\"><a href=\"#微服务简介\" class=\"headerlink\" title=\"微服务简介\"></a>微服务简介</h2><h3 id=\"架构的演变\"><a href=\"#架构的演变\" class=\"headerlink\" title=\"架构的演变\"></a><strong>架构的演变</strong></h3><p>随着互联网的发展，网站应用的规模也不断的扩大，进而导致系统架构也在不断的进行变化，从互联网早起到现在，系统架构大体经历了下面几个过程：</p>\n<p><strong>单体应用架构：</strong><br>把所有功能都集中在一个应用中，统一部署，开发成本、部署成本和维护成本低，我们会把它们做成一个web项目，然后部署到一台tomcat服务器上。</p>\n<p><img src=\"/typora-user-images/image-20230923144124237.png\" alt=\"image-20230923144124237\"></p>\n<ul>\n<li>优点：项目架构简单，适合用户量少的项目，开发成本低，项目部署在一个节点上，维护方便。</li>\n<li>缺点：功能集中在一个工程中，对于大型项目比一开发和维护，项目模块紧耦合，单点容错率低，无法对不同的模块功能进行针对性的优化和水平拓展</li>\n</ul>\n<p><strong>垂直应用架构：</strong><br>所谓垂直应用架构，其实就是把之前的单体应用拆分成多个应用，以提升效率，比如电商系统可以拆分成：电商系统、后台系统、CMS系统</p>\n<p><img src=\"/typora-user-images/image-20230923144238782.png\" alt=\"image-20230923144238782\"></p>\n<ul>\n<li>优点：项目拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平拓展，同时不同的系统之间不会互相影响，提高容错率</li>\n<li>缺点：系统之间互相存在，无法进行相互调用，系统之间互相独立，会造成一部分功能的冗余</li>\n</ul>\n<p><strong>分布式架构</strong></p>\n<p>随着业务的增加，在垂直应用架构中冗余的业务代码越来越多，就需要将冗余的部分抽取出来，统一做成业务层单独处理，变成一个单独的服务，控制层调用不同的业务层服务就能完成不同的业务功能，具体表现就是一个项目拆分成表现层和服务层两个部分，服务层中包含业务逻辑，表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，这就是分布式架构。</p>\n<p><img src=\"/typora-user-images/image-20230923144315232.png\" alt=\"image-20230923144315232\"></p>\n<ul>\n<li>优点：抽取公共的功能作为服务层，提高代码复用行</li>\n<li>缺点：系统间耦合度变高，调用关系错综复杂，难以维护。</li>\n</ul>\n<p><strong>SOA架构</strong></p>\n<p>分布式架构中的缺点就是调用复杂，而且当服务越来越多，或者当某一个服务压力过大需要水平拓展和负载均衡，对于资源调度和治理就需要用到治理中心SOA（Service Oriented Architecture）为核心来解决，同时治理中心还可以帮助我们解决服务之间协议不同的问题。</p>\n<p><img src=\"/typora-user-images/image-20230923144347556.png\" alt=\"image-20230923144347556\"></p>\n<ul>\n<li>优点：使用治理中心（ESB\\dubbo）解决了服务见调用关系的自动调节</li>\n<li>缺点：服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩），服务关系复杂，运维、测试部署困难</li>\n</ul>\n<p><strong>微服务架构</strong></p>\n<p>微服务架构在某种程度上面架构SOA继续发展的下一步，它更加强调服务的“彻底拆分”，目的就是提高效率，微服务架构中，每个服务必须独立部署同时互不影响，微服务架构更加轻巧，轻量级。</p>\n<p><img src=\"/typora-user-images/image-20230923144414595.png\" alt=\"image-20230923144414595\"></p>\n<ul>\n<li>优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展</li>\n<li>缺点：分布式系统开发的技术成本高（容错、分布式事务等），复杂性更高，每个微服务进行分布式独立部署，当进行模块调用的时候，分布式将会变得更加麻烦</li>\n</ul>\n<h3 id=\"微服务架构与SOA架构的不同\"><a href=\"#微服务架构与SOA架构的不同\" class=\"headerlink\" title=\"微服务架构与SOA架构的不同\"></a>微服务架构与SOA架构的不同</h3><ol>\n<li>微服务架构比SOA架构会更加的精细，让专业的人去做专业的。</li>\n<li>目的是提高效率每个服务之间互不影响，微服务架构中，每个服务需要独立部署</li>\n<li>SOA架构中可能数据库存储会发生共享，微服务强调每个服务都是单独数据库，保证每个服务之间互不影响。</li>\n<li>微服务项目架构比SOA架构更加适合与互联网公司迅捷开发、快速迭代版本，因为粒度非常精细。</li>\n</ol>\n<h3 id=\"微服务架构的常见问题\"><a href=\"#微服务架构的常见问题\" class=\"headerlink\" title=\"微服务架构的常见问题\"></a>微服务架构的常见问题</h3><p>一旦采用微服务系统架构，就势必会遇到这样几个问题:</p>\n<p>这么多小服务，如何管理他们?(服务治理 注册中心[服务注册 发现 剔除])<br>这么多小服务，他们之间如何通讯?(restful rpc)<br>这么多小服务，客户端怎么访问他们?(网关)<br>这么多小服务，一旦出现问题了，应该如何自处理?(容错)<br>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)<br>对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。</p>\n<p><img src=\"/typora-user-images/image-20230923144526897.png\" alt=\"image-20230923144526897\"></p>\n<h3 id=\"微服务架构的常见概念\"><a href=\"#微服务架构的常见概念\" class=\"headerlink\" title=\"微服务架构的常见概念\"></a>微服务架构的常见概念</h3><h4 id=\"服务治理\"><a href=\"#服务治理\" class=\"headerlink\" title=\"服务治理\"></a>服务治理</h4><p>服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。</p>\n<p>服务注册:服务实例将自身服务信息注册到注册中心。</p>\n<p>服务发现:服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。</p>\n<p>服务剔除:服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。</p>\n<p><img src=\"/typora-user-images/image-20230923144634136.png\" alt=\"image-20230923144634136\"></p>\n<h4 id=\"服务调用\"><a href=\"#服务调用\" class=\"headerlink\" title=\"服务调用\"></a>服务调用</h4><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于<br>HTTP的RESTful接口以及基于TCP的RPC协议。</p>\n<ul>\n<li><p><strong>REST(Representational State Transfer)</strong><br>这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议</p>\n</li>\n<li><p><strong>RPC(Remote Promote Call)</strong><br>一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服 务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使 用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。<br>区别与联系</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>RESTful</th>\n<th>RPC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通讯协议</td>\n<td>HTTP</td>\n<td>一般使用TCP</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>略低</td>\n<td>较高</td>\n</tr>\n<tr>\n<td>灵活度</td>\n<td>高</td>\n<td>低</td>\n</tr>\n<tr>\n<td>应用</td>\n<td>微服务架构</td>\n<td>SOA架构</td>\n</tr>\n</tbody></table>\n<h4 id=\"服务网关\"><a href=\"#服务网关\" class=\"headerlink\" title=\"服务网关\"></a>服务网关</h4><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现:</p>\n<ul>\n<li>客户端需要调用不同的url地址，增加难度</li>\n<li>在一定的场景下，存在跨域请求的问题</li>\n<li>每个微服务都需要进行单独的身份认证针</li>\n</ul>\n<p>对这些问题，API网关顺势而生。</p>\n<p>API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的 基本功能有:统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问 题。</p>\n<p><img src=\"/typora-user-images/image-20230923144953818.png\" alt=\"image-20230923144953818\"></p>\n<h4 id=\"服务容错\"><a href=\"#服务容错\" class=\"headerlink\" title=\"服务容错\"></a>服务容错</h4><p>在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错话，极有可能会造成一连串的服务不可用，这就是雪崩效应.</p>\n<p>我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是:</p>\n<ul>\n<li>不被外界环境影响</li>\n<li>不被上游请求压垮</li>\n<li>不被下游响应拖垮</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20230923145029314.png\" alt=\"image-20230923145029314\"></p>\n<h4 id=\"链路追踪\"><a href=\"#链路追踪\" class=\"headerlink\" title=\"链路追踪\"></a>链路追踪</h4><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪</p>\n<h3 id=\"微服务架构的常见解决方案\"><a href=\"#微服务架构的常见解决方案\" class=\"headerlink\" title=\"微服务架构的常见解决方案\"></a>微服务架构的常见解决方案</h3><h4 id=\"ServiceComb\"><a href=\"#ServiceComb\" class=\"headerlink\" title=\"ServiceComb\"></a>ServiceComb</h4><p>官方网址：<a href=\"https://servicecomb.apache.org/cn/\">https://servicecomb.apache.org/cn/</a></p>\n<p><img src=\"/typora-user-images/image-20230923145717673.png\" alt=\"image-20230923145717673\"></p>\n<p>Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache 微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发 者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</p>\n<h4 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h4><p>官方网址：<a href=\"https://spring.io/projects/spring-cloud/\">https://spring.io/projects/spring-cloud/</a></p>\n<p><img src=\"/typora-user-images/image-20230923145922760.png\" alt=\"image-20230923145922760\"></p>\n<p>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。</p>\n<p>Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包</p>\n<h4 id=\"SpringCloud-Alibaba\"><a href=\"#SpringCloud-Alibaba\" class=\"headerlink\" title=\"SpringCloud Alibaba\"></a>SpringCloud Alibaba</h4><p>官方网址： <a href=\"https://spring.io/projects/spring-cloud-alibaba\">https://spring.io/projects/spring-cloud-alibaba</a></p>\n<p><img src=\"/typora-user-images/image-20230923150103329.png\" alt=\"image-20230923150103329\"></p>\n<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>\n<h2 id=\"Spring-Cloud-Alibaba-主要功能与组件\"><a href=\"#Spring-Cloud-Alibaba-主要功能与组件\" class=\"headerlink\" title=\"Spring Cloud Alibaba 主要功能与组件\"></a>Spring Cloud Alibaba 主要功能与组件</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>\n<p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>\n<p><img src=\"/typora-user-images/image-20230923145122020.png\" alt=\"image-20230923145122020\"></p>\n<h3 id=\"主要功能\"><a href=\"#主要功能\" class=\"headerlink\" title=\"主要功能\"></a><strong>主要功能</strong></h3><ul>\n<li>服务限流降级 ：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li>\n<li>服务注册与发现 ：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li>\n<li>分布式配置管理 ：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>\n<li>消息驱动能力 ：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li>\n<li>分布式事务 ：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li>\n<li>阿里云对象存储 ：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>\n<li>分布式任务调度 ：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li>\n<li>阿里云短信服务 ：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li>\n</ul>\n<h3 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h3><p>**[Sentinel] ：**阿里巴巴源产品，把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>\n<p>**[Nacos] ：**一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>\n<p>**[RocketMQ] ：**一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>\n<p>**[Dubbo] ：**Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>\n<p>**[Seata] ：**阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>\n<p><strong>[Alibaba Cloud OSS] :</strong> 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>\n<p><strong>[Alibaba Cloud SchedulerX]</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>\n<p><strong>[Alibaba Cloud SMS] :</strong> 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>\n<p><img src=\"/typora-user-images/32fe9b12c9192392c3a50b5f04759eec.png\" alt=\"img\"></p>\n"},{"_content":"o`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.08.03`\n\n# Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\n\n[toc]\n\n\n\n\n\n## 服务配置中心介绍\n\n首先我们来看一下,微服务架构下关于配置文件的一些问题:\n\n1. 配置文件相对分散。在一个微服务架构下，配置文件会随着微服务的增多变的越来越多，而且分散 在各个微服务中，不好统一配置和管理。\n2. 配置文件无法区分环境。微服务项目可能会有多个环境，例如:测试环境、预发布环境、生产环 境。每一个环境所使用的配置理论上都是不同的，一旦需要修改，就需要我们去各个微服务下手动 维护，这比较困难。\n3. 配置文件无法实时更新。我们修改了配置文件之后，必须重新启动微服务才能使配置生效，这对一 个正在运行的项目来说是非常不友好的。\n\n基于上面这些问题，我们就需要配置中心的加入来解决这些问题。 配置中心的思路是:\n\n* 首先把项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。\n* 当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新。\n\n\n\n常见的服务配置中心：\n\n| 配置中心                             | 说明                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| **Apollo**                           | Apollo是由携程开源的分布式配置中心。特点有很多，比如:配置更新之后可以实时生效，支持灰 度发布功能，并且能对所有的配置进行版本管理、操作审计等功能，提供开放平台API。并且资料 也写的很详细。 |\n| **Disconf**                          | Disconf是由百度开源的分布式配置中心。它是基于Zookeeper来实现配置变更后实时通知和生效 的。 |\n| **SpringCloud Config              ** | 这是Spring Cloud中带的配置中心组件。它和Spring是无缝集成，使用起来非常方便，并且它的配 置存储支持Git。不过它没有可视化的操作界面，配置的生效也不是实时的，需要重启或去刷新。 |\n| **Nacos**                            | 这是SpingCloud alibaba技术栈中的一个组件，前面我们已经使用它做过服务注册中心。其实它也 集成了服务配置的功能，我们可以直接使用它作为服务配置中心。 |\n\n\n\n## Nacos Config基础配置\n\nNacos不仅仅可以作为注册中心来使用，同时它支持作为配置中心。就是将nacos当做一个服务端，将各个微服务看成是客户端，我们\n将各个微服务的配置文件统一存放在nacos上，然后各个微服务从nacos上拉取配置即可\n\n\n\n1、 搭建nacos环境【使用现有的nacos环境即可】\n2 、在微服务中引入nacos的依赖\n\n\n\n~~~xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n\n~~~\n\n3、在微服务中添加nacos config的配置\n\n> 注意:不能使用原来的application.yml作为配置文件，而是新建一个bootstrap.yml作为配置文件\n\n配置文件优先级(由高到低):\n\n> bootstrap.properties -> bootstrap.yml -> application.properties -> application.yml\n\n\n\n~~~yaml\nspring:\n  application:\n    name: spring-cloud-service\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n        file-extension: yaml # 配置文件格式 \n        \n  profiles: \n\t  active: dev # 环境标识      \n~~~\n\n\n\n在nacos中添加配置 点击配置列表，点击右边+号，新建配置。在新建配置过程中，要注意下面的细节:\n\n>1)Data ID不能随便写，要跟配置文件中的对应，对应关系如图所示\n>2)配置文件格式要跟配置文件的格式对应，且目前仅仅支持YAML和Properties\n>3)配置内容按照上面选定的格式书写\n\n![image-20231008103734081](typora-user-images/image-20231008103734081.png)\n\n注释本地的application.yam中的内容， 启动程序进行测试\n\n如果依旧可以成功访问程序，说明我们nacos的配置中心功能已经实现\n\n\n\n## Nacos Config深入\n\n\n\n### 配置动态刷新\n\n在基础配置中，但是此时如果修改了配置，我们的程序是无法读取到的，因此，我们需要开启配置的动态刷新功能。\n\n\n\n在nacos中的 spring-cloud-service-dev.yaml配置项中添加下面配置:\n\n~~~yaml\nconfig:\n    appName: service\n~~~\n\n\n\n\n\n**方式一**: 硬编码方式\n\n~~~java\n@RestController\npublic class TestController {\n    @Autowired\n    private ConfigurableApplicationContext applicationContext;\n  \n  \n\t @GetMapping(value = \"/getConfigName\")\n    public String getConfigName(){\n        return applicationContext.getEnvironment().getProperty(\"config.appName\");\n    }\n}\n~~~\n\n\n\n**方式二**: 注解方式(推荐)\n\n~~~java\n\n@RestController\n@RefreshScope//只需要在需要动态读取配置的类上添加此注解就可以\npublic class TestController {\n\n    @Value(\"${config.appName}\")\n    private String configName;\n    \n\t//2 注解方式 \n\t   @GetMapping(value = \"/getConfigNames\")\n    public String getConfigNames(){\n        return configName;\n    }\n}\n~~~\n\n\n\n\n\n### 配置共享\n\n当配置越来越多的时候，我们就发现有很多配置是重复的，这时候就考虑可不可以将公共配置文件 提取出来，然后实现共享呢?当然是可以的。接下来我们就来探讨如何实现这一功能。\n\n**同一个微服务的不同环境之间共享配置**\n\n如果想在同一个微服务的不同环境之间实现配置共享，其实很简单。\n只需要提取一个以 spring.application.name 命名的配置文件，然后将其所有环境的公共配置放在里 面即可。\n\n\n\n1、新建一个名为spring-cloud-service.yaml配置存放服务的公共配置\n\n![image-20231024095726856](typora-user-images/image-20231024095726856.png)\n\n2 新建一个名为spring-cloud-service-test.yaml配置存放测试环境的配置\n\n![image-20231024095816182](typora-user-images/image-20231024095816182.png)\n\n3、 新建一个名为spring-cloud-service-dev.yaml配置存放测试环境的配置![image-20231024095843156](typora-user-images/image-20231024095843156.png)\n\n\n\n\n\n\n\n~~~java\n\n@RestController\n@RefreshScope//只需要在需要动态读取配置的类上添加此注解就可以\npublic class TestController {\n\n    @Value(\"${config.appName}\")\n    private String configName;\n    @Value(\"${config.env}\")\n    private String env;\n\n\n    @GetMapping(value = \"/getConfigNames\")\n    public String getConfigNames(){\n        return configName+\"环境\"+env;\n    }\n~~~\n\n\n\n\n\n4、访问测试\n\n\n\n![image-20231024094558547](typora-user-images/image-20231024094558547.png)\n\n接下来，将active设置成test，再次访问，观察结果\n\n~~~yaml\nspring:\n  profiles:\n     active: test # 环境标识\n\n~~~\n\n\n\n\n\n### **不同微服务中间共享配置**\n\n不同为服务之间实现配置共享的原理类似于文件引入，就是定义一个公共配置，然后在当前配置中引\n入。\n\n\n\n~~~yaml\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://spring_cloud_service?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\n    username: root\n    password: root\n  jpa:\n    properties:\n      hibernate:\n        hbm2ddl:\n          auto: update\n        dialect: org.hibernate.dialect.MySQL5InnoDBDialect\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n\n\n~~~\n\n\n\n修改bootstrap.yaml\n\n~~~yam\nspring:\n  application:\n    name: service-product\n  cloud:\n    nacos:\n      config:\n\t\tserver-addr: 127.0.0.1:8848 #nacos中心地址\n\t\tfile-extension: yaml # 配置文件格式\n\t\tshared-dataids: spring-cloud-all.yaml # 配置要引入的配置 refreshable-dataids: spring-cloud-all.yaml # 配置要实现动态配置刷新的配置 \n  profiles:\n\tactive: dev # 环境标识 \n\n~~~\n\n\n\n启动微服务进行测试\n\n## Nacos的几个概念\n\n\n\n**命名空间(Namespace)**\n\n命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间\n\n**配置分组(Group)**\n\n配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组\n\n**配置集(Data ID)**\n\n在系统中，一个配置文件通常就是一个配置集。一般微服务的配置就是一个配置集\n\n![image-20231024101307177](typora-user-images/image-20231024101307177.png)\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系.md","raw":"o`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.08.03`\n\n# Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\n\n[toc]\n\n\n\n\n\n## 服务配置中心介绍\n\n首先我们来看一下,微服务架构下关于配置文件的一些问题:\n\n1. 配置文件相对分散。在一个微服务架构下，配置文件会随着微服务的增多变的越来越多，而且分散 在各个微服务中，不好统一配置和管理。\n2. 配置文件无法区分环境。微服务项目可能会有多个环境，例如:测试环境、预发布环境、生产环 境。每一个环境所使用的配置理论上都是不同的，一旦需要修改，就需要我们去各个微服务下手动 维护，这比较困难。\n3. 配置文件无法实时更新。我们修改了配置文件之后，必须重新启动微服务才能使配置生效，这对一 个正在运行的项目来说是非常不友好的。\n\n基于上面这些问题，我们就需要配置中心的加入来解决这些问题。 配置中心的思路是:\n\n* 首先把项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。\n* 当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新。\n\n\n\n常见的服务配置中心：\n\n| 配置中心                             | 说明                                                         |\n| ------------------------------------ | ------------------------------------------------------------ |\n| **Apollo**                           | Apollo是由携程开源的分布式配置中心。特点有很多，比如:配置更新之后可以实时生效，支持灰 度发布功能，并且能对所有的配置进行版本管理、操作审计等功能，提供开放平台API。并且资料 也写的很详细。 |\n| **Disconf**                          | Disconf是由百度开源的分布式配置中心。它是基于Zookeeper来实现配置变更后实时通知和生效 的。 |\n| **SpringCloud Config              ** | 这是Spring Cloud中带的配置中心组件。它和Spring是无缝集成，使用起来非常方便，并且它的配 置存储支持Git。不过它没有可视化的操作界面，配置的生效也不是实时的，需要重启或去刷新。 |\n| **Nacos**                            | 这是SpingCloud alibaba技术栈中的一个组件，前面我们已经使用它做过服务注册中心。其实它也 集成了服务配置的功能，我们可以直接使用它作为服务配置中心。 |\n\n\n\n## Nacos Config基础配置\n\nNacos不仅仅可以作为注册中心来使用，同时它支持作为配置中心。就是将nacos当做一个服务端，将各个微服务看成是客户端，我们\n将各个微服务的配置文件统一存放在nacos上，然后各个微服务从nacos上拉取配置即可\n\n\n\n1、 搭建nacos环境【使用现有的nacos环境即可】\n2 、在微服务中引入nacos的依赖\n\n\n\n~~~xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n</dependency>\n\n~~~\n\n3、在微服务中添加nacos config的配置\n\n> 注意:不能使用原来的application.yml作为配置文件，而是新建一个bootstrap.yml作为配置文件\n\n配置文件优先级(由高到低):\n\n> bootstrap.properties -> bootstrap.yml -> application.properties -> application.yml\n\n\n\n~~~yaml\nspring:\n  application:\n    name: spring-cloud-service\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n        file-extension: yaml # 配置文件格式 \n        \n  profiles: \n\t  active: dev # 环境标识      \n~~~\n\n\n\n在nacos中添加配置 点击配置列表，点击右边+号，新建配置。在新建配置过程中，要注意下面的细节:\n\n>1)Data ID不能随便写，要跟配置文件中的对应，对应关系如图所示\n>2)配置文件格式要跟配置文件的格式对应，且目前仅仅支持YAML和Properties\n>3)配置内容按照上面选定的格式书写\n\n![image-20231008103734081](typora-user-images/image-20231008103734081.png)\n\n注释本地的application.yam中的内容， 启动程序进行测试\n\n如果依旧可以成功访问程序，说明我们nacos的配置中心功能已经实现\n\n\n\n## Nacos Config深入\n\n\n\n### 配置动态刷新\n\n在基础配置中，但是此时如果修改了配置，我们的程序是无法读取到的，因此，我们需要开启配置的动态刷新功能。\n\n\n\n在nacos中的 spring-cloud-service-dev.yaml配置项中添加下面配置:\n\n~~~yaml\nconfig:\n    appName: service\n~~~\n\n\n\n\n\n**方式一**: 硬编码方式\n\n~~~java\n@RestController\npublic class TestController {\n    @Autowired\n    private ConfigurableApplicationContext applicationContext;\n  \n  \n\t @GetMapping(value = \"/getConfigName\")\n    public String getConfigName(){\n        return applicationContext.getEnvironment().getProperty(\"config.appName\");\n    }\n}\n~~~\n\n\n\n**方式二**: 注解方式(推荐)\n\n~~~java\n\n@RestController\n@RefreshScope//只需要在需要动态读取配置的类上添加此注解就可以\npublic class TestController {\n\n    @Value(\"${config.appName}\")\n    private String configName;\n    \n\t//2 注解方式 \n\t   @GetMapping(value = \"/getConfigNames\")\n    public String getConfigNames(){\n        return configName;\n    }\n}\n~~~\n\n\n\n\n\n### 配置共享\n\n当配置越来越多的时候，我们就发现有很多配置是重复的，这时候就考虑可不可以将公共配置文件 提取出来，然后实现共享呢?当然是可以的。接下来我们就来探讨如何实现这一功能。\n\n**同一个微服务的不同环境之间共享配置**\n\n如果想在同一个微服务的不同环境之间实现配置共享，其实很简单。\n只需要提取一个以 spring.application.name 命名的配置文件，然后将其所有环境的公共配置放在里 面即可。\n\n\n\n1、新建一个名为spring-cloud-service.yaml配置存放服务的公共配置\n\n![image-20231024095726856](typora-user-images/image-20231024095726856.png)\n\n2 新建一个名为spring-cloud-service-test.yaml配置存放测试环境的配置\n\n![image-20231024095816182](typora-user-images/image-20231024095816182.png)\n\n3、 新建一个名为spring-cloud-service-dev.yaml配置存放测试环境的配置![image-20231024095843156](typora-user-images/image-20231024095843156.png)\n\n\n\n\n\n\n\n~~~java\n\n@RestController\n@RefreshScope//只需要在需要动态读取配置的类上添加此注解就可以\npublic class TestController {\n\n    @Value(\"${config.appName}\")\n    private String configName;\n    @Value(\"${config.env}\")\n    private String env;\n\n\n    @GetMapping(value = \"/getConfigNames\")\n    public String getConfigNames(){\n        return configName+\"环境\"+env;\n    }\n~~~\n\n\n\n\n\n4、访问测试\n\n\n\n![image-20231024094558547](typora-user-images/image-20231024094558547.png)\n\n接下来，将active设置成test，再次访问，观察结果\n\n~~~yaml\nspring:\n  profiles:\n     active: test # 环境标识\n\n~~~\n\n\n\n\n\n### **不同微服务中间共享配置**\n\n不同为服务之间实现配置共享的原理类似于文件引入，就是定义一个公共配置，然后在当前配置中引\n入。\n\n\n\n~~~yaml\nspring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://spring_cloud_service?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true\n    username: root\n    password: root\n  jpa:\n    properties:\n      hibernate:\n        hbm2ddl:\n          auto: update\n        dialect: org.hibernate.dialect.MySQL5InnoDBDialect\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n\n\n~~~\n\n\n\n修改bootstrap.yaml\n\n~~~yam\nspring:\n  application:\n    name: service-product\n  cloud:\n    nacos:\n      config:\n\t\tserver-addr: 127.0.0.1:8848 #nacos中心地址\n\t\tfile-extension: yaml # 配置文件格式\n\t\tshared-dataids: spring-cloud-all.yaml # 配置要引入的配置 refreshable-dataids: spring-cloud-all.yaml # 配置要实现动态配置刷新的配置 \n  profiles:\n\tactive: dev # 环境标识 \n\n~~~\n\n\n\n启动微服务进行测试\n\n## Nacos的几个概念\n\n\n\n**命名空间(Namespace)**\n\n命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间\n\n**配置分组(Group)**\n\n配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组\n\n**配置集(Data ID)**\n\n在系统中，一个配置文件通常就是一个配置集。一般微服务的配置就是一个配置集\n\n![image-20231024101307177](typora-user-images/image-20231024101307177.png)\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系","published":1,"date":"2023-09-23T04:11:52.300Z","updated":"2024-06-07T02:28:37.208Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhf0001ecfyf1o7fq7n","content":"<p>o<code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.08.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\"><a href=\"#Spring-Cloud-Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\" class=\"headerlink\" title=\"Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\"></a>Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系</h1><p>[toc]</p>\n<h2 id=\"服务配置中心介绍\"><a href=\"#服务配置中心介绍\" class=\"headerlink\" title=\"服务配置中心介绍\"></a>服务配置中心介绍</h2><p>首先我们来看一下,微服务架构下关于配置文件的一些问题:</p>\n<ol>\n<li>配置文件相对分散。在一个微服务架构下，配置文件会随着微服务的增多变的越来越多，而且分散 在各个微服务中，不好统一配置和管理。</li>\n<li>配置文件无法区分环境。微服务项目可能会有多个环境，例如:测试环境、预发布环境、生产环 境。每一个环境所使用的配置理论上都是不同的，一旦需要修改，就需要我们去各个微服务下手动 维护，这比较困难。</li>\n<li>配置文件无法实时更新。我们修改了配置文件之后，必须重新启动微服务才能使配置生效，这对一 个正在运行的项目来说是非常不友好的。</li>\n</ol>\n<p>基于上面这些问题，我们就需要配置中心的加入来解决这些问题。 配置中心的思路是:</p>\n<ul>\n<li>首先把项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。</li>\n<li>当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新。</li>\n</ul>\n<p>常见的服务配置中心：</p>\n<table>\n<thead>\n<tr>\n<th>配置中心</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Apollo</strong></td>\n<td>Apollo是由携程开源的分布式配置中心。特点有很多，比如:配置更新之后可以实时生效，支持灰 度发布功能，并且能对所有的配置进行版本管理、操作审计等功能，提供开放平台API。并且资料 也写的很详细。</td>\n</tr>\n<tr>\n<td><strong>Disconf</strong></td>\n<td>Disconf是由百度开源的分布式配置中心。它是基于Zookeeper来实现配置变更后实时通知和生效 的。</td>\n</tr>\n<tr>\n<td>**SpringCloud Config              **</td>\n<td>这是Spring Cloud中带的配置中心组件。它和Spring是无缝集成，使用起来非常方便，并且它的配 置存储支持Git。不过它没有可视化的操作界面，配置的生效也不是实时的，需要重启或去刷新。</td>\n</tr>\n<tr>\n<td><strong>Nacos</strong></td>\n<td>这是SpingCloud alibaba技术栈中的一个组件，前面我们已经使用它做过服务注册中心。其实它也 集成了服务配置的功能，我们可以直接使用它作为服务配置中心。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Nacos-Config基础配置\"><a href=\"#Nacos-Config基础配置\" class=\"headerlink\" title=\"Nacos Config基础配置\"></a>Nacos Config基础配置</h2><p>Nacos不仅仅可以作为注册中心来使用，同时它支持作为配置中心。就是将nacos当做一个服务端，将各个微服务看成是客户端，我们<br>将各个微服务的配置文件统一存放在nacos上，然后各个微服务从nacos上拉取配置即可</p>\n<p>1、 搭建nacos环境【使用现有的nacos环境即可】<br>2 、在微服务中引入nacos的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3、在微服务中添加nacos config的配置</p>\n<blockquote>\n<p>注意:不能使用原来的application.yml作为配置文件，而是新建一个bootstrap.yml作为配置文件</p>\n</blockquote>\n<p>配置文件优先级(由高到低):</p>\n<blockquote>\n<p>bootstrap.properties -&gt; bootstrap.yml -&gt; application.properties -&gt; application.yml</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-service</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yaml</span> <span class=\"comment\"># 配置文件格式 </span></span><br><span class=\"line\">        </span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> </span><br><span class=\"line\">\t  <span class=\"attr\">active:</span> <span class=\"string\">dev</span> <span class=\"comment\"># 环境标识      </span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在nacos中添加配置 点击配置列表，点击右边+号，新建配置。在新建配置过程中，要注意下面的细节:</p>\n<blockquote>\n<p>1)Data ID不能随便写，要跟配置文件中的对应，对应关系如图所示<br>2)配置文件格式要跟配置文件的格式对应，且目前仅仅支持YAML和Properties<br>3)配置内容按照上面选定的格式书写</p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20231008103734081.png\" alt=\"image-20231008103734081\"></p>\n<p>注释本地的application.yam中的内容， 启动程序进行测试</p>\n<p>如果依旧可以成功访问程序，说明我们nacos的配置中心功能已经实现</p>\n<h2 id=\"Nacos-Config深入\"><a href=\"#Nacos-Config深入\" class=\"headerlink\" title=\"Nacos Config深入\"></a>Nacos Config深入</h2><h3 id=\"配置动态刷新\"><a href=\"#配置动态刷新\" class=\"headerlink\" title=\"配置动态刷新\"></a>配置动态刷新</h3><p>在基础配置中，但是此时如果修改了配置，我们的程序是无法读取到的，因此，我们需要开启配置的动态刷新功能。</p>\n<p>在nacos中的 spring-cloud-service-dev.yaml配置项中添加下面配置:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">appName:</span> <span class=\"string\">service</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>方式一</strong>: 硬编码方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigurableApplicationContext applicationContext;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t <span class=\"meta\">@GetMapping(value = &quot;/getConfigName&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext.getEnvironment().getProperty(<span class=\"string\">&quot;config.appName&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>方式二</strong>: 注解方式(推荐)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span><span class=\"comment\">//只需要在需要动态读取配置的类上添加此注解就可以</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.appName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configName;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//2 注解方式 </span></span><br><span class=\"line\">\t   <span class=\"meta\">@GetMapping(value = &quot;/getConfigNames&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigNames</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"配置共享\"><a href=\"#配置共享\" class=\"headerlink\" title=\"配置共享\"></a>配置共享</h3><p>当配置越来越多的时候，我们就发现有很多配置是重复的，这时候就考虑可不可以将公共配置文件 提取出来，然后实现共享呢?当然是可以的。接下来我们就来探讨如何实现这一功能。</p>\n<p><strong>同一个微服务的不同环境之间共享配置</strong></p>\n<p>如果想在同一个微服务的不同环境之间实现配置共享，其实很简单。<br>只需要提取一个以 spring.application.name 命名的配置文件，然后将其所有环境的公共配置放在里 面即可。</p>\n<p>1、新建一个名为spring-cloud-service.yaml配置存放服务的公共配置</p>\n<p><img src=\"/typora-user-images/image-20231024095726856.png\" alt=\"image-20231024095726856\"></p>\n<p>2 新建一个名为spring-cloud-service-test.yaml配置存放测试环境的配置</p>\n<p><img src=\"/typora-user-images/image-20231024095816182.png\" alt=\"image-20231024095816182\"></p>\n<p>3、 新建一个名为spring-cloud-service-dev.yaml配置存放测试环境的配置<img src=\"/typora-user-images/image-20231024095843156.png\" alt=\"image-20231024095843156\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span><span class=\"comment\">//只需要在需要动态读取配置的类上添加此注解就可以</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.appName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.env&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String env;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/getConfigNames&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigNames</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configName+<span class=\"string\">&quot;环境&quot;</span>+env;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>4、访问测试</p>\n<p><img src=\"/typora-user-images/image-20231024094558547.png\" alt=\"image-20231024094558547\"></p>\n<p>接下来，将active设置成test，再次访问，观察结果</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">     <span class=\"attr\">active:</span> <span class=\"string\">test</span> <span class=\"comment\"># 环境标识</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"不同微服务中间共享配置\"><a href=\"#不同微服务中间共享配置\" class=\"headerlink\" title=\"不同微服务中间共享配置\"></a><strong>不同微服务中间共享配置</strong></h3><p>不同为服务之间实现配置共享的原理类似于文件引入，就是定义一个公共配置，然后在当前配置中引<br>入。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://spring_cloud_service?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">properties:</span></span><br><span class=\"line\">      <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">        <span class=\"attr\">hbm2ddl:</span></span><br><span class=\"line\">          <span class=\"attr\">auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">        <span class=\"attr\">dialect:</span> <span class=\"string\">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改bootstrap.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-product</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      config:</span><br><span class=\"line\">\t\tserver-addr: 127.0.0.1:8848 #nacos中心地址</span><br><span class=\"line\">\t\tfile-extension: yaml # 配置文件格式</span><br><span class=\"line\">\t\tshared-dataids: spring-cloud-all.yaml # 配置要引入的配置 refreshable-dataids: spring-cloud-all.yaml # 配置要实现动态配置刷新的配置 </span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">\tactive: dev # 环境标识 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动微服务进行测试</p>\n<h2 id=\"Nacos的几个概念\"><a href=\"#Nacos的几个概念\" class=\"headerlink\" title=\"Nacos的几个概念\"></a>Nacos的几个概念</h2><p><strong>命名空间(Namespace)</strong></p>\n<p>命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间</p>\n<p><strong>配置分组(Group)</strong></p>\n<p>配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组</p>\n<p><strong>配置集(Data ID)</strong></p>\n<p>在系统中，一个配置文件通常就是一个配置集。一般微服务的配置就是一个配置集</p>\n<p><img src=\"/typora-user-images/image-20231024101307177.png\" alt=\"image-20231024101307177\"></p>\n","excerpt":"","more":"<p>o<code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.08.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\"><a href=\"#Spring-Cloud-Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\" class=\"headerlink\" title=\"Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系\"></a>Spring Cloud Alibaba-03-Nacos之配置中心、命名空间分组和DataID的关系</h1><p>[toc]</p>\n<h2 id=\"服务配置中心介绍\"><a href=\"#服务配置中心介绍\" class=\"headerlink\" title=\"服务配置中心介绍\"></a>服务配置中心介绍</h2><p>首先我们来看一下,微服务架构下关于配置文件的一些问题:</p>\n<ol>\n<li>配置文件相对分散。在一个微服务架构下，配置文件会随着微服务的增多变的越来越多，而且分散 在各个微服务中，不好统一配置和管理。</li>\n<li>配置文件无法区分环境。微服务项目可能会有多个环境，例如:测试环境、预发布环境、生产环 境。每一个环境所使用的配置理论上都是不同的，一旦需要修改，就需要我们去各个微服务下手动 维护，这比较困难。</li>\n<li>配置文件无法实时更新。我们修改了配置文件之后，必须重新启动微服务才能使配置生效，这对一 个正在运行的项目来说是非常不友好的。</li>\n</ol>\n<p>基于上面这些问题，我们就需要配置中心的加入来解决这些问题。 配置中心的思路是:</p>\n<ul>\n<li>首先把项目中各种配置全部都放到一个集中的地方进行统一管理，并提供一套标准的接口。</li>\n<li>当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。当配置中心中的各种参数有更新的时候，也能通知到各个服务实时的过来同步最新的信息，使之动态更新。</li>\n</ul>\n<p>常见的服务配置中心：</p>\n<table>\n<thead>\n<tr>\n<th>配置中心</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Apollo</strong></td>\n<td>Apollo是由携程开源的分布式配置中心。特点有很多，比如:配置更新之后可以实时生效，支持灰 度发布功能，并且能对所有的配置进行版本管理、操作审计等功能，提供开放平台API。并且资料 也写的很详细。</td>\n</tr>\n<tr>\n<td><strong>Disconf</strong></td>\n<td>Disconf是由百度开源的分布式配置中心。它是基于Zookeeper来实现配置变更后实时通知和生效 的。</td>\n</tr>\n<tr>\n<td>**SpringCloud Config              **</td>\n<td>这是Spring Cloud中带的配置中心组件。它和Spring是无缝集成，使用起来非常方便，并且它的配 置存储支持Git。不过它没有可视化的操作界面，配置的生效也不是实时的，需要重启或去刷新。</td>\n</tr>\n<tr>\n<td><strong>Nacos</strong></td>\n<td>这是SpingCloud alibaba技术栈中的一个组件，前面我们已经使用它做过服务注册中心。其实它也 集成了服务配置的功能，我们可以直接使用它作为服务配置中心。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Nacos-Config基础配置\"><a href=\"#Nacos-Config基础配置\" class=\"headerlink\" title=\"Nacos Config基础配置\"></a>Nacos Config基础配置</h2><p>Nacos不仅仅可以作为注册中心来使用，同时它支持作为配置中心。就是将nacos当做一个服务端，将各个微服务看成是客户端，我们<br>将各个微服务的配置文件统一存放在nacos上，然后各个微服务从nacos上拉取配置即可</p>\n<p>1、 搭建nacos环境【使用现有的nacos环境即可】<br>2 、在微服务中引入nacos的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3、在微服务中添加nacos config的配置</p>\n<blockquote>\n<p>注意:不能使用原来的application.yml作为配置文件，而是新建一个bootstrap.yml作为配置文件</p>\n</blockquote>\n<p>配置文件优先级(由高到低):</p>\n<blockquote>\n<p>bootstrap.properties -&gt; bootstrap.yml -&gt; application.properties -&gt; application.yml</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-service</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yaml</span> <span class=\"comment\"># 配置文件格式 </span></span><br><span class=\"line\">        </span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> </span><br><span class=\"line\">\t  <span class=\"attr\">active:</span> <span class=\"string\">dev</span> <span class=\"comment\"># 环境标识      </span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>在nacos中添加配置 点击配置列表，点击右边+号，新建配置。在新建配置过程中，要注意下面的细节:</p>\n<blockquote>\n<p>1)Data ID不能随便写，要跟配置文件中的对应，对应关系如图所示<br>2)配置文件格式要跟配置文件的格式对应，且目前仅仅支持YAML和Properties<br>3)配置内容按照上面选定的格式书写</p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20231008103734081.png\" alt=\"image-20231008103734081\"></p>\n<p>注释本地的application.yam中的内容， 启动程序进行测试</p>\n<p>如果依旧可以成功访问程序，说明我们nacos的配置中心功能已经实现</p>\n<h2 id=\"Nacos-Config深入\"><a href=\"#Nacos-Config深入\" class=\"headerlink\" title=\"Nacos Config深入\"></a>Nacos Config深入</h2><h3 id=\"配置动态刷新\"><a href=\"#配置动态刷新\" class=\"headerlink\" title=\"配置动态刷新\"></a>配置动态刷新</h3><p>在基础配置中，但是此时如果修改了配置，我们的程序是无法读取到的，因此，我们需要开启配置的动态刷新功能。</p>\n<p>在nacos中的 spring-cloud-service-dev.yaml配置项中添加下面配置:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">appName:</span> <span class=\"string\">service</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>方式一</strong>: 硬编码方式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigurableApplicationContext applicationContext;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">\t <span class=\"meta\">@GetMapping(value = &quot;/getConfigName&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext.getEnvironment().getProperty(<span class=\"string\">&quot;config.appName&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>方式二</strong>: 注解方式(推荐)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span><span class=\"comment\">//只需要在需要动态读取配置的类上添加此注解就可以</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.appName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configName;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">//2 注解方式 </span></span><br><span class=\"line\">\t   <span class=\"meta\">@GetMapping(value = &quot;/getConfigNames&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigNames</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"配置共享\"><a href=\"#配置共享\" class=\"headerlink\" title=\"配置共享\"></a>配置共享</h3><p>当配置越来越多的时候，我们就发现有很多配置是重复的，这时候就考虑可不可以将公共配置文件 提取出来，然后实现共享呢?当然是可以的。接下来我们就来探讨如何实现这一功能。</p>\n<p><strong>同一个微服务的不同环境之间共享配置</strong></p>\n<p>如果想在同一个微服务的不同环境之间实现配置共享，其实很简单。<br>只需要提取一个以 spring.application.name 命名的配置文件，然后将其所有环境的公共配置放在里 面即可。</p>\n<p>1、新建一个名为spring-cloud-service.yaml配置存放服务的公共配置</p>\n<p><img src=\"/typora-user-images/image-20231024095726856.png\" alt=\"image-20231024095726856\"></p>\n<p>2 新建一个名为spring-cloud-service-test.yaml配置存放测试环境的配置</p>\n<p><img src=\"/typora-user-images/image-20231024095816182.png\" alt=\"image-20231024095816182\"></p>\n<p>3、 新建一个名为spring-cloud-service-dev.yaml配置存放测试环境的配置<img src=\"/typora-user-images/image-20231024095843156.png\" alt=\"image-20231024095843156\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RefreshScope</span><span class=\"comment\">//只需要在需要动态读取配置的类上添加此注解就可以</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.appName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String configName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;config.env&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String env;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/getConfigNames&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getConfigNames</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configName+<span class=\"string\">&quot;环境&quot;</span>+env;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>4、访问测试</p>\n<p><img src=\"/typora-user-images/image-20231024094558547.png\" alt=\"image-20231024094558547\"></p>\n<p>接下来，将active设置成test，再次访问，观察结果</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">     <span class=\"attr\">active:</span> <span class=\"string\">test</span> <span class=\"comment\"># 环境标识</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"不同微服务中间共享配置\"><a href=\"#不同微服务中间共享配置\" class=\"headerlink\" title=\"不同微服务中间共享配置\"></a><strong>不同微服务中间共享配置</strong></h3><p>不同为服务之间实现配置共享的原理类似于文件引入，就是定义一个公共配置，然后在当前配置中引<br>入。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://spring_cloud_service?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">root</span></span><br><span class=\"line\">  <span class=\"attr\">jpa:</span></span><br><span class=\"line\">    <span class=\"attr\">properties:</span></span><br><span class=\"line\">      <span class=\"attr\">hibernate:</span></span><br><span class=\"line\">        <span class=\"attr\">hbm2ddl:</span></span><br><span class=\"line\">          <span class=\"attr\">auto:</span> <span class=\"string\">update</span></span><br><span class=\"line\">        <span class=\"attr\">dialect:</span> <span class=\"string\">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改bootstrap.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: service-product</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      config:</span><br><span class=\"line\">\t\tserver-addr: 127.0.0.1:8848 #nacos中心地址</span><br><span class=\"line\">\t\tfile-extension: yaml # 配置文件格式</span><br><span class=\"line\">\t\tshared-dataids: spring-cloud-all.yaml # 配置要引入的配置 refreshable-dataids: spring-cloud-all.yaml # 配置要实现动态配置刷新的配置 </span><br><span class=\"line\">  profiles:</span><br><span class=\"line\">\tactive: dev # 环境标识 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>启动微服务进行测试</p>\n<h2 id=\"Nacos的几个概念\"><a href=\"#Nacos的几个概念\" class=\"headerlink\" title=\"Nacos的几个概念\"></a>Nacos的几个概念</h2><p><strong>命名空间(Namespace)</strong></p>\n<p>命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间</p>\n<p><strong>配置分组(Group)</strong></p>\n<p>配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组</p>\n<p><strong>配置集(Data ID)</strong></p>\n<p>在系统中，一个配置文件通常就是一个配置集。一般微服务的配置就是一个配置集</p>\n<p><img src=\"/typora-user-images/image-20231024101307177.png\" alt=\"image-20231024101307177\"></p>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.10.03`\n\n# Spring Cloud Alibaba-04-Sentinel规则持久化Nacos方式-推荐\n\n[toc]\n\n\n\n\n\n## Sentinel-Dashboard 添加规则Nacos双向绑定\n\n**官网文档地址**：https://sentinelguard.io/zh-cn/docs/quick-start.html\n\n思路\n从动态规则扩展章节得知，可以通过NacosDataSource作为配置数据源\n从Sentinel-Dashboard代码中可以得知，dashboard通过http请求推送配置变更\n\n\n\n~~~java\npublishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(5000, TimeUnit.MILLISECONDS);\n\n   List<FlowRuleEntity> rules = repository.findAllByMachine(MachineInfo.of(app, ip, port));\n        return sentinelApiClient.setFlowRuleOfMachineAsync(app, ip, port, rules);\n\n~~~\n\n所以，只需要在dashboard推送变更后，将配置保存到nacos中且搭配NacosDataSource扩展即可实现配置持久化\n\n从dashboard各个规则的Controller中可以发现，每个Controller都有类似repository的注入\n\n\n\n~~~java\n    @Autowired\n    private RuleRepository<DegradeRuleEntity, Long> repository;\n~~~\n\n负责规则的增删改查，默认提供的都是内存控制，例如InMemDegradeRuleStore ，每个内存控制类都继承同一个抽象类\n\n~~~java\npublic class InMemDegradeRuleStore extends InMemoryRuleRepositoryAdapter<DegradeRuleEntity>\n~~~\n\n\n\n只要在respository写操作后添加配置推送的nacos的操作\n\n\n\n## 实现\n\n### 注释掉test\n\n~~~xml\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n<!--            <scope>test</scope>-->\n        </dependency>\n\n~~~\n\n\n\n### 增加 NacosConfig配置\n\n\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.config;\n\n\nimport com.alibaba.nacos.api.NacosFactory;\nimport com.alibaba.nacos.api.PropertyKeyConst;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Properties;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.config-> NacosConfig\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */\n@Configuration\n@EnableConfigurationProperties(NacosConfig.NacosProperties.class)\npublic class NacosConfig {\n\n    @ConfigurationProperties(prefix = \"nacos.config\")\n    public static class NacosProperties{\n        private String group = \"DEFAULT_GROUP\";\n        private String namespace;\n        private String authDataId = \"sentinel-dashboard-auth\";\n\n        private String username;\n\n\n        private String password;\n        private Long timeout = 3000L;\n\n        private String serverAddr;\n\n        public String getGroup() {\n            return group;\n        }\n\n        public void setGroup(String group) {\n            this.group = group;\n        }\n\n        public String getNamespace() {\n            return namespace;\n        }\n\n        public void setNamespace(String namespace) {\n            this.namespace = namespace;\n        }\n\n        public Long getTimeout() {\n            return timeout;\n        }\n\n        public void setTimeout(Long timeout) {\n            this.timeout = timeout;\n        }\n\n        public String getServerAddr() {\n            return serverAddr;\n        }\n\n        public void setServerAddr(String serverAddr) {\n            this.serverAddr = serverAddr;\n        }\n\n        public String getAuthDataId() {\n            return authDataId;\n        }\n\n        public void setAuthDataId(String authDataId) {\n            this.authDataId = authDataId;\n        }\n\n        public String getUsername() { return username;}\n\n        public void setUsername(String username) { this.username = username;}\n\n        public String getPassword() {return password;}\n\n        public void setPassword(String password) { this.password = password;}\n    }\n\n    @Bean\n    public ConfigService configService(NacosProperties nacosProperties) throws NacosException {\n        Properties properties = new Properties();\n        properties.setProperty(PropertyKeyConst.SERVER_ADDR, nacosProperties.getServerAddr());\n        if (!StringUtils.isEmpty(nacosProperties.getNamespace())) {\n            properties.setProperty(PropertyKeyConst.NAMESPACE, nacosProperties.getNamespace());\n        }\n\n        if (!StringUtils.isEmpty(nacosProperties.getUsername())) {\n            properties.setProperty(PropertyKeyConst.USERNAME, nacosProperties.getUsername());\n        }\n\n        if (!StringUtils.isEmpty(nacosProperties.getPassword())) {\n            properties.setProperty(PropertyKeyConst.PASSWORD, nacosProperties.getPassword());\n        }\n\n        return NacosFactory.createConfigService(properties);\n    }\n\n}\n\n\n~~~\n\n### 加入Repository配置\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.config;\n\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.ApiDefinitionEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.GatewayFlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.AuthorityRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.DegradeRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.ParamFlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.SystemRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemApiDefinitionStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemGatewayFlowRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemAuthorityRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemDegradeRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemFlowRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemParamFlowRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemSystemRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemoryRuleRepositoryAdapter;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.NacosRepository;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.config-> NacosRepositoryConfig\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */\n@Configuration\npublic class NacosRepositoryConfig {\n    @Autowired\n    private ConfigService configService;\n    @Autowired\n    private NacosConfig.NacosProperties nacosProperties;\n\n    @Bean\n    public NacosRepository<ApiDefinitionEntity> apiDefinitionEntityNacosRepository(InMemApiDefinitionStore inMemApiDefinitionStore){\n        return buildNacosRepository(\"gateway-api-definition\",inMemApiDefinitionStore);\n    };\n\n    @Bean\n    public NacosRepository<GatewayFlowRuleEntity> gatewayFlowRuleEntityNacosRepository(InMemGatewayFlowRuleStore inMemGatewayFlowRuleStore){\n        return buildNacosRepository(\"gateway-flow-rule\",inMemGatewayFlowRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<AuthorityRuleEntity> authorityRuleEntityNacosRepository(InMemAuthorityRuleStore inMemAuthorityRuleStore){\n        return buildNacosRepository(\"authority-rule\",inMemAuthorityRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<DegradeRuleEntity> degradeRuleEntityNacosRepository(InMemDegradeRuleStore inMemDegradeRuleStore){\n        return buildNacosRepository(\"degrade-rule\",inMemDegradeRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<FlowRuleEntity> flowRuleEntityNacosRepository(InMemFlowRuleStore inMemFlowRuleStore){\n        return buildNacosRepository(\"flow-rule\",inMemFlowRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<ParamFlowRuleEntity> paramFlowRuleEntityNacosRepository(InMemParamFlowRuleStore inMemParamFlowRuleStore){\n        return buildNacosRepository(\"param-flow-rule\",inMemParamFlowRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<SystemRuleEntity> systemRuleEntityNacosRepository(InMemSystemRuleStore inMemSystemRuleStore){\n        return buildNacosRepository(\"system-rule\",inMemSystemRuleStore);\n    };\n\n    private <T extends RuleEntity> NacosRepository<T> buildNacosRepository(String suffix, InMemoryRuleRepositoryAdapter<T> ruleRepositoryAdapter){\n        NacosRepository<T> nacosRepository = new NacosRepository<>(suffix);\n        nacosRepository.setNacosProperties(nacosProperties);\n        nacosRepository.setRuleRepositoryAdapter(ruleRepositoryAdapter);\n        nacosRepository.setConfigService(configService);\n        return nacosRepository;\n    }\n\n}\n\n~~~\n\n\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.datasource.entity;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.Map;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.datasource.entity-> NacosEntity\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */public class NacosEntity<T extends RuleEntity> {\n\n    private T rule;\n\n    public NacosEntity(T sentinelRule) {\n        this.rule = sentinelRule;\n    }\n\n    // Getter方法\n    public T getRule() {\n        return rule;\n    }\n\n}\n\n~~~\n\n\n\n### 注入Repository\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.repository.rule;\n\n\nimport com.alibaba.csp.sentinel.dashboard.config.NacosConfig;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.NacosEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.discovery.MachineInfo;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.config.ConfigType;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.repository.rule-> NacosRepository\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */\n\npublic class NacosRepository<T extends RuleEntity> implements RuleRepository<T, Long> {\n\n    private ConfigService configService;\n\n    private NacosConfig.NacosProperties nacosProperties;\n\n    private InMemoryRuleRepositoryAdapter<T> ruleRepositoryAdapter;\n\n    private final String suffix;\n\n    public NacosRepository(String suffix){\n        this.suffix = suffix;\n    }\n\n    public ConfigService getConfigService() {\n        return configService;\n    }\n\n    public void setConfigService(ConfigService configService) {\n        this.configService = configService;\n    }\n\n    public NacosConfig.NacosProperties getNacosProperties() {\n        return nacosProperties;\n    }\n\n    public void setNacosProperties(NacosConfig.NacosProperties nacosProperties) {\n        this.nacosProperties = nacosProperties;\n    }\n\n    public InMemoryRuleRepositoryAdapter<T> getRuleRepositoryAdapter() {\n        return ruleRepositoryAdapter;\n    }\n\n    public void setRuleRepositoryAdapter(InMemoryRuleRepositoryAdapter<T> ruleRepositoryAdapter) {\n        this.ruleRepositoryAdapter = ruleRepositoryAdapter;\n    }\n\n    @Override\n    public T save(T entity) {\n        T save = ruleRepositoryAdapter.save(entity);\n        publishConfig(entity.getApp());\n        return save;\n    }\n\n    @Override\n    public List<T> saveAll(List<T> rules) {\n        List<T> ts = ruleRepositoryAdapter.saveAll(rules);\n        if(ts!=null && !ts.isEmpty()){\n            publishConfig(ts.get(0).getApp());\n        }\n        return ts;\n    }\n\n    @Override\n    public T delete(Long id) {\n        T delete = ruleRepositoryAdapter.delete(id);\n        publishConfig(delete.getApp());\n        return delete;\n    }\n\n    @Override\n    public T findById(Long id) {\n        return ruleRepositoryAdapter.findById(id);\n    }\n\n    @Override\n    public List<T> findAllByMachine(MachineInfo machineInfo) {\n        return ruleRepositoryAdapter.findAllByMachine(machineInfo);\n    }\n\n    @Override\n    public List<T> findAllByApp(String appName) {\n        return ruleRepositoryAdapter.findAllByApp(appName);\n    }\n\n    private void publishConfig(String app) {\n        try {\n            List<T> allByApp = ruleRepositoryAdapter.findAllByApp(app);\n            List<Object> rules = allByApp.stream().map(NacosEntity::new).map(NacosEntity::getRule).collect(Collectors.toList());\n            configService.publishConfig(app + \"-\" + suffix, nacosProperties.getGroup(), JSON.toJSONString(rules), ConfigType.JSON.getType());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n\n~~~\n\n\n\n\n\n### 最后替换掉对应Controller中对应的repository，\n\n~~~java\n@RestController\n@RequestMapping(value = \"/v1/flow\")\npublic class FlowControllerV1 {\n\n    private final Logger logger = LoggerFactory.getLogger(FlowControllerV1.class);\n\n    @Autowired\n    private NacosRepository<FlowRuleEntity> repository;\n}\n~~~\n\n### 添加参数配置\n\n~~~properties\n\nnacos.config.group=DEFAULT_GROUP;\nnacos.config.namespace=sentinelId;\nnacos.config.password=nacos;\nnacos.config.serverAddr=http://127.0.0.1:8848;\nnacos.config.username=nacos\n\n~~~\n\n客户端需要添加pom\n\n~~~xml\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n            <version>xxxx</version>\n        </dependency>\n\n~~~\n\n\n\n![image-20240221155333042](typora-user-images/image-20240221155333042.png)","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-04-Sentinel规则持久化全面Nacos方式.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.10.03`\n\n# Spring Cloud Alibaba-04-Sentinel规则持久化Nacos方式-推荐\n\n[toc]\n\n\n\n\n\n## Sentinel-Dashboard 添加规则Nacos双向绑定\n\n**官网文档地址**：https://sentinelguard.io/zh-cn/docs/quick-start.html\n\n思路\n从动态规则扩展章节得知，可以通过NacosDataSource作为配置数据源\n从Sentinel-Dashboard代码中可以得知，dashboard通过http请求推送配置变更\n\n\n\n~~~java\npublishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(5000, TimeUnit.MILLISECONDS);\n\n   List<FlowRuleEntity> rules = repository.findAllByMachine(MachineInfo.of(app, ip, port));\n        return sentinelApiClient.setFlowRuleOfMachineAsync(app, ip, port, rules);\n\n~~~\n\n所以，只需要在dashboard推送变更后，将配置保存到nacos中且搭配NacosDataSource扩展即可实现配置持久化\n\n从dashboard各个规则的Controller中可以发现，每个Controller都有类似repository的注入\n\n\n\n~~~java\n    @Autowired\n    private RuleRepository<DegradeRuleEntity, Long> repository;\n~~~\n\n负责规则的增删改查，默认提供的都是内存控制，例如InMemDegradeRuleStore ，每个内存控制类都继承同一个抽象类\n\n~~~java\npublic class InMemDegradeRuleStore extends InMemoryRuleRepositoryAdapter<DegradeRuleEntity>\n~~~\n\n\n\n只要在respository写操作后添加配置推送的nacos的操作\n\n\n\n## 实现\n\n### 注释掉test\n\n~~~xml\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n<!--            <scope>test</scope>-->\n        </dependency>\n\n~~~\n\n\n\n### 增加 NacosConfig配置\n\n\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.config;\n\n\nimport com.alibaba.nacos.api.NacosFactory;\nimport com.alibaba.nacos.api.PropertyKeyConst;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Properties;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.config-> NacosConfig\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */\n@Configuration\n@EnableConfigurationProperties(NacosConfig.NacosProperties.class)\npublic class NacosConfig {\n\n    @ConfigurationProperties(prefix = \"nacos.config\")\n    public static class NacosProperties{\n        private String group = \"DEFAULT_GROUP\";\n        private String namespace;\n        private String authDataId = \"sentinel-dashboard-auth\";\n\n        private String username;\n\n\n        private String password;\n        private Long timeout = 3000L;\n\n        private String serverAddr;\n\n        public String getGroup() {\n            return group;\n        }\n\n        public void setGroup(String group) {\n            this.group = group;\n        }\n\n        public String getNamespace() {\n            return namespace;\n        }\n\n        public void setNamespace(String namespace) {\n            this.namespace = namespace;\n        }\n\n        public Long getTimeout() {\n            return timeout;\n        }\n\n        public void setTimeout(Long timeout) {\n            this.timeout = timeout;\n        }\n\n        public String getServerAddr() {\n            return serverAddr;\n        }\n\n        public void setServerAddr(String serverAddr) {\n            this.serverAddr = serverAddr;\n        }\n\n        public String getAuthDataId() {\n            return authDataId;\n        }\n\n        public void setAuthDataId(String authDataId) {\n            this.authDataId = authDataId;\n        }\n\n        public String getUsername() { return username;}\n\n        public void setUsername(String username) { this.username = username;}\n\n        public String getPassword() {return password;}\n\n        public void setPassword(String password) { this.password = password;}\n    }\n\n    @Bean\n    public ConfigService configService(NacosProperties nacosProperties) throws NacosException {\n        Properties properties = new Properties();\n        properties.setProperty(PropertyKeyConst.SERVER_ADDR, nacosProperties.getServerAddr());\n        if (!StringUtils.isEmpty(nacosProperties.getNamespace())) {\n            properties.setProperty(PropertyKeyConst.NAMESPACE, nacosProperties.getNamespace());\n        }\n\n        if (!StringUtils.isEmpty(nacosProperties.getUsername())) {\n            properties.setProperty(PropertyKeyConst.USERNAME, nacosProperties.getUsername());\n        }\n\n        if (!StringUtils.isEmpty(nacosProperties.getPassword())) {\n            properties.setProperty(PropertyKeyConst.PASSWORD, nacosProperties.getPassword());\n        }\n\n        return NacosFactory.createConfigService(properties);\n    }\n\n}\n\n\n~~~\n\n### 加入Repository配置\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.config;\n\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.ApiDefinitionEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.GatewayFlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.AuthorityRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.DegradeRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.ParamFlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.SystemRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemApiDefinitionStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemGatewayFlowRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemAuthorityRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemDegradeRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemFlowRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemParamFlowRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemSystemRuleStore;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.InMemoryRuleRepositoryAdapter;\nimport com.alibaba.csp.sentinel.dashboard.repository.rule.NacosRepository;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.config-> NacosRepositoryConfig\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */\n@Configuration\npublic class NacosRepositoryConfig {\n    @Autowired\n    private ConfigService configService;\n    @Autowired\n    private NacosConfig.NacosProperties nacosProperties;\n\n    @Bean\n    public NacosRepository<ApiDefinitionEntity> apiDefinitionEntityNacosRepository(InMemApiDefinitionStore inMemApiDefinitionStore){\n        return buildNacosRepository(\"gateway-api-definition\",inMemApiDefinitionStore);\n    };\n\n    @Bean\n    public NacosRepository<GatewayFlowRuleEntity> gatewayFlowRuleEntityNacosRepository(InMemGatewayFlowRuleStore inMemGatewayFlowRuleStore){\n        return buildNacosRepository(\"gateway-flow-rule\",inMemGatewayFlowRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<AuthorityRuleEntity> authorityRuleEntityNacosRepository(InMemAuthorityRuleStore inMemAuthorityRuleStore){\n        return buildNacosRepository(\"authority-rule\",inMemAuthorityRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<DegradeRuleEntity> degradeRuleEntityNacosRepository(InMemDegradeRuleStore inMemDegradeRuleStore){\n        return buildNacosRepository(\"degrade-rule\",inMemDegradeRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<FlowRuleEntity> flowRuleEntityNacosRepository(InMemFlowRuleStore inMemFlowRuleStore){\n        return buildNacosRepository(\"flow-rule\",inMemFlowRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<ParamFlowRuleEntity> paramFlowRuleEntityNacosRepository(InMemParamFlowRuleStore inMemParamFlowRuleStore){\n        return buildNacosRepository(\"param-flow-rule\",inMemParamFlowRuleStore);\n    };\n\n    @Bean\n    @Primary\n    public NacosRepository<SystemRuleEntity> systemRuleEntityNacosRepository(InMemSystemRuleStore inMemSystemRuleStore){\n        return buildNacosRepository(\"system-rule\",inMemSystemRuleStore);\n    };\n\n    private <T extends RuleEntity> NacosRepository<T> buildNacosRepository(String suffix, InMemoryRuleRepositoryAdapter<T> ruleRepositoryAdapter){\n        NacosRepository<T> nacosRepository = new NacosRepository<>(suffix);\n        nacosRepository.setNacosProperties(nacosProperties);\n        nacosRepository.setRuleRepositoryAdapter(ruleRepositoryAdapter);\n        nacosRepository.setConfigService(configService);\n        return nacosRepository;\n    }\n\n}\n\n~~~\n\n\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.datasource.entity;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.Map;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.datasource.entity-> NacosEntity\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */public class NacosEntity<T extends RuleEntity> {\n\n    private T rule;\n\n    public NacosEntity(T sentinelRule) {\n        this.rule = sentinelRule;\n    }\n\n    // Getter方法\n    public T getRule() {\n        return rule;\n    }\n\n}\n\n~~~\n\n\n\n### 注入Repository\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.repository.rule;\n\n\nimport com.alibaba.csp.sentinel.dashboard.config.NacosConfig;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.NacosEntity;\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.discovery.MachineInfo;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.config.ConfigType;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * @className: com.alibaba.csp.sentinel.dashboard.repository.rule-> NacosRepository\n * @description:\n * @author: Lison\n * @createDate: 2023-10-03\n */\n\npublic class NacosRepository<T extends RuleEntity> implements RuleRepository<T, Long> {\n\n    private ConfigService configService;\n\n    private NacosConfig.NacosProperties nacosProperties;\n\n    private InMemoryRuleRepositoryAdapter<T> ruleRepositoryAdapter;\n\n    private final String suffix;\n\n    public NacosRepository(String suffix){\n        this.suffix = suffix;\n    }\n\n    public ConfigService getConfigService() {\n        return configService;\n    }\n\n    public void setConfigService(ConfigService configService) {\n        this.configService = configService;\n    }\n\n    public NacosConfig.NacosProperties getNacosProperties() {\n        return nacosProperties;\n    }\n\n    public void setNacosProperties(NacosConfig.NacosProperties nacosProperties) {\n        this.nacosProperties = nacosProperties;\n    }\n\n    public InMemoryRuleRepositoryAdapter<T> getRuleRepositoryAdapter() {\n        return ruleRepositoryAdapter;\n    }\n\n    public void setRuleRepositoryAdapter(InMemoryRuleRepositoryAdapter<T> ruleRepositoryAdapter) {\n        this.ruleRepositoryAdapter = ruleRepositoryAdapter;\n    }\n\n    @Override\n    public T save(T entity) {\n        T save = ruleRepositoryAdapter.save(entity);\n        publishConfig(entity.getApp());\n        return save;\n    }\n\n    @Override\n    public List<T> saveAll(List<T> rules) {\n        List<T> ts = ruleRepositoryAdapter.saveAll(rules);\n        if(ts!=null && !ts.isEmpty()){\n            publishConfig(ts.get(0).getApp());\n        }\n        return ts;\n    }\n\n    @Override\n    public T delete(Long id) {\n        T delete = ruleRepositoryAdapter.delete(id);\n        publishConfig(delete.getApp());\n        return delete;\n    }\n\n    @Override\n    public T findById(Long id) {\n        return ruleRepositoryAdapter.findById(id);\n    }\n\n    @Override\n    public List<T> findAllByMachine(MachineInfo machineInfo) {\n        return ruleRepositoryAdapter.findAllByMachine(machineInfo);\n    }\n\n    @Override\n    public List<T> findAllByApp(String appName) {\n        return ruleRepositoryAdapter.findAllByApp(appName);\n    }\n\n    private void publishConfig(String app) {\n        try {\n            List<T> allByApp = ruleRepositoryAdapter.findAllByApp(app);\n            List<Object> rules = allByApp.stream().map(NacosEntity::new).map(NacosEntity::getRule).collect(Collectors.toList());\n            configService.publishConfig(app + \"-\" + suffix, nacosProperties.getGroup(), JSON.toJSONString(rules), ConfigType.JSON.getType());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n\n~~~\n\n\n\n\n\n### 最后替换掉对应Controller中对应的repository，\n\n~~~java\n@RestController\n@RequestMapping(value = \"/v1/flow\")\npublic class FlowControllerV1 {\n\n    private final Logger logger = LoggerFactory.getLogger(FlowControllerV1.class);\n\n    @Autowired\n    private NacosRepository<FlowRuleEntity> repository;\n}\n~~~\n\n### 添加参数配置\n\n~~~properties\n\nnacos.config.group=DEFAULT_GROUP;\nnacos.config.namespace=sentinelId;\nnacos.config.password=nacos;\nnacos.config.serverAddr=http://127.0.0.1:8848;\nnacos.config.username=nacos\n\n~~~\n\n客户端需要添加pom\n\n~~~xml\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n            <version>xxxx</version>\n        </dependency>\n\n~~~\n\n\n\n![image-20240221155333042](typora-user-images/image-20240221155333042.png)","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-04-Sentinel规则持久化全面Nacos方式","published":1,"date":"2024-02-21T02:16:49.053Z","updated":"2024-02-21T07:55:28.076Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhg0002ecfyhfup6r11","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.10.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-04-Sentinel规则持久化Nacos方式-推荐\"><a href=\"#Spring-Cloud-Alibaba-04-Sentinel规则持久化Nacos方式-推荐\" class=\"headerlink\" title=\"Spring Cloud Alibaba-04-Sentinel规则持久化Nacos方式-推荐\"></a>Spring Cloud Alibaba-04-Sentinel规则持久化Nacos方式-推荐</h1><p>[toc]</p>\n<h2 id=\"Sentinel-Dashboard-添加规则Nacos双向绑定\"><a href=\"#Sentinel-Dashboard-添加规则Nacos双向绑定\" class=\"headerlink\" title=\"Sentinel-Dashboard 添加规则Nacos双向绑定\"></a>Sentinel-Dashboard 添加规则Nacos双向绑定</h2><p><strong>官网文档地址</strong>：<a href=\"https://sentinelguard.io/zh-cn/docs/quick-start.html\">https://sentinelguard.io/zh-cn/docs/quick-start.html</a></p>\n<p>思路<br>从动态规则扩展章节得知，可以通过NacosDataSource作为配置数据源<br>从Sentinel-Dashboard代码中可以得知，dashboard通过http请求推送配置变更</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(<span class=\"number\">5000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;FlowRuleEntity&gt; rules = repository.findAllByMachine(MachineInfo.of(app, ip, port));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sentinelApiClient.setFlowRuleOfMachineAsync(app, ip, port, rules);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所以，只需要在dashboard推送变更后，将配置保存到nacos中且搭配NacosDataSource扩展即可实现配置持久化</p>\n<p>从dashboard各个规则的Controller中可以发现，每个Controller都有类似repository的注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RuleRepository&lt;DegradeRuleEntity, Long&gt; repository;</span><br></pre></td></tr></table></figure>\n\n<p>负责规则的增删改查，默认提供的都是内存控制，例如InMemDegradeRuleStore ，每个内存控制类都继承同一个抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InMemDegradeRuleStore</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InMemoryRuleRepositoryAdapter</span>&lt;DegradeRuleEntity&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>只要在respository写操作后添加配置推送的nacos的操作</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"注释掉test\"><a href=\"#注释掉test\" class=\"headerlink\" title=\"注释掉test\"></a>注释掉test</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"增加-NacosConfig配置\"><a href=\"#增加-NacosConfig配置\" class=\"headerlink\" title=\"增加 NacosConfig配置\"></a>增加 NacosConfig配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.NacosFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.PropertyKeyConst;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.config-&gt; NacosConfig</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(NacosConfig.NacosProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;nacos.config&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosProperties</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">authDataId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sentinel-dashboard-auth&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">Long</span> <span class=\"variable\">timeout</span> <span class=\"operator\">=</span> <span class=\"number\">3000L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String serverAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getGroup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> group;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGroup</span><span class=\"params\">(String group)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.group = group;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getNamespace</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> namespace;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNamespace</span><span class=\"params\">(String namespace)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.namespace = namespace;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Long <span class=\"title function_\">getTimeout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> timeout;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTimeout</span><span class=\"params\">(Long timeout)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.timeout = timeout;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getServerAddr</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> serverAddr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setServerAddr</span><span class=\"params\">(String serverAddr)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.serverAddr = serverAddr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getAuthDataId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> authDataId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthDataId</span><span class=\"params\">(String authDataId)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.authDataId = authDataId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> username;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> &#123; <span class=\"built_in\">this</span>.username = username;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> password;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPassword</span><span class=\"params\">(String password)</span> &#123; <span class=\"built_in\">this</span>.password = password;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigService <span class=\"title function_\">configService</span><span class=\"params\">(NacosProperties nacosProperties)</span> <span class=\"keyword\">throws</span> NacosException &#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.setProperty(PropertyKeyConst.SERVER_ADDR, nacosProperties.getServerAddr());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(nacosProperties.getNamespace())) &#123;</span><br><span class=\"line\">            properties.setProperty(PropertyKeyConst.NAMESPACE, nacosProperties.getNamespace());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(nacosProperties.getUsername())) &#123;</span><br><span class=\"line\">            properties.setProperty(PropertyKeyConst.USERNAME, nacosProperties.getUsername());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(nacosProperties.getPassword())) &#123;</span><br><span class=\"line\">            properties.setProperty(PropertyKeyConst.PASSWORD, nacosProperties.getPassword());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> NacosFactory.createConfigService(properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加入Repository配置\"><a href=\"#加入Repository配置\" class=\"headerlink\" title=\"加入Repository配置\"></a>加入Repository配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.ApiDefinitionEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.GatewayFlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.AuthorityRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.DegradeRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.ParamFlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.SystemRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemApiDefinitionStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemGatewayFlowRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemAuthorityRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemDegradeRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemFlowRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemParamFlowRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemSystemRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemoryRuleRepositoryAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.NacosRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.config-&gt; NacosRepositoryConfig</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosRepositoryConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NacosConfig.NacosProperties nacosProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;ApiDefinitionEntity&gt; <span class=\"title function_\">apiDefinitionEntityNacosRepository</span><span class=\"params\">(InMemApiDefinitionStore inMemApiDefinitionStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;gateway-api-definition&quot;</span>,inMemApiDefinitionStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;GatewayFlowRuleEntity&gt; <span class=\"title function_\">gatewayFlowRuleEntityNacosRepository</span><span class=\"params\">(InMemGatewayFlowRuleStore inMemGatewayFlowRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;gateway-flow-rule&quot;</span>,inMemGatewayFlowRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;AuthorityRuleEntity&gt; <span class=\"title function_\">authorityRuleEntityNacosRepository</span><span class=\"params\">(InMemAuthorityRuleStore inMemAuthorityRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;authority-rule&quot;</span>,inMemAuthorityRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;DegradeRuleEntity&gt; <span class=\"title function_\">degradeRuleEntityNacosRepository</span><span class=\"params\">(InMemDegradeRuleStore inMemDegradeRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;degrade-rule&quot;</span>,inMemDegradeRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;FlowRuleEntity&gt; <span class=\"title function_\">flowRuleEntityNacosRepository</span><span class=\"params\">(InMemFlowRuleStore inMemFlowRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;flow-rule&quot;</span>,inMemFlowRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;ParamFlowRuleEntity&gt; <span class=\"title function_\">paramFlowRuleEntityNacosRepository</span><span class=\"params\">(InMemParamFlowRuleStore inMemParamFlowRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;param-flow-rule&quot;</span>,inMemParamFlowRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;SystemRuleEntity&gt; <span class=\"title function_\">systemRuleEntityNacosRepository</span><span class=\"params\">(InMemSystemRuleStore inMemSystemRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;system-rule&quot;</span>,inMemSystemRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">RuleEntity</span>&gt; NacosRepository&lt;T&gt; <span class=\"title function_\">buildNacosRepository</span><span class=\"params\">(String suffix, InMemoryRuleRepositoryAdapter&lt;T&gt; ruleRepositoryAdapter)</span>&#123;</span><br><span class=\"line\">        NacosRepository&lt;T&gt; nacosRepository = <span class=\"keyword\">new</span> <span class=\"title class_\">NacosRepository</span>&lt;&gt;(suffix);</span><br><span class=\"line\">        nacosRepository.setNacosProperties(nacosProperties);</span><br><span class=\"line\">        nacosRepository.setRuleRepositoryAdapter(ruleRepositoryAdapter);</span><br><span class=\"line\">        nacosRepository.setConfigService(configService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nacosRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.datasource.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.datasource.entity-&gt; NacosEntity</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosEntity</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">RuleEntity</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T rule;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NacosEntity</span><span class=\"params\">(T sentinelRule)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rule = sentinelRule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getRule</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注入Repository\"><a href=\"#注入Repository\" class=\"headerlink\" title=\"注入Repository\"></a>注入Repository</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.repository.rule;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.config.NacosConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.NacosEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.discovery.MachineInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.repository.rule-&gt; NacosRepository</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosRepository</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">RuleEntity</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">RuleRepository</span>&lt;T, Long&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NacosConfig.NacosProperties nacosProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InMemoryRuleRepositoryAdapter&lt;T&gt; ruleRepositoryAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NacosRepository</span><span class=\"params\">(String suffix)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigService <span class=\"title function_\">getConfigService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setConfigService</span><span class=\"params\">(ConfigService configService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configService = configService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosConfig.NacosProperties <span class=\"title function_\">getNacosProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nacosProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNacosProperties</span><span class=\"params\">(NacosConfig.NacosProperties nacosProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nacosProperties = nacosProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> InMemoryRuleRepositoryAdapter&lt;T&gt; <span class=\"title function_\">getRuleRepositoryAdapter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRuleRepositoryAdapter</span><span class=\"params\">(InMemoryRuleRepositoryAdapter&lt;T&gt; ruleRepositoryAdapter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ruleRepositoryAdapter = ruleRepositoryAdapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">save</span><span class=\"params\">(T entity)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">save</span> <span class=\"operator\">=</span> ruleRepositoryAdapter.save(entity);</span><br><span class=\"line\">        publishConfig(entity.getApp());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> save;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">saveAll</span><span class=\"params\">(List&lt;T&gt; rules)</span> &#123;</span><br><span class=\"line\">        List&lt;T&gt; ts = ruleRepositoryAdapter.saveAll(rules);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ts!=<span class=\"literal\">null</span> &amp;&amp; !ts.isEmpty())&#123;</span><br><span class=\"line\">            publishConfig(ts.get(<span class=\"number\">0</span>).getApp());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">delete</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> ruleRepositoryAdapter.delete(id);</span><br><span class=\"line\">        publishConfig(delete.getApp());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> delete;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">findById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">findAllByMachine</span><span class=\"params\">(MachineInfo machineInfo)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter.findAllByMachine(machineInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">findAllByApp</span><span class=\"params\">(String appName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter.findAllByApp(appName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishConfig</span><span class=\"params\">(String app)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;T&gt; allByApp = ruleRepositoryAdapter.findAllByApp(app);</span><br><span class=\"line\">            List&lt;Object&gt; rules = allByApp.stream().map(NacosEntity::<span class=\"keyword\">new</span>).map(NacosEntity::getRule).collect(Collectors.toList());</span><br><span class=\"line\">            configService.publishConfig(app + <span class=\"string\">&quot;-&quot;</span> + suffix, nacosProperties.getGroup(), JSON.toJSONString(rules), ConfigType.JSON.getType());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"最后替换掉对应Controller中对应的repository，\"><a href=\"#最后替换掉对应Controller中对应的repository，\" class=\"headerlink\" title=\"最后替换掉对应Controller中对应的repository，\"></a>最后替换掉对应Controller中对应的repository，</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/v1/flow&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowControllerV1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(FlowControllerV1.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NacosRepository&lt;FlowRuleEntity&gt; repository;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加参数配置\"><a href=\"#添加参数配置\" class=\"headerlink\" title=\"添加参数配置\"></a>添加参数配置</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nacos.config.group</span>=<span class=\"string\">DEFAULT_GROUP;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.namespace</span>=<span class=\"string\">sentinelId;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.password</span>=<span class=\"string\">nacos;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.serverAddr</span>=<span class=\"string\">http://127.0.0.1:8848;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.username</span>=<span class=\"string\">nacos</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>客户端需要添加pom</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>xxxx<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240221155333042.png\" alt=\"image-20240221155333042\"></p>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.10.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-04-Sentinel规则持久化Nacos方式-推荐\"><a href=\"#Spring-Cloud-Alibaba-04-Sentinel规则持久化Nacos方式-推荐\" class=\"headerlink\" title=\"Spring Cloud Alibaba-04-Sentinel规则持久化Nacos方式-推荐\"></a>Spring Cloud Alibaba-04-Sentinel规则持久化Nacos方式-推荐</h1><p>[toc]</p>\n<h2 id=\"Sentinel-Dashboard-添加规则Nacos双向绑定\"><a href=\"#Sentinel-Dashboard-添加规则Nacos双向绑定\" class=\"headerlink\" title=\"Sentinel-Dashboard 添加规则Nacos双向绑定\"></a>Sentinel-Dashboard 添加规则Nacos双向绑定</h2><p><strong>官网文档地址</strong>：<a href=\"https://sentinelguard.io/zh-cn/docs/quick-start.html\">https://sentinelguard.io/zh-cn/docs/quick-start.html</a></p>\n<p>思路<br>从动态规则扩展章节得知，可以通过NacosDataSource作为配置数据源<br>从Sentinel-Dashboard代码中可以得知，dashboard通过http请求推送配置变更</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(<span class=\"number\">5000</span>, TimeUnit.MILLISECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">   List&lt;FlowRuleEntity&gt; rules = repository.findAllByMachine(MachineInfo.of(app, ip, port));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sentinelApiClient.setFlowRuleOfMachineAsync(app, ip, port, rules);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>所以，只需要在dashboard推送变更后，将配置保存到nacos中且搭配NacosDataSource扩展即可实现配置持久化</p>\n<p>从dashboard各个规则的Controller中可以发现，每个Controller都有类似repository的注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> RuleRepository&lt;DegradeRuleEntity, Long&gt; repository;</span><br></pre></td></tr></table></figure>\n\n<p>负责规则的增删改查，默认提供的都是内存控制，例如InMemDegradeRuleStore ，每个内存控制类都继承同一个抽象类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InMemDegradeRuleStore</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InMemoryRuleRepositoryAdapter</span>&lt;DegradeRuleEntity&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>只要在respository写操作后添加配置推送的nacos的操作</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"注释掉test\"><a href=\"#注释掉test\" class=\"headerlink\" title=\"注释掉test\"></a>注释掉test</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"增加-NacosConfig配置\"><a href=\"#增加-NacosConfig配置\" class=\"headerlink\" title=\"增加 NacosConfig配置\"></a>增加 NacosConfig配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.NacosFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.PropertyKeyConst;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.exception.NacosException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.config-&gt; NacosConfig</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(NacosConfig.NacosProperties.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;nacos.config&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosProperties</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">group</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DEFAULT_GROUP&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String namespace;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">authDataId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;sentinel-dashboard-auth&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">Long</span> <span class=\"variable\">timeout</span> <span class=\"operator\">=</span> <span class=\"number\">3000L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String serverAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getGroup</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> group;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGroup</span><span class=\"params\">(String group)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.group = group;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getNamespace</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> namespace;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNamespace</span><span class=\"params\">(String namespace)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.namespace = namespace;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Long <span class=\"title function_\">getTimeout</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> timeout;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTimeout</span><span class=\"params\">(Long timeout)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.timeout = timeout;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getServerAddr</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> serverAddr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setServerAddr</span><span class=\"params\">(String serverAddr)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.serverAddr = serverAddr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getAuthDataId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> authDataId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAuthDataId</span><span class=\"params\">(String authDataId)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.authDataId = authDataId;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getUsername</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> username;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUsername</span><span class=\"params\">(String username)</span> &#123; <span class=\"built_in\">this</span>.username = username;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">getPassword</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> password;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPassword</span><span class=\"params\">(String password)</span> &#123; <span class=\"built_in\">this</span>.password = password;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigService <span class=\"title function_\">configService</span><span class=\"params\">(NacosProperties nacosProperties)</span> <span class=\"keyword\">throws</span> NacosException &#123;</span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        properties.setProperty(PropertyKeyConst.SERVER_ADDR, nacosProperties.getServerAddr());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(nacosProperties.getNamespace())) &#123;</span><br><span class=\"line\">            properties.setProperty(PropertyKeyConst.NAMESPACE, nacosProperties.getNamespace());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(nacosProperties.getUsername())) &#123;</span><br><span class=\"line\">            properties.setProperty(PropertyKeyConst.USERNAME, nacosProperties.getUsername());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(nacosProperties.getPassword())) &#123;</span><br><span class=\"line\">            properties.setProperty(PropertyKeyConst.PASSWORD, nacosProperties.getPassword());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> NacosFactory.createConfigService(properties);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加入Repository配置\"><a href=\"#加入Repository配置\" class=\"headerlink\" title=\"加入Repository配置\"></a>加入Repository配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.ApiDefinitionEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.gateway.GatewayFlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.AuthorityRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.DegradeRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.ParamFlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.SystemRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemApiDefinitionStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.gateway.InMemGatewayFlowRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemAuthorityRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemDegradeRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemFlowRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemParamFlowRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemSystemRuleStore;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.InMemoryRuleRepositoryAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.repository.rule.NacosRepository;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Primary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.config-&gt; NacosRepositoryConfig</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosRepositoryConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NacosConfig.NacosProperties nacosProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;ApiDefinitionEntity&gt; <span class=\"title function_\">apiDefinitionEntityNacosRepository</span><span class=\"params\">(InMemApiDefinitionStore inMemApiDefinitionStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;gateway-api-definition&quot;</span>,inMemApiDefinitionStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;GatewayFlowRuleEntity&gt; <span class=\"title function_\">gatewayFlowRuleEntityNacosRepository</span><span class=\"params\">(InMemGatewayFlowRuleStore inMemGatewayFlowRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;gateway-flow-rule&quot;</span>,inMemGatewayFlowRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;AuthorityRuleEntity&gt; <span class=\"title function_\">authorityRuleEntityNacosRepository</span><span class=\"params\">(InMemAuthorityRuleStore inMemAuthorityRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;authority-rule&quot;</span>,inMemAuthorityRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;DegradeRuleEntity&gt; <span class=\"title function_\">degradeRuleEntityNacosRepository</span><span class=\"params\">(InMemDegradeRuleStore inMemDegradeRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;degrade-rule&quot;</span>,inMemDegradeRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;FlowRuleEntity&gt; <span class=\"title function_\">flowRuleEntityNacosRepository</span><span class=\"params\">(InMemFlowRuleStore inMemFlowRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;flow-rule&quot;</span>,inMemFlowRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;ParamFlowRuleEntity&gt; <span class=\"title function_\">paramFlowRuleEntityNacosRepository</span><span class=\"params\">(InMemParamFlowRuleStore inMemParamFlowRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;param-flow-rule&quot;</span>,inMemParamFlowRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosRepository&lt;SystemRuleEntity&gt; <span class=\"title function_\">systemRuleEntityNacosRepository</span><span class=\"params\">(InMemSystemRuleStore inMemSystemRuleStore)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> buildNacosRepository(<span class=\"string\">&quot;system-rule&quot;</span>,inMemSystemRuleStore);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">RuleEntity</span>&gt; NacosRepository&lt;T&gt; <span class=\"title function_\">buildNacosRepository</span><span class=\"params\">(String suffix, InMemoryRuleRepositoryAdapter&lt;T&gt; ruleRepositoryAdapter)</span>&#123;</span><br><span class=\"line\">        NacosRepository&lt;T&gt; nacosRepository = <span class=\"keyword\">new</span> <span class=\"title class_\">NacosRepository</span>&lt;&gt;(suffix);</span><br><span class=\"line\">        nacosRepository.setNacosProperties(nacosProperties);</span><br><span class=\"line\">        nacosRepository.setRuleRepositoryAdapter(ruleRepositoryAdapter);</span><br><span class=\"line\">        nacosRepository.setConfigService(configService);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nacosRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.datasource.entity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.datasource.entity-&gt; NacosEntity</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosEntity</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">RuleEntity</span>&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> T rule;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NacosEntity</span><span class=\"params\">(T sentinelRule)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rule = sentinelRule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getter方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">getRule</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rule;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注入Repository\"><a href=\"#注入Repository\" class=\"headerlink\" title=\"注入Repository\"></a>注入Repository</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.repository.rule;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.config.NacosConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.NacosEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.RuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.discovery.MachineInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.stream.Collectors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.alibaba.csp.sentinel.dashboard.repository.rule-&gt; NacosRepository</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-03</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosRepository</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">RuleEntity</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">RuleRepository</span>&lt;T, Long&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NacosConfig.NacosProperties nacosProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> InMemoryRuleRepositoryAdapter&lt;T&gt; ruleRepositoryAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String suffix;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NacosRepository</span><span class=\"params\">(String suffix)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.suffix = suffix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigService <span class=\"title function_\">getConfigService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> configService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setConfigService</span><span class=\"params\">(ConfigService configService)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configService = configService;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> NacosConfig.NacosProperties <span class=\"title function_\">getNacosProperties</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nacosProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setNacosProperties</span><span class=\"params\">(NacosConfig.NacosProperties nacosProperties)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.nacosProperties = nacosProperties;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> InMemoryRuleRepositoryAdapter&lt;T&gt; <span class=\"title function_\">getRuleRepositoryAdapter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setRuleRepositoryAdapter</span><span class=\"params\">(InMemoryRuleRepositoryAdapter&lt;T&gt; ruleRepositoryAdapter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ruleRepositoryAdapter = ruleRepositoryAdapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">save</span><span class=\"params\">(T entity)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">save</span> <span class=\"operator\">=</span> ruleRepositoryAdapter.save(entity);</span><br><span class=\"line\">        publishConfig(entity.getApp());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> save;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">saveAll</span><span class=\"params\">(List&lt;T&gt; rules)</span> &#123;</span><br><span class=\"line\">        List&lt;T&gt; ts = ruleRepositoryAdapter.saveAll(rules);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ts!=<span class=\"literal\">null</span> &amp;&amp; !ts.isEmpty())&#123;</span><br><span class=\"line\">            publishConfig(ts.get(<span class=\"number\">0</span>).getApp());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">delete</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">delete</span> <span class=\"operator\">=</span> ruleRepositoryAdapter.delete(id);</span><br><span class=\"line\">        publishConfig(delete.getApp());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> delete;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">findById</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter.findById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">findAllByMachine</span><span class=\"params\">(MachineInfo machineInfo)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter.findAllByMachine(machineInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title function_\">findAllByApp</span><span class=\"params\">(String appName)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ruleRepositoryAdapter.findAllByApp(appName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishConfig</span><span class=\"params\">(String app)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;T&gt; allByApp = ruleRepositoryAdapter.findAllByApp(app);</span><br><span class=\"line\">            List&lt;Object&gt; rules = allByApp.stream().map(NacosEntity::<span class=\"keyword\">new</span>).map(NacosEntity::getRule).collect(Collectors.toList());</span><br><span class=\"line\">            configService.publishConfig(app + <span class=\"string\">&quot;-&quot;</span> + suffix, nacosProperties.getGroup(), JSON.toJSONString(rules), ConfigType.JSON.getType());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"最后替换掉对应Controller中对应的repository，\"><a href=\"#最后替换掉对应Controller中对应的repository，\" class=\"headerlink\" title=\"最后替换掉对应Controller中对应的repository，\"></a>最后替换掉对应Controller中对应的repository，</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/v1/flow&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowControllerV1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">logger</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(FlowControllerV1.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NacosRepository&lt;FlowRuleEntity&gt; repository;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加参数配置\"><a href=\"#添加参数配置\" class=\"headerlink\" title=\"添加参数配置\"></a>添加参数配置</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">nacos.config.group</span>=<span class=\"string\">DEFAULT_GROUP;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.namespace</span>=<span class=\"string\">sentinelId;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.password</span>=<span class=\"string\">nacos;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.serverAddr</span>=<span class=\"string\">http://127.0.0.1:8848;</span></span><br><span class=\"line\"><span class=\"attr\">nacos.config.username</span>=<span class=\"string\">nacos</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>客户端需要添加pom</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>xxxx<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240221155333042.png\" alt=\"image-20240221155333042\"></p>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.10.16`\n\n# Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\n\n[toc]\n\n\n\n## 网关简介\n\nAPI Gateway（APIGW / API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，这里的边界是企业 IT 系统的边界，可以理解为企业级应用防火墙，主要起到隔离外部访问与内部系统的作用。在微服务概念的流行之前，API 网关就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。\n\nAPI 网关的流行，源于近几年来移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API网关成为了微服务架构的一个标配组件。\n\nAPI 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问。\n\n\n\n在业界比较流行的网关，有下面这些:\n\n**Ngnix+lua**\n\n使用nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用\nlua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本\n\n**Kong**\n\n基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。 问题: 只支持Http协议;二次开发，自由扩展困难;提供管理API，缺乏更易用的管控、配置方式。\n\n**Zuul**\n\nNetflix开源的网关，功能丰富，使用JAVA开发，易于二次开发 问题:缺乏管控，无法动态配 置;依赖组件较多;处理Http请求依赖的是Web容器，性能不如Nginx\n\n**Spring Cloud Gateway**\n\nSpring公司为了替换Zuul而开发的网关服务，将在下面具体介绍。\n\n> SpringCloud alibaba技术栈中并没有提供自己的网关，我们可以采用Spring Cloud Gateway 来做网关\n\n\n\n## Gateway简介\n\n### 什么是spring cloud gateway\n\n网关作为流量的入口，常用的功能包括路由转发、权限校验、限流等。\n\nSpring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括：Spring 5，Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 API，并为它们提供跨领域的关注点，例如：安全性，监视/指标，限流等。由于 Spring 5.0 支持 Netty，Http2，而 Spring Boot 2.0 支持 Spring 5.0，因此 Spring Cloud Gateway 支持 Netty 和 Http2 顺理成章。\n\n客户端向 Spring Cloud Gateway 发出请求，如果请求与网关程序定义的路由匹配，则将其发送到网关 Web 处理程序，此处理程序运行特定的请求过滤器链。\n\n过滤器之间用虚线分开的原因是过滤器可能会在发送代理请求之前或之后执行逻辑。所有 “pre” 过滤器逻辑先执行，然后执行代理请求，代理请求完成后，执行 “post” 过滤器逻辑。\n\n**spring cloud gateway功能特性：**\n\n（1）基于spring Framework5、Project Reactor和spring boot 2.0进行构建\n\n（2）动态路由：能够匹配任何请求属性\n\n（3）支持路径重写\n\n（4）集成spring cloud服务发现功能（nacos）\n\n（5）可集成流控级功能（sentinel）\n\n（6）可以对路由指定易于编写的Predicate（断言）、Filter（过滤器）\n\n\n\n**优点:**\n\n性能强劲:是第一代网关Zuul的1.6倍\n\n功能强大:内置了很多实用的功能，例如转发、监控、限流等\n\n设计优雅，容易扩展\n\n**缺点:**\n\n其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高\n\n不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行\n\n需要Spring Boot 2.0及以上的版本，才支持\n\n### 为什么要使用网关\n\n单体应用：浏览器发起请求到单体应用所在的机器，应用从数据库查询数据原路返回给浏览器，对于单体应用来说是不需要网关的。\n微服务：微服务的应用可能部署在不同机房，不同地区，不同域名下。此时客户端（浏览器/手机/软件工具）想要请求对应的服务，都需要知道机器的具体 IP 或者域名 URL，当微服务实例众多时，这是非常难以记忆的，对于客户端来说也太复杂难以维护。此时就有了网关，客户端相关的请求直接发送到网关，由网关根据请求标识解析判断出具体的微服务地址，再把请求转发到微服务实例。这其中的记忆功能就全部交由网关来操作了。\n\n网关介于客户端与服务器之间的中间层，所有外部请求率先经过微服务网关，客户端只需要与网关交互，只需要知道网关地址即可。这样便简化了开发且有以下优点：\n\n易于监控，可在微服务网关收集监控数据并将其推送到外部系统进行分析\n易于认证，可在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证\n减少了客户端与各个微服务之间的交互次数\n\n\n\n### Gateway核心架构\n\n **基本概念**\n路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:\n\n* **id**，路由标识符，区别于其他 Route。\n* uri，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。\n* order，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。\n* **predicate**，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。\n* **filter**，过滤器用于修改请求和响应信息。\n\n\n\n**执行流程**\n\n![img](typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png)\n\n**执行流程大体如下:**\n\n1. Gateway Client向Gateway Server发送请求\n2. 请求首先会被HttpWebHandlerAdapter进行提取组装成网关上下文\n3. 然后网关的上下文会传递到DispatcherHandler，它负责将请求分发给 RoutePredicateHandlerMapping\n4. RoutePredicateHandlerMapping负责路由查找，并根据路由断言判断路由是否可用\n5. 如果过断言成功，由FilteringWebHandler创建过滤器链并调用\n6. 请求会一次经过PreFilter–微服务–PostFilter的方法，最终返回响应\n\n\n\n## Gateway快速开始\n\n\n\n### 创建一个 spring-cloud-gateway的模块,导入相关依赖\n\n\n\n~~~java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lison</groupId>\n        <artifactId>spring-cloud-alibaba-building</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lison</groupId>\n    <artifactId>spring-cloud-gateway</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-cloud-gateway</name>\n    <description>spring-cloud-gateway</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n         </dependency>\n    </dependencies>\n\n</project>\n~~~\n\n\n\n\n\n### 创建主类\n\n~~~java\n@SpringBootApplication\npublic class SpringCloudGateWayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudGateWayApplication.class, args);\n    }\n\n}\n~~~\n\n\n\n### 添加配置文件\n\n~~~yaml\nserver:\n  port: 18003\nspring:\n  application:\n    name: spring-cloud-gateway\n  cloud:\n    gateway:\n      routes: # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]\n        - id: spring_service # 当前路由的标识, 要求唯一\n          uri: http://localhost:18001 # 请求要转发到的地址\n          order: 1 # 路由的优先级,数字越小级别越高\n          predicates: # 断言(就是路由转发要满足的条件)\n            - Path=/spring_service/** # 当请求路径满足Path指定的规则时,才进行路由转发\n          filters: # 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改\n            - StripPrefix=1 # 转发之前去掉1层路径\n\n\nmanagement:\n  endpoint:\n    web:\n      exposure:\n        include:'*'\n\n~~~\n\n\n访问 http://localhost:18003/spring_service/ 路由到 服务A http://localhost:18001/\n\n\n\n\n\n\n\n### 启动项目, 并通过网关去访问微服务\n\nhttp://localhost:18003/spring_service/gateway/test\n\n![image-20240222152145318](typora-user-images/image-20240222152145318.png)\n\n## Gateway访问进阶，Nacos 读取配置\n\n\n\n现在在配置文件中写死了转发路径的地址, 前面我们已经分析过地址写死带来的问题, 接下来我们从 注册中心获取此地址。\n\n\n\n### 加入Ncaos依赖\n\n~~~java\n<!--nacos客户端-->\n <dependency> \n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n\n~~~\n\n\n\n### 主类上添加注解\n\n~~~java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SpringCloudGateWayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudGateWayApplication.class, args);\n    }\n\n}\n~~~\n\n\n\n### 修改配置文件\n\n~~~yaml\nserver:\n  port: 18003\nspring:\n  application:\n    name: spring-cloud-gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: true # 让gateway可以发现nacos中的微服务\n      routes: # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]\n        - id: spring_service # 当前路由的标识, 要求唯一\n          uri: lb://spring-cloud-service # lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略\n          predicates: # 断言(就是路由转发要满足的条件)\n            - Path=/spring_service/** # 当请求路径满足Path指定的规则时,才进行路由转发\n          filters: # 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改\n            - StripPrefix=1 # 转发之前去掉1层路径\n\n~~~\n\n\n\n### 测试\n\n\n\n启动两个 service服务，配置不同端口\n\n![image-20240222164404555](typora-user-images/image-20240222164404555.png)\n\n![image-20240222164433038](typora-user-images/image-20240222164433038.png)\n\n访问之前可以访问服务端口的服务：http://localhost:18003/spring_service/getServerProd\n\n**访问到服务18001**\n\n![image-20240222164533515](typora-user-images/image-20240222164533515.png)\n\n**访问到服务18011**\n\n![image-20240222164517003](typora-user-images/image-20240222164517003.png)\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.10.16`\n\n# Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\n\n[toc]\n\n\n\n## 网关简介\n\nAPI Gateway（APIGW / API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，这里的边界是企业 IT 系统的边界，可以理解为企业级应用防火墙，主要起到隔离外部访问与内部系统的作用。在微服务概念的流行之前，API 网关就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。\n\nAPI 网关的流行，源于近几年来移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API网关成为了微服务架构的一个标配组件。\n\nAPI 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问。\n\n\n\n在业界比较流行的网关，有下面这些:\n\n**Ngnix+lua**\n\n使用nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用\nlua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本\n\n**Kong**\n\n基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。 问题: 只支持Http协议;二次开发，自由扩展困难;提供管理API，缺乏更易用的管控、配置方式。\n\n**Zuul**\n\nNetflix开源的网关，功能丰富，使用JAVA开发，易于二次开发 问题:缺乏管控，无法动态配 置;依赖组件较多;处理Http请求依赖的是Web容器，性能不如Nginx\n\n**Spring Cloud Gateway**\n\nSpring公司为了替换Zuul而开发的网关服务，将在下面具体介绍。\n\n> SpringCloud alibaba技术栈中并没有提供自己的网关，我们可以采用Spring Cloud Gateway 来做网关\n\n\n\n## Gateway简介\n\n### 什么是spring cloud gateway\n\n网关作为流量的入口，常用的功能包括路由转发、权限校验、限流等。\n\nSpring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括：Spring 5，Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 API，并为它们提供跨领域的关注点，例如：安全性，监视/指标，限流等。由于 Spring 5.0 支持 Netty，Http2，而 Spring Boot 2.0 支持 Spring 5.0，因此 Spring Cloud Gateway 支持 Netty 和 Http2 顺理成章。\n\n客户端向 Spring Cloud Gateway 发出请求，如果请求与网关程序定义的路由匹配，则将其发送到网关 Web 处理程序，此处理程序运行特定的请求过滤器链。\n\n过滤器之间用虚线分开的原因是过滤器可能会在发送代理请求之前或之后执行逻辑。所有 “pre” 过滤器逻辑先执行，然后执行代理请求，代理请求完成后，执行 “post” 过滤器逻辑。\n\n**spring cloud gateway功能特性：**\n\n（1）基于spring Framework5、Project Reactor和spring boot 2.0进行构建\n\n（2）动态路由：能够匹配任何请求属性\n\n（3）支持路径重写\n\n（4）集成spring cloud服务发现功能（nacos）\n\n（5）可集成流控级功能（sentinel）\n\n（6）可以对路由指定易于编写的Predicate（断言）、Filter（过滤器）\n\n\n\n**优点:**\n\n性能强劲:是第一代网关Zuul的1.6倍\n\n功能强大:内置了很多实用的功能，例如转发、监控、限流等\n\n设计优雅，容易扩展\n\n**缺点:**\n\n其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高\n\n不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行\n\n需要Spring Boot 2.0及以上的版本，才支持\n\n### 为什么要使用网关\n\n单体应用：浏览器发起请求到单体应用所在的机器，应用从数据库查询数据原路返回给浏览器，对于单体应用来说是不需要网关的。\n微服务：微服务的应用可能部署在不同机房，不同地区，不同域名下。此时客户端（浏览器/手机/软件工具）想要请求对应的服务，都需要知道机器的具体 IP 或者域名 URL，当微服务实例众多时，这是非常难以记忆的，对于客户端来说也太复杂难以维护。此时就有了网关，客户端相关的请求直接发送到网关，由网关根据请求标识解析判断出具体的微服务地址，再把请求转发到微服务实例。这其中的记忆功能就全部交由网关来操作了。\n\n网关介于客户端与服务器之间的中间层，所有外部请求率先经过微服务网关，客户端只需要与网关交互，只需要知道网关地址即可。这样便简化了开发且有以下优点：\n\n易于监控，可在微服务网关收集监控数据并将其推送到外部系统进行分析\n易于认证，可在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证\n减少了客户端与各个微服务之间的交互次数\n\n\n\n### Gateway核心架构\n\n **基本概念**\n路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:\n\n* **id**，路由标识符，区别于其他 Route。\n* uri，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。\n* order，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。\n* **predicate**，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。\n* **filter**，过滤器用于修改请求和响应信息。\n\n\n\n**执行流程**\n\n![img](typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png)\n\n**执行流程大体如下:**\n\n1. Gateway Client向Gateway Server发送请求\n2. 请求首先会被HttpWebHandlerAdapter进行提取组装成网关上下文\n3. 然后网关的上下文会传递到DispatcherHandler，它负责将请求分发给 RoutePredicateHandlerMapping\n4. RoutePredicateHandlerMapping负责路由查找，并根据路由断言判断路由是否可用\n5. 如果过断言成功，由FilteringWebHandler创建过滤器链并调用\n6. 请求会一次经过PreFilter–微服务–PostFilter的方法，最终返回响应\n\n\n\n## Gateway快速开始\n\n\n\n### 创建一个 spring-cloud-gateway的模块,导入相关依赖\n\n\n\n~~~java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lison</groupId>\n        <artifactId>spring-cloud-alibaba-building</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n    </parent>\n    <groupId>com.lison</groupId>\n    <artifactId>spring-cloud-gateway</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-cloud-gateway</name>\n    <description>spring-cloud-gateway</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n         </dependency>\n    </dependencies>\n\n</project>\n~~~\n\n\n\n\n\n### 创建主类\n\n~~~java\n@SpringBootApplication\npublic class SpringCloudGateWayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudGateWayApplication.class, args);\n    }\n\n}\n~~~\n\n\n\n### 添加配置文件\n\n~~~yaml\nserver:\n  port: 18003\nspring:\n  application:\n    name: spring-cloud-gateway\n  cloud:\n    gateway:\n      routes: # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]\n        - id: spring_service # 当前路由的标识, 要求唯一\n          uri: http://localhost:18001 # 请求要转发到的地址\n          order: 1 # 路由的优先级,数字越小级别越高\n          predicates: # 断言(就是路由转发要满足的条件)\n            - Path=/spring_service/** # 当请求路径满足Path指定的规则时,才进行路由转发\n          filters: # 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改\n            - StripPrefix=1 # 转发之前去掉1层路径\n\n\nmanagement:\n  endpoint:\n    web:\n      exposure:\n        include:'*'\n\n~~~\n\n\n访问 http://localhost:18003/spring_service/ 路由到 服务A http://localhost:18001/\n\n\n\n\n\n\n\n### 启动项目, 并通过网关去访问微服务\n\nhttp://localhost:18003/spring_service/gateway/test\n\n![image-20240222152145318](typora-user-images/image-20240222152145318.png)\n\n## Gateway访问进阶，Nacos 读取配置\n\n\n\n现在在配置文件中写死了转发路径的地址, 前面我们已经分析过地址写死带来的问题, 接下来我们从 注册中心获取此地址。\n\n\n\n### 加入Ncaos依赖\n\n~~~java\n<!--nacos客户端-->\n <dependency> \n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n</dependency>\n\n~~~\n\n\n\n### 主类上添加注解\n\n~~~java\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SpringCloudGateWayApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudGateWayApplication.class, args);\n    }\n\n}\n~~~\n\n\n\n### 修改配置文件\n\n~~~yaml\nserver:\n  port: 18003\nspring:\n  application:\n    name: spring-cloud-gateway\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: true # 让gateway可以发现nacos中的微服务\n      routes: # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]\n        - id: spring_service # 当前路由的标识, 要求唯一\n          uri: lb://spring-cloud-service # lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略\n          predicates: # 断言(就是路由转发要满足的条件)\n            - Path=/spring_service/** # 当请求路径满足Path指定的规则时,才进行路由转发\n          filters: # 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改\n            - StripPrefix=1 # 转发之前去掉1层路径\n\n~~~\n\n\n\n### 测试\n\n\n\n启动两个 service服务，配置不同端口\n\n![image-20240222164404555](typora-user-images/image-20240222164404555.png)\n\n![image-20240222164433038](typora-user-images/image-20240222164433038.png)\n\n访问之前可以访问服务端口的服务：http://localhost:18003/spring_service/getServerProd\n\n**访问到服务18001**\n\n![image-20240222164533515](typora-user-images/image-20240222164533515.png)\n\n**访问到服务18011**\n\n![image-20240222164517003](typora-user-images/image-20240222164517003.png)\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置","published":1,"date":"2024-02-20T07:20:10.329Z","updated":"2024-02-23T03:52:41.497Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhh0003ecfy3e6xah1v","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.10.16</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\"><a href=\"#Spring-Cloud-Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\" class=\"headerlink\" title=\"Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\"></a>Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置</h1><p>[toc]</p>\n<h2 id=\"网关简介\"><a href=\"#网关简介\" class=\"headerlink\" title=\"网关简介\"></a>网关简介</h2><p>API Gateway（APIGW &#x2F; API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，这里的边界是企业 IT 系统的边界，可以理解为企业级应用防火墙，主要起到隔离外部访问与内部系统的作用。在微服务概念的流行之前，API 网关就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。</p>\n<p>API 网关的流行，源于近几年来移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API网关成为了微服务架构的一个标配组件。</p>\n<p>API 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问。</p>\n<p>在业界比较流行的网关，有下面这些:</p>\n<p><strong>Ngnix+lua</strong></p>\n<p>使用nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用<br>lua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本</p>\n<p><strong>Kong</strong></p>\n<p>基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。 问题: 只支持Http协议;二次开发，自由扩展困难;提供管理API，缺乏更易用的管控、配置方式。</p>\n<p><strong>Zuul</strong></p>\n<p>Netflix开源的网关，功能丰富，使用JAVA开发，易于二次开发 问题:缺乏管控，无法动态配 置;依赖组件较多;处理Http请求依赖的是Web容器，性能不如Nginx</p>\n<p><strong>Spring Cloud Gateway</strong></p>\n<p>Spring公司为了替换Zuul而开发的网关服务，将在下面具体介绍。</p>\n<blockquote>\n<p>SpringCloud alibaba技术栈中并没有提供自己的网关，我们可以采用Spring Cloud Gateway 来做网关</p>\n</blockquote>\n<h2 id=\"Gateway简介\"><a href=\"#Gateway简介\" class=\"headerlink\" title=\"Gateway简介\"></a>Gateway简介</h2><h3 id=\"什么是spring-cloud-gateway\"><a href=\"#什么是spring-cloud-gateway\" class=\"headerlink\" title=\"什么是spring cloud gateway\"></a>什么是spring cloud gateway</h3><p>网关作为流量的入口，常用的功能包括路由转发、权限校验、限流等。</p>\n<p>Spring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括：Spring 5，Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 API，并为它们提供跨领域的关注点，例如：安全性，监视&#x2F;指标，限流等。由于 Spring 5.0 支持 Netty，Http2，而 Spring Boot 2.0 支持 Spring 5.0，因此 Spring Cloud Gateway 支持 Netty 和 Http2 顺理成章。</p>\n<p>客户端向 Spring Cloud Gateway 发出请求，如果请求与网关程序定义的路由匹配，则将其发送到网关 Web 处理程序，此处理程序运行特定的请求过滤器链。</p>\n<p>过滤器之间用虚线分开的原因是过滤器可能会在发送代理请求之前或之后执行逻辑。所有 “pre” 过滤器逻辑先执行，然后执行代理请求，代理请求完成后，执行 “post” 过滤器逻辑。</p>\n<p><strong>spring cloud gateway功能特性：</strong></p>\n<p>（1）基于spring Framework5、Project Reactor和spring boot 2.0进行构建</p>\n<p>（2）动态路由：能够匹配任何请求属性</p>\n<p>（3）支持路径重写</p>\n<p>（4）集成spring cloud服务发现功能（nacos）</p>\n<p>（5）可集成流控级功能（sentinel）</p>\n<p>（6）可以对路由指定易于编写的Predicate（断言）、Filter（过滤器）</p>\n<p><strong>优点:</strong></p>\n<p>性能强劲:是第一代网关Zuul的1.6倍</p>\n<p>功能强大:内置了很多实用的功能，例如转发、监控、限流等</p>\n<p>设计优雅，容易扩展</p>\n<p><strong>缺点:</strong></p>\n<p>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</p>\n<p>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行</p>\n<p>需要Spring Boot 2.0及以上的版本，才支持</p>\n<h3 id=\"为什么要使用网关\"><a href=\"#为什么要使用网关\" class=\"headerlink\" title=\"为什么要使用网关\"></a>为什么要使用网关</h3><p>单体应用：浏览器发起请求到单体应用所在的机器，应用从数据库查询数据原路返回给浏览器，对于单体应用来说是不需要网关的。<br>微服务：微服务的应用可能部署在不同机房，不同地区，不同域名下。此时客户端（浏览器&#x2F;手机&#x2F;软件工具）想要请求对应的服务，都需要知道机器的具体 IP 或者域名 URL，当微服务实例众多时，这是非常难以记忆的，对于客户端来说也太复杂难以维护。此时就有了网关，客户端相关的请求直接发送到网关，由网关根据请求标识解析判断出具体的微服务地址，再把请求转发到微服务实例。这其中的记忆功能就全部交由网关来操作了。</p>\n<p>网关介于客户端与服务器之间的中间层，所有外部请求率先经过微服务网关，客户端只需要与网关交互，只需要知道网关地址即可。这样便简化了开发且有以下优点：</p>\n<p>易于监控，可在微服务网关收集监控数据并将其推送到外部系统进行分析<br>易于认证，可在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证<br>减少了客户端与各个微服务之间的交互次数</p>\n<h3 id=\"Gateway核心架构\"><a href=\"#Gateway核心架构\" class=\"headerlink\" title=\"Gateway核心架构\"></a>Gateway核心架构</h3><p> <strong>基本概念</strong><br>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:</p>\n<ul>\n<li><strong>id</strong>，路由标识符，区别于其他 Route。</li>\n<li>uri，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。</li>\n<li>order，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。</li>\n<li><strong>predicate</strong>，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li>\n<li><strong>filter</strong>，过滤器用于修改请求和响应信息。</li>\n</ul>\n<p><strong>执行流程</strong></p>\n<p><img src=\"/typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png\" alt=\"img\"></p>\n<p><strong>执行流程大体如下:</strong></p>\n<ol>\n<li>Gateway Client向Gateway Server发送请求</li>\n<li>请求首先会被HttpWebHandlerAdapter进行提取组装成网关上下文</li>\n<li>然后网关的上下文会传递到DispatcherHandler，它负责将请求分发给 RoutePredicateHandlerMapping</li>\n<li>RoutePredicateHandlerMapping负责路由查找，并根据路由断言判断路由是否可用</li>\n<li>如果过断言成功，由FilteringWebHandler创建过滤器链并调用</li>\n<li>请求会一次经过PreFilter–微服务–PostFilter的方法，最终返回响应</li>\n</ol>\n<h2 id=\"Gateway快速开始\"><a href=\"#Gateway快速开始\" class=\"headerlink\" title=\"Gateway快速开始\"></a>Gateway快速开始</h2><h3 id=\"创建一个-spring-cloud-gateway的模块-导入相关依赖\"><a href=\"#创建一个-spring-cloud-gateway的模块-导入相关依赖\" class=\"headerlink\" title=\"创建一个 spring-cloud-gateway的模块,导入相关依赖\"></a>创建一个 spring-cloud-gateway的模块,导入相关依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lison&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-cloud-alibaba-building&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;<span class=\"number\">1.0</span><span class=\"number\">.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lison&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;spring-cloud-gateway&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;spring-cloud-gateway&lt;/description&gt;</span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;<span class=\"number\">1.8</span>&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">         &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"创建主类\"><a href=\"#创建主类\" class=\"headerlink\" title=\"创建主类\"></a>创建主类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudGateWayApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudGateWayApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">18003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span> <span class=\"comment\"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span> <span class=\"comment\"># 当前路由的标识, 要求唯一</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span> <span class=\"comment\"># 请求要转发到的地址</span></span><br><span class=\"line\">          <span class=\"attr\">order:</span> <span class=\"number\">1</span> <span class=\"comment\"># 路由的优先级,数字越小级别越高</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span> <span class=\"comment\"># 断言(就是路由转发要满足的条件)</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/**</span> <span class=\"comment\"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span> <span class=\"comment\"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span> <span class=\"comment\"># 转发之前去掉1层路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"string\">include:&#x27;*&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>访问 <a href=\"http://localhost:18003/spring_service/\">http://localhost:18003/spring_service/</a> 路由到 服务A <a href=\"http://localhost:18001/\">http://localhost:18001/</a></p>\n<h3 id=\"启动项目-并通过网关去访问微服务\"><a href=\"#启动项目-并通过网关去访问微服务\" class=\"headerlink\" title=\"启动项目, 并通过网关去访问微服务\"></a>启动项目, 并通过网关去访问微服务</h3><p><a href=\"http://localhost:18003/spring_service/gateway/test\">http://localhost:18003/spring_service/gateway/test</a></p>\n<p><img src=\"/typora-user-images/image-20240222152145318.png\" alt=\"image-20240222152145318\"></p>\n<h2 id=\"Gateway访问进阶，Nacos-读取配置\"><a href=\"#Gateway访问进阶，Nacos-读取配置\" class=\"headerlink\" title=\"Gateway访问进阶，Nacos 读取配置\"></a>Gateway访问进阶，Nacos 读取配置</h2><p>现在在配置文件中写死了转发路径的地址, 前面我们已经分析过地址写死带来的问题, 接下来我们从 注册中心获取此地址。</p>\n<h3 id=\"加入Ncaos依赖\"><a href=\"#加入Ncaos依赖\" class=\"headerlink\" title=\"加入Ncaos依赖\"></a>加入Ncaos依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--nacos客户端--&gt;</span><br><span class=\"line\"> &lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主类上添加注解\"><a href=\"#主类上添加注解\" class=\"headerlink\" title=\"主类上添加注解\"></a>主类上添加注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudGateWayApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudGateWayApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">18003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">locator:</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 让gateway可以发现nacos中的微服务</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span> <span class=\"comment\"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span> <span class=\"comment\"># 当前路由的标识, 要求唯一</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://spring-cloud-service</span> <span class=\"comment\"># lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span> <span class=\"comment\"># 断言(就是路由转发要满足的条件)</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/**</span> <span class=\"comment\"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span> <span class=\"comment\"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span> <span class=\"comment\"># 转发之前去掉1层路径</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动两个 service服务，配置不同端口</p>\n<p><img src=\"/typora-user-images/image-20240222164404555.png\" alt=\"image-20240222164404555\"></p>\n<p><img src=\"/typora-user-images/image-20240222164433038.png\" alt=\"image-20240222164433038\"></p>\n<p>访问之前可以访问服务端口的服务：<a href=\"http://localhost:18003/spring_service/getServerProd\">http://localhost:18003/spring_service/getServerProd</a></p>\n<p><strong>访问到服务18001</strong></p>\n<p><img src=\"/typora-user-images/image-20240222164533515.png\" alt=\"image-20240222164533515\"></p>\n<p><strong>访问到服务18011</strong></p>\n<p><img src=\"/typora-user-images/image-20240222164517003.png\" alt=\"image-20240222164517003\"></p>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.10.16</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\"><a href=\"#Spring-Cloud-Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\" class=\"headerlink\" title=\"Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置\"></a>Spring Cloud Alibaba-05-Gateway网关-01-简介、快速开始、Naocs读取配置</h1><p>[toc]</p>\n<h2 id=\"网关简介\"><a href=\"#网关简介\" class=\"headerlink\" title=\"网关简介\"></a>网关简介</h2><p>API Gateway（APIGW &#x2F; API 网关），顾名思义，是出现在系统边界上的一个面向 API 的、串行集中式的强管控服务，这里的边界是企业 IT 系统的边界，可以理解为企业级应用防火墙，主要起到隔离外部访问与内部系统的作用。在微服务概念的流行之前，API 网关就已经诞生了，例如银行、证券等领域常见的前置机系统，它也是解决访问认证、报文转换、访问统计等问题的。</p>\n<p>API 网关的流行，源于近几年来移动应用与企业间互联需求的兴起。移动应用、企业互联，使得后台服务支持的对象，从以前单一的Web应用，扩展到多种使用场景，且每种使用场景对后台服务的要求都不尽相同。这不仅增加了后台服务的响应量，还增加了后台服务的复杂性。随着微服务架构概念的提出，API网关成为了微服务架构的一个标配组件。</p>\n<p>API 网关是一个服务器，是系统对外的唯一入口。API 网关封装了系统内部架构，为每个客户端提供定制的 API。所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有非业务功能。API 网关并不是微服务场景中必须的组件，不管有没有 API 网关，后端微服务都可以通过 API 很好地支持客户端的访问。</p>\n<p>在业界比较流行的网关，有下面这些:</p>\n<p><strong>Ngnix+lua</strong></p>\n<p>使用nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用<br>lua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本</p>\n<p><strong>Kong</strong></p>\n<p>基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。 问题: 只支持Http协议;二次开发，自由扩展困难;提供管理API，缺乏更易用的管控、配置方式。</p>\n<p><strong>Zuul</strong></p>\n<p>Netflix开源的网关，功能丰富，使用JAVA开发，易于二次开发 问题:缺乏管控，无法动态配 置;依赖组件较多;处理Http请求依赖的是Web容器，性能不如Nginx</p>\n<p><strong>Spring Cloud Gateway</strong></p>\n<p>Spring公司为了替换Zuul而开发的网关服务，将在下面具体介绍。</p>\n<blockquote>\n<p>SpringCloud alibaba技术栈中并没有提供自己的网关，我们可以采用Spring Cloud Gateway 来做网关</p>\n</blockquote>\n<h2 id=\"Gateway简介\"><a href=\"#Gateway简介\" class=\"headerlink\" title=\"Gateway简介\"></a>Gateway简介</h2><h3 id=\"什么是spring-cloud-gateway\"><a href=\"#什么是spring-cloud-gateway\" class=\"headerlink\" title=\"什么是spring cloud gateway\"></a>什么是spring cloud gateway</h3><p>网关作为流量的入口，常用的功能包括路由转发、权限校验、限流等。</p>\n<p>Spring Cloud Gateway 是基于 Spring 生态系统之上构建的 API 网关，包括：Spring 5，Spring Boot 2 和 Project Reactor。Spring Cloud Gateway 旨在提供一种简单而有效的方法来路由到 API，并为它们提供跨领域的关注点，例如：安全性，监视&#x2F;指标，限流等。由于 Spring 5.0 支持 Netty，Http2，而 Spring Boot 2.0 支持 Spring 5.0，因此 Spring Cloud Gateway 支持 Netty 和 Http2 顺理成章。</p>\n<p>客户端向 Spring Cloud Gateway 发出请求，如果请求与网关程序定义的路由匹配，则将其发送到网关 Web 处理程序，此处理程序运行特定的请求过滤器链。</p>\n<p>过滤器之间用虚线分开的原因是过滤器可能会在发送代理请求之前或之后执行逻辑。所有 “pre” 过滤器逻辑先执行，然后执行代理请求，代理请求完成后，执行 “post” 过滤器逻辑。</p>\n<p><strong>spring cloud gateway功能特性：</strong></p>\n<p>（1）基于spring Framework5、Project Reactor和spring boot 2.0进行构建</p>\n<p>（2）动态路由：能够匹配任何请求属性</p>\n<p>（3）支持路径重写</p>\n<p>（4）集成spring cloud服务发现功能（nacos）</p>\n<p>（5）可集成流控级功能（sentinel）</p>\n<p>（6）可以对路由指定易于编写的Predicate（断言）、Filter（过滤器）</p>\n<p><strong>优点:</strong></p>\n<p>性能强劲:是第一代网关Zuul的1.6倍</p>\n<p>功能强大:内置了很多实用的功能，例如转发、监控、限流等</p>\n<p>设计优雅，容易扩展</p>\n<p><strong>缺点:</strong></p>\n<p>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</p>\n<p>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行</p>\n<p>需要Spring Boot 2.0及以上的版本，才支持</p>\n<h3 id=\"为什么要使用网关\"><a href=\"#为什么要使用网关\" class=\"headerlink\" title=\"为什么要使用网关\"></a>为什么要使用网关</h3><p>单体应用：浏览器发起请求到单体应用所在的机器，应用从数据库查询数据原路返回给浏览器，对于单体应用来说是不需要网关的。<br>微服务：微服务的应用可能部署在不同机房，不同地区，不同域名下。此时客户端（浏览器&#x2F;手机&#x2F;软件工具）想要请求对应的服务，都需要知道机器的具体 IP 或者域名 URL，当微服务实例众多时，这是非常难以记忆的，对于客户端来说也太复杂难以维护。此时就有了网关，客户端相关的请求直接发送到网关，由网关根据请求标识解析判断出具体的微服务地址，再把请求转发到微服务实例。这其中的记忆功能就全部交由网关来操作了。</p>\n<p>网关介于客户端与服务器之间的中间层，所有外部请求率先经过微服务网关，客户端只需要与网关交互，只需要知道网关地址即可。这样便简化了开发且有以下优点：</p>\n<p>易于监控，可在微服务网关收集监控数据并将其推送到外部系统进行分析<br>易于认证，可在微服务网关上进行认证，然后再将请求转发到后端的微服务，从而无需在每个微服务中进行认证<br>减少了客户端与各个微服务之间的交互次数</p>\n<h3 id=\"Gateway核心架构\"><a href=\"#Gateway核心架构\" class=\"headerlink\" title=\"Gateway核心架构\"></a>Gateway核心架构</h3><p> <strong>基本概念</strong><br>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:</p>\n<ul>\n<li><strong>id</strong>，路由标识符，区别于其他 Route。</li>\n<li>uri，路由指向的目的地 uri，即客户端请求最终被转发到的微服务。</li>\n<li>order，用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高。</li>\n<li><strong>predicate</strong>，断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由。</li>\n<li><strong>filter</strong>，过滤器用于修改请求和响应信息。</li>\n</ul>\n<p><strong>执行流程</strong></p>\n<p><img src=\"/typora-user-images/u=641752398,1880469199&fm=253&fmt=auto&app=138&f=PNG.png\" alt=\"img\"></p>\n<p><strong>执行流程大体如下:</strong></p>\n<ol>\n<li>Gateway Client向Gateway Server发送请求</li>\n<li>请求首先会被HttpWebHandlerAdapter进行提取组装成网关上下文</li>\n<li>然后网关的上下文会传递到DispatcherHandler，它负责将请求分发给 RoutePredicateHandlerMapping</li>\n<li>RoutePredicateHandlerMapping负责路由查找，并根据路由断言判断路由是否可用</li>\n<li>如果过断言成功，由FilteringWebHandler创建过滤器链并调用</li>\n<li>请求会一次经过PreFilter–微服务–PostFilter的方法，最终返回响应</li>\n</ol>\n<h2 id=\"Gateway快速开始\"><a href=\"#Gateway快速开始\" class=\"headerlink\" title=\"Gateway快速开始\"></a>Gateway快速开始</h2><h3 id=\"创建一个-spring-cloud-gateway的模块-导入相关依赖\"><a href=\"#创建一个-spring-cloud-gateway的模块-导入相关依赖\" class=\"headerlink\" title=\"创建一个 spring-cloud-gateway的模块,导入相关依赖\"></a>创建一个 spring-cloud-gateway的模块,导入相关依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"line\">&lt;project xmlns=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"line\">         xmlns:xsi=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"line\">         xsi:schemaLocation=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class=\"line\">    &lt;modelVersion&gt;<span class=\"number\">4.0</span><span class=\"number\">.0</span>&lt;/modelVersion&gt;</span><br><span class=\"line\">    &lt;parent&gt;</span><br><span class=\"line\">        &lt;groupId&gt;com.lison&lt;/groupId&gt;</span><br><span class=\"line\">        &lt;artifactId&gt;spring-cloud-alibaba-building&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;version&gt;<span class=\"number\">1.0</span><span class=\"number\">.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;/parent&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.lison&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">0.0</span><span class=\"number\">.1</span>-SNAPSHOT&lt;/version&gt;</span><br><span class=\"line\">    &lt;name&gt;spring-cloud-gateway&lt;/name&gt;</span><br><span class=\"line\">    &lt;description&gt;spring-cloud-gateway&lt;/description&gt;</span><br><span class=\"line\">    &lt;properties&gt;</span><br><span class=\"line\">        &lt;java.version&gt;<span class=\"number\">1.8</span>&lt;/java.version&gt;</span><br><span class=\"line\">    &lt;/properties&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class=\"line\">         &lt;/dependency&gt;</span><br><span class=\"line\">    &lt;/dependencies&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"创建主类\"><a href=\"#创建主类\" class=\"headerlink\" title=\"创建主类\"></a>创建主类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudGateWayApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudGateWayApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">18003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span> <span class=\"comment\"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span> <span class=\"comment\"># 当前路由的标识, 要求唯一</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span> <span class=\"comment\"># 请求要转发到的地址</span></span><br><span class=\"line\">          <span class=\"attr\">order:</span> <span class=\"number\">1</span> <span class=\"comment\"># 路由的优先级,数字越小级别越高</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span> <span class=\"comment\"># 断言(就是路由转发要满足的条件)</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/**</span> <span class=\"comment\"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span> <span class=\"comment\"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span> <span class=\"comment\"># 转发之前去掉1层路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"string\">include:&#x27;*&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>访问 <a href=\"http://localhost:18003/spring_service/\">http://localhost:18003/spring_service/</a> 路由到 服务A <a href=\"http://localhost:18001/\">http://localhost:18001/</a></p>\n<h3 id=\"启动项目-并通过网关去访问微服务\"><a href=\"#启动项目-并通过网关去访问微服务\" class=\"headerlink\" title=\"启动项目, 并通过网关去访问微服务\"></a>启动项目, 并通过网关去访问微服务</h3><p><a href=\"http://localhost:18003/spring_service/gateway/test\">http://localhost:18003/spring_service/gateway/test</a></p>\n<p><img src=\"/typora-user-images/image-20240222152145318.png\" alt=\"image-20240222152145318\"></p>\n<h2 id=\"Gateway访问进阶，Nacos-读取配置\"><a href=\"#Gateway访问进阶，Nacos-读取配置\" class=\"headerlink\" title=\"Gateway访问进阶，Nacos 读取配置\"></a>Gateway访问进阶，Nacos 读取配置</h2><p>现在在配置文件中写死了转发路径的地址, 前面我们已经分析过地址写死带来的问题, 接下来我们从 注册中心获取此地址。</p>\n<h3 id=\"加入Ncaos依赖\"><a href=\"#加入Ncaos依赖\" class=\"headerlink\" title=\"加入Ncaos依赖\"></a>加入Ncaos依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--nacos客户端--&gt;</span><br><span class=\"line\"> &lt;dependency&gt; </span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"主类上添加注解\"><a href=\"#主类上添加注解\" class=\"headerlink\" title=\"主类上添加注解\"></a>主类上添加注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudGateWayApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudGateWayApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">18003</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">locator:</span></span><br><span class=\"line\">          <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 让gateway可以发现nacos中的微服务</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span> <span class=\"comment\"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span> <span class=\"comment\"># 当前路由的标识, 要求唯一</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://spring-cloud-service</span> <span class=\"comment\"># lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span> <span class=\"comment\"># 断言(就是路由转发要满足的条件)</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/**</span> <span class=\"comment\"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class=\"line\">          <span class=\"attr\">filters:</span> <span class=\"comment\"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">StripPrefix=1</span> <span class=\"comment\"># 转发之前去掉1层路径</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>启动两个 service服务，配置不同端口</p>\n<p><img src=\"/typora-user-images/image-20240222164404555.png\" alt=\"image-20240222164404555\"></p>\n<p><img src=\"/typora-user-images/image-20240222164433038.png\" alt=\"image-20240222164433038\"></p>\n<p>访问之前可以访问服务端口的服务：<a href=\"http://localhost:18003/spring_service/getServerProd\">http://localhost:18003/spring_service/getServerProd</a></p>\n<p><strong>访问到服务18001</strong></p>\n<p><img src=\"/typora-user-images/image-20240222164533515.png\" alt=\"image-20240222164533515\"></p>\n<p><strong>访问到服务18011</strong></p>\n<p><img src=\"/typora-user-images/image-20240222164517003.png\" alt=\"image-20240222164517003\"></p>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.10.20`\n\n# Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)使用\n\n\n\n[toc]\n\n\n\nPredicate 断言，用于进行条件判断，只有断言都为真，才会真正的执行路由。\n\n\n\n## 通过时间匹配\n\nPredicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2023年 10 月 20 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - After=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n \n \n~~~\n\nSpring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：Asia/Shanghai。\n\nAfter Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2023 年 10 月 20 日 08 点 30 分 0 秒之后的所有请求都转发到地址http://localhost:18001。+08:00是指时间和 UTC 时间相差八个小时，时间地区为Asia/Shanghai。\n\n添加完路由规则之后，访问地址http://localhost:18001/spring_service 会自动转发到http://localhost:18001。\n\nBefore Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下:\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n \n \n~~~\n\n\n\n就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址`http://localhost:18001/spring_service `，页面会报 404 没有找到地址。\n\n除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]\n \n \n~~~\n\n这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。\n\n## 通过 Cookie 匹配\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Cookie=token,lison\n \n \n~~~\n\n\n\n![image-20240222175326047](typora-user-images/image-20240222175326047.png)\n\n![image-20240222175403127](typora-user-images/image-20240222175403127.png)\n\n**总结：去掉Cookie或Cookie不正确,后台汇报 404 错误。带上正确的Cookie正常访问**\n\n\n\n\n\n## 通过 Header 匹配\n\nHeader Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。\n\n\n\n~~~java\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Header=X-Request-Id, \\d+\n \n \n~~~\n\n\n\n![image-20240222180227522](typora-user-images/image-20240222180227522.png)\n\n![image-20240222180306582](typora-user-images/image-20240222180306582.png)\n\n![image-20240222180325402](typora-user-images/image-20240222180325402.png)\n\n**总结：去掉Header或Header不合法,后台汇报 404 错误。带上合法的Header正常访问**\n\n\n\n\n\n## 通过 Host 匹配\n\n\n\nHost Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用`.`号作为分隔符。它通过参数中的主机地址作为匹配规则。\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Host=**.lison.com\n \n \n~~~\n\n\n\n![image-20240222181235735](typora-user-images/image-20240222181235735.png)\n\n经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。\n\n\n\n## 通过请求方式匹配\n\n可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。\n\n\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Method=GET\n \n \n~~~\n\n测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。返回 404 没有找到，证明没有匹配上路由\n\n## 通过请求路径匹配\n\nPath Route Predicate 接收一个匹配路径的参数来判断是否走路由。\n\n\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Path=/spring_service/{segment} # - Path=/spring_service/**\n \n \n~~~\n\n如果请求路径符合要求，则此路由将匹配，例如：/spring_service/1 或者 /spring_service/bar。\n\n\n\n测试：\n\n~~~\nhttp://localhost:18003/spring_service/1\nhttp://localhost:18003/spring_service/2\nhttp://localhost:18003/spring_xxx/2\n~~~\n\n\n\n经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报 404，证明路由是通过指定路由来匹配。\n\n## 通过请求参数匹配\n\nQuery Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Query=token\n \n \n~~~\n\n这样配置，只要请求中包含 token 属性的参数即可匹配路由。\n\n\n\n~~~\nhttp://localhost:18003/spring_service/getServerProd?token=dfasdfas&id=xxx\n~~~\n\n\n\n经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 token 参数则不会匹配。\n\n还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Query=token,lison.\n \n \n~~~\n\n\n\n这样只要当请求中包含 keep 属性并且参数值是以 lison 开头的长度为六位的字符串才会进行匹配和路由。\n\n~~~\nhttp://localhost:18003/spring_service/getServerProd?token=lison6&id=xxx\n~~~\n\n测试可以返回页面代码，将 token 的属性值改为 pubx 再次访问就会报 lison66, 证明路由需要匹配正则表达式才会进行路由。\n\n\n\n## 通过请求 ip 地址进行匹配\n\nPredicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1/16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - RemoteAddr=192.168.1.1/24\n \n \n~~~\n\n\n\n可以将此地址设置为本机的 ip 地址进行测试。\n\n如果请求的远程地址是 192.168.1.10，则此路由将匹配。\n\n## 自定义断言\n\n### 如何自定义路由断言\n\n我们可以查看内置的断言如何实现？举例：BetweenRoutePredicateFactory\n\n~~~java\n\n//断言工厂的类的命名规则为XXXXRoutePredicateFactory   需要 继承AbstractRoutePredicateFactory\n\npublic class BetweenRoutePredicateFactory extends AbstractRoutePredicateFactory<Config> {\n    public static final String DATETIME1_KEY = \"datetime1\";\n    public static final String DATETIME2_KEY = \"datetime2\";\n\n    public BetweenRoutePredicateFactory() {\n        super(Config.class);\n    }\n\n    public List<String> shortcutFieldOrder() {\n        return Arrays.asList(\"datetime1\", \"datetime2\"); //与配置文件映射\n    }\n\n  \n  //判断逻辑方法\n    public Predicate<ServerWebExchange> apply(final Config config) {\n        Assert.isTrue(config.getDatetime1().isBefore(config.getDatetime2()), config.getDatetime1() + \" must be before \" + config.getDatetime2());\n        return new GatewayPredicate() {\n          //核心判断逻辑\n            public boolean test(ServerWebExchange serverWebExchange) {\n                ZonedDateTime now = ZonedDateTime.now();\n                return now.isAfter(config.getDatetime1()) && now.isBefore(config.getDatetime2());\n            }\n\n            public String toString() {\n                return String.format(\"Between: %s and %s\", config.getDatetime1(), config.getDatetime2());\n            }\n        };\n    }\n\n  //参数配置类\n    @Validated\n    public static class Config {\n        private @NotNull ZonedDateTime datetime1;\n        private @NotNull ZonedDateTime datetime2;\n\n        public Config() {\n        }\n\n        public ZonedDateTime getDatetime1() {\n            return this.datetime1;\n        }\n\n        public Config setDatetime1(ZonedDateTime datetime1) {\n            this.datetime1 = datetime1;\n            return this;\n        }\n\n        public ZonedDateTime getDatetime2() {\n            return this.datetime2;\n        }\n\n        public Config setDatetime2(ZonedDateTime datetime2) {\n            this.datetime2 = datetime2;\n            return this;\n        }\n    }\n}\n~~~\n\n知道内置路由断言的实现细节，我们只需要按照它的实现方式，来按部就班的实现自己的路由断言即可。\n\n### 实现\n\n需求假设：年龄大于18岁，小于60岁的可以访问\n\n1、先进行路由设置\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Age=18,60 #年龄大于18岁，小于60岁的可以访问\n \n \n~~~\n\n\n\n2、自定义实现路由，根据前面的配置我们知道规则名为Age，那么我们的自定义的断言名称必须是AgeRoutePredicateFactory\n\n~~~java\npackage com.lison.springcloudservice.config.predicates;\n\n/**\n * @className: com.lison.springcloudservice.config.predicates-> AgeRoutePredicateFactory\n * @description:   自定义的断言工厂 1.名称必须是配置+RoutePredicateFactory 2.必须继承AbstractRoutePredicateFactory<配置类>\n * @author: Lison\n * @createDate: 2023-10-20\n */\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\n\n@Component\npublic class AgeRoutePredicateFactory extends AbstractRoutePredicateFactory<AgeRoutePredicateFactory.Config> {\n\n    public AgeRoutePredicateFactory() {\n        super(AgeRoutePredicateFactory.Config.class);\n    }\n\n    //读取配置文件的参数值，赋值到配置类中的属性上\n    @Override\n    public List<String> shortcutFieldOrder() {\n        //顺序必须与yml文件中的配置顺序对应\n        return Arrays.asList(\"minAge\", \"maxAge\");\n    }\n\n    @Override\n    public Predicate<ServerWebExchange> apply(AgeRoutePredicateFactory.Config config) {\n        return new Predicate<ServerWebExchange>() {\n            @Override\n            public boolean test(ServerWebExchange serverWebExchange) {\n                //serverWebExchange很强大，可以可以获取到很多内容\n                String ageStr = serverWebExchange.getRequest().getQueryParams().getFirst(\"age\");\n                if (StringUtils.isNotEmpty(ageStr)) {\n                    int age = Integer.parseInt(ageStr);\n                    return age > config.getMinAge() && age < config.getMaxAge();\n                }\n                return false;\n            }\n        };\n    }\n\n    //用于接收参数\n    public static class Config {\n        private int minAge;\n        private int maxAge;\n\n        public int getMinAge() {\n            return minAge;\n        }\n\n        public void setMinAge(int minAge) {\n            this.minAge = minAge;\n        }\n\n        @Override\n        public String toString() {\n            return \"Config{\" +\n                    \"minAge=\" + minAge +\n                    \", maxAge=\" + maxAge +\n                    '}';\n        }\n\n        public int getMaxAge() {\n            return maxAge;\n        }\n\n        public void setMaxAge(int maxAge) {\n            this.maxAge = maxAge;\n        }\n    }\n}\n\n\n~~~\n\n3、重启服务网关，测试自定义的路由断言，age=20可以访问，而age=15则无法访问\n\n\n\n\n\n\n\n## 组合使用\n\n上面为了演示各个 Predicate 的使用，我们是单个单个进行配置测试，其实可以将各种 Predicate 组合起来一起使用。\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Host=**.lison.com\n         - Path=/spring_service/** # 当请求路径满足Path指定的规则时,才进行路由转发\n         - Cookie=token,lison\n         - After=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n         - Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n         - Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]\n         - Header=X-Request-Id, \\d+\n         - Host=**.lison.com\n         - Method=GET,POST\n         - Query=token,lison.\n         - RemoteAddr=192.168.1.1/24\n         - Age=18,60 \n \n \n~~~\n\n各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。\n\n> 一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发\n\n\n\n\n\n\n\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate).md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.10.20`\n\n# Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)使用\n\n\n\n[toc]\n\n\n\nPredicate 断言，用于进行条件判断，只有断言都为真，才会真正的执行路由。\n\n\n\n## 通过时间匹配\n\nPredicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2023年 10 月 20 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - After=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n \n \n~~~\n\nSpring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：Asia/Shanghai。\n\nAfter Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2023 年 10 月 20 日 08 点 30 分 0 秒之后的所有请求都转发到地址http://localhost:18001。+08:00是指时间和 UTC 时间相差八个小时，时间地区为Asia/Shanghai。\n\n添加完路由规则之后，访问地址http://localhost:18001/spring_service 会自动转发到http://localhost:18001。\n\nBefore Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下:\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n \n \n~~~\n\n\n\n就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址`http://localhost:18001/spring_service `，页面会报 404 没有找到地址。\n\n除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]\n \n \n~~~\n\n这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。\n\n## 通过 Cookie 匹配\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Cookie=token,lison\n \n \n~~~\n\n\n\n![image-20240222175326047](typora-user-images/image-20240222175326047.png)\n\n![image-20240222175403127](typora-user-images/image-20240222175403127.png)\n\n**总结：去掉Cookie或Cookie不正确,后台汇报 404 错误。带上正确的Cookie正常访问**\n\n\n\n\n\n## 通过 Header 匹配\n\nHeader Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。\n\n\n\n~~~java\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Header=X-Request-Id, \\d+\n \n \n~~~\n\n\n\n![image-20240222180227522](typora-user-images/image-20240222180227522.png)\n\n![image-20240222180306582](typora-user-images/image-20240222180306582.png)\n\n![image-20240222180325402](typora-user-images/image-20240222180325402.png)\n\n**总结：去掉Header或Header不合法,后台汇报 404 错误。带上合法的Header正常访问**\n\n\n\n\n\n## 通过 Host 匹配\n\n\n\nHost Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用`.`号作为分隔符。它通过参数中的主机地址作为匹配规则。\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Host=**.lison.com\n \n \n~~~\n\n\n\n![image-20240222181235735](typora-user-images/image-20240222181235735.png)\n\n经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。\n\n\n\n## 通过请求方式匹配\n\n可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。\n\n\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Method=GET\n \n \n~~~\n\n测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。返回 404 没有找到，证明没有匹配上路由\n\n## 通过请求路径匹配\n\nPath Route Predicate 接收一个匹配路径的参数来判断是否走路由。\n\n\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Path=/spring_service/{segment} # - Path=/spring_service/**\n \n \n~~~\n\n如果请求路径符合要求，则此路由将匹配，例如：/spring_service/1 或者 /spring_service/bar。\n\n\n\n测试：\n\n~~~\nhttp://localhost:18003/spring_service/1\nhttp://localhost:18003/spring_service/2\nhttp://localhost:18003/spring_xxx/2\n~~~\n\n\n\n经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报 404，证明路由是通过指定路由来匹配。\n\n## 通过请求参数匹配\n\nQuery Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Query=token\n \n \n~~~\n\n这样配置，只要请求中包含 token 属性的参数即可匹配路由。\n\n\n\n~~~\nhttp://localhost:18003/spring_service/getServerProd?token=dfasdfas&id=xxx\n~~~\n\n\n\n经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 token 参数则不会匹配。\n\n还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Query=token,lison.\n \n \n~~~\n\n\n\n这样只要当请求中包含 keep 属性并且参数值是以 lison 开头的长度为六位的字符串才会进行匹配和路由。\n\n~~~\nhttp://localhost:18003/spring_service/getServerProd?token=lison6&id=xxx\n~~~\n\n测试可以返回页面代码，将 token 的属性值改为 pubx 再次访问就会报 lison66, 证明路由需要匹配正则表达式才会进行路由。\n\n\n\n## 通过请求 ip 地址进行匹配\n\nPredicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1/16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - RemoteAddr=192.168.1.1/24\n \n \n~~~\n\n\n\n可以将此地址设置为本机的 ip 地址进行测试。\n\n如果请求的远程地址是 192.168.1.10，则此路由将匹配。\n\n## 自定义断言\n\n### 如何自定义路由断言\n\n我们可以查看内置的断言如何实现？举例：BetweenRoutePredicateFactory\n\n~~~java\n\n//断言工厂的类的命名规则为XXXXRoutePredicateFactory   需要 继承AbstractRoutePredicateFactory\n\npublic class BetweenRoutePredicateFactory extends AbstractRoutePredicateFactory<Config> {\n    public static final String DATETIME1_KEY = \"datetime1\";\n    public static final String DATETIME2_KEY = \"datetime2\";\n\n    public BetweenRoutePredicateFactory() {\n        super(Config.class);\n    }\n\n    public List<String> shortcutFieldOrder() {\n        return Arrays.asList(\"datetime1\", \"datetime2\"); //与配置文件映射\n    }\n\n  \n  //判断逻辑方法\n    public Predicate<ServerWebExchange> apply(final Config config) {\n        Assert.isTrue(config.getDatetime1().isBefore(config.getDatetime2()), config.getDatetime1() + \" must be before \" + config.getDatetime2());\n        return new GatewayPredicate() {\n          //核心判断逻辑\n            public boolean test(ServerWebExchange serverWebExchange) {\n                ZonedDateTime now = ZonedDateTime.now();\n                return now.isAfter(config.getDatetime1()) && now.isBefore(config.getDatetime2());\n            }\n\n            public String toString() {\n                return String.format(\"Between: %s and %s\", config.getDatetime1(), config.getDatetime2());\n            }\n        };\n    }\n\n  //参数配置类\n    @Validated\n    public static class Config {\n        private @NotNull ZonedDateTime datetime1;\n        private @NotNull ZonedDateTime datetime2;\n\n        public Config() {\n        }\n\n        public ZonedDateTime getDatetime1() {\n            return this.datetime1;\n        }\n\n        public Config setDatetime1(ZonedDateTime datetime1) {\n            this.datetime1 = datetime1;\n            return this;\n        }\n\n        public ZonedDateTime getDatetime2() {\n            return this.datetime2;\n        }\n\n        public Config setDatetime2(ZonedDateTime datetime2) {\n            this.datetime2 = datetime2;\n            return this;\n        }\n    }\n}\n~~~\n\n知道内置路由断言的实现细节，我们只需要按照它的实现方式，来按部就班的实现自己的路由断言即可。\n\n### 实现\n\n需求假设：年龄大于18岁，小于60岁的可以访问\n\n1、先进行路由设置\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Age=18,60 #年龄大于18岁，小于60岁的可以访问\n \n \n~~~\n\n\n\n2、自定义实现路由，根据前面的配置我们知道规则名为Age，那么我们的自定义的断言名称必须是AgeRoutePredicateFactory\n\n~~~java\npackage com.lison.springcloudservice.config.predicates;\n\n/**\n * @className: com.lison.springcloudservice.config.predicates-> AgeRoutePredicateFactory\n * @description:   自定义的断言工厂 1.名称必须是配置+RoutePredicateFactory 2.必须继承AbstractRoutePredicateFactory<配置类>\n * @author: Lison\n * @createDate: 2023-10-20\n */\nimport org.apache.commons.lang.StringUtils;\nimport org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.server.ServerWebExchange;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\n\n@Component\npublic class AgeRoutePredicateFactory extends AbstractRoutePredicateFactory<AgeRoutePredicateFactory.Config> {\n\n    public AgeRoutePredicateFactory() {\n        super(AgeRoutePredicateFactory.Config.class);\n    }\n\n    //读取配置文件的参数值，赋值到配置类中的属性上\n    @Override\n    public List<String> shortcutFieldOrder() {\n        //顺序必须与yml文件中的配置顺序对应\n        return Arrays.asList(\"minAge\", \"maxAge\");\n    }\n\n    @Override\n    public Predicate<ServerWebExchange> apply(AgeRoutePredicateFactory.Config config) {\n        return new Predicate<ServerWebExchange>() {\n            @Override\n            public boolean test(ServerWebExchange serverWebExchange) {\n                //serverWebExchange很强大，可以可以获取到很多内容\n                String ageStr = serverWebExchange.getRequest().getQueryParams().getFirst(\"age\");\n                if (StringUtils.isNotEmpty(ageStr)) {\n                    int age = Integer.parseInt(ageStr);\n                    return age > config.getMinAge() && age < config.getMaxAge();\n                }\n                return false;\n            }\n        };\n    }\n\n    //用于接收参数\n    public static class Config {\n        private int minAge;\n        private int maxAge;\n\n        public int getMinAge() {\n            return minAge;\n        }\n\n        public void setMinAge(int minAge) {\n            this.minAge = minAge;\n        }\n\n        @Override\n        public String toString() {\n            return \"Config{\" +\n                    \"minAge=\" + minAge +\n                    \", maxAge=\" + maxAge +\n                    '}';\n        }\n\n        public int getMaxAge() {\n            return maxAge;\n        }\n\n        public void setMaxAge(int maxAge) {\n            this.maxAge = maxAge;\n        }\n    }\n}\n\n\n~~~\n\n3、重启服务网关，测试自定义的路由断言，age=20可以访问，而age=15则无法访问\n\n\n\n\n\n\n\n## 组合使用\n\n上面为了演示各个 Predicate 的使用，我们是单个单个进行配置测试，其实可以将各种 Predicate 组合起来一起使用。\n\n\n\n~~~yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n       - id: spring_service\n        uri: http://localhost:18001\n        predicates:\n         - Host=**.lison.com\n         - Path=/spring_service/** # 当请求路径满足Path指定的规则时,才进行路由转发\n         - Cookie=token,lison\n         - After=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n         - Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]\n         - Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]\n         - Header=X-Request-Id, \\d+\n         - Host=**.lison.com\n         - Method=GET,POST\n         - Query=token,lison.\n         - RemoteAddr=192.168.1.1/24\n         - Age=18,60 \n \n \n~~~\n\n各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。\n\n> 一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发\n\n\n\n\n\n\n\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)","published":1,"date":"2024-02-22T08:58:58.394Z","updated":"2024-02-23T03:00:00.466Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhi0004ecfy5cerfh5z","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.10.20</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-05-Gateway网关-02-断言-Predicate-使用\"><a href=\"#Spring-Cloud-Alibaba-05-Gateway网关-02-断言-Predicate-使用\" class=\"headerlink\" title=\"Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)使用\"></a>Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)使用</h1><p>[toc]</p>\n<p>Predicate 断言，用于进行条件判断，只有断言都为真，才会真正的执行路由。</p>\n<h2 id=\"通过时间匹配\"><a href=\"#通过时间匹配\" class=\"headerlink\" title=\"通过时间匹配\"></a>通过时间匹配</h2><p>Predicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2023年 10 月 20 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">After=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>Spring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：Asia&#x2F;Shanghai。</p>\n<p>After Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2023 年 10 月 20 日 08 点 30 分 0 秒之后的所有请求都转发到地址<a href=\"http://localhost:18001。+08:00是指时间和\">http://localhost:18001。+08:00是指时间和</a> UTC 时间相差八个小时，时间地区为Asia&#x2F;Shanghai。</p>\n<p>添加完路由规则之后，访问地址<a href=\"http://localhost:18001/spring_service\">http://localhost:18001/spring_service</a> 会自动转发到<a href=\"http://localhost:18001。\">http://localhost:18001。</a></p>\n<p>Before Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址<code>http://localhost:18001/spring_service </code>，页面会报 404 没有找到地址。</p>\n<p>除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。</p>\n<h2 id=\"通过-Cookie-匹配\"><a href=\"#通过-Cookie-匹配\" class=\"headerlink\" title=\"通过 Cookie 匹配\"></a>通过 Cookie 匹配</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Cookie=token,lison</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240222175326047.png\" alt=\"image-20240222175326047\"></p>\n<p><img src=\"/typora-user-images/image-20240222175403127.png\" alt=\"image-20240222175403127\"></p>\n<p><strong>总结：去掉Cookie或Cookie不正确,后台汇报 404 错误。带上正确的Cookie正常访问</strong></p>\n<h2 id=\"通过-Header-匹配\"><a href=\"#通过-Header-匹配\" class=\"headerlink\" title=\"通过 Header 匹配\"></a>通过 Header 匹配</h2><p>Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">       - id: spring_service</span><br><span class=\"line\">        uri: http:<span class=\"comment\">//localhost:18001</span></span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">         - Header=X-Request-Id, \\d+</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240222180227522.png\" alt=\"image-20240222180227522\"></p>\n<p><img src=\"/typora-user-images/image-20240222180306582.png\" alt=\"image-20240222180306582\"></p>\n<p><img src=\"/typora-user-images/image-20240222180325402.png\" alt=\"image-20240222180325402\"></p>\n<p><strong>总结：去掉Header或Header不合法,后台汇报 404 错误。带上合法的Header正常访问</strong></p>\n<h2 id=\"通过-Host-匹配\"><a href=\"#通过-Host-匹配\" class=\"headerlink\" title=\"通过 Host 匹配\"></a>通过 Host 匹配</h2><p>Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用<code>.</code>号作为分隔符。它通过参数中的主机地址作为匹配规则。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Host=**.lison.com</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240222181235735.png\" alt=\"image-20240222181235735\"></p>\n<p>经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。</p>\n<h2 id=\"通过请求方式匹配\"><a href=\"#通过请求方式匹配\" class=\"headerlink\" title=\"通过请求方式匹配\"></a>通过请求方式匹配</h2><p>可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Method=GET</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。返回 404 没有找到，证明没有匹配上路由</p>\n<h2 id=\"通过请求路径匹配\"><a href=\"#通过请求路径匹配\" class=\"headerlink\" title=\"通过请求路径匹配\"></a>通过请求路径匹配</h2><p>Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/&#123;segment&#125;</span> <span class=\"comment\"># - Path=/spring_service/**</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>如果请求路径符合要求，则此路由将匹配，例如：&#x2F;spring_service&#x2F;1 或者 &#x2F;spring_service&#x2F;bar。</p>\n<p>测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:18003/spring_service/1</span><br><span class=\"line\">http://localhost:18003/spring_service/2</span><br><span class=\"line\">http://localhost:18003/spring_xxx/2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报 404，证明路由是通过指定路由来匹配。</p>\n<h2 id=\"通过请求参数匹配\"><a href=\"#通过请求参数匹配\" class=\"headerlink\" title=\"通过请求参数匹配\"></a>通过请求参数匹配</h2><p>Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Query=token</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>这样配置，只要请求中包含 token 属性的参数即可匹配路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:18003/spring_service/getServerProd?token=dfasdfas&amp;id=xxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 token 参数则不会匹配。</p>\n<p>还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Query=token,lison.</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样只要当请求中包含 keep 属性并且参数值是以 lison 开头的长度为六位的字符串才会进行匹配和路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:18003/spring_service/getServerProd?token=lison6&amp;id=xxx</span><br></pre></td></tr></table></figure>\n\n<p>测试可以返回页面代码，将 token 的属性值改为 pubx 再次访问就会报 lison66, 证明路由需要匹配正则表达式才会进行路由。</p>\n<h2 id=\"通过请求-ip-地址进行匹配\"><a href=\"#通过请求-ip-地址进行匹配\" class=\"headerlink\" title=\"通过请求 ip 地址进行匹配\"></a>通过请求 ip 地址进行匹配</h2><p>Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1&#x2F;16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">RemoteAddr=192.168.1.1/24</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以将此地址设置为本机的 ip 地址进行测试。</p>\n<p>如果请求的远程地址是 192.168.1.10，则此路由将匹配。</p>\n<h2 id=\"自定义断言\"><a href=\"#自定义断言\" class=\"headerlink\" title=\"自定义断言\"></a>自定义断言</h2><h3 id=\"如何自定义路由断言\"><a href=\"#如何自定义路由断言\" class=\"headerlink\" title=\"如何自定义路由断言\"></a>如何自定义路由断言</h3><p>我们可以查看内置的断言如何实现？举例：BetweenRoutePredicateFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//断言工厂的类的命名规则为XXXXRoutePredicateFactory   需要 继承AbstractRoutePredicateFactory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BetweenRoutePredicateFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRoutePredicateFactory</span>&lt;Config&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DATETIME1_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;datetime1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DATETIME2_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;datetime2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BetweenRoutePredicateFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Config.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">shortcutFieldOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;datetime1&quot;</span>, <span class=\"string\">&quot;datetime2&quot;</span>); <span class=\"comment\">//与配置文件映射</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//判断逻辑方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Predicate&lt;ServerWebExchange&gt; <span class=\"title function_\">apply</span><span class=\"params\">(<span class=\"keyword\">final</span> Config config)</span> &#123;</span><br><span class=\"line\">        Assert.isTrue(config.getDatetime1().isBefore(config.getDatetime2()), config.getDatetime1() + <span class=\"string\">&quot; must be before &quot;</span> + config.getDatetime2());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GatewayPredicate</span>() &#123;</span><br><span class=\"line\">          <span class=\"comment\">//核心判断逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(ServerWebExchange serverWebExchange)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">ZonedDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> ZonedDateTime.now();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> now.isAfter(config.getDatetime1()) &amp;&amp; now.isBefore(config.getDatetime2());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Between: %s and %s&quot;</span>, config.getDatetime1(), config.getDatetime2());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//参数配置类</span></span><br><span class=\"line\">    <span class=\"meta\">@Validated</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"meta\">@NotNull</span> ZonedDateTime datetime1;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"meta\">@NotNull</span> ZonedDateTime datetime2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Config</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ZonedDateTime <span class=\"title function_\">getDatetime1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.datetime1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Config <span class=\"title function_\">setDatetime1</span><span class=\"params\">(ZonedDateTime datetime1)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.datetime1 = datetime1;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ZonedDateTime <span class=\"title function_\">getDatetime2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.datetime2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Config <span class=\"title function_\">setDatetime2</span><span class=\"params\">(ZonedDateTime datetime2)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.datetime2 = datetime2;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>知道内置路由断言的实现细节，我们只需要按照它的实现方式，来按部就班的实现自己的路由断言即可。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>需求假设：年龄大于18岁，小于60岁的可以访问</p>\n<p>1、先进行路由设置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Age=18,60</span> <span class=\"comment\">#年龄大于18岁，小于60岁的可以访问</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、自定义实现路由，根据前面的配置我们知道规则名为Age，那么我们的自定义的断言名称必须是AgeRoutePredicateFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.config.predicates;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.config.predicates-&gt; AgeRoutePredicateFactory</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:   自定义的断言工厂 1.名称必须是配置+RoutePredicateFactory 2.必须继承AbstractRoutePredicateFactory&lt;配置类&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AgeRoutePredicateFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRoutePredicateFactory</span>&lt;AgeRoutePredicateFactory.Config&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AgeRoutePredicateFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(AgeRoutePredicateFactory.Config.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取配置文件的参数值，赋值到配置类中的属性上</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">shortcutFieldOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//顺序必须与yml文件中的配置顺序对应</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;minAge&quot;</span>, <span class=\"string\">&quot;maxAge&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Predicate&lt;ServerWebExchange&gt; <span class=\"title function_\">apply</span><span class=\"params\">(AgeRoutePredicateFactory.Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Predicate</span>&lt;ServerWebExchange&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(ServerWebExchange serverWebExchange)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//serverWebExchange很强大，可以可以获取到很多内容</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ageStr</span> <span class=\"operator\">=</span> serverWebExchange.getRequest().getQueryParams().getFirst(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(ageStr)) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> Integer.parseInt(ageStr);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> age &gt; config.getMinAge() &amp;&amp; age &lt; config.getMaxAge();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用于接收参数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> minAge;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> maxAge;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMinAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMinAge</span><span class=\"params\">(<span class=\"type\">int</span> minAge)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.minAge = minAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Config&#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;minAge=&quot;</span> + minAge +</span><br><span class=\"line\">                    <span class=\"string\">&quot;, maxAge=&quot;</span> + maxAge +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMaxAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMaxAge</span><span class=\"params\">(<span class=\"type\">int</span> maxAge)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.maxAge = maxAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3、重启服务网关，测试自定义的路由断言，age&#x3D;20可以访问，而age&#x3D;15则无法访问</p>\n<h2 id=\"组合使用\"><a href=\"#组合使用\" class=\"headerlink\" title=\"组合使用\"></a>组合使用</h2><p>上面为了演示各个 Predicate 的使用，我们是单个单个进行配置测试，其实可以将各种 Predicate 组合起来一起使用。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Host=**.lison.com</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/**</span> <span class=\"comment\"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Cookie=token,lison</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">After=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Header=X-Request-Id,</span> <span class=\"string\">\\d+</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Host=**.lison.com</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Method=GET,POST</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Query=token,lison.</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">RemoteAddr=192.168.1.1/24</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Age=18,60</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</p>\n<blockquote>\n<p>一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发</p>\n</blockquote>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.10.20</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-05-Gateway网关-02-断言-Predicate-使用\"><a href=\"#Spring-Cloud-Alibaba-05-Gateway网关-02-断言-Predicate-使用\" class=\"headerlink\" title=\"Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)使用\"></a>Spring Cloud Alibaba-05-Gateway网关-02-断言(Predicate)使用</h1><p>[toc]</p>\n<p>Predicate 断言，用于进行条件判断，只有断言都为真，才会真正的执行路由。</p>\n<h2 id=\"通过时间匹配\"><a href=\"#通过时间匹配\" class=\"headerlink\" title=\"通过时间匹配\"></a>通过时间匹配</h2><p>Predicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2023年 10 月 20 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">After=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>Spring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：Asia&#x2F;Shanghai。</p>\n<p>After Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2023 年 10 月 20 日 08 点 30 分 0 秒之后的所有请求都转发到地址<a href=\"http://localhost:18001。+08:00是指时间和\">http://localhost:18001。+08:00是指时间和</a> UTC 时间相差八个小时，时间地区为Asia&#x2F;Shanghai。</p>\n<p>添加完路由规则之后，访问地址<a href=\"http://localhost:18001/spring_service\">http://localhost:18001/spring_service</a> 会自动转发到<a href=\"http://localhost:18001。\">http://localhost:18001。</a></p>\n<p>Before Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址<code>http://localhost:18001/spring_service </code>，页面会报 404 没有找到地址。</p>\n<p>除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。</p>\n<h2 id=\"通过-Cookie-匹配\"><a href=\"#通过-Cookie-匹配\" class=\"headerlink\" title=\"通过 Cookie 匹配\"></a>通过 Cookie 匹配</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Cookie=token,lison</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240222175326047.png\" alt=\"image-20240222175326047\"></p>\n<p><img src=\"/typora-user-images/image-20240222175403127.png\" alt=\"image-20240222175403127\"></p>\n<p><strong>总结：去掉Cookie或Cookie不正确,后台汇报 404 错误。带上正确的Cookie正常访问</strong></p>\n<h2 id=\"通过-Header-匹配\"><a href=\"#通过-Header-匹配\" class=\"headerlink\" title=\"通过 Header 匹配\"></a>通过 Header 匹配</h2><p>Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    gateway:</span><br><span class=\"line\">      routes:</span><br><span class=\"line\">       - id: spring_service</span><br><span class=\"line\">        uri: http:<span class=\"comment\">//localhost:18001</span></span><br><span class=\"line\">        predicates:</span><br><span class=\"line\">         - Header=X-Request-Id, \\d+</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240222180227522.png\" alt=\"image-20240222180227522\"></p>\n<p><img src=\"/typora-user-images/image-20240222180306582.png\" alt=\"image-20240222180306582\"></p>\n<p><img src=\"/typora-user-images/image-20240222180325402.png\" alt=\"image-20240222180325402\"></p>\n<p><strong>总结：去掉Header或Header不合法,后台汇报 404 错误。带上合法的Header正常访问</strong></p>\n<h2 id=\"通过-Host-匹配\"><a href=\"#通过-Host-匹配\" class=\"headerlink\" title=\"通过 Host 匹配\"></a>通过 Host 匹配</h2><p>Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用<code>.</code>号作为分隔符。它通过参数中的主机地址作为匹配规则。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Host=**.lison.com</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240222181235735.png\" alt=\"image-20240222181235735\"></p>\n<p>经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。</p>\n<h2 id=\"通过请求方式匹配\"><a href=\"#通过请求方式匹配\" class=\"headerlink\" title=\"通过请求方式匹配\"></a>通过请求方式匹配</h2><p>可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Method=GET</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。返回 404 没有找到，证明没有匹配上路由</p>\n<h2 id=\"通过请求路径匹配\"><a href=\"#通过请求路径匹配\" class=\"headerlink\" title=\"通过请求路径匹配\"></a>通过请求路径匹配</h2><p>Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/&#123;segment&#125;</span> <span class=\"comment\"># - Path=/spring_service/**</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>如果请求路径符合要求，则此路由将匹配，例如：&#x2F;spring_service&#x2F;1 或者 &#x2F;spring_service&#x2F;bar。</p>\n<p>测试：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:18003/spring_service/1</span><br><span class=\"line\">http://localhost:18003/spring_service/2</span><br><span class=\"line\">http://localhost:18003/spring_xxx/2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报 404，证明路由是通过指定路由来匹配。</p>\n<h2 id=\"通过请求参数匹配\"><a href=\"#通过请求参数匹配\" class=\"headerlink\" title=\"通过请求参数匹配\"></a>通过请求参数匹配</h2><p>Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Query=token</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>这样配置，只要请求中包含 token 属性的参数即可匹配路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:18003/spring_service/getServerProd?token=dfasdfas&amp;id=xxx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 token 参数则不会匹配。</p>\n<p>还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Query=token,lison.</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>这样只要当请求中包含 keep 属性并且参数值是以 lison 开头的长度为六位的字符串才会进行匹配和路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:18003/spring_service/getServerProd?token=lison6&amp;id=xxx</span><br></pre></td></tr></table></figure>\n\n<p>测试可以返回页面代码，将 token 的属性值改为 pubx 再次访问就会报 lison66, 证明路由需要匹配正则表达式才会进行路由。</p>\n<h2 id=\"通过请求-ip-地址进行匹配\"><a href=\"#通过请求-ip-地址进行匹配\" class=\"headerlink\" title=\"通过请求 ip 地址进行匹配\"></a>通过请求 ip 地址进行匹配</h2><p>Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1&#x2F;16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">RemoteAddr=192.168.1.1/24</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以将此地址设置为本机的 ip 地址进行测试。</p>\n<p>如果请求的远程地址是 192.168.1.10，则此路由将匹配。</p>\n<h2 id=\"自定义断言\"><a href=\"#自定义断言\" class=\"headerlink\" title=\"自定义断言\"></a>自定义断言</h2><h3 id=\"如何自定义路由断言\"><a href=\"#如何自定义路由断言\" class=\"headerlink\" title=\"如何自定义路由断言\"></a>如何自定义路由断言</h3><p>我们可以查看内置的断言如何实现？举例：BetweenRoutePredicateFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//断言工厂的类的命名规则为XXXXRoutePredicateFactory   需要 继承AbstractRoutePredicateFactory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BetweenRoutePredicateFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRoutePredicateFactory</span>&lt;Config&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DATETIME1_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;datetime1&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DATETIME2_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;datetime2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BetweenRoutePredicateFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(Config.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">shortcutFieldOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;datetime1&quot;</span>, <span class=\"string\">&quot;datetime2&quot;</span>); <span class=\"comment\">//与配置文件映射</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//判断逻辑方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Predicate&lt;ServerWebExchange&gt; <span class=\"title function_\">apply</span><span class=\"params\">(<span class=\"keyword\">final</span> Config config)</span> &#123;</span><br><span class=\"line\">        Assert.isTrue(config.getDatetime1().isBefore(config.getDatetime2()), config.getDatetime1() + <span class=\"string\">&quot; must be before &quot;</span> + config.getDatetime2());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GatewayPredicate</span>() &#123;</span><br><span class=\"line\">          <span class=\"comment\">//核心判断逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(ServerWebExchange serverWebExchange)</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">ZonedDateTime</span> <span class=\"variable\">now</span> <span class=\"operator\">=</span> ZonedDateTime.now();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> now.isAfter(config.getDatetime1()) &amp;&amp; now.isBefore(config.getDatetime2());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> String.format(<span class=\"string\">&quot;Between: %s and %s&quot;</span>, config.getDatetime1(), config.getDatetime2());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//参数配置类</span></span><br><span class=\"line\">    <span class=\"meta\">@Validated</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"meta\">@NotNull</span> ZonedDateTime datetime1;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"meta\">@NotNull</span> ZonedDateTime datetime2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Config</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ZonedDateTime <span class=\"title function_\">getDatetime1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.datetime1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Config <span class=\"title function_\">setDatetime1</span><span class=\"params\">(ZonedDateTime datetime1)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.datetime1 = datetime1;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ZonedDateTime <span class=\"title function_\">getDatetime2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.datetime2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Config <span class=\"title function_\">setDatetime2</span><span class=\"params\">(ZonedDateTime datetime2)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.datetime2 = datetime2;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>知道内置路由断言的实现细节，我们只需要按照它的实现方式，来按部就班的实现自己的路由断言即可。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>需求假设：年龄大于18岁，小于60岁的可以访问</p>\n<p>1、先进行路由设置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Age=18,60</span> <span class=\"comment\">#年龄大于18岁，小于60岁的可以访问</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、自定义实现路由，根据前面的配置我们知道规则名为Age，那么我们的自定义的断言名称必须是AgeRoutePredicateFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.config.predicates;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.config.predicates-&gt; AgeRoutePredicateFactory</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:   自定义的断言工厂 1.名称必须是配置+RoutePredicateFactory 2.必须继承AbstractRoutePredicateFactory&lt;配置类&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2023-10-20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AgeRoutePredicateFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractRoutePredicateFactory</span>&lt;AgeRoutePredicateFactory.Config&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AgeRoutePredicateFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(AgeRoutePredicateFactory.Config.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取配置文件的参数值，赋值到配置类中的属性上</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">shortcutFieldOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//顺序必须与yml文件中的配置顺序对应</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.asList(<span class=\"string\">&quot;minAge&quot;</span>, <span class=\"string\">&quot;maxAge&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Predicate&lt;ServerWebExchange&gt; <span class=\"title function_\">apply</span><span class=\"params\">(AgeRoutePredicateFactory.Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Predicate</span>&lt;ServerWebExchange&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">test</span><span class=\"params\">(ServerWebExchange serverWebExchange)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//serverWebExchange很强大，可以可以获取到很多内容</span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">ageStr</span> <span class=\"operator\">=</span> serverWebExchange.getRequest().getQueryParams().getFirst(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (StringUtils.isNotEmpty(ageStr)) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> Integer.parseInt(ageStr);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> age &gt; config.getMinAge() &amp;&amp; age &lt; config.getMaxAge();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用于接收参数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> minAge;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> maxAge;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMinAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> minAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMinAge</span><span class=\"params\">(<span class=\"type\">int</span> minAge)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.minAge = minAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;Config&#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;minAge=&quot;</span> + minAge +</span><br><span class=\"line\">                    <span class=\"string\">&quot;, maxAge=&quot;</span> + maxAge +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMaxAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> maxAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMaxAge</span><span class=\"params\">(<span class=\"type\">int</span> maxAge)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.maxAge = maxAge;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>3、重启服务网关，测试自定义的路由断言，age&#x3D;20可以访问，而age&#x3D;15则无法访问</p>\n<h2 id=\"组合使用\"><a href=\"#组合使用\" class=\"headerlink\" title=\"组合使用\"></a>组合使用</h2><p>上面为了演示各个 Predicate 的使用，我们是单个单个进行配置测试，其实可以将各种 Predicate 组合起来一起使用。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">spring_service</span></span><br><span class=\"line\">        <span class=\"attr\">uri:</span> <span class=\"string\">http://localhost:18001</span></span><br><span class=\"line\">        <span class=\"attr\">predicates:</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Host=**.lison.com</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Path=/spring_service/**</span> <span class=\"comment\"># 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Cookie=token,lison</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">After=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Before=2023-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Between=2023-10-20T08:30:00+08:00[Asia/Shanghai],2024-10-20T08:30:00+08:00[Asia/Shanghai]</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Header=X-Request-Id,</span> <span class=\"string\">\\d+</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Host=**.lison.com</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Method=GET,POST</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Query=token,lison.</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">RemoteAddr=192.168.1.1/24</span></span><br><span class=\"line\">         <span class=\"bullet\">-</span> <span class=\"string\">Age=18,60</span> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n<p>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</p>\n<blockquote>\n<p>一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发</p>\n</blockquote>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.5.1`\n\n# Spring Cloud Alibaba-08-SMS短信服务\n\n## 短信服务介绍\n\n> 短信服务(Short Message Service)是阿里云为用户提供的一种通信服务的能力。\n>\n> 产品优势:覆盖全面、高并发处理、消息堆积处理、开发管理简单、智能监控调度\n> 产品功能:短信通知、短信验证码、推广短信、异步通知、数据统计\n> 应用场景:短信验证码、系统信息推送、推广短信等\n\n![image-20240510121326830](typora-user-images/image-20240510121326830.png)\n\n\n\n## 短信服务使用\n\n\n\n\n\n1、入驻阿里云\n\n![image-20240510121854650](typora-user-images/image-20240510121854650.png)\n\n\n\n2、开通短信服务，按流程创建资质、申请前面，创建模版，系统设置，发送短信\n\n![image-20240510121631586](typora-user-images/image-20240510121631586.png)\n\n\n\n\n\n## SMS概念\n\n- 短信服务（Short Message Service）\n\n  短信服务是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信。\n\n- 短信模版（TemplateId）\n\n  使用短信服务首先都需要创建短信模板提交审核，这样可以防止不法分子通过云服务商提供的短信服务实施短信诈骗。\n\n- 短信签名（SignName）\n\n  短信末尾会附上签名以识别此条短信是由谁发送，这样可以令用户对短信来源有一个明确的印象。\n\n- 地域（RegionId）\n\n  地域表示SMS的数据中心所在物理位置。可以根据费用、请求来源等选择合适的地域，一般是阿里云短信配置。\n\n- 访问密钥（AccessKey）\n\n  AccessKey简称AK，指的是访问身份验证中用到的AccessKey ID和AccessKey Secret。SMS通过使用AccessKey ID和AccessKey Secret对称加密的方法来验证某个请求的发送者身份。AccessKey ID用于标识用户；AccessKey Secret是用户用于加密签名字符串和SMS用来验证签名字符串的密钥，必须保密。关于获取AccessKey的方法\n\n\n\n\n\n\n\n目前BladeX提供的blade-starter-sms集成了四种sms，分别为：云片sms、阿里云sms、七牛sms、腾讯sms\n\n\n\n## 功能测试\n\n引入依赖:\n\n~~~xml\n<!--短信发送-->\n <dependency> \n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-alicloud-sms</artifactId>\n</dependency>\n\n~~~\n\n~~~yaml\nsms:\n  enabled: true\n  name: aliyun\n  template-id: SMS_xxxx\n  sign-name: xxxxx\n  access-key: xxxxxxx\n  secret-key: xxxxxxx\n  region-id: cn-hangzhou\n~~~\n\n\n\n\n\n使用阿里云提供的Demo测试短信发送\n\n~~~java\npublic class SmsUtil {\n    //替换成自己申请的accessKeyId\n    private static String accessKeyId = \"xxx\"; //替换成自己申请的accessKeySecret\n    private static String accessKeySecret = \"xxxxx\";\n    static final String product = \"Dysmsapi\";\n    static final String domain = \"dysmsapi.aliyuncs.com\";\n\n    /**\n     * 发送短信\n     *\n     * @param phoneNumbers 要发送短信到哪个手机号\n     * @param signName     短信签名[必须使用前面申请的]\n     * @param templateCode 短信短信模板ID[必须使用前面申请的]\n     * @param param        模板中${code}位置传递的内容\n     */\n    public static void sendSms(String phoneNumbers, String signName, String templateCode, String param) {\n        try {\n            System.setProperty(\"sun.net.client.defaultConnectTimeout\", \"10000\");\n            System.setProperty(\"sun.net.client.defaultReadTimeout\", \"10000\");\n            //初始化acsClient,暂不支持region化\n            IClientProfile profile = DefaultProfile.getProfile(\"cn-hangzhou\", accessKeyId, accessKeySecret);\n\n            DefaultProfile.addEndpoint(\"cn-hangzhou\", \"cn-hangzhou\", product, domain);\n            IAcsClient acsClient = new DefaultAcsClient(profile);\n            SendSmsRequest request = new SendSmsRequest();\n            request.setPhoneNumbers(phoneNumbers);\n            request.setSignName(signName);\n            request.setTemplateCode(templateCode);\n            request.setTemplateParam(param);\n            request.setOutId(\"yourOutId\");\n            SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);\n            if (!\"OK\".\n\n                    equals(sendSmsResponse.getCode())) {\n                throw new RuntimeException(sendSmsResponse.getMessage());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"发送短信失败\");\n        }\n    }\n}\n\n\n~~~\n\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-08- SMS短信服务.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.5.1`\n\n# Spring Cloud Alibaba-08-SMS短信服务\n\n## 短信服务介绍\n\n> 短信服务(Short Message Service)是阿里云为用户提供的一种通信服务的能力。\n>\n> 产品优势:覆盖全面、高并发处理、消息堆积处理、开发管理简单、智能监控调度\n> 产品功能:短信通知、短信验证码、推广短信、异步通知、数据统计\n> 应用场景:短信验证码、系统信息推送、推广短信等\n\n![image-20240510121326830](typora-user-images/image-20240510121326830.png)\n\n\n\n## 短信服务使用\n\n\n\n\n\n1、入驻阿里云\n\n![image-20240510121854650](typora-user-images/image-20240510121854650.png)\n\n\n\n2、开通短信服务，按流程创建资质、申请前面，创建模版，系统设置，发送短信\n\n![image-20240510121631586](typora-user-images/image-20240510121631586.png)\n\n\n\n\n\n## SMS概念\n\n- 短信服务（Short Message Service）\n\n  短信服务是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信。\n\n- 短信模版（TemplateId）\n\n  使用短信服务首先都需要创建短信模板提交审核，这样可以防止不法分子通过云服务商提供的短信服务实施短信诈骗。\n\n- 短信签名（SignName）\n\n  短信末尾会附上签名以识别此条短信是由谁发送，这样可以令用户对短信来源有一个明确的印象。\n\n- 地域（RegionId）\n\n  地域表示SMS的数据中心所在物理位置。可以根据费用、请求来源等选择合适的地域，一般是阿里云短信配置。\n\n- 访问密钥（AccessKey）\n\n  AccessKey简称AK，指的是访问身份验证中用到的AccessKey ID和AccessKey Secret。SMS通过使用AccessKey ID和AccessKey Secret对称加密的方法来验证某个请求的发送者身份。AccessKey ID用于标识用户；AccessKey Secret是用户用于加密签名字符串和SMS用来验证签名字符串的密钥，必须保密。关于获取AccessKey的方法\n\n\n\n\n\n\n\n目前BladeX提供的blade-starter-sms集成了四种sms，分别为：云片sms、阿里云sms、七牛sms、腾讯sms\n\n\n\n## 功能测试\n\n引入依赖:\n\n~~~xml\n<!--短信发送-->\n <dependency> \n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-alicloud-sms</artifactId>\n</dependency>\n\n~~~\n\n~~~yaml\nsms:\n  enabled: true\n  name: aliyun\n  template-id: SMS_xxxx\n  sign-name: xxxxx\n  access-key: xxxxxxx\n  secret-key: xxxxxxx\n  region-id: cn-hangzhou\n~~~\n\n\n\n\n\n使用阿里云提供的Demo测试短信发送\n\n~~~java\npublic class SmsUtil {\n    //替换成自己申请的accessKeyId\n    private static String accessKeyId = \"xxx\"; //替换成自己申请的accessKeySecret\n    private static String accessKeySecret = \"xxxxx\";\n    static final String product = \"Dysmsapi\";\n    static final String domain = \"dysmsapi.aliyuncs.com\";\n\n    /**\n     * 发送短信\n     *\n     * @param phoneNumbers 要发送短信到哪个手机号\n     * @param signName     短信签名[必须使用前面申请的]\n     * @param templateCode 短信短信模板ID[必须使用前面申请的]\n     * @param param        模板中${code}位置传递的内容\n     */\n    public static void sendSms(String phoneNumbers, String signName, String templateCode, String param) {\n        try {\n            System.setProperty(\"sun.net.client.defaultConnectTimeout\", \"10000\");\n            System.setProperty(\"sun.net.client.defaultReadTimeout\", \"10000\");\n            //初始化acsClient,暂不支持region化\n            IClientProfile profile = DefaultProfile.getProfile(\"cn-hangzhou\", accessKeyId, accessKeySecret);\n\n            DefaultProfile.addEndpoint(\"cn-hangzhou\", \"cn-hangzhou\", product, domain);\n            IAcsClient acsClient = new DefaultAcsClient(profile);\n            SendSmsRequest request = new SendSmsRequest();\n            request.setPhoneNumbers(phoneNumbers);\n            request.setSignName(signName);\n            request.setTemplateCode(templateCode);\n            request.setTemplateParam(param);\n            request.setOutId(\"yourOutId\");\n            SendSmsResponse sendSmsResponse = acsClient.getAcsResponse(request);\n            if (!\"OK\".\n\n                    equals(sendSmsResponse.getCode())) {\n                throw new RuntimeException(sendSmsResponse.getMessage());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"发送短信失败\");\n        }\n    }\n}\n\n\n~~~\n\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-08- SMS短信服务","published":1,"date":"2024-04-08T01:28:51.543Z","updated":"2024-05-14T01:46:04.726Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhk0005ecfy1jvlfqfj","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.5.1</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-08-SMS短信服务\"><a href=\"#Spring-Cloud-Alibaba-08-SMS短信服务\" class=\"headerlink\" title=\"Spring Cloud Alibaba-08-SMS短信服务\"></a>Spring Cloud Alibaba-08-SMS短信服务</h1><h2 id=\"短信服务介绍\"><a href=\"#短信服务介绍\" class=\"headerlink\" title=\"短信服务介绍\"></a>短信服务介绍</h2><blockquote>\n<p>短信服务(Short Message Service)是阿里云为用户提供的一种通信服务的能力。</p>\n<p>产品优势:覆盖全面、高并发处理、消息堆积处理、开发管理简单、智能监控调度<br>产品功能:短信通知、短信验证码、推广短信、异步通知、数据统计<br>应用场景:短信验证码、系统信息推送、推广短信等</p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20240510121326830.png\" alt=\"image-20240510121326830\"></p>\n<h2 id=\"短信服务使用\"><a href=\"#短信服务使用\" class=\"headerlink\" title=\"短信服务使用\"></a>短信服务使用</h2><p>1、入驻阿里云</p>\n<p><img src=\"/typora-user-images/image-20240510121854650.png\" alt=\"image-20240510121854650\"></p>\n<p>2、开通短信服务，按流程创建资质、申请前面，创建模版，系统设置，发送短信</p>\n<p><img src=\"/typora-user-images/image-20240510121631586.png\" alt=\"image-20240510121631586\"></p>\n<h2 id=\"SMS概念\"><a href=\"#SMS概念\" class=\"headerlink\" title=\"SMS概念\"></a>SMS概念</h2><ul>\n<li><p>短信服务（Short Message Service）</p>\n<p>短信服务是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信。</p>\n</li>\n<li><p>短信模版（TemplateId）</p>\n<p>使用短信服务首先都需要创建短信模板提交审核，这样可以防止不法分子通过云服务商提供的短信服务实施短信诈骗。</p>\n</li>\n<li><p>短信签名（SignName）</p>\n<p>短信末尾会附上签名以识别此条短信是由谁发送，这样可以令用户对短信来源有一个明确的印象。</p>\n</li>\n<li><p>地域（RegionId）</p>\n<p>地域表示SMS的数据中心所在物理位置。可以根据费用、请求来源等选择合适的地域，一般是阿里云短信配置。</p>\n</li>\n<li><p>访问密钥（AccessKey）</p>\n<p>AccessKey简称AK，指的是访问身份验证中用到的AccessKey ID和AccessKey Secret。SMS通过使用AccessKey ID和AccessKey Secret对称加密的方法来验证某个请求的发送者身份。AccessKey ID用于标识用户；AccessKey Secret是用户用于加密签名字符串和SMS用来验证签名字符串的密钥，必须保密。关于获取AccessKey的方法</p>\n</li>\n</ul>\n<p>目前BladeX提供的blade-starter-sms集成了四种sms，分别为：云片sms、阿里云sms、七牛sms、腾讯sms</p>\n<h2 id=\"功能测试\"><a href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"></a>功能测试</h2><p>引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--短信发送--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alicloud-sms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sms:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aliyun</span></span><br><span class=\"line\">  <span class=\"attr\">template-id:</span> <span class=\"string\">SMS_xxxx</span></span><br><span class=\"line\">  <span class=\"attr\">sign-name:</span> <span class=\"string\">xxxxx</span></span><br><span class=\"line\">  <span class=\"attr\">access-key:</span> <span class=\"string\">xxxxxxx</span></span><br><span class=\"line\">  <span class=\"attr\">secret-key:</span> <span class=\"string\">xxxxxxx</span></span><br><span class=\"line\">  <span class=\"attr\">region-id:</span> <span class=\"string\">cn-hangzhou</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>使用阿里云提供的Demo测试短信发送</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//替换成自己申请的accessKeyId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">accessKeyId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxx&quot;</span>; <span class=\"comment\">//替换成自己申请的accessKeySecret</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">accessKeySecret</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxxxx&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Dysmsapi&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">domain</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dysmsapi.aliyuncs.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送短信</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> phoneNumbers 要发送短信到哪个手机号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> signName     短信签名[必须使用前面申请的]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> templateCode 短信短信模板ID[必须使用前面申请的]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param        模板中$&#123;code&#125;位置传递的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">(String phoneNumbers, String signName, String templateCode, String param)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.setProperty(<span class=\"string\">&quot;sun.net.client.defaultConnectTimeout&quot;</span>, <span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">            System.setProperty(<span class=\"string\">&quot;sun.net.client.defaultReadTimeout&quot;</span>, <span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//初始化acsClient,暂不支持region化</span></span><br><span class=\"line\">            <span class=\"type\">IClientProfile</span> <span class=\"variable\">profile</span> <span class=\"operator\">=</span> DefaultProfile.getProfile(<span class=\"string\">&quot;cn-hangzhou&quot;</span>, accessKeyId, accessKeySecret);</span><br><span class=\"line\"></span><br><span class=\"line\">            DefaultProfile.addEndpoint(<span class=\"string\">&quot;cn-hangzhou&quot;</span>, <span class=\"string\">&quot;cn-hangzhou&quot;</span>, product, domain);</span><br><span class=\"line\">            <span class=\"type\">IAcsClient</span> <span class=\"variable\">acsClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAcsClient</span>(profile);</span><br><span class=\"line\">            <span class=\"type\">SendSmsRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SendSmsRequest</span>();</span><br><span class=\"line\">            request.setPhoneNumbers(phoneNumbers);</span><br><span class=\"line\">            request.setSignName(signName);</span><br><span class=\"line\">            request.setTemplateCode(templateCode);</span><br><span class=\"line\">            request.setTemplateParam(param);</span><br><span class=\"line\">            request.setOutId(<span class=\"string\">&quot;yourOutId&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">SendSmsResponse</span> <span class=\"variable\">sendSmsResponse</span> <span class=\"operator\">=</span> acsClient.getAcsResponse(request);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"string\">&quot;OK&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">                    equals(sendSmsResponse.getCode())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(sendSmsResponse.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;发送短信失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.5.1</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-08-SMS短信服务\"><a href=\"#Spring-Cloud-Alibaba-08-SMS短信服务\" class=\"headerlink\" title=\"Spring Cloud Alibaba-08-SMS短信服务\"></a>Spring Cloud Alibaba-08-SMS短信服务</h1><h2 id=\"短信服务介绍\"><a href=\"#短信服务介绍\" class=\"headerlink\" title=\"短信服务介绍\"></a>短信服务介绍</h2><blockquote>\n<p>短信服务(Short Message Service)是阿里云为用户提供的一种通信服务的能力。</p>\n<p>产品优势:覆盖全面、高并发处理、消息堆积处理、开发管理简单、智能监控调度<br>产品功能:短信通知、短信验证码、推广短信、异步通知、数据统计<br>应用场景:短信验证码、系统信息推送、推广短信等</p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20240510121326830.png\" alt=\"image-20240510121326830\"></p>\n<h2 id=\"短信服务使用\"><a href=\"#短信服务使用\" class=\"headerlink\" title=\"短信服务使用\"></a>短信服务使用</h2><p>1、入驻阿里云</p>\n<p><img src=\"/typora-user-images/image-20240510121854650.png\" alt=\"image-20240510121854650\"></p>\n<p>2、开通短信服务，按流程创建资质、申请前面，创建模版，系统设置，发送短信</p>\n<p><img src=\"/typora-user-images/image-20240510121631586.png\" alt=\"image-20240510121631586\"></p>\n<h2 id=\"SMS概念\"><a href=\"#SMS概念\" class=\"headerlink\" title=\"SMS概念\"></a>SMS概念</h2><ul>\n<li><p>短信服务（Short Message Service）</p>\n<p>短信服务是广大企业客户快速触达手机用户所优选使用的通信能力。调用API或用群发助手，即可发送验证码、通知类和营销类短信。</p>\n</li>\n<li><p>短信模版（TemplateId）</p>\n<p>使用短信服务首先都需要创建短信模板提交审核，这样可以防止不法分子通过云服务商提供的短信服务实施短信诈骗。</p>\n</li>\n<li><p>短信签名（SignName）</p>\n<p>短信末尾会附上签名以识别此条短信是由谁发送，这样可以令用户对短信来源有一个明确的印象。</p>\n</li>\n<li><p>地域（RegionId）</p>\n<p>地域表示SMS的数据中心所在物理位置。可以根据费用、请求来源等选择合适的地域，一般是阿里云短信配置。</p>\n</li>\n<li><p>访问密钥（AccessKey）</p>\n<p>AccessKey简称AK，指的是访问身份验证中用到的AccessKey ID和AccessKey Secret。SMS通过使用AccessKey ID和AccessKey Secret对称加密的方法来验证某个请求的发送者身份。AccessKey ID用于标识用户；AccessKey Secret是用户用于加密签名字符串和SMS用来验证签名字符串的密钥，必须保密。关于获取AccessKey的方法</p>\n</li>\n</ul>\n<p>目前BladeX提供的blade-starter-sms集成了四种sms，分别为：云片sms、阿里云sms、七牛sms、腾讯sms</p>\n<h2 id=\"功能测试\"><a href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"></a>功能测试</h2><p>引入依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--短信发送--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alicloud-sms<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sms:</span></span><br><span class=\"line\">  <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">aliyun</span></span><br><span class=\"line\">  <span class=\"attr\">template-id:</span> <span class=\"string\">SMS_xxxx</span></span><br><span class=\"line\">  <span class=\"attr\">sign-name:</span> <span class=\"string\">xxxxx</span></span><br><span class=\"line\">  <span class=\"attr\">access-key:</span> <span class=\"string\">xxxxxxx</span></span><br><span class=\"line\">  <span class=\"attr\">secret-key:</span> <span class=\"string\">xxxxxxx</span></span><br><span class=\"line\">  <span class=\"attr\">region-id:</span> <span class=\"string\">cn-hangzhou</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>使用阿里云提供的Demo测试短信发送</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsUtil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//替换成自己申请的accessKeyId</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">accessKeyId</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxx&quot;</span>; <span class=\"comment\">//替换成自己申请的accessKeySecret</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">accessKeySecret</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxxxx&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">product</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Dysmsapi&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">domain</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dysmsapi.aliyuncs.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发送短信</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> phoneNumbers 要发送短信到哪个手机号</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> signName     短信签名[必须使用前面申请的]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> templateCode 短信短信模板ID[必须使用前面申请的]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> param        模板中$&#123;code&#125;位置传递的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">(String phoneNumbers, String signName, String templateCode, String param)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.setProperty(<span class=\"string\">&quot;sun.net.client.defaultConnectTimeout&quot;</span>, <span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">            System.setProperty(<span class=\"string\">&quot;sun.net.client.defaultReadTimeout&quot;</span>, <span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//初始化acsClient,暂不支持region化</span></span><br><span class=\"line\">            <span class=\"type\">IClientProfile</span> <span class=\"variable\">profile</span> <span class=\"operator\">=</span> DefaultProfile.getProfile(<span class=\"string\">&quot;cn-hangzhou&quot;</span>, accessKeyId, accessKeySecret);</span><br><span class=\"line\"></span><br><span class=\"line\">            DefaultProfile.addEndpoint(<span class=\"string\">&quot;cn-hangzhou&quot;</span>, <span class=\"string\">&quot;cn-hangzhou&quot;</span>, product, domain);</span><br><span class=\"line\">            <span class=\"type\">IAcsClient</span> <span class=\"variable\">acsClient</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultAcsClient</span>(profile);</span><br><span class=\"line\">            <span class=\"type\">SendSmsRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SendSmsRequest</span>();</span><br><span class=\"line\">            request.setPhoneNumbers(phoneNumbers);</span><br><span class=\"line\">            request.setSignName(signName);</span><br><span class=\"line\">            request.setTemplateCode(templateCode);</span><br><span class=\"line\">            request.setTemplateParam(param);</span><br><span class=\"line\">            request.setOutId(<span class=\"string\">&quot;yourOutId&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">SendSmsResponse</span> <span class=\"variable\">sendSmsResponse</span> <span class=\"operator\">=</span> acsClient.getAcsResponse(request);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"string\">&quot;OK&quot;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">                    equals(sendSmsResponse.getCode())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(sendSmsResponse.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;发送短信失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.05.10`\n\n# Spring Cloud Alibaba-02-Nacos Discovery服务治理及负载均衡\n\n[toc]\n\n\n\n## 服务治理介绍\n\n\n\n先来思考一个问题\n\n通过上一章的操作，我们已经可以实现微服务之间的调用。但是我们把服务提供者的网络地址 (ip，端口)等硬编码到了代码中，这种做法存在许多问题:\n\n一旦服务提供者地址变化，就需要手工修改代码\n\n一旦是多个服务提供者，无法实现负载均衡功能\n\n一旦服务变得越来越多，人工维护调用关系困难\n\n那么应该怎么解决呢， 这时候就需要通过注册中心动态的实现服务治理。\n\n### 什么是服务治理\n\n服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的自动化注册与发现。\n\n服务注册:在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。\n\n服务发现:服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实例的访问\n\n![image-20230923151411555](typora-user-images/image-20230923151411555.png)\n\n\n\n通过上面的调用图会发现，除了微服务，还有一个组件是**服务注册中心**，它是微服务架构非常重要 的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能:\n\n1. 服务发现:\n   服务注册:保存服务提供者和服务调用者的信息\n   服务订阅:服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息\n2. 服务配置:\n   配置订阅:服务提供者和服务调用者订阅微服务相关的配置\n   配置下发:主动将配置推送给服务提供者和服务调用者\n3. 服务健康检测：\n   检测服务提供者的健康情况，如果发现异常，执行服务剔除\n\n### 常见的注册中心\n\n**Zookeeper**\n\nzookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式 应用中经常遇到的一些数据管理问题，如:统一命名服务、状态同步服务、集群管理、分布式应用 配置项的管理等。\n\n**Eureka**\n\nEureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭 源\n\n**Consul**\n\nConsul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现 和配置管理的功能。Consul的功能都很实用，其中包括:服务注册/发现、健康检查、Key/Value 存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以 安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。\n\n**Nacos**\n\nNacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 Spring Cloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos=eureka+config。\n\n\n\n\n\n## Nacos介绍\n\n\n\n* Nacos是SpringCloudAlibaba架构中最重要的组件。\n* Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台，提供注册中心、配置中心和动态 DNS 服务三大功能。能够无缝对接Springcloud、Spring、Dubbo等流行框架。\n* nacos和eureka功能对比\n\n| 功能模块     | Nacos | Eureka | 功能说明                                                     |\n| ------------ | ----- | ------ | ------------------------------------------------------------ |\n| 注册中心     | √     | √      | 服务治理，服务中心化注册                                     |\n| 配置中心     | √     | ×      | eureka需要配合springcloud config实现                         |\n| 配置动态刷新 | √     | ×      | nacos通过netty保持tcp长链接进行推送，eureka需要配合mq实现配置动态 |\n| 可用区az     | √     | √      | 对服务集群划分不同区域，实现区域隔离，并提供灾难级自动切换   |\n| 分组         | √     | ×      | nacos根据不同的业务、环境进行分组管理（namespace,group       |\n| 元数据       | √     | √      | 提供服务标签数据（环境、服务标识）                           |\n| 权重         | √     | ×      | nacos提供权重设置，调整承载流量压力                          |\n| 健康检查     | √     | √      | nacos提供服务端或者客户端发起的健康监测，eureka是有客户端发起心跳 |\n| 负载均衡     | √     | √      | 均提供负载均衡策略，eureka采用ribbon                         |\n\n* nacos支持a（高可用）p（分区容错）和c（一致性）p的切换默认为ap, eureka仅支持ap，zookeeper仅支持c\n\n\n\n## nacos能做什么？\n\n\n\n* 服务注册发现和服务健康监测：Nacos支持基于DNS和基于RPC的服务发现，服务端可以通过SDK或者Api进行服务注册，相应的服务消费者可以使用DNS或者Http查找的方式获取服务列表。Nacos同时提供对服务的实时健康检查，阻止想不健康的主机或服务发送请求，与Eureka类似Nacos也有友好的控制台界面。\n* 动态DNS服务：支持权重路由，更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。\n* 动态配置服务：接触过SpringCloud应该对config有所了解，那么配置中心也就很好理解，Nacos支持动态的配置管理，将服务的配置信息分环境分类别外部管理，并且支持热更新。不过与Config不同Nacos的配置信息存储与数据库中，支持配置信息的监听和版本回滚。\n* 服务及元数据管理：Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA （服务等级协议）以及最首要的 metrics 统计数据（默认不开启暴露需要修改配置）。可以搭建搭建prometheus采集Nacos metrics数据也可以搭建搭建grafana图形化展示metrics数据\n\n\n\n\n\n## Nacos下载安装\n\n**官网网址：**https://nacos.io/zh-cn/index.html\n\n![image-20230921165730484](typora-user-images/image-20230921165730484.png)\n\n\n\n**官网文档网址**：https://nacos.io/zh-cn/docs/quick-start.html\n\n**注意：**使用官网推荐的稳定版本：下载地址：https://github.com/alibaba/nacos/releases\n\n\n\n![image-20230921170222187](typora-user-images/image-20230921170222187.png)\n\n### **执行命令**\n\n\n\n**Linux/Unix/Mac**\n\n启动命令(standalone代表着单机模式运行，非集群模式):\n\n```\nsh startup.sh -m standalone\n```\n\n\n\n**Windows**\n\n启动命令(standalone代表着单机模式运行，非集群模式):\n\n```\nstartup.cmd -m standalone\n```\n\n\n\n### **执行结果**\n\n\n\n![image-20230921171251668](typora-user-images/image-20230921171251668.png)\n\n\n\n\n\n\n\n### 验证\n\n得到结果以后为了验证是否成功开启Nacos，我们需要访问：http://localhost:8848/nacos\n\n![image-20230921170734063](typora-user-images/image-20230921170734063.png)\n\n出现此界面表示已经成功启动Nacos，默认的账号密码是：nacos/nacos\n\n![image-20230921171005578](typora-user-images/image-20230921171005578.png)\n\n\n\n\n\n## 引入Nacos Discovery进行服务注册/发现\n\n服务发现是微服务架构中的关键组件之一。在这样的架构中，手动为每个客户端配置服务列表可能是一项艰巨的任务，并且使得动态扩展极其困难。Nacos Discovery 帮助您自动将您的服务注册到 Nacos 服务器，Nacos 服务器会跟踪服务并动态刷新服务列表。此外，Nacos Discovery 将服务实例的一些元数据，如主机、端口、健康检查 URL、主页等注册到 Nacos。\n\n 学习任何知识我们都需要从它的官方文档入手，所以我们直接来看官网给我们提供的文档：https://spring.io/projects/spring-cloud-alibaba#learn\n\n\n\n### 创建新项目\n\n聚合项目：由于聚合带来的诸多好处，在SpringBoot项目开发中也广泛采用，开发中将SpringBoot项目按照功能分成子模块开发，所以我们在使用Spring Cloud Alibaba完成项目的时候，也是采用聚合项目来完成。\n\n**父项目pom**\n\n\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.13.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <groupId>com.lison</groupId>\n    <artifactId>spring-cloud-alibaba-building</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n\n    <properties>\n        <java.version>17</java.version>\n        <lison.project.version>1.0.0-SNAPSHOT</lison.project.version>\n        <maven.plugin.version>3.8.1</maven.plugin.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-cloud-alibaba-version>2.2.5.RELEASE</spring-cloud-alibaba-version>\n    </properties>\n\n    <modules>\n        <module>spring-boot-building</module>\n    </modules>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring-cloud-alibaba-version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n~~~\n\n\n\n**子项目pom**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lison</groupId>\n        <artifactId>spring-cloud-alibaba-building</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison</groupId>\n    <artifactId>spring-boot-building</artifactId>\n    <version>${lison.project.version}</version>\n    <name>${project.artifactId}</name>\n    <packaging>jar</packaging>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- Nacos -->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n\n~~~\n\n**子项目yml**\n\n\n\n~~~yaml\nserver:\n  port: 18000\nspring:\n  application:\n    name: spring-boot-building\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n\nmanagement:\n  endpoint:\n    web:\n      exposure:\n        include:'*'\n\n~~~\n\n\n\n**启动类**\n\n~~~java\npackage com.lison.springbootbuilding;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SpringBootBuildingApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootBuildingApplication.class, args);\n    }\n\n}\n\n~~~\n\n\n\n### 测试\n\n**注意，在启动项目前一定要启动Nacos**\n\n![image-20230923154459874](typora-user-images/image-20230923154459874.png)\n\n\n\n\n\n\n\n\n\n## Nacos服务消费者和负载均衡\n\n\n\n### 什么是负载均衡\n\n通俗的讲， 负载均衡就是将负载(工作任务，访问请求)进行分摊到多个操作单元(服务器,组件)上进行执行。\n根据负载均衡发生位置的不同,一般分为服务端负载均衡和客户端负载均衡。 服务端负载均衡指的是发生在服务提供者一方,比如常见的nginx负载均衡而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求。\n\n\n\n![image-20230923152344429](typora-user-images/image-20230923152344429.png)\n\n我们在微服务调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行\n\n\n\n### 负载均衡\n\n创建一个spring-cloud-service 服务\n\n pom.xml配置\n\n\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lison</groupId>\n        <artifactId>spring-cloud-alibaba-building</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison</groupId>\n    <artifactId>spring-cloud-service</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-cloud-service</name>\n    <description>spring-cloud-service</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- Nacos -->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n    </dependencies>\n\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <!--suppress UnresolvedMavenProperty -->\n                                <copy overwrite=\"true\"\n                                      tofile=\"${session.executionRootDirectory}/target/${project.artifactId}.jar\"\n                                      file=\"${project.build.directory}/${project.artifactId}.jar\" />\n                            </tasks>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n**yml配置**\n\n~~~java\nserver:\n  port: 18001\nspring:\n  application:\n    name: spring-cloud-service\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n\nmanagement:\n  endpoint:\n    web:\n      exposure:\n        include:'*'\n\n~~~\n\n\n\n**启动类**\n\n~~~java\npackage com.lison.springcloudservice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SpringCloudServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudServiceApplication.class, args);\n    }\n\n}\n\n~~~\n\n\n\n接下来开始修改 spring-cloud-service模块的代码， 将其注册到nacos服务上\n\n![image-20230923154644281](typora-user-images/image-20230923154644281.png)\n\n#### 基于Ribbon实现负载均衡\n\nRibbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡\n\n1、在RestTemplate 的生成方法上添加@LoadBalanced注解\n\n~~~java\n@Bean\n@LoadBalanced\npublic RestTemplate restTemplate() {\n    return new RestTemplate();\n}\n\n~~~\n\n\n\n2、修改服务调用的方法\n\n~~~java\n@RestController\npublic class TestController {\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @GetMapping(value = \"/naocs/consumer\")\n    public String getServerPort(){\n\n        return restTemplate.getForObject( \"http://spring-cloud-service/getServerProd\",String.class);\n\n    }\n}\n~~~\n\n\n\n\n\n3、通过idea再启动一个 spring-cloud-service 微服务，设置其端口为18011\n\n![image-20230923162506692](typora-user-images/image-20230923162506692.png)\n\n\n\n4、通过nacos查看微服务的启动情况\n\n\n\n![image-20230923162555344](typora-user-images/image-20230923162555344.png)\n\n\n\n\n\nRibbon支持的负载均衡策略\n\nRibbon内置了多种负载均衡策略,内部负载均衡的顶级接口为 com.netflix.loadbalancer.IRule , 具体的负载策略如下图所示:\n\n\n\n| 策略名                    | 策略描述                                                     | **实现说明**                                                 |\n| ------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| BestAvailableRule         | 选择一个最小的并发 请求的server                              | 逐个考察Server，如果Server被 tripped了，则忽略，在选择其中 ActiveRequestsCount最小的serve |\n| AvailabilityFilteringRule | 过滤掉那些因为一直 连接失败的被标记为 circuit tripped的后 端server，并过滤掉 那些高并发的的后端 server(active connections 超过配 置的阈值) | 使用一个AvailabilityPredicate来包含 过滤server的逻辑，其实就就是检查 status里记录的各个server的运行状态 |\n| WeightedResponseTimeRule  | 根据相应时间分配一 个weight，相应时 间越长，weight越 小，被选中的可能性 越低。 | 一个后台线程定期的从status里面读 取评价响应时间，为每个server计算 一个weight。Weight的计算也比较简 单responsetime 减去每个server自己 平均的responsetime是server的权 重。当刚开始运行，没有形成statas 时，使用roubine策略选择server。 |\n| RetryRule                 | 对选定的负载均衡策略机上重试机制。                           | 在一个配置时间段内当选择server不 成功，则一直尝试使用subRule的方 式选择一个可用的server |\n| RoundRobinRule            | 轮询方式轮询选择 server                                      | 轮询index，选择index对应位置的 server                        |\n| RandomRule                | 随机选择一个server                                           | 在index上随机，选择index对应位置 的server                    |\n| ZoneAvoidanceRule         | 复合判断server所在 区域的性能和server 的可用性选择server     | 使用ZoneAvoidancePredicate和 AvailabilityPredicate来判断是否选择 某个server，前一个判断判定一个 zone的运行性能是否可用，剔除不可 用的zone(的所有server)， AvailabilityPredicate用于过滤掉连接 数过多的Server。 |\n\n我们可以通过修改配置来调整Ribbon的负载均衡策略，具体代码如下：\n\n~~~yaml\nspring-cloud-service: # 调用的提供者的名称 \n\tribbon: \n   \t\tNFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule\n\n\n~~~\n\n\n\n\n\n### 基于Feign实现服务调用\n\n#### 什么是Feign\n\nFeign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务 一样简单， 只需要创建一个接口并添加一个注解即可。\n\nNacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负 载均衡的效果。\n\n#### Feign的使用\n\n1、加入Feign依赖\n\n~~~xml\n<!--fegin组件--> \n<dependency> \n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n\n~~~\n\n\n\n2、在主类上添加Fegin的注解\n\n~~~java\n\n@SpringBootApplication \n@EnableDiscoveryClient \n@EnableFeignClients\n//开启Fegin\n~~~\n\n\n\n\n\n3创建一个service， 并使用Fegin实现微服务调用\n\n\n\n~~~java\n@FeignClient(\"spring-cloud-service\")\npublic interface ITestService {\n    //指定调用提供者的哪个方法\n    @GetMapping(value = \"/getServerProd\")\n    String getServerPort();\n}\n~~~\n\n\n\n4、修改controller代码，并启动验证\n\n\n\n~~~java\n@RestController\npublic class TestController {\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @Autowired\n    private ITestService iTestService;\n\n    @GetMapping(value = \"/naocs/consumer\")\n    public String getServerPort(){\n\n        return iTestService.getServerPort();\n\n    }\n}\n\n~~~\n\n\n\n5、重启buding微服务,访问：http://127.0.0.1:18000/naocs/consumer 查看效果\n\n\n\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-02-Nacos Discovery服务治理.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.05.10`\n\n# Spring Cloud Alibaba-02-Nacos Discovery服务治理及负载均衡\n\n[toc]\n\n\n\n## 服务治理介绍\n\n\n\n先来思考一个问题\n\n通过上一章的操作，我们已经可以实现微服务之间的调用。但是我们把服务提供者的网络地址 (ip，端口)等硬编码到了代码中，这种做法存在许多问题:\n\n一旦服务提供者地址变化，就需要手工修改代码\n\n一旦是多个服务提供者，无法实现负载均衡功能\n\n一旦服务变得越来越多，人工维护调用关系困难\n\n那么应该怎么解决呢， 这时候就需要通过注册中心动态的实现服务治理。\n\n### 什么是服务治理\n\n服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的自动化注册与发现。\n\n服务注册:在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。\n\n服务发现:服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实例的访问\n\n![image-20230923151411555](typora-user-images/image-20230923151411555.png)\n\n\n\n通过上面的调用图会发现，除了微服务，还有一个组件是**服务注册中心**，它是微服务架构非常重要 的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能:\n\n1. 服务发现:\n   服务注册:保存服务提供者和服务调用者的信息\n   服务订阅:服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息\n2. 服务配置:\n   配置订阅:服务提供者和服务调用者订阅微服务相关的配置\n   配置下发:主动将配置推送给服务提供者和服务调用者\n3. 服务健康检测：\n   检测服务提供者的健康情况，如果发现异常，执行服务剔除\n\n### 常见的注册中心\n\n**Zookeeper**\n\nzookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式 应用中经常遇到的一些数据管理问题，如:统一命名服务、状态同步服务、集群管理、分布式应用 配置项的管理等。\n\n**Eureka**\n\nEureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭 源\n\n**Consul**\n\nConsul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现 和配置管理的功能。Consul的功能都很实用，其中包括:服务注册/发现、健康检查、Key/Value 存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以 安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。\n\n**Nacos**\n\nNacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 Spring Cloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos=eureka+config。\n\n\n\n\n\n## Nacos介绍\n\n\n\n* Nacos是SpringCloudAlibaba架构中最重要的组件。\n* Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台，提供注册中心、配置中心和动态 DNS 服务三大功能。能够无缝对接Springcloud、Spring、Dubbo等流行框架。\n* nacos和eureka功能对比\n\n| 功能模块     | Nacos | Eureka | 功能说明                                                     |\n| ------------ | ----- | ------ | ------------------------------------------------------------ |\n| 注册中心     | √     | √      | 服务治理，服务中心化注册                                     |\n| 配置中心     | √     | ×      | eureka需要配合springcloud config实现                         |\n| 配置动态刷新 | √     | ×      | nacos通过netty保持tcp长链接进行推送，eureka需要配合mq实现配置动态 |\n| 可用区az     | √     | √      | 对服务集群划分不同区域，实现区域隔离，并提供灾难级自动切换   |\n| 分组         | √     | ×      | nacos根据不同的业务、环境进行分组管理（namespace,group       |\n| 元数据       | √     | √      | 提供服务标签数据（环境、服务标识）                           |\n| 权重         | √     | ×      | nacos提供权重设置，调整承载流量压力                          |\n| 健康检查     | √     | √      | nacos提供服务端或者客户端发起的健康监测，eureka是有客户端发起心跳 |\n| 负载均衡     | √     | √      | 均提供负载均衡策略，eureka采用ribbon                         |\n\n* nacos支持a（高可用）p（分区容错）和c（一致性）p的切换默认为ap, eureka仅支持ap，zookeeper仅支持c\n\n\n\n## nacos能做什么？\n\n\n\n* 服务注册发现和服务健康监测：Nacos支持基于DNS和基于RPC的服务发现，服务端可以通过SDK或者Api进行服务注册，相应的服务消费者可以使用DNS或者Http查找的方式获取服务列表。Nacos同时提供对服务的实时健康检查，阻止想不健康的主机或服务发送请求，与Eureka类似Nacos也有友好的控制台界面。\n* 动态DNS服务：支持权重路由，更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。\n* 动态配置服务：接触过SpringCloud应该对config有所了解，那么配置中心也就很好理解，Nacos支持动态的配置管理，将服务的配置信息分环境分类别外部管理，并且支持热更新。不过与Config不同Nacos的配置信息存储与数据库中，支持配置信息的监听和版本回滚。\n* 服务及元数据管理：Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA （服务等级协议）以及最首要的 metrics 统计数据（默认不开启暴露需要修改配置）。可以搭建搭建prometheus采集Nacos metrics数据也可以搭建搭建grafana图形化展示metrics数据\n\n\n\n\n\n## Nacos下载安装\n\n**官网网址：**https://nacos.io/zh-cn/index.html\n\n![image-20230921165730484](typora-user-images/image-20230921165730484.png)\n\n\n\n**官网文档网址**：https://nacos.io/zh-cn/docs/quick-start.html\n\n**注意：**使用官网推荐的稳定版本：下载地址：https://github.com/alibaba/nacos/releases\n\n\n\n![image-20230921170222187](typora-user-images/image-20230921170222187.png)\n\n### **执行命令**\n\n\n\n**Linux/Unix/Mac**\n\n启动命令(standalone代表着单机模式运行，非集群模式):\n\n```\nsh startup.sh -m standalone\n```\n\n\n\n**Windows**\n\n启动命令(standalone代表着单机模式运行，非集群模式):\n\n```\nstartup.cmd -m standalone\n```\n\n\n\n### **执行结果**\n\n\n\n![image-20230921171251668](typora-user-images/image-20230921171251668.png)\n\n\n\n\n\n\n\n### 验证\n\n得到结果以后为了验证是否成功开启Nacos，我们需要访问：http://localhost:8848/nacos\n\n![image-20230921170734063](typora-user-images/image-20230921170734063.png)\n\n出现此界面表示已经成功启动Nacos，默认的账号密码是：nacos/nacos\n\n![image-20230921171005578](typora-user-images/image-20230921171005578.png)\n\n\n\n\n\n## 引入Nacos Discovery进行服务注册/发现\n\n服务发现是微服务架构中的关键组件之一。在这样的架构中，手动为每个客户端配置服务列表可能是一项艰巨的任务，并且使得动态扩展极其困难。Nacos Discovery 帮助您自动将您的服务注册到 Nacos 服务器，Nacos 服务器会跟踪服务并动态刷新服务列表。此外，Nacos Discovery 将服务实例的一些元数据，如主机、端口、健康检查 URL、主页等注册到 Nacos。\n\n 学习任何知识我们都需要从它的官方文档入手，所以我们直接来看官网给我们提供的文档：https://spring.io/projects/spring-cloud-alibaba#learn\n\n\n\n### 创建新项目\n\n聚合项目：由于聚合带来的诸多好处，在SpringBoot项目开发中也广泛采用，开发中将SpringBoot项目按照功能分成子模块开发，所以我们在使用Spring Cloud Alibaba完成项目的时候，也是采用聚合项目来完成。\n\n**父项目pom**\n\n\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.13.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <groupId>com.lison</groupId>\n    <artifactId>spring-cloud-alibaba-building</artifactId>\n    <version>1.0.0-SNAPSHOT</version>\n    <packaging>pom</packaging>\n\n\n    <properties>\n        <java.version>17</java.version>\n        <lison.project.version>1.0.0-SNAPSHOT</lison.project.version>\n        <maven.plugin.version>3.8.1</maven.plugin.version>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <spring-cloud-alibaba-version>2.2.5.RELEASE</spring-cloud-alibaba-version>\n    </properties>\n\n    <modules>\n        <module>spring-boot-building</module>\n    </modules>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring-cloud-alibaba-version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n~~~\n\n\n\n**子项目pom**\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lison</groupId>\n        <artifactId>spring-cloud-alibaba-building</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison</groupId>\n    <artifactId>spring-boot-building</artifactId>\n    <version>${lison.project.version}</version>\n    <name>${project.artifactId}</name>\n    <packaging>jar</packaging>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- Nacos -->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n    </dependencies>\n\n</project>\n\n~~~\n\n**子项目yml**\n\n\n\n~~~yaml\nserver:\n  port: 18000\nspring:\n  application:\n    name: spring-boot-building\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n\nmanagement:\n  endpoint:\n    web:\n      exposure:\n        include:'*'\n\n~~~\n\n\n\n**启动类**\n\n~~~java\npackage com.lison.springbootbuilding;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SpringBootBuildingApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringBootBuildingApplication.class, args);\n    }\n\n}\n\n~~~\n\n\n\n### 测试\n\n**注意，在启动项目前一定要启动Nacos**\n\n![image-20230923154459874](typora-user-images/image-20230923154459874.png)\n\n\n\n\n\n\n\n\n\n## Nacos服务消费者和负载均衡\n\n\n\n### 什么是负载均衡\n\n通俗的讲， 负载均衡就是将负载(工作任务，访问请求)进行分摊到多个操作单元(服务器,组件)上进行执行。\n根据负载均衡发生位置的不同,一般分为服务端负载均衡和客户端负载均衡。 服务端负载均衡指的是发生在服务提供者一方,比如常见的nginx负载均衡而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求。\n\n\n\n![image-20230923152344429](typora-user-images/image-20230923152344429.png)\n\n我们在微服务调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行\n\n\n\n### 负载均衡\n\n创建一个spring-cloud-service 服务\n\n pom.xml配置\n\n\n\n~~~xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>com.lison</groupId>\n        <artifactId>spring-cloud-alibaba-building</artifactId>\n        <version>1.0.0-SNAPSHOT</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.lison</groupId>\n    <artifactId>spring-cloud-service</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>spring-cloud-service</name>\n    <description>spring-cloud-service</description>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <!-- Nacos -->\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n        </dependency>\n    </dependencies>\n\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-antrun-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>run</goal>\n                        </goals>\n                        <configuration>\n                            <tasks>\n                                <!--suppress UnresolvedMavenProperty -->\n                                <copy overwrite=\"true\"\n                                      tofile=\"${session.executionRootDirectory}/target/${project.artifactId}.jar\"\n                                      file=\"${project.build.directory}/${project.artifactId}.jar\" />\n                            </tasks>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n~~~\n\n**yml配置**\n\n~~~java\nserver:\n  port: 18001\nspring:\n  application:\n    name: spring-cloud-service\n\n  cloud:\n    nacos:\n      discovery:\n        server-addr: 127.0.0.1:8848\n\nmanagement:\n  endpoint:\n    web:\n      exposure:\n        include:'*'\n\n~~~\n\n\n\n**启动类**\n\n~~~java\npackage com.lison.springcloudservice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class SpringCloudServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudServiceApplication.class, args);\n    }\n\n}\n\n~~~\n\n\n\n接下来开始修改 spring-cloud-service模块的代码， 将其注册到nacos服务上\n\n![image-20230923154644281](typora-user-images/image-20230923154644281.png)\n\n#### 基于Ribbon实现负载均衡\n\nRibbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡\n\n1、在RestTemplate 的生成方法上添加@LoadBalanced注解\n\n~~~java\n@Bean\n@LoadBalanced\npublic RestTemplate restTemplate() {\n    return new RestTemplate();\n}\n\n~~~\n\n\n\n2、修改服务调用的方法\n\n~~~java\n@RestController\npublic class TestController {\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @GetMapping(value = \"/naocs/consumer\")\n    public String getServerPort(){\n\n        return restTemplate.getForObject( \"http://spring-cloud-service/getServerProd\",String.class);\n\n    }\n}\n~~~\n\n\n\n\n\n3、通过idea再启动一个 spring-cloud-service 微服务，设置其端口为18011\n\n![image-20230923162506692](typora-user-images/image-20230923162506692.png)\n\n\n\n4、通过nacos查看微服务的启动情况\n\n\n\n![image-20230923162555344](typora-user-images/image-20230923162555344.png)\n\n\n\n\n\nRibbon支持的负载均衡策略\n\nRibbon内置了多种负载均衡策略,内部负载均衡的顶级接口为 com.netflix.loadbalancer.IRule , 具体的负载策略如下图所示:\n\n\n\n| 策略名                    | 策略描述                                                     | **实现说明**                                                 |\n| ------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| BestAvailableRule         | 选择一个最小的并发 请求的server                              | 逐个考察Server，如果Server被 tripped了，则忽略，在选择其中 ActiveRequestsCount最小的serve |\n| AvailabilityFilteringRule | 过滤掉那些因为一直 连接失败的被标记为 circuit tripped的后 端server，并过滤掉 那些高并发的的后端 server(active connections 超过配 置的阈值) | 使用一个AvailabilityPredicate来包含 过滤server的逻辑，其实就就是检查 status里记录的各个server的运行状态 |\n| WeightedResponseTimeRule  | 根据相应时间分配一 个weight，相应时 间越长，weight越 小，被选中的可能性 越低。 | 一个后台线程定期的从status里面读 取评价响应时间，为每个server计算 一个weight。Weight的计算也比较简 单responsetime 减去每个server自己 平均的responsetime是server的权 重。当刚开始运行，没有形成statas 时，使用roubine策略选择server。 |\n| RetryRule                 | 对选定的负载均衡策略机上重试机制。                           | 在一个配置时间段内当选择server不 成功，则一直尝试使用subRule的方 式选择一个可用的server |\n| RoundRobinRule            | 轮询方式轮询选择 server                                      | 轮询index，选择index对应位置的 server                        |\n| RandomRule                | 随机选择一个server                                           | 在index上随机，选择index对应位置 的server                    |\n| ZoneAvoidanceRule         | 复合判断server所在 区域的性能和server 的可用性选择server     | 使用ZoneAvoidancePredicate和 AvailabilityPredicate来判断是否选择 某个server，前一个判断判定一个 zone的运行性能是否可用，剔除不可 用的zone(的所有server)， AvailabilityPredicate用于过滤掉连接 数过多的Server。 |\n\n我们可以通过修改配置来调整Ribbon的负载均衡策略，具体代码如下：\n\n~~~yaml\nspring-cloud-service: # 调用的提供者的名称 \n\tribbon: \n   \t\tNFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule\n\n\n~~~\n\n\n\n\n\n### 基于Feign实现服务调用\n\n#### 什么是Feign\n\nFeign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务 一样简单， 只需要创建一个接口并添加一个注解即可。\n\nNacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负 载均衡的效果。\n\n#### Feign的使用\n\n1、加入Feign依赖\n\n~~~xml\n<!--fegin组件--> \n<dependency> \n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\n</dependency>\n\n~~~\n\n\n\n2、在主类上添加Fegin的注解\n\n~~~java\n\n@SpringBootApplication \n@EnableDiscoveryClient \n@EnableFeignClients\n//开启Fegin\n~~~\n\n\n\n\n\n3创建一个service， 并使用Fegin实现微服务调用\n\n\n\n~~~java\n@FeignClient(\"spring-cloud-service\")\npublic interface ITestService {\n    //指定调用提供者的哪个方法\n    @GetMapping(value = \"/getServerProd\")\n    String getServerPort();\n}\n~~~\n\n\n\n4、修改controller代码，并启动验证\n\n\n\n~~~java\n@RestController\npublic class TestController {\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @Autowired\n    private ITestService iTestService;\n\n    @GetMapping(value = \"/naocs/consumer\")\n    public String getServerPort(){\n\n        return iTestService.getServerPort();\n\n    }\n}\n\n~~~\n\n\n\n5、重启buding微服务,访问：http://127.0.0.1:18000/naocs/consumer 查看效果\n\n\n\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-02-Nacos Discovery服务治理","published":1,"date":"2023-09-11T07:29:59.561Z","updated":"2023-10-24T02:19:52.216Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhm0006ecfyf46ibd7o","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.05.10</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-02-Nacos-Discovery服务治理及负载均衡\"><a href=\"#Spring-Cloud-Alibaba-02-Nacos-Discovery服务治理及负载均衡\" class=\"headerlink\" title=\"Spring Cloud Alibaba-02-Nacos Discovery服务治理及负载均衡\"></a>Spring Cloud Alibaba-02-Nacos Discovery服务治理及负载均衡</h1><p>[toc]</p>\n<h2 id=\"服务治理介绍\"><a href=\"#服务治理介绍\" class=\"headerlink\" title=\"服务治理介绍\"></a>服务治理介绍</h2><p>先来思考一个问题</p>\n<p>通过上一章的操作，我们已经可以实现微服务之间的调用。但是我们把服务提供者的网络地址 (ip，端口)等硬编码到了代码中，这种做法存在许多问题:</p>\n<p>一旦服务提供者地址变化，就需要手工修改代码</p>\n<p>一旦是多个服务提供者，无法实现负载均衡功能</p>\n<p>一旦服务变得越来越多，人工维护调用关系困难</p>\n<p>那么应该怎么解决呢， 这时候就需要通过注册中心动态的实现服务治理。</p>\n<h3 id=\"什么是服务治理\"><a href=\"#什么是服务治理\" class=\"headerlink\" title=\"什么是服务治理\"></a>什么是服务治理</h3><p>服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的自动化注册与发现。</p>\n<p>服务注册:在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。</p>\n<p>服务发现:服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实例的访问</p>\n<p><img src=\"/typora-user-images/image-20230923151411555.png\" alt=\"image-20230923151411555\"></p>\n<p>通过上面的调用图会发现，除了微服务，还有一个组件是<strong>服务注册中心</strong>，它是微服务架构非常重要 的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能:</p>\n<ol>\n<li>服务发现:<br>服务注册:保存服务提供者和服务调用者的信息<br>服务订阅:服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息</li>\n<li>服务配置:<br>配置订阅:服务提供者和服务调用者订阅微服务相关的配置<br>配置下发:主动将配置推送给服务提供者和服务调用者</li>\n<li>服务健康检测：<br>检测服务提供者的健康情况，如果发现异常，执行服务剔除</li>\n</ol>\n<h3 id=\"常见的注册中心\"><a href=\"#常见的注册中心\" class=\"headerlink\" title=\"常见的注册中心\"></a>常见的注册中心</h3><p><strong>Zookeeper</strong></p>\n<p>zookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式 应用中经常遇到的一些数据管理问题，如:统一命名服务、状态同步服务、集群管理、分布式应用 配置项的管理等。</p>\n<p><strong>Eureka</strong></p>\n<p>Eureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭 源</p>\n<p><strong>Consul</strong></p>\n<p>Consul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现 和配置管理的功能。Consul的功能都很实用，其中包括:服务注册&#x2F;发现、健康检查、Key&#x2F;Value 存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以 安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。</p>\n<p><strong>Nacos</strong></p>\n<p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 Spring Cloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos&#x3D;eureka+config。</p>\n<h2 id=\"Nacos介绍\"><a href=\"#Nacos介绍\" class=\"headerlink\" title=\"Nacos介绍\"></a>Nacos介绍</h2><ul>\n<li>Nacos是SpringCloudAlibaba架构中最重要的组件。</li>\n<li>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台，提供注册中心、配置中心和动态 DNS 服务三大功能。能够无缝对接Springcloud、Spring、Dubbo等流行框架。</li>\n<li>nacos和eureka功能对比</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能模块</th>\n<th>Nacos</th>\n<th>Eureka</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>注册中心</td>\n<td>√</td>\n<td>√</td>\n<td>服务治理，服务中心化注册</td>\n</tr>\n<tr>\n<td>配置中心</td>\n<td>√</td>\n<td>×</td>\n<td>eureka需要配合springcloud config实现</td>\n</tr>\n<tr>\n<td>配置动态刷新</td>\n<td>√</td>\n<td>×</td>\n<td>nacos通过netty保持tcp长链接进行推送，eureka需要配合mq实现配置动态</td>\n</tr>\n<tr>\n<td>可用区az</td>\n<td>√</td>\n<td>√</td>\n<td>对服务集群划分不同区域，实现区域隔离，并提供灾难级自动切换</td>\n</tr>\n<tr>\n<td>分组</td>\n<td>√</td>\n<td>×</td>\n<td>nacos根据不同的业务、环境进行分组管理（namespace,group</td>\n</tr>\n<tr>\n<td>元数据</td>\n<td>√</td>\n<td>√</td>\n<td>提供服务标签数据（环境、服务标识）</td>\n</tr>\n<tr>\n<td>权重</td>\n<td>√</td>\n<td>×</td>\n<td>nacos提供权重设置，调整承载流量压力</td>\n</tr>\n<tr>\n<td>健康检查</td>\n<td>√</td>\n<td>√</td>\n<td>nacos提供服务端或者客户端发起的健康监测，eureka是有客户端发起心跳</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>√</td>\n<td>√</td>\n<td>均提供负载均衡策略，eureka采用ribbon</td>\n</tr>\n</tbody></table>\n<ul>\n<li>nacos支持a（高可用）p（分区容错）和c（一致性）p的切换默认为ap, eureka仅支持ap，zookeeper仅支持c</li>\n</ul>\n<h2 id=\"nacos能做什么？\"><a href=\"#nacos能做什么？\" class=\"headerlink\" title=\"nacos能做什么？\"></a>nacos能做什么？</h2><ul>\n<li>服务注册发现和服务健康监测：Nacos支持基于DNS和基于RPC的服务发现，服务端可以通过SDK或者Api进行服务注册，相应的服务消费者可以使用DNS或者Http查找的方式获取服务列表。Nacos同时提供对服务的实时健康检查，阻止想不健康的主机或服务发送请求，与Eureka类似Nacos也有友好的控制台界面。</li>\n<li>动态DNS服务：支持权重路由，更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。</li>\n<li>动态配置服务：接触过SpringCloud应该对config有所了解，那么配置中心也就很好理解，Nacos支持动态的配置管理，将服务的配置信息分环境分类别外部管理，并且支持热更新。不过与Config不同Nacos的配置信息存储与数据库中，支持配置信息的监听和版本回滚。</li>\n<li>服务及元数据管理：Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA （服务等级协议）以及最首要的 metrics 统计数据（默认不开启暴露需要修改配置）。可以搭建搭建prometheus采集Nacos metrics数据也可以搭建搭建grafana图形化展示metrics数据</li>\n</ul>\n<h2 id=\"Nacos下载安装\"><a href=\"#Nacos下载安装\" class=\"headerlink\" title=\"Nacos下载安装\"></a>Nacos下载安装</h2><p>**官网网址：**<a href=\"https://nacos.io/zh-cn/index.html\">https://nacos.io/zh-cn/index.html</a></p>\n<p><img src=\"/typora-user-images/image-20230921165730484.png\" alt=\"image-20230921165730484\"></p>\n<p><strong>官网文档网址</strong>：<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">https://nacos.io/zh-cn/docs/quick-start.html</a></p>\n<p>**注意：**使用官网推荐的稳定版本：下载地址：<a href=\"https://github.com/alibaba/nacos/releases\">https://github.com/alibaba/nacos/releases</a></p>\n<p><img src=\"/typora-user-images/image-20230921170222187.png\" alt=\"image-20230921170222187\"></p>\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a><strong>执行命令</strong></h3><p><strong>Linux&#x2F;Unix&#x2F;Mac</strong></p>\n<p>启动命令(standalone代表着单机模式运行，非集群模式):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Windows</strong></p>\n<p>启动命令(standalone代表着单机模式运行，非集群模式):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a><strong>执行结果</strong></h3><p><img src=\"/typora-user-images/image-20230921171251668.png\" alt=\"image-20230921171251668\"></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>得到结果以后为了验证是否成功开启Nacos，我们需要访问：<a href=\"http://localhost:8848/nacos\">http://localhost:8848/nacos</a></p>\n<p><img src=\"/typora-user-images/image-20230921170734063.png\" alt=\"image-20230921170734063\"></p>\n<p>出现此界面表示已经成功启动Nacos，默认的账号密码是：nacos&#x2F;nacos</p>\n<p><img src=\"/typora-user-images/image-20230921171005578.png\" alt=\"image-20230921171005578\"></p>\n<h2 id=\"引入Nacos-Discovery进行服务注册-发现\"><a href=\"#引入Nacos-Discovery进行服务注册-发现\" class=\"headerlink\" title=\"引入Nacos Discovery进行服务注册&#x2F;发现\"></a>引入Nacos Discovery进行服务注册&#x2F;发现</h2><p>服务发现是微服务架构中的关键组件之一。在这样的架构中，手动为每个客户端配置服务列表可能是一项艰巨的任务，并且使得动态扩展极其困难。Nacos Discovery 帮助您自动将您的服务注册到 Nacos 服务器，Nacos 服务器会跟踪服务并动态刷新服务列表。此外，Nacos Discovery 将服务实例的一些元数据，如主机、端口、健康检查 URL、主页等注册到 Nacos。</p>\n<p> 学习任何知识我们都需要从它的官方文档入手，所以我们直接来看官网给我们提供的文档：<a href=\"https://spring.io/projects/spring-cloud-alibaba#learn\">https://spring.io/projects/spring-cloud-alibaba#learn</a></p>\n<h3 id=\"创建新项目\"><a href=\"#创建新项目\" class=\"headerlink\" title=\"创建新项目\"></a>创建新项目</h3><p>聚合项目：由于聚合带来的诸多好处，在SpringBoot项目开发中也广泛采用，开发中将SpringBoot项目按照功能分成子模块开发，所以我们在使用Spring Cloud Alibaba完成项目的时候，也是采用聚合项目来完成。</p>\n<p><strong>父项目pom</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.13.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">lison.project.version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">lison.project.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.plugin.version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">maven.plugin.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud-alibaba-version</span>&gt;</span>2.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud-alibaba-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>spring-boot-building<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud-alibaba-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>子项目pom</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;lison.project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>子项目yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">18000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-boot-building</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"string\">include:&#x27;*&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springbootbuilding;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootBuildingApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootBuildingApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><strong>注意，在启动项目前一定要启动Nacos</strong></p>\n<p><img src=\"/typora-user-images/image-20230923154459874.png\" alt=\"image-20230923154459874\"></p>\n<h2 id=\"Nacos服务消费者和负载均衡\"><a href=\"#Nacos服务消费者和负载均衡\" class=\"headerlink\" title=\"Nacos服务消费者和负载均衡\"></a>Nacos服务消费者和负载均衡</h2><h3 id=\"什么是负载均衡\"><a href=\"#什么是负载均衡\" class=\"headerlink\" title=\"什么是负载均衡\"></a>什么是负载均衡</h3><p>通俗的讲， 负载均衡就是将负载(工作任务，访问请求)进行分摊到多个操作单元(服务器,组件)上进行执行。<br>根据负载均衡发生位置的不同,一般分为服务端负载均衡和客户端负载均衡。 服务端负载均衡指的是发生在服务提供者一方,比如常见的nginx负载均衡而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求。</p>\n<p><img src=\"/typora-user-images/image-20230923152344429.png\" alt=\"image-20230923152344429\"></p>\n<p>我们在微服务调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>创建一个spring-cloud-service 服务</p>\n<p> pom.xml配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-service<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring-cloud-service<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>spring-cloud-service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--suppress UnresolvedMavenProperty --&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                                      <span class=\"attr\">tofile</span>=<span class=\"string\">&quot;$&#123;session.executionRootDirectory&#125;/target/$&#123;project.artifactId&#125;.jar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                                      <span class=\"attr\">file</span>=<span class=\"string\">&quot;$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;.jar&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>yml配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">18001</span></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: spring-cloud-service</span><br><span class=\"line\"></span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      discovery:</span><br><span class=\"line\">        server-addr: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8848</span></span><br><span class=\"line\"></span><br><span class=\"line\">management:</span><br><span class=\"line\">  endpoint:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      exposure:</span><br><span class=\"line\">        include:<span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudServiceApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来开始修改 spring-cloud-service模块的代码， 将其注册到nacos服务上</p>\n<p><img src=\"/typora-user-images/image-20230923154644281.png\" alt=\"image-20230923154644281\"></p>\n<h4 id=\"基于Ribbon实现负载均衡\"><a href=\"#基于Ribbon实现负载均衡\" class=\"headerlink\" title=\"基于Ribbon实现负载均衡\"></a>基于Ribbon实现负载均衡</h4><p>Ribbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡</p>\n<p>1、在RestTemplate 的生成方法上添加@LoadBalanced注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、修改服务调用的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/naocs/consumer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getServerPort</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject( <span class=\"string\">&quot;http://spring-cloud-service/getServerProd&quot;</span>,String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>3、通过idea再启动一个 spring-cloud-service 微服务，设置其端口为18011</p>\n<p><img src=\"/typora-user-images/image-20230923162506692.png\" alt=\"image-20230923162506692\"></p>\n<p>4、通过nacos查看微服务的启动情况</p>\n<p><img src=\"/typora-user-images/image-20230923162555344.png\" alt=\"image-20230923162555344\"></p>\n<p>Ribbon支持的负载均衡策略</p>\n<p>Ribbon内置了多种负载均衡策略,内部负载均衡的顶级接口为 com.netflix.loadbalancer.IRule , 具体的负载策略如下图所示:</p>\n<table>\n<thead>\n<tr>\n<th>策略名</th>\n<th>策略描述</th>\n<th><strong>实现说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BestAvailableRule</td>\n<td>选择一个最小的并发 请求的server</td>\n<td>逐个考察Server，如果Server被 tripped了，则忽略，在选择其中 ActiveRequestsCount最小的serve</td>\n</tr>\n<tr>\n<td>AvailabilityFilteringRule</td>\n<td>过滤掉那些因为一直 连接失败的被标记为 circuit tripped的后 端server，并过滤掉 那些高并发的的后端 server(active connections 超过配 置的阈值)</td>\n<td>使用一个AvailabilityPredicate来包含 过滤server的逻辑，其实就就是检查 status里记录的各个server的运行状态</td>\n</tr>\n<tr>\n<td>WeightedResponseTimeRule</td>\n<td>根据相应时间分配一 个weight，相应时 间越长，weight越 小，被选中的可能性 越低。</td>\n<td>一个后台线程定期的从status里面读 取评价响应时间，为每个server计算 一个weight。Weight的计算也比较简 单responsetime 减去每个server自己 平均的responsetime是server的权 重。当刚开始运行，没有形成statas 时，使用roubine策略选择server。</td>\n</tr>\n<tr>\n<td>RetryRule</td>\n<td>对选定的负载均衡策略机上重试机制。</td>\n<td>在一个配置时间段内当选择server不 成功，则一直尝试使用subRule的方 式选择一个可用的server</td>\n</tr>\n<tr>\n<td>RoundRobinRule</td>\n<td>轮询方式轮询选择 server</td>\n<td>轮询index，选择index对应位置的 server</td>\n</tr>\n<tr>\n<td>RandomRule</td>\n<td>随机选择一个server</td>\n<td>在index上随机，选择index对应位置 的server</td>\n</tr>\n<tr>\n<td>ZoneAvoidanceRule</td>\n<td>复合判断server所在 区域的性能和server 的可用性选择server</td>\n<td>使用ZoneAvoidancePredicate和 AvailabilityPredicate来判断是否选择 某个server，前一个判断判定一个 zone的运行性能是否可用，剔除不可 用的zone(的所有server)， AvailabilityPredicate用于过滤掉连接 数过多的Server。</td>\n</tr>\n</tbody></table>\n<p>我们可以通过修改配置来调整Ribbon的负载均衡策略，具体代码如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring-cloud-service:</span> <span class=\"comment\"># 调用的提供者的名称 </span></span><br><span class=\"line\">\t<span class=\"attr\">ribbon:</span> </span><br><span class=\"line\">   \t\t<span class=\"attr\">NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.RandomRule</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"基于Feign实现服务调用\"><a href=\"#基于Feign实现服务调用\" class=\"headerlink\" title=\"基于Feign实现服务调用\"></a>基于Feign实现服务调用</h3><h4 id=\"什么是Feign\"><a href=\"#什么是Feign\" class=\"headerlink\" title=\"什么是Feign\"></a>什么是Feign</h4><p>Feign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务 一样简单， 只需要创建一个接口并添加一个注解即可。</p>\n<p>Nacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负 载均衡的效果。</p>\n<h4 id=\"Feign的使用\"><a href=\"#Feign的使用\" class=\"headerlink\" title=\"Feign的使用\"></a>Feign的使用</h4><p>1、加入Feign依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--fegin组件--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、在主类上添加Fegin的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">//开启Fegin</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>3创建一个service， 并使用Fegin实现微服务调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(&quot;spring-cloud-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ITestService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定调用提供者的哪个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/getServerProd&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">getServerPort</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4、修改controller代码，并启动验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITestService iTestService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/naocs/consumer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getServerPort</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iTestService.getServerPort();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>5、重启buding微服务,访问：<a href=\"http://127.0.0.1:18000/naocs/consumer\">http://127.0.0.1:18000/naocs/consumer</a> 查看效果</p>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.05.10</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-02-Nacos-Discovery服务治理及负载均衡\"><a href=\"#Spring-Cloud-Alibaba-02-Nacos-Discovery服务治理及负载均衡\" class=\"headerlink\" title=\"Spring Cloud Alibaba-02-Nacos Discovery服务治理及负载均衡\"></a>Spring Cloud Alibaba-02-Nacos Discovery服务治理及负载均衡</h1><p>[toc]</p>\n<h2 id=\"服务治理介绍\"><a href=\"#服务治理介绍\" class=\"headerlink\" title=\"服务治理介绍\"></a>服务治理介绍</h2><p>先来思考一个问题</p>\n<p>通过上一章的操作，我们已经可以实现微服务之间的调用。但是我们把服务提供者的网络地址 (ip，端口)等硬编码到了代码中，这种做法存在许多问题:</p>\n<p>一旦服务提供者地址变化，就需要手工修改代码</p>\n<p>一旦是多个服务提供者，无法实现负载均衡功能</p>\n<p>一旦服务变得越来越多，人工维护调用关系困难</p>\n<p>那么应该怎么解决呢， 这时候就需要通过注册中心动态的实现服务治理。</p>\n<h3 id=\"什么是服务治理\"><a href=\"#什么是服务治理\" class=\"headerlink\" title=\"什么是服务治理\"></a>什么是服务治理</h3><p>服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的自动化注册与发现。</p>\n<p>服务注册:在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。</p>\n<p>服务发现:服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实例的访问</p>\n<p><img src=\"/typora-user-images/image-20230923151411555.png\" alt=\"image-20230923151411555\"></p>\n<p>通过上面的调用图会发现，除了微服务，还有一个组件是<strong>服务注册中心</strong>，它是微服务架构非常重要 的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能:</p>\n<ol>\n<li>服务发现:<br>服务注册:保存服务提供者和服务调用者的信息<br>服务订阅:服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息</li>\n<li>服务配置:<br>配置订阅:服务提供者和服务调用者订阅微服务相关的配置<br>配置下发:主动将配置推送给服务提供者和服务调用者</li>\n<li>服务健康检测：<br>检测服务提供者的健康情况，如果发现异常，执行服务剔除</li>\n</ol>\n<h3 id=\"常见的注册中心\"><a href=\"#常见的注册中心\" class=\"headerlink\" title=\"常见的注册中心\"></a>常见的注册中心</h3><p><strong>Zookeeper</strong></p>\n<p>zookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式 应用中经常遇到的一些数据管理问题，如:统一命名服务、状态同步服务、集群管理、分布式应用 配置项的管理等。</p>\n<p><strong>Eureka</strong></p>\n<p>Eureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭 源</p>\n<p><strong>Consul</strong></p>\n<p>Consul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现 和配置管理的功能。Consul的功能都很实用，其中包括:服务注册&#x2F;发现、健康检查、Key&#x2F;Value 存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以 安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。</p>\n<p><strong>Nacos</strong></p>\n<p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 Spring Cloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos&#x3D;eureka+config。</p>\n<h2 id=\"Nacos介绍\"><a href=\"#Nacos介绍\" class=\"headerlink\" title=\"Nacos介绍\"></a>Nacos介绍</h2><ul>\n<li>Nacos是SpringCloudAlibaba架构中最重要的组件。</li>\n<li>Nacos 是一个更易于帮助构建云原生应用的动态服务发现、配置和服务管理平台，提供注册中心、配置中心和动态 DNS 服务三大功能。能够无缝对接Springcloud、Spring、Dubbo等流行框架。</li>\n<li>nacos和eureka功能对比</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>功能模块</th>\n<th>Nacos</th>\n<th>Eureka</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>注册中心</td>\n<td>√</td>\n<td>√</td>\n<td>服务治理，服务中心化注册</td>\n</tr>\n<tr>\n<td>配置中心</td>\n<td>√</td>\n<td>×</td>\n<td>eureka需要配合springcloud config实现</td>\n</tr>\n<tr>\n<td>配置动态刷新</td>\n<td>√</td>\n<td>×</td>\n<td>nacos通过netty保持tcp长链接进行推送，eureka需要配合mq实现配置动态</td>\n</tr>\n<tr>\n<td>可用区az</td>\n<td>√</td>\n<td>√</td>\n<td>对服务集群划分不同区域，实现区域隔离，并提供灾难级自动切换</td>\n</tr>\n<tr>\n<td>分组</td>\n<td>√</td>\n<td>×</td>\n<td>nacos根据不同的业务、环境进行分组管理（namespace,group</td>\n</tr>\n<tr>\n<td>元数据</td>\n<td>√</td>\n<td>√</td>\n<td>提供服务标签数据（环境、服务标识）</td>\n</tr>\n<tr>\n<td>权重</td>\n<td>√</td>\n<td>×</td>\n<td>nacos提供权重设置，调整承载流量压力</td>\n</tr>\n<tr>\n<td>健康检查</td>\n<td>√</td>\n<td>√</td>\n<td>nacos提供服务端或者客户端发起的健康监测，eureka是有客户端发起心跳</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>√</td>\n<td>√</td>\n<td>均提供负载均衡策略，eureka采用ribbon</td>\n</tr>\n</tbody></table>\n<ul>\n<li>nacos支持a（高可用）p（分区容错）和c（一致性）p的切换默认为ap, eureka仅支持ap，zookeeper仅支持c</li>\n</ul>\n<h2 id=\"nacos能做什么？\"><a href=\"#nacos能做什么？\" class=\"headerlink\" title=\"nacos能做什么？\"></a>nacos能做什么？</h2><ul>\n<li>服务注册发现和服务健康监测：Nacos支持基于DNS和基于RPC的服务发现，服务端可以通过SDK或者Api进行服务注册，相应的服务消费者可以使用DNS或者Http查找的方式获取服务列表。Nacos同时提供对服务的实时健康检查，阻止想不健康的主机或服务发送请求，与Eureka类似Nacos也有友好的控制台界面。</li>\n<li>动态DNS服务：支持权重路由，更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。</li>\n<li>动态配置服务：接触过SpringCloud应该对config有所了解，那么配置中心也就很好理解，Nacos支持动态的配置管理，将服务的配置信息分环境分类别外部管理，并且支持热更新。不过与Config不同Nacos的配置信息存储与数据库中，支持配置信息的监听和版本回滚。</li>\n<li>服务及元数据管理：Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA （服务等级协议）以及最首要的 metrics 统计数据（默认不开启暴露需要修改配置）。可以搭建搭建prometheus采集Nacos metrics数据也可以搭建搭建grafana图形化展示metrics数据</li>\n</ul>\n<h2 id=\"Nacos下载安装\"><a href=\"#Nacos下载安装\" class=\"headerlink\" title=\"Nacos下载安装\"></a>Nacos下载安装</h2><p>**官网网址：**<a href=\"https://nacos.io/zh-cn/index.html\">https://nacos.io/zh-cn/index.html</a></p>\n<p><img src=\"/typora-user-images/image-20230921165730484.png\" alt=\"image-20230921165730484\"></p>\n<p><strong>官网文档网址</strong>：<a href=\"https://nacos.io/zh-cn/docs/quick-start.html\">https://nacos.io/zh-cn/docs/quick-start.html</a></p>\n<p>**注意：**使用官网推荐的稳定版本：下载地址：<a href=\"https://github.com/alibaba/nacos/releases\">https://github.com/alibaba/nacos/releases</a></p>\n<p><img src=\"/typora-user-images/image-20230921170222187.png\" alt=\"image-20230921170222187\"></p>\n<h3 id=\"执行命令\"><a href=\"#执行命令\" class=\"headerlink\" title=\"执行命令\"></a><strong>执行命令</strong></h3><p><strong>Linux&#x2F;Unix&#x2F;Mac</strong></p>\n<p>启动命令(standalone代表着单机模式运行，非集群模式):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Windows</strong></p>\n<p>启动命令(standalone代表着单机模式运行，非集群模式):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"执行结果\"><a href=\"#执行结果\" class=\"headerlink\" title=\"执行结果\"></a><strong>执行结果</strong></h3><p><img src=\"/typora-user-images/image-20230921171251668.png\" alt=\"image-20230921171251668\"></p>\n<h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>得到结果以后为了验证是否成功开启Nacos，我们需要访问：<a href=\"http://localhost:8848/nacos\">http://localhost:8848/nacos</a></p>\n<p><img src=\"/typora-user-images/image-20230921170734063.png\" alt=\"image-20230921170734063\"></p>\n<p>出现此界面表示已经成功启动Nacos，默认的账号密码是：nacos&#x2F;nacos</p>\n<p><img src=\"/typora-user-images/image-20230921171005578.png\" alt=\"image-20230921171005578\"></p>\n<h2 id=\"引入Nacos-Discovery进行服务注册-发现\"><a href=\"#引入Nacos-Discovery进行服务注册-发现\" class=\"headerlink\" title=\"引入Nacos Discovery进行服务注册&#x2F;发现\"></a>引入Nacos Discovery进行服务注册&#x2F;发现</h2><p>服务发现是微服务架构中的关键组件之一。在这样的架构中，手动为每个客户端配置服务列表可能是一项艰巨的任务，并且使得动态扩展极其困难。Nacos Discovery 帮助您自动将您的服务注册到 Nacos 服务器，Nacos 服务器会跟踪服务并动态刷新服务列表。此外，Nacos Discovery 将服务实例的一些元数据，如主机、端口、健康检查 URL、主页等注册到 Nacos。</p>\n<p> 学习任何知识我们都需要从它的官方文档入手，所以我们直接来看官网给我们提供的文档：<a href=\"https://spring.io/projects/spring-cloud-alibaba#learn\">https://spring.io/projects/spring-cloud-alibaba#learn</a></p>\n<h3 id=\"创建新项目\"><a href=\"#创建新项目\" class=\"headerlink\" title=\"创建新项目\"></a>创建新项目</h3><p>聚合项目：由于聚合带来的诸多好处，在SpringBoot项目开发中也广泛采用，开发中将SpringBoot项目按照功能分成子模块开发，所以我们在使用Spring Cloud Alibaba完成项目的时候，也是采用聚合项目来完成。</p>\n<p><strong>父项目pom</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.13.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>17<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">lison.project.version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">lison.project.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">maven.plugin.version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">maven.plugin.version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">spring-cloud-alibaba-version</span>&gt;</span>2.2.5.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring-cloud-alibaba-version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">module</span>&gt;</span>spring-boot-building<span class=\"tag\">&lt;/<span class=\"name\">module</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring-cloud-alibaba-version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>子项目pom</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;lison.project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>子项目yml</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">18000</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-boot-building</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">discovery:</span></span><br><span class=\"line\">        <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">management:</span></span><br><span class=\"line\">  <span class=\"attr\">endpoint:</span></span><br><span class=\"line\">    <span class=\"attr\">web:</span></span><br><span class=\"line\">      <span class=\"attr\">exposure:</span></span><br><span class=\"line\">        <span class=\"string\">include:&#x27;*&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springbootbuilding;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootBuildingApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootBuildingApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p><strong>注意，在启动项目前一定要启动Nacos</strong></p>\n<p><img src=\"/typora-user-images/image-20230923154459874.png\" alt=\"image-20230923154459874\"></p>\n<h2 id=\"Nacos服务消费者和负载均衡\"><a href=\"#Nacos服务消费者和负载均衡\" class=\"headerlink\" title=\"Nacos服务消费者和负载均衡\"></a>Nacos服务消费者和负载均衡</h2><h3 id=\"什么是负载均衡\"><a href=\"#什么是负载均衡\" class=\"headerlink\" title=\"什么是负载均衡\"></a>什么是负载均衡</h3><p>通俗的讲， 负载均衡就是将负载(工作任务，访问请求)进行分摊到多个操作单元(服务器,组件)上进行执行。<br>根据负载均衡发生位置的不同,一般分为服务端负载均衡和客户端负载均衡。 服务端负载均衡指的是发生在服务提供者一方,比如常见的nginx负载均衡而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求。</p>\n<p><img src=\"/typora-user-images/image-20230923152344429.png\" alt=\"image-20230923152344429\"></p>\n<p>我们在微服务调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行</p>\n<h3 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h3><p>创建一个spring-cloud-service 服务</p>\n<p> pom.xml配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-building<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.lison<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-service<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>spring-cloud-service<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>spring-cloud-service<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- Nacos --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-antrun-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>run<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--suppress UnresolvedMavenProperty --&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">copy</span> <span class=\"attr\">overwrite</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                                      <span class=\"attr\">tofile</span>=<span class=\"string\">&quot;$&#123;session.executionRootDirectory&#125;/target/$&#123;project.artifactId&#125;.jar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                                      <span class=\"attr\">file</span>=<span class=\"string\">&quot;$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;.jar&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">tasks</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>yml配置</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server:</span><br><span class=\"line\">  port: <span class=\"number\">18001</span></span><br><span class=\"line\">spring:</span><br><span class=\"line\">  application:</span><br><span class=\"line\">    name: spring-cloud-service</span><br><span class=\"line\"></span><br><span class=\"line\">  cloud:</span><br><span class=\"line\">    nacos:</span><br><span class=\"line\">      discovery:</span><br><span class=\"line\">        server-addr: <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">8848</span></span><br><span class=\"line\"></span><br><span class=\"line\">management:</span><br><span class=\"line\">  endpoint:</span><br><span class=\"line\">    web:</span><br><span class=\"line\">      exposure:</span><br><span class=\"line\">        include:<span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>启动类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringCloudServiceApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>接下来开始修改 spring-cloud-service模块的代码， 将其注册到nacos服务上</p>\n<p><img src=\"/typora-user-images/image-20230923154644281.png\" alt=\"image-20230923154644281\"></p>\n<h4 id=\"基于Ribbon实现负载均衡\"><a href=\"#基于Ribbon实现负载均衡\" class=\"headerlink\" title=\"基于Ribbon实现负载均衡\"></a>基于Ribbon实现负载均衡</h4><p>Ribbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡</p>\n<p>1、在RestTemplate 的生成方法上添加@LoadBalanced注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、修改服务调用的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/naocs/consumer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getServerPort</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject( <span class=\"string\">&quot;http://spring-cloud-service/getServerProd&quot;</span>,String.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>3、通过idea再启动一个 spring-cloud-service 微服务，设置其端口为18011</p>\n<p><img src=\"/typora-user-images/image-20230923162506692.png\" alt=\"image-20230923162506692\"></p>\n<p>4、通过nacos查看微服务的启动情况</p>\n<p><img src=\"/typora-user-images/image-20230923162555344.png\" alt=\"image-20230923162555344\"></p>\n<p>Ribbon支持的负载均衡策略</p>\n<p>Ribbon内置了多种负载均衡策略,内部负载均衡的顶级接口为 com.netflix.loadbalancer.IRule , 具体的负载策略如下图所示:</p>\n<table>\n<thead>\n<tr>\n<th>策略名</th>\n<th>策略描述</th>\n<th><strong>实现说明</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BestAvailableRule</td>\n<td>选择一个最小的并发 请求的server</td>\n<td>逐个考察Server，如果Server被 tripped了，则忽略，在选择其中 ActiveRequestsCount最小的serve</td>\n</tr>\n<tr>\n<td>AvailabilityFilteringRule</td>\n<td>过滤掉那些因为一直 连接失败的被标记为 circuit tripped的后 端server，并过滤掉 那些高并发的的后端 server(active connections 超过配 置的阈值)</td>\n<td>使用一个AvailabilityPredicate来包含 过滤server的逻辑，其实就就是检查 status里记录的各个server的运行状态</td>\n</tr>\n<tr>\n<td>WeightedResponseTimeRule</td>\n<td>根据相应时间分配一 个weight，相应时 间越长，weight越 小，被选中的可能性 越低。</td>\n<td>一个后台线程定期的从status里面读 取评价响应时间，为每个server计算 一个weight。Weight的计算也比较简 单responsetime 减去每个server自己 平均的responsetime是server的权 重。当刚开始运行，没有形成statas 时，使用roubine策略选择server。</td>\n</tr>\n<tr>\n<td>RetryRule</td>\n<td>对选定的负载均衡策略机上重试机制。</td>\n<td>在一个配置时间段内当选择server不 成功，则一直尝试使用subRule的方 式选择一个可用的server</td>\n</tr>\n<tr>\n<td>RoundRobinRule</td>\n<td>轮询方式轮询选择 server</td>\n<td>轮询index，选择index对应位置的 server</td>\n</tr>\n<tr>\n<td>RandomRule</td>\n<td>随机选择一个server</td>\n<td>在index上随机，选择index对应位置 的server</td>\n</tr>\n<tr>\n<td>ZoneAvoidanceRule</td>\n<td>复合判断server所在 区域的性能和server 的可用性选择server</td>\n<td>使用ZoneAvoidancePredicate和 AvailabilityPredicate来判断是否选择 某个server，前一个判断判定一个 zone的运行性能是否可用，剔除不可 用的zone(的所有server)， AvailabilityPredicate用于过滤掉连接 数过多的Server。</td>\n</tr>\n</tbody></table>\n<p>我们可以通过修改配置来调整Ribbon的负载均衡策略，具体代码如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring-cloud-service:</span> <span class=\"comment\"># 调用的提供者的名称 </span></span><br><span class=\"line\">\t<span class=\"attr\">ribbon:</span> </span><br><span class=\"line\">   \t\t<span class=\"attr\">NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.RandomRule</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"基于Feign实现服务调用\"><a href=\"#基于Feign实现服务调用\" class=\"headerlink\" title=\"基于Feign实现服务调用\"></a>基于Feign实现服务调用</h3><h4 id=\"什么是Feign\"><a href=\"#什么是Feign\" class=\"headerlink\" title=\"什么是Feign\"></a>什么是Feign</h4><p>Feign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务 一样简单， 只需要创建一个接口并添加一个注解即可。</p>\n<p>Nacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负 载均衡的效果。</p>\n<h4 id=\"Feign的使用\"><a href=\"#Feign的使用\" class=\"headerlink\" title=\"Feign的使用\"></a>Feign的使用</h4><p>1、加入Feign依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--fegin组件--&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、在主类上添加Fegin的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableDiscoveryClient</span> </span><br><span class=\"line\"><span class=\"meta\">@EnableFeignClients</span></span><br><span class=\"line\"><span class=\"comment\">//开启Fegin</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>3创建一个service， 并使用Fegin实现微服务调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient(&quot;spring-cloud-service&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ITestService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//指定调用提供者的哪个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/getServerProd&quot;)</span></span><br><span class=\"line\">    String <span class=\"title function_\">getServerPort</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4、修改controller代码，并启动验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITestService iTestService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/naocs/consumer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getServerPort</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iTestService.getServerPort();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>5、重启buding微服务,访问：<a href=\"http://127.0.0.1:18000/naocs/consumer\">http://127.0.0.1:18000/naocs/consumer</a> 查看效果</p>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.4.03`\n\n# Spring Cloud Alibaba-06-Sleuth链路追踪\n\n[toc]\n\n\n\n## 为什么使用链路追踪\n\n随着业务发展，微服务的数量也会越来越多，某个服务出现问题，问题很难排查\n\n>【问题】\n>\n>1、链路梳理难：无法清晰地看到整个调用链路\n>\n>2、故障难定位：无法快速定位到故障点、无法快速定位哪个环节比较费时\n\n![img](typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png)\n\n因此，我们需要链路追踪来梳理链路调用，方便快速定位问题。分布式链路追踪(Distributed Tracing)，就是将一次分布式请求还原成调用链路，进行日志记 录，性能监控并将一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪 台机器上、每个服务节点的请求状态等等\n\n\n\n## 常见链路追踪解决方案\n\n> 常见的有如下几种解决方案，本文讲解跟SpringCloud相关的Sleuth + Zipkin\n\n**【Zipkin】**\n\nTwitter开源的调用链分析工具，目前基于springcloud sleuth得到了广泛的使用，特点是轻量，使用部署简单\n\n**【Pinpoint】**\n\n韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，U功能强大，接入端无代码侵入。\n\n**【SkyWalking】**\n\n本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。\n\n**【CAT】**\n\n是大众点评开源的基于编码和配置的调用链分析，应用监控分析，日志采集，监控报警等一系列的监控平台工具。\n\n\n\n## Sleuth概述\n\n\n\n### 概述\n\n>sleuth是一个链路追踪工具，通过它在日志中打印的信息可以分析出一个服务的调用链条，也可以得出链条中每个服务的耗时，这为我们在实际生产中，分析超时服务，分析服务调用关系，做服务治理提供帮助。\n\nsleuth目前并不是对所有调用访问都可以做链路追踪，它目前支持的有：rxjava、feign、quartz、RestTemplate、zuul、hystrix、grpc、kafka、Opentracing、redis、Reator、circuitbreaker、spring的Scheduled。国内用的比较多的dubbo，sleuth无法对其提供支持。\n\n\n\n### Sleuth术语\n\n>请求一个微服务系统的API接口，这个API接口需要调用多个微服务单元，调用每个微服务单元都会产生一个新的Span，所有由这个请求产生的Span组成了这个Trace。整个过程使用Annotation(cs、sr、ss、cr)统计各个阶段消耗的时长\n\n\n\n![img](typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png)\n\n\n\n- **Span**\n\n  Span是基本工作单位。Span还包含了其他的信息，例如摘要、时间戳事件、Span的ID以及进程ID。SpanId用于唯一标识请求链路到达的各个服务组件。\n\n- **Trace**\n\n  由一组具有相同TraceId的span组成的树状结构，即一个完整的请求链路\n\n- **Annotation**\n\n  记录一个请求的4个事件，用于计算各个环节消耗的时长\n\n  - **cs** （Client Sent ）：客户端发送一个请求，开始一个请求的生命。\n  - **sr** （Server Received ）：服务端收到请求开始处理，sr - cs = 网络延迟（服务调用的时间）\n  - **ss**（Server Sent ）：服务端处理完毕准备发送到客户端，ss - sr = 服务器处理请求所用时间\n  - **cr** （Client Received ）：客户端接收到服务端的响应，请求结束，cr - cs = 请求的总时间\n\n\n\n## Sleuth + Zipkin 原理\n\n### Sleuth原理简述\n\n![image.png](typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png)\n\n\n\n>【AOP拦截器的思想】\n>\n>Sleuth创建TraceFilter，对所有的网络请求进行拦截，如果请求的header中没有span信息，则创建Span对象，生成span id、trace id等当前调用链的Trace信息记录到Http Headers中，如果header中有，则直接使用header中的数据创建Span对象，之后将span id、trace id设置到sl4j的MDC中。这样，我们在日志中就能看到span信息。\n\n我们通过日志看到的信息其实只是sleuth收集信息的一小部分，在运行过程中，sleuth还会收集服务调用时间、接收到请求的时间、发起http请求的方法、http请求的路径，包括请求的IP端口等信息，这些信息都会存入Span对象，然后发送到zipkin中。\n\n\n\n### Zipkin 原理简述\n\nZipkin 是 Twitter 的一个开源项目，它基于Google Dapper实现，它致力于收集服务的定时数据， 以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。\n\n我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的REST API接口来辅助我 们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系 统性能瓶颈的根源。\n\n除了面向开发的 API 接口之外，它也提供了方便的UI组件来帮助我们直观的搜索跟踪信息和分析请 求链路明细，比如:可以查询某段时间内各用户请求的处理时间等。\n\nZipkin 提供了可插拔数据存储方式:In-Memory、MySql、Cassandra 以及 Elasticsearch\n\n\n\n\n\n\n\n![image.png](typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png)\n\n上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成:\n\n\n\n**Collector**:收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。\n\n**Storage**:存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中， 我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中。\n\n**RESTful API**:API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接 系统访问以实现监控等。\n\n**Web UI**:UI 组件， 基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分 析跟踪信息。\n\nZipkin分为两端，一个是 Zipkin服务端，一个是 Zipkin客户端，客户端也就是微服务的应用。 客户端会 配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监 听，并生成相应的 Trace 和 Span 信息发送给服务端。\n\n\n\n![image.png](typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png)\n\n【原理】\n\n1、Sleuth采用Brave（trancer库）追踪采集trace（由一组包含span信息的调用链组成）\n\n2、将信息通过Zipkin的Collector发送给Zipkin\n\n3、zipkin拿到信息后，将数据通过Storage持久化到数据库/es中\n\n3、Zipkin通过API提供数据给UI进行可视化展示\n\n\n\n## Sleuth快速上手\n\n**1、在需要追踪的微服务上添加依赖**\n\n~~~xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n~~~\n\n**2、编写配置**\n\n~~~yaml\nsleuth: \n\tsampler:\n\t\trate: 100 # 指定采样比例，默认10%\n~~~\n\n\n\n**3、增加测试接口**\n\n~~~java\n  @RequestMapping(\"/sentinel/message1\")\n    public String message1() {\n        testSentinelMessage3Service.message();\n        log.info(\"这是message1\");\n        return \"message1\";\n    }\n~~~\n\n\n\n\n\n调用接口时，输出以下日志：\n\n~~~\n2024-01-01 20:23:39.527  INFO [spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true] 85218 --- [io-18001-exec-1] c.l.s.controller.TestSentinelController  : 这是message1\n\n~~~\n\n可以看到，日志里出现了[spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true]信息，这个就是由Spring Cloud Sleuth生成，用于跟踪微服务请求链路。\n\n这些信息包含了4个部分的值，它们的含义如下：\n\n1、spring-cloud-service 微服务的名称，与`spring.application.name`对应；\n2、9d701f5350d96c82 称为**Trace ID**，在一条完整的请求链路中，这个值是固定的。观察上面的日志即可证实这一点；\n3、9d701f5350d96c82 称为**Span ID**，它表示一个基本的工作单元；\n4、true表示是否要将该信息输出到Zipkin等服务中来收集和展示\n\n\n\n\n\n## Zipkin客户端集成\n\n虽然我们已经可以通过**Trace ID**来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助Zipkin来代替我们完成日志获取与分析。Zipkin是Twitter的一个开源项目。\n\nZipKin客户端和Sleuth的集成非常简单，只需要在微服务中添加其依赖和配置即可。\n\n### Zipkin服务端安装（Docker方式持久化mysql、ES）\n\n#### 持久化MySql\n\n**1、创建数据库**\n\n如zipkin\n\n **2、建表**\n\n语句参考：[https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql](https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fgithub.com%2Fopenzipkin%2Fzipkin%2Fblob%2Fmaster%2Fzipkin-storage%2Fmysql-v1%2Fsrc%2Fmain%2Fresources%2Fmysql.sql&source=article&objectId=2318336)\n\n或复制以下建表语句\n\n\n\n~~~sql\n--\n-- Copyright The OpenZipkin Authors\n-- SPDX-License-Identifier: Apache-2.0\n--\n\nCREATE TABLE IF NOT EXISTS zipkin_spans (\n  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',\n  `trace_id` BIGINT NOT NULL,\n  `id` BIGINT NOT NULL,\n  `name` VARCHAR(255) NOT NULL,\n  `remote_service_name` VARCHAR(255),\n  `parent_id` BIGINT,\n  `debug` BIT(1),\n  `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',\n  `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',\n  PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';\nALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';\nALTER TABLE zipkin_spans ADD INDEX(`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';\nALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';\n\nCREATE TABLE IF NOT EXISTS zipkin_annotations (\n  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',\n  `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',\n  `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',\n  `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',\n  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',\n  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',\n  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',\n  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',\n  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',\n  `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',\n  `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';\nALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';\nALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces and autocomplete values';\nALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces and autocomplete values';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';\n\nCREATE TABLE IF NOT EXISTS zipkin_dependencies (\n  `day` DATE NOT NULL,\n  `parent` VARCHAR(255) NOT NULL,\n  `child` VARCHAR(255) NOT NULL,\n  `call_count` BIGINT,\n  `error_count` BIGINT,\n  PRIMARY KEY (`day`, `parent`, `child`)\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n~~~\n\n\n\n\n\n\n\n\n\n**3、修改启动命令**\n\nZipkin默认端口9411。\n\n~~~shell\ndocker run \\\n--name zipkin-server -d \\\n--restart=always \\\n-p 9411:9411 \\\n-e MYSQL_USER=root \\\n-e MYSQL_PASS=123456 \\\n-e MYSQL_HOST=127.0.0.1 \\\n-e STORAGE_TYPE=mysql \\\n-e MYSQL_DB=zipkin \\\n-e MYSQL_TCP_PORT=3306 \\\nopenzipkin/zipkin:2.21.7\n~~~\n\n#### 持久化ES\n\n若连接ES集群，--ES_HOSTS通过逗号分割，如：--ES_HOSTS=[http://192.168.0.1:9200,http://192.168.0.2:9200]\n\n~~~\ndocker run \\\n--name zipkin-server -d \\\n-p 9411:9411 \\\n--restart=always \\\n-e STORAGE_TYPE=elasticsearch \\\n-e ES_HOSTS=localhost:9200\nopenzipkin/zipkin:2.21.7\n~~~\n\n连接ES参数\n\n| 环境变量                | 描述                                                    |\n| :---------------------- | :------------------------------------------------------ |\n| ES_HOSTS                | 连接ES地址，多个由逗号分隔。默认为http://localhost:9200 |\n| ES_PIPELINE             | 指定span被索引之前的pipeline                            |\n| ES_TIMEOUT              | 连接ES的超时时间，单位ms。默认为10000(10S)              |\n| ES_INDEX                | Zipkin持久化所使用的索引。默认为zipkin                  |\n| ES_DATE_SEPARATOR       | Zipkin建立索引的日期分隔符。默认为-                     |\n| ES_INDEX_SHARDS         | 分片(shard)个数，默认为5个                              |\n| ES_INDEX_REPLICAS       | 副本(replica)个数，默认为1个                            |\n| ES_HTTP_LOGGING         | ES的日志级别，可选值为BASIC, HEADERS, BODY              |\n| ES_USERNAME/ES_PASSWORD | 登录ES的用户名和密码                                    |\n\n\n\n![image-20240318202804603](typora-user-images/image-20240318202804603.png)\n\n\n\n### 集成\n\n**1、在需要追踪的微服务上添加依赖**\n\n~~~xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n\n~~~\n\n\n\n**2、编写配置**\n\n~~~yaml\nspring:\n  zipkin:\n\t\tbase-url: http://127.0.0.1:9411/ #zipkin server的请求地址 \n\t\tdiscoveryClientEnabled: false #让nacos把它当成一个URL，而不要当做服务名 \n\tsleuth: \n\t\tsampler:\n\t\t\tprobability: 1.0 #采样的百分比 \n\n~~~\n\n\n\n3、**访问微服务**\n\n>http://127.0.0.1:18003/spring_building/naocs/consumer\n\n\n\n**4、访问zipkin的UI界面，观察效果**\n\n\n\n![image-20240412121048381](typora-user-images/image-20240412121048381.png)\n\n\n\n\n\n## 应用性能监控：通过 SkyWalking 实施链路追踪\n\n\n\n我们掌握了基于 Sleuth+Zipkin 对微服务架构实施基于日志的链路追踪，通过 Sleuth 在微服务应用中附加链路数据，再通过 Zipkin 实现链路数据收集与可视化，从而保证开发与运维人员在生产环境了解微服务的执行过程与具体细节，为产品运维提供了有力的保障。\n\n围绕链路追踪这个话题，介绍另一款著名的链路追踪产品 SkyWalking，掌握 SkyWalking 的使用方法。本讲咱们将介绍三方面内容：\n\n\n\n### APM 与 SkyWalking\n\n Spring Cloud Slueth、Zipkin、阿里鹰眼、大众点评 Cat、SkyWalking，这些产品都有一个共同的名字：APM（Application Performance Management），即应用性能管理系统，SkyWalking 这款 APM 产品，理由很简单，它在简单易用的前提下实现了比 Zipkin 功能更强大的链路追踪、同时拥有更加友好、更详细的监控项，并能自动生成可视化图表。相比 Sleuth+Zipkin 这种不同厂商间混搭组合，SkyWalking 更符合国内软件业的“一站式解决方案”的设计理念。\n\nSkyWalking 是中国人吴晟（华为）开源的应用性能管理系统（APM）工具，使用Java语言开发，后来吴晟将其贡献给 Apache，在 Apache 的背书下 SkyWalking 发展迅速，现在已属于 Apache 旗下顶级开源项目，它的官网：http://skywalking.apache.org/。\n\n![image-20240415090937231](typora-user-images/image-20240415090937231.png)\n\n\n\n\n\nSkyWalking 提供了分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。目前在 GitHub 上 SkyWaking 拥有 23.3K Star，最新版本为：9.7.0\n\n**链路追踪视图**\n\n\n\n\n\n**指标监控全局视图**\n\n\n\n### Sleuth+Zipkin 与 SkyWalking 对比\n\n\n\n|                 | Sleuth+Zipkin           | SkyWalking                       |\n| --------------- | ----------------------- | -------------------------------- |\n| 链路追踪可视化  | 有                      | 有                               |\n| 聚合报表        | 很少                    | 丰富                             |\n| 服务依赖图      | 简单依赖图展示          | 形象直观                         |\n| 监控埋点方式    | 侵入式，需要修改源码    | 无侵入，采用Java Agent字节码增强 |\n| Java VM指标监控 | 不具备                  | 具备                             |\n| 支持报警        | 不支持                  | 有，可以自定义报警方式           |\n| 存储机制        | 内存、MySQL,ES...       | ES、Mysql、H2...                 |\n| 文档支持        | 文档丰富，国外主流      | Apache支持，国内文档更新滞后     |\n| 国内案例        | 京东、阿里定制不开源... | 华为、小米、微众银行...          |\n\n通过比较我们可以发现，在易用性和使用体验上，SkyWalking 明显好于 Zipkin，功能更丰富的同时也更符合国人习惯，但因为迭代速度较快，社区文档相对陈旧，这也导致很多技术问题需要程序员自己研究解决，因此在解决问题方面需要更多的时间。\n\n\n\n### 部署 SkyWalking 服务端\n\n\n\nskyWalkIng 架构图\n\n\n\n![image-20240415091018922](typora-user-images/image-20240415091018922.png)\n\nSkyWalking 同样采用客户端与服务端架构模式，SkyWalking 服务端用于接收来自 Java Agent 客户端发来的链路跟踪与指标数据，汇总统计后由 SkyWalking UI 负责展现。SkyWalking 服务端同时支持 gRPC 与 HTTP 两种上报方式。其中 gRPC 默认监听服务器 11800 端口，HTTP 默认监听 12800 端口，而 SKyWalking UI 应用则默认监听 8080 端口，这三个端口在生产环境下要在防火墙做放行配置。在存储层面，SkyWalking 底层支持 ElasticSearch 、MySQL、H2等多种数据源，官方优先推荐使用 ElasticSearch \n\n\n\n本初采用Docker的安装方式\n\n~~~yaml\nversion: '3.8'\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6\n    container_name: elasticsearch\n    restart: always\n    ports:\n      - 9200:9200\n      - 9300:9300\n    environment:\n      - discovery.type=single-node\n      - TZ=Asia/Shanghai\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms1024m -Xmx1024m\"\n    volumes:\n      - /opt/data/dockerData/skywalking/elasticsearch/data:/usr/share/elasticsearch/data\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n  oap:\n    image: docker.io/apache/skywalking-oap-server:9.4.0\n    container_name: oap\n    depends_on:\n      - elasticsearch\n    restart: always\n    ports:\n      - 11800:11800\n      - 12800:12800\n    environment:\n      SW_CORE_RECORD_DATA_TTL: 15\n      SW_CORE_METRICS_DATA_TTL: 15\n      SW_STORAGE: elasticsearch\n      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200\n      SW_ENABLE_UPDATE_UI_TEMPLATE: true\n      TZ: Asia/Shanghai\n      JAVA_OPTS: \"-Xms2048m -Xmx2048m\"\n  ui:\n    image: docker.io/apache/skywalking-ui:9.4.0\n    container_name: ui\n    depends_on:\n      - oap\n    links:\n      - oap\n    restart: always\n    ports:\n      - 8080:8080\n    environment:\n      SW_OAP_ADDRESS: http://oap:12800\n      SW_ZIPKIN_ADDRESS: http://oap:9412\n\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n\n\n\n\n启动后会产生两个 Java 进程：\n\n- Skywalking-Collector 是数据收集服务，默认监听 11800（gRPC）与 12800（HTTP） 端口。\n- Skywalking-Webapp 是 SkyWalking UI，用于展示数据，默认监听 8080 端口,上面显示的为8038。\n\n\n\n\n\nSkywalking 应用已启动\n\n启动成功后，访问[http://127.0.0.1:8088/]，如果看到 SkyWalking UI 首页，则说明服务端配置成功。\n\n\n\n![image-20240416113821316](typora-user-images/image-20240416113821316.png)\n\n\n\n### 安装 SkyWalking Java Agent\n\n\n\n在前面提到，SkyWalking 可以在不修改应用源码的前提下，无侵入的实现链路追踪与 JVM 指标监控，它是怎么做到的？这里涉及一个 Java1.5 新增的特性，Java Agent 探针技术，想必对于很多工作多年 Java 工程师来说，Java Agent 也是一个陌生的东西。\n\nJava Agent 探针说白了就是 Java 提供的一种“外挂”技术，允许在应用开发的时候在通过启动时增加 javaagent 参数来外挂一些额外的程序。\n\nJava Agent ，其扩展类有这严格的规范，必须创建名为 premain 的方法，该方法将在目标应用 main 方法前执行，下面就是最简单的 Java Agent 扩展类。\n\n\n\n~~~java\npublic class SimpleAgent {\n    public static void premain(String agentArgs, Instrumentation inst) {\n        System.out.println(\"=========开始执行premain============\");\n    }\n}\n~~~\n\n要完成 Java Agent，还需要提供正确的 MANIFEST.MF，以便 JVM 能够选择正确的类。在 META-INF 目录下找到你的 MANIFEST.MF 文件：\n\n~~~\nManifest-Version: 1.0\nPremain-Class: com.lison.agent.SimpleAgent\n~~~\n\n\n\n之后我们将这个类打包为 agent.jar，假设原始应用为 test-agent.jar，在 test-agent.jar 启动时需要在额外附加 javaagent 参数，如下所示：\n\n~~~\njava -javaagent:agent.jar -jar test-agent.jar\n~~~\n\n在应用启动时 Java 控制台会输出如下日志。\n\n~~~\n=========开始执行 premain============\n正在启动 Agent测试服务...\n....\n~~~\n\n\n\nSkyWalking 也是利用 Java Agent 的特性，在 premain 中通过字节码增强技术对目标方法进行扩展，当目标方法执行时自动收集链路追踪及监控数据并发往 SkyWalking 服务端。\n\nSkyWalking Java Agent，我们还是以实例进行讲解，因为 Java Agent 是无侵入的，并不需要源码，这里我就直接给出调用关系图帮助咱们理解。\n\n![image-20240415094839642](typora-user-images/image-20240415094839642.png)\n\n\n\n调用关系图\n\n简单介绍下，用户访问 a 服务的 a 接口，a 服务通过 OpenFeign 远程调用 b 服务的 b 接口，b 服务通过 OpenFeign 调用 c 服务的 c 接口，最后 c 接口通过 JDBC 将业务数据存储到 MySQL 数据库\n\n\n\n#### 集成skywalking\n\n**1、下载解压 agent**\n\n```\n注意：agent版本和oap版本需要适配，版本不适配可能会出现页面无法访问、agent上报不到页面等问题。\n```\n\n**下载地址**： https://skywalking.apache.org/downloads/\n\n**作者用的skywalking版本为9.4.0，下载v9.1.0版本的client没有问题，亲测可用。**\n\n\n\n![image-20240416114024941](typora-user-images/image-20240416114024941.png)\n\n\n\n\n\n需要配置skywalking-agent文件夹下，config/agent.config配置文件，列出最关键的两个配置，其他配置大家可以自行探索。\n\n~~~\nagent.service_name=${SW_AGENT_NAME:HS}\ncollector.backend_service=${SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.54.53:11800}\n\n~~~\n\n\n\n\n\n\n\n**2、日志对接**\n\n\n\n在skywalking的UI端有一个日志的模块，用于收集客户端的日志，默认是没有数据的，那么需要如何将日志数据传输到skywalking中呢？\n\n~~~\n<!--打印skywalking的TraceId到日志-->\n        <dependency>\n            <groupId>org.apache.skywalking</groupId>\n            <artifactId>apm-toolkit-logback-1.x</artifactId>\n            <version>9.1.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.apache.skywalking</groupId>\n            <artifactId>apm-toolkit-trace</artifactId>\n            <version>9.1.0</version>\n        </dependency>\n~~~\n\n\n\n新建一个logback-spring.xml放在resource目录下，配置如下：\n\n~~~xml\n<configuration debug=\"false\" scan=\"false\">\n    <springProperty scop=\"context\" name=\"spring.application.name\" source=\"spring.application.name\" defaultValue=\"\"/>\n    <property name=\"log.path\" value=\"logs/${spring.application.name}\"/>\n    <!-- 彩色日志格式 -->\n    <property name=\"CONSOLE_LOG_PATTERN\"\n              value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\n    <!-- 彩色日志依赖的渲染类 -->\n    <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\"/>\n    <conversionRule conversionWord=\"wex\"\n                    converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\"/>\n    <conversionRule conversionWord=\"wEx\"\n                    converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\"/>\n    <!-- Console log output -->\n    <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n        </encoder>\n    </appender>\n\n    <!-- Log file debug output -->\n    <appender name=\"debug\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${log.path}/debug.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>\n            <maxFileSize>50MB</maxFileSize>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <!-- Log file error output -->\n    <appender name=\"error\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${log.path}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>\n            <maxFileSize>50MB</maxFileSize>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n    </appender>\n    <appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout\">\n                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%tid] [%thread] %-5level %logger{36} -%msg%n</Pattern>\n            </layout>\n        </encoder>\n    </appender>\n\n    <appender name=\"grpc\" class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender\">\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout\">\n                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{tid}] [%thread] %-5level %logger{36} -%msg%n</Pattern>\n            </layout>\n        </encoder>\n    </appender>\n    <!--nacos 心跳 INFO 屏蔽-->\n    <logger name=\"com.alibaba.nacos\" level=\"OFF\">\n        <appender-ref ref=\"error\"/>\n    </logger>\n\n    <!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 -->\n    <root level=\"INFO\">\n        <!-- <appender-ref ref=\"console\"/>-->\n        <appender-ref ref=\"debug\"/>\n        <appender-ref ref=\"error\"/>\n        <appender-ref ref=\"stdout\"/>\n        <appender-ref ref=\"grpc\"/>\n    </root>\n</configuration>\n\n~~~\n\n\n\n**3、代码中添加日志**\n\n~~~\n  @RequestMapping(\"/fegin/test\")\n    public String feginTest() {\n        iTestService.getServerPort();\n        log.info(\"这是message1\");\n        return \"message1\";\n    }\n~~~\n\n\n\n#### 使用探针方式启动\n\n**（1）使用idea启动**\n\n 配置VM options\n\n![image-20240416114808884](typora-user-images/image-20240416114808884.png)\n\njavaagent配置的参数即skywalking-agent的绝对路径。\n\n~~~\n-Dskywalking.agent.service_name=\"spring-cloud-service\"\n-Dskywalking.collector.backend_service=\"opaip:11800\"\n-javaagent:/Users/lison/work/workspace/project/skywalking-agent/skywalking-agent.jar\n~~~\n\n\n\n日志：\n\n![image-20240416114924463](typora-user-images/image-20240416114924463.png)\n\n\n\n\n\n![image-20240416120116317](typora-user-images/image-20240416120116317.png)\n\n\n\n除此之外，链路追踪的展示也非常强大，服务间的 API 调用关系与执行时间、调用状态清晰列出，而且因为 SkyWalking 是方法层面上的扩展，会提供更加详细的方法间的调用过程\n\n\n\n![image-20240417091316659](typora-user-images/image-20240417091316659.png)\n\n\n\n\n\n提供不同维度的视图\n\n\n\n![image-20240417092003988](typora-user-images/image-20240417092003988.png)\n\n\n\n\n\n**服务监控JVM**\n\n![image-20240417092118543](typora-user-images/image-20240417092118543.png)\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-06-Sleuth链路追踪.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.4.03`\n\n# Spring Cloud Alibaba-06-Sleuth链路追踪\n\n[toc]\n\n\n\n## 为什么使用链路追踪\n\n随着业务发展，微服务的数量也会越来越多，某个服务出现问题，问题很难排查\n\n>【问题】\n>\n>1、链路梳理难：无法清晰地看到整个调用链路\n>\n>2、故障难定位：无法快速定位到故障点、无法快速定位哪个环节比较费时\n\n![img](typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png)\n\n因此，我们需要链路追踪来梳理链路调用，方便快速定位问题。分布式链路追踪(Distributed Tracing)，就是将一次分布式请求还原成调用链路，进行日志记 录，性能监控并将一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪 台机器上、每个服务节点的请求状态等等\n\n\n\n## 常见链路追踪解决方案\n\n> 常见的有如下几种解决方案，本文讲解跟SpringCloud相关的Sleuth + Zipkin\n\n**【Zipkin】**\n\nTwitter开源的调用链分析工具，目前基于springcloud sleuth得到了广泛的使用，特点是轻量，使用部署简单\n\n**【Pinpoint】**\n\n韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，U功能强大，接入端无代码侵入。\n\n**【SkyWalking】**\n\n本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。\n\n**【CAT】**\n\n是大众点评开源的基于编码和配置的调用链分析，应用监控分析，日志采集，监控报警等一系列的监控平台工具。\n\n\n\n## Sleuth概述\n\n\n\n### 概述\n\n>sleuth是一个链路追踪工具，通过它在日志中打印的信息可以分析出一个服务的调用链条，也可以得出链条中每个服务的耗时，这为我们在实际生产中，分析超时服务，分析服务调用关系，做服务治理提供帮助。\n\nsleuth目前并不是对所有调用访问都可以做链路追踪，它目前支持的有：rxjava、feign、quartz、RestTemplate、zuul、hystrix、grpc、kafka、Opentracing、redis、Reator、circuitbreaker、spring的Scheduled。国内用的比较多的dubbo，sleuth无法对其提供支持。\n\n\n\n### Sleuth术语\n\n>请求一个微服务系统的API接口，这个API接口需要调用多个微服务单元，调用每个微服务单元都会产生一个新的Span，所有由这个请求产生的Span组成了这个Trace。整个过程使用Annotation(cs、sr、ss、cr)统计各个阶段消耗的时长\n\n\n\n![img](typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png)\n\n\n\n- **Span**\n\n  Span是基本工作单位。Span还包含了其他的信息，例如摘要、时间戳事件、Span的ID以及进程ID。SpanId用于唯一标识请求链路到达的各个服务组件。\n\n- **Trace**\n\n  由一组具有相同TraceId的span组成的树状结构，即一个完整的请求链路\n\n- **Annotation**\n\n  记录一个请求的4个事件，用于计算各个环节消耗的时长\n\n  - **cs** （Client Sent ）：客户端发送一个请求，开始一个请求的生命。\n  - **sr** （Server Received ）：服务端收到请求开始处理，sr - cs = 网络延迟（服务调用的时间）\n  - **ss**（Server Sent ）：服务端处理完毕准备发送到客户端，ss - sr = 服务器处理请求所用时间\n  - **cr** （Client Received ）：客户端接收到服务端的响应，请求结束，cr - cs = 请求的总时间\n\n\n\n## Sleuth + Zipkin 原理\n\n### Sleuth原理简述\n\n![image.png](typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png)\n\n\n\n>【AOP拦截器的思想】\n>\n>Sleuth创建TraceFilter，对所有的网络请求进行拦截，如果请求的header中没有span信息，则创建Span对象，生成span id、trace id等当前调用链的Trace信息记录到Http Headers中，如果header中有，则直接使用header中的数据创建Span对象，之后将span id、trace id设置到sl4j的MDC中。这样，我们在日志中就能看到span信息。\n\n我们通过日志看到的信息其实只是sleuth收集信息的一小部分，在运行过程中，sleuth还会收集服务调用时间、接收到请求的时间、发起http请求的方法、http请求的路径，包括请求的IP端口等信息，这些信息都会存入Span对象，然后发送到zipkin中。\n\n\n\n### Zipkin 原理简述\n\nZipkin 是 Twitter 的一个开源项目，它基于Google Dapper实现，它致力于收集服务的定时数据， 以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。\n\n我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的REST API接口来辅助我 们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系 统性能瓶颈的根源。\n\n除了面向开发的 API 接口之外，它也提供了方便的UI组件来帮助我们直观的搜索跟踪信息和分析请 求链路明细，比如:可以查询某段时间内各用户请求的处理时间等。\n\nZipkin 提供了可插拔数据存储方式:In-Memory、MySql、Cassandra 以及 Elasticsearch\n\n\n\n\n\n\n\n![image.png](typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png)\n\n上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成:\n\n\n\n**Collector**:收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。\n\n**Storage**:存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中， 我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中。\n\n**RESTful API**:API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接 系统访问以实现监控等。\n\n**Web UI**:UI 组件， 基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分 析跟踪信息。\n\nZipkin分为两端，一个是 Zipkin服务端，一个是 Zipkin客户端，客户端也就是微服务的应用。 客户端会 配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监 听，并生成相应的 Trace 和 Span 信息发送给服务端。\n\n\n\n![image.png](typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png)\n\n【原理】\n\n1、Sleuth采用Brave（trancer库）追踪采集trace（由一组包含span信息的调用链组成）\n\n2、将信息通过Zipkin的Collector发送给Zipkin\n\n3、zipkin拿到信息后，将数据通过Storage持久化到数据库/es中\n\n3、Zipkin通过API提供数据给UI进行可视化展示\n\n\n\n## Sleuth快速上手\n\n**1、在需要追踪的微服务上添加依赖**\n\n~~~xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-sleuth</artifactId>\n</dependency>\n~~~\n\n**2、编写配置**\n\n~~~yaml\nsleuth: \n\tsampler:\n\t\trate: 100 # 指定采样比例，默认10%\n~~~\n\n\n\n**3、增加测试接口**\n\n~~~java\n  @RequestMapping(\"/sentinel/message1\")\n    public String message1() {\n        testSentinelMessage3Service.message();\n        log.info(\"这是message1\");\n        return \"message1\";\n    }\n~~~\n\n\n\n\n\n调用接口时，输出以下日志：\n\n~~~\n2024-01-01 20:23:39.527  INFO [spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true] 85218 --- [io-18001-exec-1] c.l.s.controller.TestSentinelController  : 这是message1\n\n~~~\n\n可以看到，日志里出现了[spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true]信息，这个就是由Spring Cloud Sleuth生成，用于跟踪微服务请求链路。\n\n这些信息包含了4个部分的值，它们的含义如下：\n\n1、spring-cloud-service 微服务的名称，与`spring.application.name`对应；\n2、9d701f5350d96c82 称为**Trace ID**，在一条完整的请求链路中，这个值是固定的。观察上面的日志即可证实这一点；\n3、9d701f5350d96c82 称为**Span ID**，它表示一个基本的工作单元；\n4、true表示是否要将该信息输出到Zipkin等服务中来收集和展示\n\n\n\n\n\n## Zipkin客户端集成\n\n虽然我们已经可以通过**Trace ID**来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助Zipkin来代替我们完成日志获取与分析。Zipkin是Twitter的一个开源项目。\n\nZipKin客户端和Sleuth的集成非常简单，只需要在微服务中添加其依赖和配置即可。\n\n### Zipkin服务端安装（Docker方式持久化mysql、ES）\n\n#### 持久化MySql\n\n**1、创建数据库**\n\n如zipkin\n\n **2、建表**\n\n语句参考：[https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql](https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fgithub.com%2Fopenzipkin%2Fzipkin%2Fblob%2Fmaster%2Fzipkin-storage%2Fmysql-v1%2Fsrc%2Fmain%2Fresources%2Fmysql.sql&source=article&objectId=2318336)\n\n或复制以下建表语句\n\n\n\n~~~sql\n--\n-- Copyright The OpenZipkin Authors\n-- SPDX-License-Identifier: Apache-2.0\n--\n\nCREATE TABLE IF NOT EXISTS zipkin_spans (\n  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',\n  `trace_id` BIGINT NOT NULL,\n  `id` BIGINT NOT NULL,\n  `name` VARCHAR(255) NOT NULL,\n  `remote_service_name` VARCHAR(255),\n  `parent_id` BIGINT,\n  `debug` BIT(1),\n  `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',\n  `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query',\n  PRIMARY KEY (`trace_id_high`, `trace_id`, `id`)\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_spans ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTracesByIds';\nALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';\nALTER TABLE zipkin_spans ADD INDEX(`remote_service_name`) COMMENT 'for getTraces and getRemoteServiceNames';\nALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';\n\nCREATE TABLE IF NOT EXISTS zipkin_annotations (\n  `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit',\n  `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',\n  `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',\n  `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',\n  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',\n  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',\n  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',\n  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',\n  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',\n  `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',\n  `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n\nALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id_high`, `trace_id`) COMMENT 'for getTraces/ByIds';\nALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';\nALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces and autocomplete values';\nALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces and autocomplete values';\nALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`, `a_key`) COMMENT 'for dependencies job';\n\nCREATE TABLE IF NOT EXISTS zipkin_dependencies (\n  `day` DATE NOT NULL,\n  `parent` VARCHAR(255) NOT NULL,\n  `child` VARCHAR(255) NOT NULL,\n  `call_count` BIGINT,\n  `error_count` BIGINT,\n  PRIMARY KEY (`day`, `parent`, `child`)\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED CHARACTER SET=utf8 COLLATE utf8_general_ci;\n~~~\n\n\n\n\n\n\n\n\n\n**3、修改启动命令**\n\nZipkin默认端口9411。\n\n~~~shell\ndocker run \\\n--name zipkin-server -d \\\n--restart=always \\\n-p 9411:9411 \\\n-e MYSQL_USER=root \\\n-e MYSQL_PASS=123456 \\\n-e MYSQL_HOST=127.0.0.1 \\\n-e STORAGE_TYPE=mysql \\\n-e MYSQL_DB=zipkin \\\n-e MYSQL_TCP_PORT=3306 \\\nopenzipkin/zipkin:2.21.7\n~~~\n\n#### 持久化ES\n\n若连接ES集群，--ES_HOSTS通过逗号分割，如：--ES_HOSTS=[http://192.168.0.1:9200,http://192.168.0.2:9200]\n\n~~~\ndocker run \\\n--name zipkin-server -d \\\n-p 9411:9411 \\\n--restart=always \\\n-e STORAGE_TYPE=elasticsearch \\\n-e ES_HOSTS=localhost:9200\nopenzipkin/zipkin:2.21.7\n~~~\n\n连接ES参数\n\n| 环境变量                | 描述                                                    |\n| :---------------------- | :------------------------------------------------------ |\n| ES_HOSTS                | 连接ES地址，多个由逗号分隔。默认为http://localhost:9200 |\n| ES_PIPELINE             | 指定span被索引之前的pipeline                            |\n| ES_TIMEOUT              | 连接ES的超时时间，单位ms。默认为10000(10S)              |\n| ES_INDEX                | Zipkin持久化所使用的索引。默认为zipkin                  |\n| ES_DATE_SEPARATOR       | Zipkin建立索引的日期分隔符。默认为-                     |\n| ES_INDEX_SHARDS         | 分片(shard)个数，默认为5个                              |\n| ES_INDEX_REPLICAS       | 副本(replica)个数，默认为1个                            |\n| ES_HTTP_LOGGING         | ES的日志级别，可选值为BASIC, HEADERS, BODY              |\n| ES_USERNAME/ES_PASSWORD | 登录ES的用户名和密码                                    |\n\n\n\n![image-20240318202804603](typora-user-images/image-20240318202804603.png)\n\n\n\n### 集成\n\n**1、在需要追踪的微服务上添加依赖**\n\n~~~xml\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency>\n\n~~~\n\n\n\n**2、编写配置**\n\n~~~yaml\nspring:\n  zipkin:\n\t\tbase-url: http://127.0.0.1:9411/ #zipkin server的请求地址 \n\t\tdiscoveryClientEnabled: false #让nacos把它当成一个URL，而不要当做服务名 \n\tsleuth: \n\t\tsampler:\n\t\t\tprobability: 1.0 #采样的百分比 \n\n~~~\n\n\n\n3、**访问微服务**\n\n>http://127.0.0.1:18003/spring_building/naocs/consumer\n\n\n\n**4、访问zipkin的UI界面，观察效果**\n\n\n\n![image-20240412121048381](typora-user-images/image-20240412121048381.png)\n\n\n\n\n\n## 应用性能监控：通过 SkyWalking 实施链路追踪\n\n\n\n我们掌握了基于 Sleuth+Zipkin 对微服务架构实施基于日志的链路追踪，通过 Sleuth 在微服务应用中附加链路数据，再通过 Zipkin 实现链路数据收集与可视化，从而保证开发与运维人员在生产环境了解微服务的执行过程与具体细节，为产品运维提供了有力的保障。\n\n围绕链路追踪这个话题，介绍另一款著名的链路追踪产品 SkyWalking，掌握 SkyWalking 的使用方法。本讲咱们将介绍三方面内容：\n\n\n\n### APM 与 SkyWalking\n\n Spring Cloud Slueth、Zipkin、阿里鹰眼、大众点评 Cat、SkyWalking，这些产品都有一个共同的名字：APM（Application Performance Management），即应用性能管理系统，SkyWalking 这款 APM 产品，理由很简单，它在简单易用的前提下实现了比 Zipkin 功能更强大的链路追踪、同时拥有更加友好、更详细的监控项，并能自动生成可视化图表。相比 Sleuth+Zipkin 这种不同厂商间混搭组合，SkyWalking 更符合国内软件业的“一站式解决方案”的设计理念。\n\nSkyWalking 是中国人吴晟（华为）开源的应用性能管理系统（APM）工具，使用Java语言开发，后来吴晟将其贡献给 Apache，在 Apache 的背书下 SkyWalking 发展迅速，现在已属于 Apache 旗下顶级开源项目，它的官网：http://skywalking.apache.org/。\n\n![image-20240415090937231](typora-user-images/image-20240415090937231.png)\n\n\n\n\n\nSkyWalking 提供了分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。目前在 GitHub 上 SkyWaking 拥有 23.3K Star，最新版本为：9.7.0\n\n**链路追踪视图**\n\n\n\n\n\n**指标监控全局视图**\n\n\n\n### Sleuth+Zipkin 与 SkyWalking 对比\n\n\n\n|                 | Sleuth+Zipkin           | SkyWalking                       |\n| --------------- | ----------------------- | -------------------------------- |\n| 链路追踪可视化  | 有                      | 有                               |\n| 聚合报表        | 很少                    | 丰富                             |\n| 服务依赖图      | 简单依赖图展示          | 形象直观                         |\n| 监控埋点方式    | 侵入式，需要修改源码    | 无侵入，采用Java Agent字节码增强 |\n| Java VM指标监控 | 不具备                  | 具备                             |\n| 支持报警        | 不支持                  | 有，可以自定义报警方式           |\n| 存储机制        | 内存、MySQL,ES...       | ES、Mysql、H2...                 |\n| 文档支持        | 文档丰富，国外主流      | Apache支持，国内文档更新滞后     |\n| 国内案例        | 京东、阿里定制不开源... | 华为、小米、微众银行...          |\n\n通过比较我们可以发现，在易用性和使用体验上，SkyWalking 明显好于 Zipkin，功能更丰富的同时也更符合国人习惯，但因为迭代速度较快，社区文档相对陈旧，这也导致很多技术问题需要程序员自己研究解决，因此在解决问题方面需要更多的时间。\n\n\n\n### 部署 SkyWalking 服务端\n\n\n\nskyWalkIng 架构图\n\n\n\n![image-20240415091018922](typora-user-images/image-20240415091018922.png)\n\nSkyWalking 同样采用客户端与服务端架构模式，SkyWalking 服务端用于接收来自 Java Agent 客户端发来的链路跟踪与指标数据，汇总统计后由 SkyWalking UI 负责展现。SkyWalking 服务端同时支持 gRPC 与 HTTP 两种上报方式。其中 gRPC 默认监听服务器 11800 端口，HTTP 默认监听 12800 端口，而 SKyWalking UI 应用则默认监听 8080 端口，这三个端口在生产环境下要在防火墙做放行配置。在存储层面，SkyWalking 底层支持 ElasticSearch 、MySQL、H2等多种数据源，官方优先推荐使用 ElasticSearch \n\n\n\n本初采用Docker的安装方式\n\n~~~yaml\nversion: '3.8'\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6\n    container_name: elasticsearch\n    restart: always\n    ports:\n      - 9200:9200\n      - 9300:9300\n    environment:\n      - discovery.type=single-node\n      - TZ=Asia/Shanghai\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms1024m -Xmx1024m\"\n    volumes:\n      - /opt/data/dockerData/skywalking/elasticsearch/data:/usr/share/elasticsearch/data\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n  oap:\n    image: docker.io/apache/skywalking-oap-server:9.4.0\n    container_name: oap\n    depends_on:\n      - elasticsearch\n    restart: always\n    ports:\n      - 11800:11800\n      - 12800:12800\n    environment:\n      SW_CORE_RECORD_DATA_TTL: 15\n      SW_CORE_METRICS_DATA_TTL: 15\n      SW_STORAGE: elasticsearch\n      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200\n      SW_ENABLE_UPDATE_UI_TEMPLATE: true\n      TZ: Asia/Shanghai\n      JAVA_OPTS: \"-Xms2048m -Xmx2048m\"\n  ui:\n    image: docker.io/apache/skywalking-ui:9.4.0\n    container_name: ui\n    depends_on:\n      - oap\n    links:\n      - oap\n    restart: always\n    ports:\n      - 8080:8080\n    environment:\n      SW_OAP_ADDRESS: http://oap:12800\n      SW_ZIPKIN_ADDRESS: http://oap:9412\n\n~~~\n\n\n\n~~~\ndocker compose up -d\n~~~\n\n\n\n\n\n\n\n启动后会产生两个 Java 进程：\n\n- Skywalking-Collector 是数据收集服务，默认监听 11800（gRPC）与 12800（HTTP） 端口。\n- Skywalking-Webapp 是 SkyWalking UI，用于展示数据，默认监听 8080 端口,上面显示的为8038。\n\n\n\n\n\nSkywalking 应用已启动\n\n启动成功后，访问[http://127.0.0.1:8088/]，如果看到 SkyWalking UI 首页，则说明服务端配置成功。\n\n\n\n![image-20240416113821316](typora-user-images/image-20240416113821316.png)\n\n\n\n### 安装 SkyWalking Java Agent\n\n\n\n在前面提到，SkyWalking 可以在不修改应用源码的前提下，无侵入的实现链路追踪与 JVM 指标监控，它是怎么做到的？这里涉及一个 Java1.5 新增的特性，Java Agent 探针技术，想必对于很多工作多年 Java 工程师来说，Java Agent 也是一个陌生的东西。\n\nJava Agent 探针说白了就是 Java 提供的一种“外挂”技术，允许在应用开发的时候在通过启动时增加 javaagent 参数来外挂一些额外的程序。\n\nJava Agent ，其扩展类有这严格的规范，必须创建名为 premain 的方法，该方法将在目标应用 main 方法前执行，下面就是最简单的 Java Agent 扩展类。\n\n\n\n~~~java\npublic class SimpleAgent {\n    public static void premain(String agentArgs, Instrumentation inst) {\n        System.out.println(\"=========开始执行premain============\");\n    }\n}\n~~~\n\n要完成 Java Agent，还需要提供正确的 MANIFEST.MF，以便 JVM 能够选择正确的类。在 META-INF 目录下找到你的 MANIFEST.MF 文件：\n\n~~~\nManifest-Version: 1.0\nPremain-Class: com.lison.agent.SimpleAgent\n~~~\n\n\n\n之后我们将这个类打包为 agent.jar，假设原始应用为 test-agent.jar，在 test-agent.jar 启动时需要在额外附加 javaagent 参数，如下所示：\n\n~~~\njava -javaagent:agent.jar -jar test-agent.jar\n~~~\n\n在应用启动时 Java 控制台会输出如下日志。\n\n~~~\n=========开始执行 premain============\n正在启动 Agent测试服务...\n....\n~~~\n\n\n\nSkyWalking 也是利用 Java Agent 的特性，在 premain 中通过字节码增强技术对目标方法进行扩展，当目标方法执行时自动收集链路追踪及监控数据并发往 SkyWalking 服务端。\n\nSkyWalking Java Agent，我们还是以实例进行讲解，因为 Java Agent 是无侵入的，并不需要源码，这里我就直接给出调用关系图帮助咱们理解。\n\n![image-20240415094839642](typora-user-images/image-20240415094839642.png)\n\n\n\n调用关系图\n\n简单介绍下，用户访问 a 服务的 a 接口，a 服务通过 OpenFeign 远程调用 b 服务的 b 接口，b 服务通过 OpenFeign 调用 c 服务的 c 接口，最后 c 接口通过 JDBC 将业务数据存储到 MySQL 数据库\n\n\n\n#### 集成skywalking\n\n**1、下载解压 agent**\n\n```\n注意：agent版本和oap版本需要适配，版本不适配可能会出现页面无法访问、agent上报不到页面等问题。\n```\n\n**下载地址**： https://skywalking.apache.org/downloads/\n\n**作者用的skywalking版本为9.4.0，下载v9.1.0版本的client没有问题，亲测可用。**\n\n\n\n![image-20240416114024941](typora-user-images/image-20240416114024941.png)\n\n\n\n\n\n需要配置skywalking-agent文件夹下，config/agent.config配置文件，列出最关键的两个配置，其他配置大家可以自行探索。\n\n~~~\nagent.service_name=${SW_AGENT_NAME:HS}\ncollector.backend_service=${SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.54.53:11800}\n\n~~~\n\n\n\n\n\n\n\n**2、日志对接**\n\n\n\n在skywalking的UI端有一个日志的模块，用于收集客户端的日志，默认是没有数据的，那么需要如何将日志数据传输到skywalking中呢？\n\n~~~\n<!--打印skywalking的TraceId到日志-->\n        <dependency>\n            <groupId>org.apache.skywalking</groupId>\n            <artifactId>apm-toolkit-logback-1.x</artifactId>\n            <version>9.1.0</version>\n        </dependency>\n\n\n        <dependency>\n            <groupId>org.apache.skywalking</groupId>\n            <artifactId>apm-toolkit-trace</artifactId>\n            <version>9.1.0</version>\n        </dependency>\n~~~\n\n\n\n新建一个logback-spring.xml放在resource目录下，配置如下：\n\n~~~xml\n<configuration debug=\"false\" scan=\"false\">\n    <springProperty scop=\"context\" name=\"spring.application.name\" source=\"spring.application.name\" defaultValue=\"\"/>\n    <property name=\"log.path\" value=\"logs/${spring.application.name}\"/>\n    <!-- 彩色日志格式 -->\n    <property name=\"CONSOLE_LOG_PATTERN\"\n              value=\"${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}\"/>\n    <!-- 彩色日志依赖的渲染类 -->\n    <conversionRule conversionWord=\"clr\" converterClass=\"org.springframework.boot.logging.logback.ColorConverter\"/>\n    <conversionRule conversionWord=\"wex\"\n                    converterClass=\"org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\"/>\n    <conversionRule conversionWord=\"wEx\"\n                    converterClass=\"org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter\"/>\n    <!-- Console log output -->\n    <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>${CONSOLE_LOG_PATTERN}</pattern>\n        </encoder>\n    </appender>\n\n    <!-- Log file debug output -->\n    <appender name=\"debug\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${log.path}/debug.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern>${log.path}/%d{yyyy-MM, aux}/debug.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>\n            <maxFileSize>50MB</maxFileSize>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <!-- Log file error output -->\n    <appender name=\"error\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${log.path}/error.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <fileNamePattern>${log.path}/%d{yyyy-MM}/error.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>\n            <maxFileSize>50MB</maxFileSize>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>\n        </encoder>\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>ERROR</level>\n        </filter>\n    </appender>\n    <appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout\">\n                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%tid] [%thread] %-5level %logger{36} -%msg%n</Pattern>\n            </layout>\n        </encoder>\n    </appender>\n\n    <appender name=\"grpc\" class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender\">\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\n            <layout class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout\">\n                <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{tid}] [%thread] %-5level %logger{36} -%msg%n</Pattern>\n            </layout>\n        </encoder>\n    </appender>\n    <!--nacos 心跳 INFO 屏蔽-->\n    <logger name=\"com.alibaba.nacos\" level=\"OFF\">\n        <appender-ref ref=\"error\"/>\n    </logger>\n\n    <!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 -->\n    <root level=\"INFO\">\n        <!-- <appender-ref ref=\"console\"/>-->\n        <appender-ref ref=\"debug\"/>\n        <appender-ref ref=\"error\"/>\n        <appender-ref ref=\"stdout\"/>\n        <appender-ref ref=\"grpc\"/>\n    </root>\n</configuration>\n\n~~~\n\n\n\n**3、代码中添加日志**\n\n~~~\n  @RequestMapping(\"/fegin/test\")\n    public String feginTest() {\n        iTestService.getServerPort();\n        log.info(\"这是message1\");\n        return \"message1\";\n    }\n~~~\n\n\n\n#### 使用探针方式启动\n\n**（1）使用idea启动**\n\n 配置VM options\n\n![image-20240416114808884](typora-user-images/image-20240416114808884.png)\n\njavaagent配置的参数即skywalking-agent的绝对路径。\n\n~~~\n-Dskywalking.agent.service_name=\"spring-cloud-service\"\n-Dskywalking.collector.backend_service=\"opaip:11800\"\n-javaagent:/Users/lison/work/workspace/project/skywalking-agent/skywalking-agent.jar\n~~~\n\n\n\n日志：\n\n![image-20240416114924463](typora-user-images/image-20240416114924463.png)\n\n\n\n\n\n![image-20240416120116317](typora-user-images/image-20240416120116317.png)\n\n\n\n除此之外，链路追踪的展示也非常强大，服务间的 API 调用关系与执行时间、调用状态清晰列出，而且因为 SkyWalking 是方法层面上的扩展，会提供更加详细的方法间的调用过程\n\n\n\n![image-20240417091316659](typora-user-images/image-20240417091316659.png)\n\n\n\n\n\n提供不同维度的视图\n\n\n\n![image-20240417092003988](typora-user-images/image-20240417092003988.png)\n\n\n\n\n\n**服务监控JVM**\n\n![image-20240417092118543](typora-user-images/image-20240417092118543.png)\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-06-Sleuth链路追踪","published":1,"date":"2024-02-23T04:13:02.041Z","updated":"2024-04-17T01:22:28.705Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhm0007ecfye251b7gq","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.4.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-06-Sleuth链路追踪\"><a href=\"#Spring-Cloud-Alibaba-06-Sleuth链路追踪\" class=\"headerlink\" title=\"Spring Cloud Alibaba-06-Sleuth链路追踪\"></a>Spring Cloud Alibaba-06-Sleuth链路追踪</h1><p>[toc]</p>\n<h2 id=\"为什么使用链路追踪\"><a href=\"#为什么使用链路追踪\" class=\"headerlink\" title=\"为什么使用链路追踪\"></a>为什么使用链路追踪</h2><p>随着业务发展，微服务的数量也会越来越多，某个服务出现问题，问题很难排查</p>\n<blockquote>\n<p>【问题】</p>\n<p>1、链路梳理难：无法清晰地看到整个调用链路</p>\n<p>2、故障难定位：无法快速定位到故障点、无法快速定位哪个环节比较费时</p>\n</blockquote>\n<p><img src=\"/typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png\" alt=\"img\"></p>\n<p>因此，我们需要链路追踪来梳理链路调用，方便快速定位问题。分布式链路追踪(Distributed Tracing)，就是将一次分布式请求还原成调用链路，进行日志记 录，性能监控并将一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪 台机器上、每个服务节点的请求状态等等</p>\n<h2 id=\"常见链路追踪解决方案\"><a href=\"#常见链路追踪解决方案\" class=\"headerlink\" title=\"常见链路追踪解决方案\"></a>常见链路追踪解决方案</h2><blockquote>\n<p>常见的有如下几种解决方案，本文讲解跟SpringCloud相关的Sleuth + Zipkin</p>\n</blockquote>\n<p><strong>【Zipkin】</strong></p>\n<p>Twitter开源的调用链分析工具，目前基于springcloud sleuth得到了广泛的使用，特点是轻量，使用部署简单</p>\n<p><strong>【Pinpoint】</strong></p>\n<p>韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，U功能强大，接入端无代码侵入。</p>\n<p><strong>【SkyWalking】</strong></p>\n<p>本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。</p>\n<p><strong>【CAT】</strong></p>\n<p>是大众点评开源的基于编码和配置的调用链分析，应用监控分析，日志采集，监控报警等一系列的监控平台工具。</p>\n<h2 id=\"Sleuth概述\"><a href=\"#Sleuth概述\" class=\"headerlink\" title=\"Sleuth概述\"></a>Sleuth概述</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>sleuth是一个链路追踪工具，通过它在日志中打印的信息可以分析出一个服务的调用链条，也可以得出链条中每个服务的耗时，这为我们在实际生产中，分析超时服务，分析服务调用关系，做服务治理提供帮助。</p>\n</blockquote>\n<p>sleuth目前并不是对所有调用访问都可以做链路追踪，它目前支持的有：rxjava、feign、quartz、RestTemplate、zuul、hystrix、grpc、kafka、Opentracing、redis、Reator、circuitbreaker、spring的Scheduled。国内用的比较多的dubbo，sleuth无法对其提供支持。</p>\n<h3 id=\"Sleuth术语\"><a href=\"#Sleuth术语\" class=\"headerlink\" title=\"Sleuth术语\"></a>Sleuth术语</h3><blockquote>\n<p>请求一个微服务系统的API接口，这个API接口需要调用多个微服务单元，调用每个微服务单元都会产生一个新的Span，所有由这个请求产生的Span组成了这个Trace。整个过程使用Annotation(cs、sr、ss、cr)统计各个阶段消耗的时长</p>\n</blockquote>\n<p><img src=\"/typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png\" alt=\"img\"></p>\n<ul>\n<li><p><strong>Span</strong></p>\n<p>Span是基本工作单位。Span还包含了其他的信息，例如摘要、时间戳事件、Span的ID以及进程ID。SpanId用于唯一标识请求链路到达的各个服务组件。</p>\n</li>\n<li><p><strong>Trace</strong></p>\n<p>由一组具有相同TraceId的span组成的树状结构，即一个完整的请求链路</p>\n</li>\n<li><p><strong>Annotation</strong></p>\n<p>记录一个请求的4个事件，用于计算各个环节消耗的时长</p>\n<ul>\n<li><strong>cs</strong> （Client Sent ）：客户端发送一个请求，开始一个请求的生命。</li>\n<li><strong>sr</strong> （Server Received ）：服务端收到请求开始处理，sr - cs &#x3D; 网络延迟（服务调用的时间）</li>\n<li><strong>ss</strong>（Server Sent ）：服务端处理完毕准备发送到客户端，ss - sr &#x3D; 服务器处理请求所用时间</li>\n<li><strong>cr</strong> （Client Received ）：客户端接收到服务端的响应，请求结束，cr - cs &#x3D; 请求的总时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Sleuth-Zipkin-原理\"><a href=\"#Sleuth-Zipkin-原理\" class=\"headerlink\" title=\"Sleuth + Zipkin 原理\"></a>Sleuth + Zipkin 原理</h2><h3 id=\"Sleuth原理简述\"><a href=\"#Sleuth原理简述\" class=\"headerlink\" title=\"Sleuth原理简述\"></a>Sleuth原理简述</h3><p><img src=\"/typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>【AOP拦截器的思想】</p>\n<p>Sleuth创建TraceFilter，对所有的网络请求进行拦截，如果请求的header中没有span信息，则创建Span对象，生成span id、trace id等当前调用链的Trace信息记录到Http Headers中，如果header中有，则直接使用header中的数据创建Span对象，之后将span id、trace id设置到sl4j的MDC中。这样，我们在日志中就能看到span信息。</p>\n</blockquote>\n<p>我们通过日志看到的信息其实只是sleuth收集信息的一小部分，在运行过程中，sleuth还会收集服务调用时间、接收到请求的时间、发起http请求的方法、http请求的路径，包括请求的IP端口等信息，这些信息都会存入Span对象，然后发送到zipkin中。</p>\n<h3 id=\"Zipkin-原理简述\"><a href=\"#Zipkin-原理简述\" class=\"headerlink\" title=\"Zipkin 原理简述\"></a>Zipkin 原理简述</h3><p>Zipkin 是 Twitter 的一个开源项目，它基于Google Dapper实现，它致力于收集服务的定时数据， 以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。</p>\n<p>我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的REST API接口来辅助我 们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系 统性能瓶颈的根源。</p>\n<p>除了面向开发的 API 接口之外，它也提供了方便的UI组件来帮助我们直观的搜索跟踪信息和分析请 求链路明细，比如:可以查询某段时间内各用户请求的处理时间等。</p>\n<p>Zipkin 提供了可插拔数据存储方式:In-Memory、MySql、Cassandra 以及 Elasticsearch</p>\n<p><img src=\"/typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png\" alt=\"image.png\"></p>\n<p>上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成:</p>\n<p><strong>Collector</strong>:收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。</p>\n<p><strong>Storage</strong>:存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中， 我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中。</p>\n<p><strong>RESTful API</strong>:API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接 系统访问以实现监控等。</p>\n<p><strong>Web UI</strong>:UI 组件， 基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分 析跟踪信息。</p>\n<p>Zipkin分为两端，一个是 Zipkin服务端，一个是 Zipkin客户端，客户端也就是微服务的应用。 客户端会 配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监 听，并生成相应的 Trace 和 Span 信息发送给服务端。</p>\n<p><img src=\"/typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png\" alt=\"image.png\"></p>\n<p>【原理】</p>\n<p>1、Sleuth采用Brave（trancer库）追踪采集trace（由一组包含span信息的调用链组成）</p>\n<p>2、将信息通过Zipkin的Collector发送给Zipkin</p>\n<p>3、zipkin拿到信息后，将数据通过Storage持久化到数据库&#x2F;es中</p>\n<p>3、Zipkin通过API提供数据给UI进行可视化展示</p>\n<h2 id=\"Sleuth快速上手\"><a href=\"#Sleuth快速上手\" class=\"headerlink\" title=\"Sleuth快速上手\"></a>Sleuth快速上手</h2><p><strong>1、在需要追踪的微服务上添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、编写配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sleuth:</span> </span><br><span class=\"line\">\t<span class=\"attr\">sampler:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">rate:</span> <span class=\"number\">100</span> <span class=\"comment\"># 指定采样比例，默认10%</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、增加测试接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sentinel/message1&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">message1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      testSentinelMessage3Service.message();</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;这是message1&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;message1&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>调用接口时，输出以下日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-01-01 20:23:39.527  INFO [spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true] 85218 --- [io-18001-exec-1] c.l.s.controller.TestSentinelController  : 这是message1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，日志里出现了[spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true]信息，这个就是由Spring Cloud Sleuth生成，用于跟踪微服务请求链路。</p>\n<p>这些信息包含了4个部分的值，它们的含义如下：</p>\n<p>1、spring-cloud-service 微服务的名称，与<code>spring.application.name</code>对应；<br>2、9d701f5350d96c82 称为<strong>Trace ID</strong>，在一条完整的请求链路中，这个值是固定的。观察上面的日志即可证实这一点；<br>3、9d701f5350d96c82 称为<strong>Span ID</strong>，它表示一个基本的工作单元；<br>4、true表示是否要将该信息输出到Zipkin等服务中来收集和展示</p>\n<h2 id=\"Zipkin客户端集成\"><a href=\"#Zipkin客户端集成\" class=\"headerlink\" title=\"Zipkin客户端集成\"></a>Zipkin客户端集成</h2><p>虽然我们已经可以通过<strong>Trace ID</strong>来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助Zipkin来代替我们完成日志获取与分析。Zipkin是Twitter的一个开源项目。</p>\n<p>ZipKin客户端和Sleuth的集成非常简单，只需要在微服务中添加其依赖和配置即可。</p>\n<h3 id=\"Zipkin服务端安装（Docker方式持久化mysql、ES）\"><a href=\"#Zipkin服务端安装（Docker方式持久化mysql、ES）\" class=\"headerlink\" title=\"Zipkin服务端安装（Docker方式持久化mysql、ES）\"></a>Zipkin服务端安装（Docker方式持久化mysql、ES）</h3><h4 id=\"持久化MySql\"><a href=\"#持久化MySql\" class=\"headerlink\" title=\"持久化MySql\"></a>持久化MySql</h4><p><strong>1、创建数据库</strong></p>\n<p>如zipkin</p>\n<p> <strong>2、建表</strong></p>\n<p>语句参考：<a href=\"https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql&source=article&objectId=2318336\">https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql</a></p>\n<p>或复制以下建表语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Copyright The OpenZipkin Authors</span></span><br><span class=\"line\"><span class=\"comment\">-- SPDX-License-Identifier: Apache-2.0</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> zipkin_spans (</span><br><span class=\"line\">  `trace_id_high` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class=\"line\">  `trace_id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `remote_service_name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  `parent_id` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  `debug` BIT(<span class=\"number\">1</span>),</span><br><span class=\"line\">  `start_ts` <span class=\"type\">BIGINT</span> COMMENT <span class=\"string\">&#x27;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#x27;</span>,</span><br><span class=\"line\">  `duration` <span class=\"type\">BIGINT</span> COMMENT <span class=\"string\">&#x27;Span.duration(): micros used for minDuration and maxDuration query&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`trace_id_high`, `trace_id`, `id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB ROW_FORMAT<span class=\"operator\">=</span>COMPRESSED <span class=\"keyword\">CHARACTER SET</span><span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class=\"string\">&#x27;for getTracesByIds&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`name`) COMMENT <span class=\"string\">&#x27;for getTraces and getSpanNames&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`remote_service_name`) COMMENT <span class=\"string\">&#x27;for getTraces and getRemoteServiceNames&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`start_ts`) COMMENT <span class=\"string\">&#x27;for getTraces ordering and range&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> zipkin_annotations (</span><br><span class=\"line\">  `trace_id_high` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class=\"line\">  `trace_id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;coincides with zipkin_spans.trace_id&#x27;</span>,</span><br><span class=\"line\">  `span_id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;coincides with zipkin_spans.id&#x27;</span>,</span><br><span class=\"line\">  `a_key` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;BinaryAnnotation.key or Annotation.value if type == -1&#x27;</span>,</span><br><span class=\"line\">  `a_value` <span class=\"type\">BLOB</span> COMMENT <span class=\"string\">&#x27;BinaryAnnotation.value(), which must be smaller than 64KB&#x27;</span>,</span><br><span class=\"line\">  `a_type` <span class=\"type\">INT</span> <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;BinaryAnnotation.type() or -1 if Annotation&#x27;</span>,</span><br><span class=\"line\">  `a_timestamp` <span class=\"type\">BIGINT</span> COMMENT <span class=\"string\">&#x27;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#x27;</span>,</span><br><span class=\"line\">  `endpoint_ipv4` <span class=\"type\">INT</span> COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class=\"line\">  `endpoint_ipv6` <span class=\"type\">BINARY</span>(<span class=\"number\">16</span>) COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null, or no IPv6 address&#x27;</span>,</span><br><span class=\"line\">  `endpoint_port` <span class=\"type\">SMALLINT</span> COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class=\"line\">  `endpoint_service_name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB ROW_FORMAT<span class=\"operator\">=</span>COMPRESSED <span class=\"keyword\">CHARACTER SET</span><span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT <span class=\"string\">&#x27;Ignore insert on duplicate&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT <span class=\"string\">&#x27;for joining with zipkin_spans&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class=\"string\">&#x27;for getTraces/ByIds&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`endpoint_service_name`) COMMENT <span class=\"string\">&#x27;for getTraces and getServiceNames&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`a_type`) COMMENT <span class=\"string\">&#x27;for getTraces and autocomplete values&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`a_key`) COMMENT <span class=\"string\">&#x27;for getTraces and autocomplete values&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`trace_id`, `span_id`, `a_key`) COMMENT <span class=\"string\">&#x27;for dependencies job&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> zipkin_dependencies (</span><br><span class=\"line\">  `<span class=\"keyword\">day</span>` <span class=\"type\">DATE</span> <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `parent` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `child` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `call_count` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  `error_count` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`<span class=\"keyword\">day</span>`, `parent`, `child`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB ROW_FORMAT<span class=\"operator\">=</span>COMPRESSED <span class=\"keyword\">CHARACTER SET</span><span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>3、修改启动命令</strong></p>\n<p>Zipkin默认端口9411。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name zipkin-server -d \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-p 9411:9411 \\</span><br><span class=\"line\">-e MYSQL_USER=root \\</span><br><span class=\"line\">-e MYSQL_PASS=123456 \\</span><br><span class=\"line\">-e MYSQL_HOST=127.0.0.1 \\</span><br><span class=\"line\">-e STORAGE_TYPE=mysql \\</span><br><span class=\"line\">-e MYSQL_DB=zipkin \\</span><br><span class=\"line\">-e MYSQL_TCP_PORT=3306 \\</span><br><span class=\"line\">openzipkin/zipkin:2.21.7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"持久化ES\"><a href=\"#持久化ES\" class=\"headerlink\" title=\"持久化ES\"></a>持久化ES</h4><p>若连接ES集群，–ES_HOSTS通过逗号分割，如：–ES_HOSTS&#x3D;[<a href=\"http://192.168.0.1:9200,http://192.168.0.2:9200]\">http://192.168.0.1:9200,http://192.168.0.2:9200]</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name zipkin-server -d \\</span><br><span class=\"line\">-p 9411:9411 \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-e STORAGE_TYPE=elasticsearch \\</span><br><span class=\"line\">-e ES_HOSTS=localhost:9200</span><br><span class=\"line\">openzipkin/zipkin:2.21.7</span><br></pre></td></tr></table></figure>\n\n<p>连接ES参数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">环境变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ES_HOSTS</td>\n<td align=\"left\">连接ES地址，多个由逗号分隔。默认为<a href=\"http://localhost:9200/\">http://localhost:9200</a></td>\n</tr>\n<tr>\n<td align=\"left\">ES_PIPELINE</td>\n<td align=\"left\">指定span被索引之前的pipeline</td>\n</tr>\n<tr>\n<td align=\"left\">ES_TIMEOUT</td>\n<td align=\"left\">连接ES的超时时间，单位ms。默认为10000(10S)</td>\n</tr>\n<tr>\n<td align=\"left\">ES_INDEX</td>\n<td align=\"left\">Zipkin持久化所使用的索引。默认为zipkin</td>\n</tr>\n<tr>\n<td align=\"left\">ES_DATE_SEPARATOR</td>\n<td align=\"left\">Zipkin建立索引的日期分隔符。默认为-</td>\n</tr>\n<tr>\n<td align=\"left\">ES_INDEX_SHARDS</td>\n<td align=\"left\">分片(shard)个数，默认为5个</td>\n</tr>\n<tr>\n<td align=\"left\">ES_INDEX_REPLICAS</td>\n<td align=\"left\">副本(replica)个数，默认为1个</td>\n</tr>\n<tr>\n<td align=\"left\">ES_HTTP_LOGGING</td>\n<td align=\"left\">ES的日志级别，可选值为BASIC, HEADERS, BODY</td>\n</tr>\n<tr>\n<td align=\"left\">ES_USERNAME&#x2F;ES_PASSWORD</td>\n<td align=\"left\">登录ES的用户名和密码</td>\n</tr>\n</tbody></table>\n<p><img src=\"/typora-user-images/image-20240318202804603.png\" alt=\"image-20240318202804603\"></p>\n<h3 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h3><p><strong>1、在需要追踪的微服务上添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、编写配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">zipkin:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">base-url:</span> <span class=\"string\">http://127.0.0.1:9411/</span> <span class=\"comment\">#zipkin server的请求地址 </span></span><br><span class=\"line\">\t\t<span class=\"attr\">discoveryClientEnabled:</span> <span class=\"literal\">false</span> <span class=\"comment\">#让nacos把它当成一个URL，而不要当做服务名 </span></span><br><span class=\"line\">\t<span class=\"attr\">sleuth:</span> </span><br><span class=\"line\">\t\t<span class=\"attr\">sampler:</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">probability:</span> <span class=\"number\">1.0</span> <span class=\"comment\">#采样的百分比 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3、<strong>访问微服务</strong></p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:18003/spring_building/naocs/consumer\">http://127.0.0.1:18003/spring_building/naocs/consumer</a></p>\n</blockquote>\n<p><strong>4、访问zipkin的UI界面，观察效果</strong></p>\n<p><img src=\"/typora-user-images/image-20240412121048381.png\" alt=\"image-20240412121048381\"></p>\n<h2 id=\"应用性能监控：通过-SkyWalking-实施链路追踪\"><a href=\"#应用性能监控：通过-SkyWalking-实施链路追踪\" class=\"headerlink\" title=\"应用性能监控：通过 SkyWalking 实施链路追踪\"></a>应用性能监控：通过 SkyWalking 实施链路追踪</h2><p>我们掌握了基于 Sleuth+Zipkin 对微服务架构实施基于日志的链路追踪，通过 Sleuth 在微服务应用中附加链路数据，再通过 Zipkin 实现链路数据收集与可视化，从而保证开发与运维人员在生产环境了解微服务的执行过程与具体细节，为产品运维提供了有力的保障。</p>\n<p>围绕链路追踪这个话题，介绍另一款著名的链路追踪产品 SkyWalking，掌握 SkyWalking 的使用方法。本讲咱们将介绍三方面内容：</p>\n<h3 id=\"APM-与-SkyWalking\"><a href=\"#APM-与-SkyWalking\" class=\"headerlink\" title=\"APM 与 SkyWalking\"></a>APM 与 SkyWalking</h3><p> Spring Cloud Slueth、Zipkin、阿里鹰眼、大众点评 Cat、SkyWalking，这些产品都有一个共同的名字：APM（Application Performance Management），即应用性能管理系统，SkyWalking 这款 APM 产品，理由很简单，它在简单易用的前提下实现了比 Zipkin 功能更强大的链路追踪、同时拥有更加友好、更详细的监控项，并能自动生成可视化图表。相比 Sleuth+Zipkin 这种不同厂商间混搭组合，SkyWalking 更符合国内软件业的“一站式解决方案”的设计理念。</p>\n<p>SkyWalking 是中国人吴晟（华为）开源的应用性能管理系统（APM）工具，使用Java语言开发，后来吴晟将其贡献给 Apache，在 Apache 的背书下 SkyWalking 发展迅速，现在已属于 Apache 旗下顶级开源项目，它的官网：<a href=\"http://skywalking.apache.org/%E3%80%82\">http://skywalking.apache.org/。</a></p>\n<p><img src=\"/typora-user-images/image-20240415090937231.png\" alt=\"image-20240415090937231\"></p>\n<p>SkyWalking 提供了分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。目前在 GitHub 上 SkyWaking 拥有 23.3K Star，最新版本为：9.7.0</p>\n<p><strong>链路追踪视图</strong></p>\n<p><strong>指标监控全局视图</strong></p>\n<h3 id=\"Sleuth-Zipkin-与-SkyWalking-对比\"><a href=\"#Sleuth-Zipkin-与-SkyWalking-对比\" class=\"headerlink\" title=\"Sleuth+Zipkin 与 SkyWalking 对比\"></a>Sleuth+Zipkin 与 SkyWalking 对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Sleuth+Zipkin</th>\n<th>SkyWalking</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>链路追踪可视化</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>聚合报表</td>\n<td>很少</td>\n<td>丰富</td>\n</tr>\n<tr>\n<td>服务依赖图</td>\n<td>简单依赖图展示</td>\n<td>形象直观</td>\n</tr>\n<tr>\n<td>监控埋点方式</td>\n<td>侵入式，需要修改源码</td>\n<td>无侵入，采用Java Agent字节码增强</td>\n</tr>\n<tr>\n<td>Java VM指标监控</td>\n<td>不具备</td>\n<td>具备</td>\n</tr>\n<tr>\n<td>支持报警</td>\n<td>不支持</td>\n<td>有，可以自定义报警方式</td>\n</tr>\n<tr>\n<td>存储机制</td>\n<td>内存、MySQL,ES…</td>\n<td>ES、Mysql、H2…</td>\n</tr>\n<tr>\n<td>文档支持</td>\n<td>文档丰富，国外主流</td>\n<td>Apache支持，国内文档更新滞后</td>\n</tr>\n<tr>\n<td>国内案例</td>\n<td>京东、阿里定制不开源…</td>\n<td>华为、小米、微众银行…</td>\n</tr>\n</tbody></table>\n<p>通过比较我们可以发现，在易用性和使用体验上，SkyWalking 明显好于 Zipkin，功能更丰富的同时也更符合国人习惯，但因为迭代速度较快，社区文档相对陈旧，这也导致很多技术问题需要程序员自己研究解决，因此在解决问题方面需要更多的时间。</p>\n<h3 id=\"部署-SkyWalking-服务端\"><a href=\"#部署-SkyWalking-服务端\" class=\"headerlink\" title=\"部署 SkyWalking 服务端\"></a>部署 SkyWalking 服务端</h3><p>skyWalkIng 架构图</p>\n<p><img src=\"/typora-user-images/image-20240415091018922.png\" alt=\"image-20240415091018922\"></p>\n<p>SkyWalking 同样采用客户端与服务端架构模式，SkyWalking 服务端用于接收来自 Java Agent 客户端发来的链路跟踪与指标数据，汇总统计后由 SkyWalking UI 负责展现。SkyWalking 服务端同时支持 gRPC 与 HTTP 两种上报方式。其中 gRPC 默认监听服务器 11800 端口，HTTP 默认监听 12800 端口，而 SKyWalking UI 应用则默认监听 8080 端口，这三个端口在生产环境下要在防火墙做放行配置。在存储层面，SkyWalking 底层支持 ElasticSearch 、MySQL、H2等多种数据源，官方优先推荐使用 ElasticSearch </p>\n<p>本初采用Docker的安装方式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:7.17.6</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">discovery.type=single-node</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/opt/data/dockerData/skywalking/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class=\"line\">    <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">      <span class=\"attr\">memlock:</span></span><br><span class=\"line\">        <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"attr\">oap:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.io/apache/skywalking-oap-server:9.4.0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">oap</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">11800</span><span class=\"string\">:11800</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">12800</span><span class=\"string\">:12800</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">SW_CORE_RECORD_DATA_TTL:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">SW_CORE_METRICS_DATA_TTL:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">SW_STORAGE:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">      <span class=\"attr\">SW_STORAGE_ES_CLUSTER_NODES:</span> <span class=\"string\">elasticsearch:9200</span></span><br><span class=\"line\">      <span class=\"attr\">SW_ENABLE_UPDATE_UI_TEMPLATE:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">JAVA_OPTS:</span> <span class=\"string\">&quot;-Xms2048m -Xmx2048m&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">ui:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.io/apache/skywalking-ui:9.4.0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">ui</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">oap</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">oap</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">SW_OAP_ADDRESS:</span> <span class=\"string\">http://oap:12800</span></span><br><span class=\"line\">      <span class=\"attr\">SW_ZIPKIN_ADDRESS:</span> <span class=\"string\">http://oap:9412</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>启动后会产生两个 Java 进程：</p>\n<ul>\n<li>Skywalking-Collector 是数据收集服务，默认监听 11800（gRPC）与 12800（HTTP） 端口。</li>\n<li>Skywalking-Webapp 是 SkyWalking UI，用于展示数据，默认监听 8080 端口,上面显示的为8038。</li>\n</ul>\n<p>Skywalking 应用已启动</p>\n<p>启动成功后，访问[<a href=\"http://127.0.0.1:8088/]%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%9C%8B%E5%88%B0\">http://127.0.0.1:8088/]，如果看到</a> SkyWalking UI 首页，则说明服务端配置成功。</p>\n<p><img src=\"/typora-user-images/image-20240416113821316.png\" alt=\"image-20240416113821316\"></p>\n<h3 id=\"安装-SkyWalking-Java-Agent\"><a href=\"#安装-SkyWalking-Java-Agent\" class=\"headerlink\" title=\"安装 SkyWalking Java Agent\"></a>安装 SkyWalking Java Agent</h3><p>在前面提到，SkyWalking 可以在不修改应用源码的前提下，无侵入的实现链路追踪与 JVM 指标监控，它是怎么做到的？这里涉及一个 Java1.5 新增的特性，Java Agent 探针技术，想必对于很多工作多年 Java 工程师来说，Java Agent 也是一个陌生的东西。</p>\n<p>Java Agent 探针说白了就是 Java 提供的一种“外挂”技术，允许在应用开发的时候在通过启动时增加 javaagent 参数来外挂一些额外的程序。</p>\n<p>Java Agent ，其扩展类有这严格的规范，必须创建名为 premain 的方法，该方法将在目标应用 main 方法前执行，下面就是最简单的 Java Agent 扩展类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========开始执行premain============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要完成 Java Agent，还需要提供正确的 MANIFEST.MF，以便 JVM 能够选择正确的类。在 META-INF 目录下找到你的 MANIFEST.MF 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: com.lison.agent.SimpleAgent</span><br></pre></td></tr></table></figure>\n\n\n\n<p>之后我们将这个类打包为 agent.jar，假设原始应用为 test-agent.jar，在 test-agent.jar 启动时需要在额外附加 javaagent 参数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:agent.jar -jar test-agent.jar</span><br></pre></td></tr></table></figure>\n\n<p>在应用启动时 Java 控制台会输出如下日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=========开始执行 premain============</span><br><span class=\"line\">正在启动 Agent测试服务...</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SkyWalking 也是利用 Java Agent 的特性，在 premain 中通过字节码增强技术对目标方法进行扩展，当目标方法执行时自动收集链路追踪及监控数据并发往 SkyWalking 服务端。</p>\n<p>SkyWalking Java Agent，我们还是以实例进行讲解，因为 Java Agent 是无侵入的，并不需要源码，这里我就直接给出调用关系图帮助咱们理解。</p>\n<p><img src=\"/typora-user-images/image-20240415094839642.png\" alt=\"image-20240415094839642\"></p>\n<p>调用关系图</p>\n<p>简单介绍下，用户访问 a 服务的 a 接口，a 服务通过 OpenFeign 远程调用 b 服务的 b 接口，b 服务通过 OpenFeign 调用 c 服务的 c 接口，最后 c 接口通过 JDBC 将业务数据存储到 MySQL 数据库</p>\n<h4 id=\"集成skywalking\"><a href=\"#集成skywalking\" class=\"headerlink\" title=\"集成skywalking\"></a>集成skywalking</h4><p><strong>1、下载解压 agent</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：agent版本和oap版本需要适配，版本不适配可能会出现页面无法访问、agent上报不到页面等问题。</span><br></pre></td></tr></table></figure>\n\n<p><strong>下载地址</strong>： <a href=\"https://skywalking.apache.org/downloads/\">https://skywalking.apache.org/downloads/</a></p>\n<p><strong>作者用的skywalking版本为9.4.0，下载v9.1.0版本的client没有问题，亲测可用。</strong></p>\n<p><img src=\"/typora-user-images/image-20240416114024941.png\" alt=\"image-20240416114024941\"></p>\n<p>需要配置skywalking-agent文件夹下，config&#x2F;agent.config配置文件，列出最关键的两个配置，其他配置大家可以自行探索。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agent.service_name=$&#123;SW_AGENT_NAME:HS&#125;</span><br><span class=\"line\">collector.backend_service=$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.54.53:11800&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>2、日志对接</strong></p>\n<p>在skywalking的UI端有一个日志的模块，用于收集客户端的日志，默认是没有数据的，那么需要如何将日志数据传输到skywalking中呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--打印skywalking的TraceId到日志--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.skywalking&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;apm-toolkit-logback-1.x&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;9.1.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.skywalking&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;apm-toolkit-trace&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;9.1.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建一个logback-spring.xml放在resource目录下，配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">debug</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">scan</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springProperty</span> <span class=\"attr\">scop</span>=<span class=\"string\">&quot;context&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring.application.name&quot;</span> <span class=\"attr\">source</span>=<span class=\"string\">&quot;spring.application.name&quot;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;log.path&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;logs/$&#123;spring.application.name&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;clr&quot;</span> <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;wex&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;wEx&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Console log output --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;console&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Log file debug output --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;debug&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;log.path&#125;/debug.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM, aux&#125;/debug.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>50MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Log file error output --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>50MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;stdout&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%tid] [%thread] %-5level %logger&#123;36&#125; -%msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;grpc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;tid&#125;] [%thread] %-5level %logger&#123;36&#125; -%msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--nacos 心跳 INFO 屏蔽--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.alibaba.nacos&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;OFF&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;error&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- &lt;appender-ref ref=&quot;console&quot;/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;debug&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;error&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;stdout&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;grpc&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、代码中添加日志</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/fegin/test&quot;)</span><br><span class=\"line\">  public String feginTest() &#123;</span><br><span class=\"line\">      iTestService.getServerPort();</span><br><span class=\"line\">      log.info(&quot;这是message1&quot;);</span><br><span class=\"line\">      return &quot;message1&quot;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用探针方式启动\"><a href=\"#使用探针方式启动\" class=\"headerlink\" title=\"使用探针方式启动\"></a>使用探针方式启动</h4><p><strong>（1）使用idea启动</strong></p>\n<p> 配置VM options</p>\n<p><img src=\"/typora-user-images/image-20240416114808884.png\" alt=\"image-20240416114808884\"></p>\n<p>javaagent配置的参数即skywalking-agent的绝对路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dskywalking.agent.service_name=&quot;spring-cloud-service&quot;</span><br><span class=\"line\">-Dskywalking.collector.backend_service=&quot;opaip:11800&quot;</span><br><span class=\"line\">-javaagent:/Users/lison/work/workspace/project/skywalking-agent/skywalking-agent.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>日志：</p>\n<p><img src=\"/typora-user-images/image-20240416114924463.png\" alt=\"image-20240416114924463\"></p>\n<p><img src=\"/typora-user-images/image-20240416120116317.png\" alt=\"image-20240416120116317\"></p>\n<p>除此之外，链路追踪的展示也非常强大，服务间的 API 调用关系与执行时间、调用状态清晰列出，而且因为 SkyWalking 是方法层面上的扩展，会提供更加详细的方法间的调用过程</p>\n<p><img src=\"/typora-user-images/image-20240417091316659.png\" alt=\"image-20240417091316659\"></p>\n<p>提供不同维度的视图</p>\n<p><img src=\"/typora-user-images/image-20240417092003988.png\" alt=\"image-20240417092003988\"></p>\n<p><strong>服务监控JVM</strong></p>\n<p><img src=\"/typora-user-images/image-20240417092118543.png\" alt=\"image-20240417092118543\"></p>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.4.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-06-Sleuth链路追踪\"><a href=\"#Spring-Cloud-Alibaba-06-Sleuth链路追踪\" class=\"headerlink\" title=\"Spring Cloud Alibaba-06-Sleuth链路追踪\"></a>Spring Cloud Alibaba-06-Sleuth链路追踪</h1><p>[toc]</p>\n<h2 id=\"为什么使用链路追踪\"><a href=\"#为什么使用链路追踪\" class=\"headerlink\" title=\"为什么使用链路追踪\"></a>为什么使用链路追踪</h2><p>随着业务发展，微服务的数量也会越来越多，某个服务出现问题，问题很难排查</p>\n<blockquote>\n<p>【问题】</p>\n<p>1、链路梳理难：无法清晰地看到整个调用链路</p>\n<p>2、故障难定位：无法快速定位到故障点、无法快速定位哪个环节比较费时</p>\n</blockquote>\n<p><img src=\"/typora-user-images/fe3e2f4ebbbc4a28b707459e2e9fa511.png\" alt=\"img\"></p>\n<p>因此，我们需要链路追踪来梳理链路调用，方便快速定位问题。分布式链路追踪(Distributed Tracing)，就是将一次分布式请求还原成调用链路，进行日志记 录，性能监控并将一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪 台机器上、每个服务节点的请求状态等等</p>\n<h2 id=\"常见链路追踪解决方案\"><a href=\"#常见链路追踪解决方案\" class=\"headerlink\" title=\"常见链路追踪解决方案\"></a>常见链路追踪解决方案</h2><blockquote>\n<p>常见的有如下几种解决方案，本文讲解跟SpringCloud相关的Sleuth + Zipkin</p>\n</blockquote>\n<p><strong>【Zipkin】</strong></p>\n<p>Twitter开源的调用链分析工具，目前基于springcloud sleuth得到了广泛的使用，特点是轻量，使用部署简单</p>\n<p><strong>【Pinpoint】</strong></p>\n<p>韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，U功能强大，接入端无代码侵入。</p>\n<p><strong>【SkyWalking】</strong></p>\n<p>本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。</p>\n<p><strong>【CAT】</strong></p>\n<p>是大众点评开源的基于编码和配置的调用链分析，应用监控分析，日志采集，监控报警等一系列的监控平台工具。</p>\n<h2 id=\"Sleuth概述\"><a href=\"#Sleuth概述\" class=\"headerlink\" title=\"Sleuth概述\"></a>Sleuth概述</h2><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><blockquote>\n<p>sleuth是一个链路追踪工具，通过它在日志中打印的信息可以分析出一个服务的调用链条，也可以得出链条中每个服务的耗时，这为我们在实际生产中，分析超时服务，分析服务调用关系，做服务治理提供帮助。</p>\n</blockquote>\n<p>sleuth目前并不是对所有调用访问都可以做链路追踪，它目前支持的有：rxjava、feign、quartz、RestTemplate、zuul、hystrix、grpc、kafka、Opentracing、redis、Reator、circuitbreaker、spring的Scheduled。国内用的比较多的dubbo，sleuth无法对其提供支持。</p>\n<h3 id=\"Sleuth术语\"><a href=\"#Sleuth术语\" class=\"headerlink\" title=\"Sleuth术语\"></a>Sleuth术语</h3><blockquote>\n<p>请求一个微服务系统的API接口，这个API接口需要调用多个微服务单元，调用每个微服务单元都会产生一个新的Span，所有由这个请求产生的Span组成了这个Trace。整个过程使用Annotation(cs、sr、ss、cr)统计各个阶段消耗的时长</p>\n</blockquote>\n<p><img src=\"/typora-user-images/u=3986274733,3849268543&fm=253&fmt=auto&app=138&f=PNG.png\" alt=\"img\"></p>\n<ul>\n<li><p><strong>Span</strong></p>\n<p>Span是基本工作单位。Span还包含了其他的信息，例如摘要、时间戳事件、Span的ID以及进程ID。SpanId用于唯一标识请求链路到达的各个服务组件。</p>\n</li>\n<li><p><strong>Trace</strong></p>\n<p>由一组具有相同TraceId的span组成的树状结构，即一个完整的请求链路</p>\n</li>\n<li><p><strong>Annotation</strong></p>\n<p>记录一个请求的4个事件，用于计算各个环节消耗的时长</p>\n<ul>\n<li><strong>cs</strong> （Client Sent ）：客户端发送一个请求，开始一个请求的生命。</li>\n<li><strong>sr</strong> （Server Received ）：服务端收到请求开始处理，sr - cs &#x3D; 网络延迟（服务调用的时间）</li>\n<li><strong>ss</strong>（Server Sent ）：服务端处理完毕准备发送到客户端，ss - sr &#x3D; 服务器处理请求所用时间</li>\n<li><strong>cr</strong> （Client Received ）：客户端接收到服务端的响应，请求结束，cr - cs &#x3D; 请求的总时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Sleuth-Zipkin-原理\"><a href=\"#Sleuth-Zipkin-原理\" class=\"headerlink\" title=\"Sleuth + Zipkin 原理\"></a>Sleuth + Zipkin 原理</h2><h3 id=\"Sleuth原理简述\"><a href=\"#Sleuth原理简述\" class=\"headerlink\" title=\"Sleuth原理简述\"></a>Sleuth原理简述</h3><p><img src=\"/typora-user-images/20220315-2c2a053e-ddb6-4656-bc61-9a94d8b14598.png\" alt=\"image.png\"></p>\n<blockquote>\n<p>【AOP拦截器的思想】</p>\n<p>Sleuth创建TraceFilter，对所有的网络请求进行拦截，如果请求的header中没有span信息，则创建Span对象，生成span id、trace id等当前调用链的Trace信息记录到Http Headers中，如果header中有，则直接使用header中的数据创建Span对象，之后将span id、trace id设置到sl4j的MDC中。这样，我们在日志中就能看到span信息。</p>\n</blockquote>\n<p>我们通过日志看到的信息其实只是sleuth收集信息的一小部分，在运行过程中，sleuth还会收集服务调用时间、接收到请求的时间、发起http请求的方法、http请求的路径，包括请求的IP端口等信息，这些信息都会存入Span对象，然后发送到zipkin中。</p>\n<h3 id=\"Zipkin-原理简述\"><a href=\"#Zipkin-原理简述\" class=\"headerlink\" title=\"Zipkin 原理简述\"></a>Zipkin 原理简述</h3><p>Zipkin 是 Twitter 的一个开源项目，它基于Google Dapper实现，它致力于收集服务的定时数据， 以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。</p>\n<p>我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的REST API接口来辅助我 们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系 统性能瓶颈的根源。</p>\n<p>除了面向开发的 API 接口之外，它也提供了方便的UI组件来帮助我们直观的搜索跟踪信息和分析请 求链路明细，比如:可以查询某段时间内各用户请求的处理时间等。</p>\n<p>Zipkin 提供了可插拔数据存储方式:In-Memory、MySql、Cassandra 以及 Elasticsearch</p>\n<p><img src=\"/typora-user-images/20220314-b46efe3c-5ede-471f-a116-ce05fcccd7c6.png\" alt=\"image.png\"></p>\n<p>上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成:</p>\n<p><strong>Collector</strong>:收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。</p>\n<p><strong>Storage</strong>:存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中， 我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中。</p>\n<p><strong>RESTful API</strong>:API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接 系统访问以实现监控等。</p>\n<p><strong>Web UI</strong>:UI 组件， 基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分 析跟踪信息。</p>\n<p>Zipkin分为两端，一个是 Zipkin服务端，一个是 Zipkin客户端，客户端也就是微服务的应用。 客户端会 配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监 听，并生成相应的 Trace 和 Span 信息发送给服务端。</p>\n<p><img src=\"/typora-user-images/20220315-917e43b8-7523-4f2f-804c-49855963dbb5.png\" alt=\"image.png\"></p>\n<p>【原理】</p>\n<p>1、Sleuth采用Brave（trancer库）追踪采集trace（由一组包含span信息的调用链组成）</p>\n<p>2、将信息通过Zipkin的Collector发送给Zipkin</p>\n<p>3、zipkin拿到信息后，将数据通过Storage持久化到数据库&#x2F;es中</p>\n<p>3、Zipkin通过API提供数据给UI进行可视化展示</p>\n<h2 id=\"Sleuth快速上手\"><a href=\"#Sleuth快速上手\" class=\"headerlink\" title=\"Sleuth快速上手\"></a>Sleuth快速上手</h2><p><strong>1、在需要追踪的微服务上添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>2、编写配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sleuth:</span> </span><br><span class=\"line\">\t<span class=\"attr\">sampler:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">rate:</span> <span class=\"number\">100</span> <span class=\"comment\"># 指定采样比例，默认10%</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、增加测试接口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sentinel/message1&quot;)</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> String <span class=\"title function_\">message1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      testSentinelMessage3Service.message();</span><br><span class=\"line\">      log.info(<span class=\"string\">&quot;这是message1&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;message1&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>调用接口时，输出以下日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-01-01 20:23:39.527  INFO [spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true] 85218 --- [io-18001-exec-1] c.l.s.controller.TestSentinelController  : 这是message1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，日志里出现了[spring-cloud-service,9d701f5350d96c82,9d701f5350d96c82,true]信息，这个就是由Spring Cloud Sleuth生成，用于跟踪微服务请求链路。</p>\n<p>这些信息包含了4个部分的值，它们的含义如下：</p>\n<p>1、spring-cloud-service 微服务的名称，与<code>spring.application.name</code>对应；<br>2、9d701f5350d96c82 称为<strong>Trace ID</strong>，在一条完整的请求链路中，这个值是固定的。观察上面的日志即可证实这一点；<br>3、9d701f5350d96c82 称为<strong>Span ID</strong>，它表示一个基本的工作单元；<br>4、true表示是否要将该信息输出到Zipkin等服务中来收集和展示</p>\n<h2 id=\"Zipkin客户端集成\"><a href=\"#Zipkin客户端集成\" class=\"headerlink\" title=\"Zipkin客户端集成\"></a>Zipkin客户端集成</h2><p>虽然我们已经可以通过<strong>Trace ID</strong>来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助Zipkin来代替我们完成日志获取与分析。Zipkin是Twitter的一个开源项目。</p>\n<p>ZipKin客户端和Sleuth的集成非常简单，只需要在微服务中添加其依赖和配置即可。</p>\n<h3 id=\"Zipkin服务端安装（Docker方式持久化mysql、ES）\"><a href=\"#Zipkin服务端安装（Docker方式持久化mysql、ES）\" class=\"headerlink\" title=\"Zipkin服务端安装（Docker方式持久化mysql、ES）\"></a>Zipkin服务端安装（Docker方式持久化mysql、ES）</h3><h4 id=\"持久化MySql\"><a href=\"#持久化MySql\" class=\"headerlink\" title=\"持久化MySql\"></a>持久化MySql</h4><p><strong>1、创建数据库</strong></p>\n<p>如zipkin</p>\n<p> <strong>2、建表</strong></p>\n<p>语句参考：<a href=\"https://cloud.tencent.com/developer/tools/blog-entry?target=https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql&source=article&objectId=2318336\">https://github.com/openzipkin/zipkin/blob/master/zipkin-storage/mysql-v1/src/main/resources/mysql.sql</a></p>\n<p>或复制以下建表语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Copyright The OpenZipkin Authors</span></span><br><span class=\"line\"><span class=\"comment\">-- SPDX-License-Identifier: Apache-2.0</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> zipkin_spans (</span><br><span class=\"line\">  `trace_id_high` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class=\"line\">  `trace_id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `remote_service_name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  `parent_id` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  `debug` BIT(<span class=\"number\">1</span>),</span><br><span class=\"line\">  `start_ts` <span class=\"type\">BIGINT</span> COMMENT <span class=\"string\">&#x27;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#x27;</span>,</span><br><span class=\"line\">  `duration` <span class=\"type\">BIGINT</span> COMMENT <span class=\"string\">&#x27;Span.duration(): micros used for minDuration and maxDuration query&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`trace_id_high`, `trace_id`, `id`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB ROW_FORMAT<span class=\"operator\">=</span>COMPRESSED <span class=\"keyword\">CHARACTER SET</span><span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class=\"string\">&#x27;for getTracesByIds&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`name`) COMMENT <span class=\"string\">&#x27;for getTraces and getSpanNames&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`remote_service_name`) COMMENT <span class=\"string\">&#x27;for getTraces and getRemoteServiceNames&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_spans <span class=\"keyword\">ADD</span> INDEX(`start_ts`) COMMENT <span class=\"string\">&#x27;for getTraces ordering and range&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> zipkin_annotations (</span><br><span class=\"line\">  `trace_id_high` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,</span><br><span class=\"line\">  `trace_id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;coincides with zipkin_spans.trace_id&#x27;</span>,</span><br><span class=\"line\">  `span_id` <span class=\"type\">BIGINT</span> <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;coincides with zipkin_spans.id&#x27;</span>,</span><br><span class=\"line\">  `a_key` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;BinaryAnnotation.key or Annotation.value if type == -1&#x27;</span>,</span><br><span class=\"line\">  `a_value` <span class=\"type\">BLOB</span> COMMENT <span class=\"string\">&#x27;BinaryAnnotation.value(), which must be smaller than 64KB&#x27;</span>,</span><br><span class=\"line\">  `a_type` <span class=\"type\">INT</span> <span class=\"keyword\">NOT NULL</span> COMMENT <span class=\"string\">&#x27;BinaryAnnotation.type() or -1 if Annotation&#x27;</span>,</span><br><span class=\"line\">  `a_timestamp` <span class=\"type\">BIGINT</span> COMMENT <span class=\"string\">&#x27;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#x27;</span>,</span><br><span class=\"line\">  `endpoint_ipv4` <span class=\"type\">INT</span> COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class=\"line\">  `endpoint_ipv6` <span class=\"type\">BINARY</span>(<span class=\"number\">16</span>) COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null, or no IPv6 address&#x27;</span>,</span><br><span class=\"line\">  `endpoint_port` <span class=\"type\">SMALLINT</span> COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,</span><br><span class=\"line\">  `endpoint_service_name` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) COMMENT <span class=\"string\">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span></span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB ROW_FORMAT<span class=\"operator\">=</span>COMPRESSED <span class=\"keyword\">CHARACTER SET</span><span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT <span class=\"string\">&#x27;Ignore insert on duplicate&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT <span class=\"string\">&#x27;for joining with zipkin_spans&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class=\"string\">&#x27;for getTraces/ByIds&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`endpoint_service_name`) COMMENT <span class=\"string\">&#x27;for getTraces and getServiceNames&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`a_type`) COMMENT <span class=\"string\">&#x27;for getTraces and autocomplete values&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`a_key`) COMMENT <span class=\"string\">&#x27;for getTraces and autocomplete values&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">ALTER TABLE</span> zipkin_annotations <span class=\"keyword\">ADD</span> INDEX(`trace_id`, `span_id`, `a_key`) COMMENT <span class=\"string\">&#x27;for dependencies job&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> zipkin_dependencies (</span><br><span class=\"line\">  `<span class=\"keyword\">day</span>` <span class=\"type\">DATE</span> <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `parent` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `child` <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">  `call_count` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  `error_count` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY KEY</span> (`<span class=\"keyword\">day</span>`, `parent`, `child`)</span><br><span class=\"line\">) ENGINE<span class=\"operator\">=</span>InnoDB ROW_FORMAT<span class=\"operator\">=</span>COMPRESSED <span class=\"keyword\">CHARACTER SET</span><span class=\"operator\">=</span>utf8 <span class=\"keyword\">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p><strong>3、修改启动命令</strong></p>\n<p>Zipkin默认端口9411。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name zipkin-server -d \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-p 9411:9411 \\</span><br><span class=\"line\">-e MYSQL_USER=root \\</span><br><span class=\"line\">-e MYSQL_PASS=123456 \\</span><br><span class=\"line\">-e MYSQL_HOST=127.0.0.1 \\</span><br><span class=\"line\">-e STORAGE_TYPE=mysql \\</span><br><span class=\"line\">-e MYSQL_DB=zipkin \\</span><br><span class=\"line\">-e MYSQL_TCP_PORT=3306 \\</span><br><span class=\"line\">openzipkin/zipkin:2.21.7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"持久化ES\"><a href=\"#持久化ES\" class=\"headerlink\" title=\"持久化ES\"></a>持久化ES</h4><p>若连接ES集群，–ES_HOSTS通过逗号分割，如：–ES_HOSTS&#x3D;[<a href=\"http://192.168.0.1:9200,http://192.168.0.2:9200]\">http://192.168.0.1:9200,http://192.168.0.2:9200]</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name zipkin-server -d \\</span><br><span class=\"line\">-p 9411:9411 \\</span><br><span class=\"line\">--restart=always \\</span><br><span class=\"line\">-e STORAGE_TYPE=elasticsearch \\</span><br><span class=\"line\">-e ES_HOSTS=localhost:9200</span><br><span class=\"line\">openzipkin/zipkin:2.21.7</span><br></pre></td></tr></table></figure>\n\n<p>连接ES参数</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">环境变量</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ES_HOSTS</td>\n<td align=\"left\">连接ES地址，多个由逗号分隔。默认为<a href=\"http://localhost:9200/\">http://localhost:9200</a></td>\n</tr>\n<tr>\n<td align=\"left\">ES_PIPELINE</td>\n<td align=\"left\">指定span被索引之前的pipeline</td>\n</tr>\n<tr>\n<td align=\"left\">ES_TIMEOUT</td>\n<td align=\"left\">连接ES的超时时间，单位ms。默认为10000(10S)</td>\n</tr>\n<tr>\n<td align=\"left\">ES_INDEX</td>\n<td align=\"left\">Zipkin持久化所使用的索引。默认为zipkin</td>\n</tr>\n<tr>\n<td align=\"left\">ES_DATE_SEPARATOR</td>\n<td align=\"left\">Zipkin建立索引的日期分隔符。默认为-</td>\n</tr>\n<tr>\n<td align=\"left\">ES_INDEX_SHARDS</td>\n<td align=\"left\">分片(shard)个数，默认为5个</td>\n</tr>\n<tr>\n<td align=\"left\">ES_INDEX_REPLICAS</td>\n<td align=\"left\">副本(replica)个数，默认为1个</td>\n</tr>\n<tr>\n<td align=\"left\">ES_HTTP_LOGGING</td>\n<td align=\"left\">ES的日志级别，可选值为BASIC, HEADERS, BODY</td>\n</tr>\n<tr>\n<td align=\"left\">ES_USERNAME&#x2F;ES_PASSWORD</td>\n<td align=\"left\">登录ES的用户名和密码</td>\n</tr>\n</tbody></table>\n<p><img src=\"/typora-user-images/image-20240318202804603.png\" alt=\"image-20240318202804603\"></p>\n<h3 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h3><p><strong>1、在需要追踪的微服务上添加依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、编写配置</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">zipkin:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">base-url:</span> <span class=\"string\">http://127.0.0.1:9411/</span> <span class=\"comment\">#zipkin server的请求地址 </span></span><br><span class=\"line\">\t\t<span class=\"attr\">discoveryClientEnabled:</span> <span class=\"literal\">false</span> <span class=\"comment\">#让nacos把它当成一个URL，而不要当做服务名 </span></span><br><span class=\"line\">\t<span class=\"attr\">sleuth:</span> </span><br><span class=\"line\">\t\t<span class=\"attr\">sampler:</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">probability:</span> <span class=\"number\">1.0</span> <span class=\"comment\">#采样的百分比 </span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>3、<strong>访问微服务</strong></p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:18003/spring_building/naocs/consumer\">http://127.0.0.1:18003/spring_building/naocs/consumer</a></p>\n</blockquote>\n<p><strong>4、访问zipkin的UI界面，观察效果</strong></p>\n<p><img src=\"/typora-user-images/image-20240412121048381.png\" alt=\"image-20240412121048381\"></p>\n<h2 id=\"应用性能监控：通过-SkyWalking-实施链路追踪\"><a href=\"#应用性能监控：通过-SkyWalking-实施链路追踪\" class=\"headerlink\" title=\"应用性能监控：通过 SkyWalking 实施链路追踪\"></a>应用性能监控：通过 SkyWalking 实施链路追踪</h2><p>我们掌握了基于 Sleuth+Zipkin 对微服务架构实施基于日志的链路追踪，通过 Sleuth 在微服务应用中附加链路数据，再通过 Zipkin 实现链路数据收集与可视化，从而保证开发与运维人员在生产环境了解微服务的执行过程与具体细节，为产品运维提供了有力的保障。</p>\n<p>围绕链路追踪这个话题，介绍另一款著名的链路追踪产品 SkyWalking，掌握 SkyWalking 的使用方法。本讲咱们将介绍三方面内容：</p>\n<h3 id=\"APM-与-SkyWalking\"><a href=\"#APM-与-SkyWalking\" class=\"headerlink\" title=\"APM 与 SkyWalking\"></a>APM 与 SkyWalking</h3><p> Spring Cloud Slueth、Zipkin、阿里鹰眼、大众点评 Cat、SkyWalking，这些产品都有一个共同的名字：APM（Application Performance Management），即应用性能管理系统，SkyWalking 这款 APM 产品，理由很简单，它在简单易用的前提下实现了比 Zipkin 功能更强大的链路追踪、同时拥有更加友好、更详细的监控项，并能自动生成可视化图表。相比 Sleuth+Zipkin 这种不同厂商间混搭组合，SkyWalking 更符合国内软件业的“一站式解决方案”的设计理念。</p>\n<p>SkyWalking 是中国人吴晟（华为）开源的应用性能管理系统（APM）工具，使用Java语言开发，后来吴晟将其贡献给 Apache，在 Apache 的背书下 SkyWalking 发展迅速，现在已属于 Apache 旗下顶级开源项目，它的官网：<a href=\"http://skywalking.apache.org/%E3%80%82\">http://skywalking.apache.org/。</a></p>\n<p><img src=\"/typora-user-images/image-20240415090937231.png\" alt=\"image-20240415090937231\"></p>\n<p>SkyWalking 提供了分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。目前在 GitHub 上 SkyWaking 拥有 23.3K Star，最新版本为：9.7.0</p>\n<p><strong>链路追踪视图</strong></p>\n<p><strong>指标监控全局视图</strong></p>\n<h3 id=\"Sleuth-Zipkin-与-SkyWalking-对比\"><a href=\"#Sleuth-Zipkin-与-SkyWalking-对比\" class=\"headerlink\" title=\"Sleuth+Zipkin 与 SkyWalking 对比\"></a>Sleuth+Zipkin 与 SkyWalking 对比</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>Sleuth+Zipkin</th>\n<th>SkyWalking</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>链路追踪可视化</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>聚合报表</td>\n<td>很少</td>\n<td>丰富</td>\n</tr>\n<tr>\n<td>服务依赖图</td>\n<td>简单依赖图展示</td>\n<td>形象直观</td>\n</tr>\n<tr>\n<td>监控埋点方式</td>\n<td>侵入式，需要修改源码</td>\n<td>无侵入，采用Java Agent字节码增强</td>\n</tr>\n<tr>\n<td>Java VM指标监控</td>\n<td>不具备</td>\n<td>具备</td>\n</tr>\n<tr>\n<td>支持报警</td>\n<td>不支持</td>\n<td>有，可以自定义报警方式</td>\n</tr>\n<tr>\n<td>存储机制</td>\n<td>内存、MySQL,ES…</td>\n<td>ES、Mysql、H2…</td>\n</tr>\n<tr>\n<td>文档支持</td>\n<td>文档丰富，国外主流</td>\n<td>Apache支持，国内文档更新滞后</td>\n</tr>\n<tr>\n<td>国内案例</td>\n<td>京东、阿里定制不开源…</td>\n<td>华为、小米、微众银行…</td>\n</tr>\n</tbody></table>\n<p>通过比较我们可以发现，在易用性和使用体验上，SkyWalking 明显好于 Zipkin，功能更丰富的同时也更符合国人习惯，但因为迭代速度较快，社区文档相对陈旧，这也导致很多技术问题需要程序员自己研究解决，因此在解决问题方面需要更多的时间。</p>\n<h3 id=\"部署-SkyWalking-服务端\"><a href=\"#部署-SkyWalking-服务端\" class=\"headerlink\" title=\"部署 SkyWalking 服务端\"></a>部署 SkyWalking 服务端</h3><p>skyWalkIng 架构图</p>\n<p><img src=\"/typora-user-images/image-20240415091018922.png\" alt=\"image-20240415091018922\"></p>\n<p>SkyWalking 同样采用客户端与服务端架构模式，SkyWalking 服务端用于接收来自 Java Agent 客户端发来的链路跟踪与指标数据，汇总统计后由 SkyWalking UI 负责展现。SkyWalking 服务端同时支持 gRPC 与 HTTP 两种上报方式。其中 gRPC 默认监听服务器 11800 端口，HTTP 默认监听 12800 端口，而 SKyWalking UI 应用则默认监听 8080 端口，这三个端口在生产环境下要在防火墙做放行配置。在存储层面，SkyWalking 底层支持 ElasticSearch 、MySQL、H2等多种数据源，官方优先推荐使用 ElasticSearch </p>\n<p>本初采用Docker的安装方式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">elasticsearch:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/elasticsearch/elasticsearch:7.17.6</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9200</span><span class=\"string\">:9200</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9300</span><span class=\"string\">:9300</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">discovery.type=single-node</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">bootstrap.memory_lock=true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/opt/data/dockerData/skywalking/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class=\"line\">    <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">      <span class=\"attr\">memlock:</span></span><br><span class=\"line\">        <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  <span class=\"attr\">oap:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.io/apache/skywalking-oap-server:9.4.0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">oap</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">11800</span><span class=\"string\">:11800</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">12800</span><span class=\"string\">:12800</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">SW_CORE_RECORD_DATA_TTL:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">SW_CORE_METRICS_DATA_TTL:</span> <span class=\"number\">15</span></span><br><span class=\"line\">      <span class=\"attr\">SW_STORAGE:</span> <span class=\"string\">elasticsearch</span></span><br><span class=\"line\">      <span class=\"attr\">SW_STORAGE_ES_CLUSTER_NODES:</span> <span class=\"string\">elasticsearch:9200</span></span><br><span class=\"line\">      <span class=\"attr\">SW_ENABLE_UPDATE_UI_TEMPLATE:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">TZ:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">JAVA_OPTS:</span> <span class=\"string\">&quot;-Xms2048m -Xmx2048m&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">ui:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">docker.io/apache/skywalking-ui:9.4.0</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">ui</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">oap</span></span><br><span class=\"line\">    <span class=\"attr\">links:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">oap</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">SW_OAP_ADDRESS:</span> <span class=\"string\">http://oap:12800</span></span><br><span class=\"line\">      <span class=\"attr\">SW_ZIPKIN_ADDRESS:</span> <span class=\"string\">http://oap:9412</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>启动后会产生两个 Java 进程：</p>\n<ul>\n<li>Skywalking-Collector 是数据收集服务，默认监听 11800（gRPC）与 12800（HTTP） 端口。</li>\n<li>Skywalking-Webapp 是 SkyWalking UI，用于展示数据，默认监听 8080 端口,上面显示的为8038。</li>\n</ul>\n<p>Skywalking 应用已启动</p>\n<p>启动成功后，访问[<a href=\"http://127.0.0.1:8088/]%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%9C%8B%E5%88%B0\">http://127.0.0.1:8088/]，如果看到</a> SkyWalking UI 首页，则说明服务端配置成功。</p>\n<p><img src=\"/typora-user-images/image-20240416113821316.png\" alt=\"image-20240416113821316\"></p>\n<h3 id=\"安装-SkyWalking-Java-Agent\"><a href=\"#安装-SkyWalking-Java-Agent\" class=\"headerlink\" title=\"安装 SkyWalking Java Agent\"></a>安装 SkyWalking Java Agent</h3><p>在前面提到，SkyWalking 可以在不修改应用源码的前提下，无侵入的实现链路追踪与 JVM 指标监控，它是怎么做到的？这里涉及一个 Java1.5 新增的特性，Java Agent 探针技术，想必对于很多工作多年 Java 工程师来说，Java Agent 也是一个陌生的东西。</p>\n<p>Java Agent 探针说白了就是 Java 提供的一种“外挂”技术，允许在应用开发的时候在通过启动时增加 javaagent 参数来外挂一些额外的程序。</p>\n<p>Java Agent ，其扩展类有这严格的规范，必须创建名为 premain 的方法，该方法将在目标应用 main 方法前执行，下面就是最简单的 Java Agent 扩展类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=========开始执行premain============&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>要完成 Java Agent，还需要提供正确的 MANIFEST.MF，以便 JVM 能够选择正确的类。在 META-INF 目录下找到你的 MANIFEST.MF 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: com.lison.agent.SimpleAgent</span><br></pre></td></tr></table></figure>\n\n\n\n<p>之后我们将这个类打包为 agent.jar，假设原始应用为 test-agent.jar，在 test-agent.jar 启动时需要在额外附加 javaagent 参数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:agent.jar -jar test-agent.jar</span><br></pre></td></tr></table></figure>\n\n<p>在应用启动时 Java 控制台会输出如下日志。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=========开始执行 premain============</span><br><span class=\"line\">正在启动 Agent测试服务...</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n\n\n<p>SkyWalking 也是利用 Java Agent 的特性，在 premain 中通过字节码增强技术对目标方法进行扩展，当目标方法执行时自动收集链路追踪及监控数据并发往 SkyWalking 服务端。</p>\n<p>SkyWalking Java Agent，我们还是以实例进行讲解，因为 Java Agent 是无侵入的，并不需要源码，这里我就直接给出调用关系图帮助咱们理解。</p>\n<p><img src=\"/typora-user-images/image-20240415094839642.png\" alt=\"image-20240415094839642\"></p>\n<p>调用关系图</p>\n<p>简单介绍下，用户访问 a 服务的 a 接口，a 服务通过 OpenFeign 远程调用 b 服务的 b 接口，b 服务通过 OpenFeign 调用 c 服务的 c 接口，最后 c 接口通过 JDBC 将业务数据存储到 MySQL 数据库</p>\n<h4 id=\"集成skywalking\"><a href=\"#集成skywalking\" class=\"headerlink\" title=\"集成skywalking\"></a>集成skywalking</h4><p><strong>1、下载解压 agent</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：agent版本和oap版本需要适配，版本不适配可能会出现页面无法访问、agent上报不到页面等问题。</span><br></pre></td></tr></table></figure>\n\n<p><strong>下载地址</strong>： <a href=\"https://skywalking.apache.org/downloads/\">https://skywalking.apache.org/downloads/</a></p>\n<p><strong>作者用的skywalking版本为9.4.0，下载v9.1.0版本的client没有问题，亲测可用。</strong></p>\n<p><img src=\"/typora-user-images/image-20240416114024941.png\" alt=\"image-20240416114024941\"></p>\n<p>需要配置skywalking-agent文件夹下，config&#x2F;agent.config配置文件，列出最关键的两个配置，其他配置大家可以自行探索。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">agent.service_name=$&#123;SW_AGENT_NAME:HS&#125;</span><br><span class=\"line\">collector.backend_service=$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.54.53:11800&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>2、日志对接</strong></p>\n<p>在skywalking的UI端有一个日志的模块，用于收集客户端的日志，默认是没有数据的，那么需要如何将日志数据传输到skywalking中呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--打印skywalking的TraceId到日志--&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.skywalking&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;apm-toolkit-logback-1.x&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;9.1.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.skywalking&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;apm-toolkit-trace&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;9.1.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>新建一个logback-spring.xml放在resource目录下，配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">debug</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">scan</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">springProperty</span> <span class=\"attr\">scop</span>=<span class=\"string\">&quot;context&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;spring.application.name&quot;</span> <span class=\"attr\">source</span>=<span class=\"string\">&quot;spring.application.name&quot;</span> <span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;log.path&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;logs/$&#123;spring.application.name&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;clr&quot;</span> <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;wex&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">conversionRule</span> <span class=\"attr\">conversionWord</span>=<span class=\"string\">&quot;wEx&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">converterClass</span>=<span class=\"string\">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Console log output --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;console&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Log file debug output --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;debug&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;log.path&#125;/debug.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM, aux&#125;/debug.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>50MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Log file error output --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>$&#123;log.path&#125;/error.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/%d&#123;yyyy-MM&#125;/error.%d&#123;yyyy-MM-dd&#125;.%i.log.gz<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>50MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%date [%thread] %-5level [%logger&#123;50&#125;] %file:%line - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>ERROR<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;stdout&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%tid] [%thread] %-5level %logger&#123;36&#125; -%msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;grpc&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.log.GRPCLogClientAppender&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.core.encoder.LayoutWrappingEncoder&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.apache.skywalking.apm.toolkit.log.logback.v1.x.mdc.TraceIdMDCPatternLogbackLayout&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;tid&#125;] [%thread] %-5level %logger&#123;36&#125; -%msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--nacos 心跳 INFO 屏蔽--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.alibaba.nacos&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;OFF&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;error&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Level: FATAL 0  ERROR 3  WARN 4  INFO 6  DEBUG 7 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- &lt;appender-ref ref=&quot;console&quot;/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;debug&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;error&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;stdout&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;grpc&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>3、代码中添加日志</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/fegin/test&quot;)</span><br><span class=\"line\">  public String feginTest() &#123;</span><br><span class=\"line\">      iTestService.getServerPort();</span><br><span class=\"line\">      log.info(&quot;这是message1&quot;);</span><br><span class=\"line\">      return &quot;message1&quot;;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"使用探针方式启动\"><a href=\"#使用探针方式启动\" class=\"headerlink\" title=\"使用探针方式启动\"></a>使用探针方式启动</h4><p><strong>（1）使用idea启动</strong></p>\n<p> 配置VM options</p>\n<p><img src=\"/typora-user-images/image-20240416114808884.png\" alt=\"image-20240416114808884\"></p>\n<p>javaagent配置的参数即skywalking-agent的绝对路径。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dskywalking.agent.service_name=&quot;spring-cloud-service&quot;</span><br><span class=\"line\">-Dskywalking.collector.backend_service=&quot;opaip:11800&quot;</span><br><span class=\"line\">-javaagent:/Users/lison/work/workspace/project/skywalking-agent/skywalking-agent.jar</span><br></pre></td></tr></table></figure>\n\n\n\n<p>日志：</p>\n<p><img src=\"/typora-user-images/image-20240416114924463.png\" alt=\"image-20240416114924463\"></p>\n<p><img src=\"/typora-user-images/image-20240416120116317.png\" alt=\"image-20240416120116317\"></p>\n<p>除此之外，链路追踪的展示也非常强大，服务间的 API 调用关系与执行时间、调用状态清晰列出，而且因为 SkyWalking 是方法层面上的扩展，会提供更加详细的方法间的调用过程</p>\n<p><img src=\"/typora-user-images/image-20240417091316659.png\" alt=\"image-20240417091316659\"></p>\n<p>提供不同维度的视图</p>\n<p><img src=\"/typora-user-images/image-20240417092003988.png\" alt=\"image-20240417092003988\"></p>\n<p><strong>服务监控JVM</strong></p>\n<p><img src=\"/typora-user-images/image-20240417092118543.png\" alt=\"image-20240417092118543\"></p>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.4.20`\n\n# Spring Cloud Alibaba-07-RocketMQ消息驱动\n\n[toc]\n\n\n\n##  MQ简介\n\n消息队列（Message Queue）简称 MQ，是一种跨进程的通信机制，通常用于应用程序间进行数据的异步传输，MQ 产品在架构中通常也被叫作“消息中间件”。它的最主要职责就是保证服务间进行可靠的数据传输，同时实现服务间的解耦。\n\n\n\n![image-20240507111933014](typora-user-images/image-20240507111933014.png)\n\n\n\n\n\n### MQ的应用场景\n\n* 应用解耦\n\n  >在电商平台中，用户下订单需要调用订单系统，此时订单系统还需要调用库存系统、支付系统、物流系统完成业务。此时会产生两个问题：\n  >\n  >1 如果库存系统出现故障，会造成整个订单系统崩溃。\n  >\n  >2 如果需求修改，新增了一个X系统，此时必须修改订单系统的代码。\n  >\n  >![image-20230627191528034](typora-user-images/image-20230627191528034.png)\n  >\n  >\n  >\n  >如果在系统中引入MQ，即订单系统将消息先发送到MQ中，MQ再转发到其他系统，则会解决以下问题： \n  >\n  >1、由于订单系统只发消息给MQ，不直接对接其他系统，如果库存系统出现故障，不影响整个订单。\n  >\n  >2、如果需求修改，新增了一个X系统，此时无需修改订单系统的代码，只需修改MQ将消息发送给X系统即可。\n  >\n  >![image-20240507112405845](typora-user-images/image-20240507112405845.png)\n\n  \n\n  \n\n* 异步提速\n\n  >如果订单系统同步访问每个系统，则用户下单等待时长如下：\n  >\n  >![image-20230628093823674](typora-user-images/image-20230628093823674.png)\n  >\n  >\n  >\n  >如果引入MQ,则用户等待时间如下：\n  >\n  >![image-20230628094058045](typora-user-images/image-20230628094058045.png)\n\n  \n\n* 消峰填谷\n\n  > 假设我们的系统每秒只能承载1000请求，如果请求瞬间增多到每秒 5000，则会造成系统崩溃。此时引入mq即可解决该问题\n  >\n  > ![image-20230628094428585](typora-user-images/image-20230628094428585.png)\n  >\n  > 使用了MQ之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持 在1000，直到消费完积压的消息，这就叫做“填谷”。 \n  >\n  > ![image-20230628094521252](typora-user-images/image-20230628094521252.png)\n  >\n  > 流量削峰也是消息队列 MQ 的常用场景，一般在秒杀或团队抢购(高并发)活动中使用广泛。\n  > 在秒杀或团队抢购活动中，由于用户请求量较大，导致流量暴增，秒杀的应用在处理如此大量的访问流 量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况。为解 决这些问题，可在应用和下游通知系统之间加入消息队列 MQ。\n  >\n  > 秒杀处理流程如下所述:\n  >\n  > 1. 用户发起海量秒杀请求到秒杀业务处理系统。\n  > 2. 秒杀处理系统按照秒杀处理逻辑将满足秒杀条件的请求发送至消息队列 MQ。\n  > 3. 下游的通知系统订阅消息队列 MQ 的秒杀相关消息，再将秒杀成功的消息发送到相应用户。\n  > 4. 用户收到秒杀成功的通知。\n\n  \n\n\n\n### 常见的MQ产品\n\n目前业界有很多MQ产品，比较出名的有下面这些:\n\n**ZeroMQ**\n\n号称最快的消息队列系统，尤其针对大吞吐量的需求场景。扩展性好，开发比较灵活，采用C语言 实现，实际上只是一个socket库的重新封装，如果做为消息队列使用，需要开发大量的代码。 ZeroMQ仅提供非持久性的队列，也就是说如果down机，数据将会丢失。\n\n**RabbitMQ**\n\n使用erlang语言开发，性能较好，适合于企业级的开发。但是不利于做二次开发和维护。 ActiveMQ\n历史悠久的Apache开源项目。已经在很多产品中得到应用，实现了JMS1.1规范，可以和spring- jms轻松融合，实现了多种协议，支持持久化到数据库，对队列数较多的情况支持不好。\n\n**RocketMQ**\n\n阿里巴巴的MQ中间件，由java语言开发，性能非常好，能够撑住双十一的大流量，而且使用起来 很简单。\n\n**Kafka**\n\nKafka是Apache下的一个子项目，是一个高性能跨语言分布式Publish/Subscribe消息队列系统， 相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布 式系统。\n\n\n\n### RocketeMQ的架构及概念\n\n\n\nRocketMQ 有很多优秀的特性，在可用性方面，RocketMQ 强调集群无单点，任意一点高可用，客户端具备负载均衡能力，可以轻松实现水平扩容；在性能方面，在天猫双 11 大促背后的亿级消息处理就是通过 RocketMQ 提供的保障；在 API 方面，提供了丰富的功能，可以实现异步消息、同步消息、顺序消息、事务消息等丰富的功能，能满足大多数应用场景；在可靠性方面，提供了消息持久化、失败重试机制、消息查询追溯的功能，进一步为可靠性提供保障。\n\n\n\n![在这里插入图片描述](typora-user-images/72746e97a2cd474bb21601f507779a25.png)\n\n\n\n了解 RocketMQ 的诸多特性后，咱们来理解 RocketMQ 几个重要的概念：\n\n* 消息模型（Message Model）：RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。\n* 消息生产者（Producer）：负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。\n* 消息消费者（Consumer）：负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。\n* 生产者组（Producer Group）：同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事物消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。\n* 消费者组（Consumer Group）：同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。\n* 代理服务器（Broker Server）：消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。\n* 名字服务（Name Server）：名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。\n* 主题（Topic）：表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。\n* 标签（Tag）:为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。\n* 消息（Message）:消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。\n* 拉取式消费（Pull Consumer）:Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。\n* 推动式消费（Push Consumer）:Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。\n* 集群消费（Clustering）:集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。\n* 广播消费（Broadcasting）:广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。\n* 普通顺序消息（Normal Ordered Message）：普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。\n* 严格顺序消息（Strictly Ordered Message）：严格顺序消息模式下，消费者收到的所有消息均是有顺序的。\n\n\n\n官方文档地址：https://rocketmq.apache.org/zh/docs/\n\n\n\n\n\n\n\n## RocketMQ入门\n\nRocketMQ 是一款分布式消息队列中间件，官方地址为http://rocketmq.apache.org/，目前最新版本为4.8.0。RocketMQ 最初设计是为了满足阿里巴巴自身业务对异步消息传递的需要，在 3.X 版本后正式开源并捐献给 Apache，目前已孵化为 Apache 顶级项目，同时也是国内使用最广泛、使用人数最多的 MQ 产品之一\n\n![image-20240507112941777](typora-user-images/image-20240507112941777.png)\n\n\n\n\n\n### RocketMQ环境搭建\n\n接下来我们先在linux平台下安装一个RocketMQ的服务,本文使用 docker-compose 安装RocketMq\n\n**创建docker文件夹**\n\n~~~\nmkdir rocketmq\ncd rocketmq\nmkdir data\ncd data\nmkdir -p brokerconf logs store\n~~~\n\n\n\n**在rocketmq文件夹下创建docker-compose.yml文件**\n\n\n\n~~~\n\n## rocketmq\nversion: '3.8'\nservices:\n  rmqnamesrv1:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqnamesrv1\n    ports:\n      - 9876:9876\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/store:/opt/store\n    command: sh mqnamesrv  \n    networks:\n      - nt_dev\n\n  rmqnamesrv2:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqnamesrv2\n    ports:\n      - 9877:9876\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/store:/opt/store\n    command: sh mqnamesrv  \n    networks:\n      - nt_dev         \n \n\n  rmqbroker1:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqbroker1\n    ports:\n      - 10911:10911\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/store:/opt/store\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv1:9876;rmqnamesrv2:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &\n    depends_on:\n      - rmqnamesrv1\n      - rmqnamesrv2\n    networks:\n      - nt_dev \n\n\n  rmqbroker2:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqbroker2\n    ports:\n      - 10912:10911\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/store:/opt/store\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv1:9876;rmqnamesrv2:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &\n    depends_on:\n      - rmqnamesrv1\n      - rmqnamesrv2\n    networks:\n      - nt_dev \n\n  rmqbroker3:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqbroker3\n    ports:\n      - 10913:10911\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/store:/opt/store\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv1:9876;rmqnamesrv2:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &\n    depends_on:\n      - rmqnamesrv1\n      - rmqnamesrv2\n    networks:\n      - nt_dev\n\n \n  rmqconsole:\n    image: styletang/rocketmq-console-ng\n    container_name: rmqconsole\n    ports:\n      - 8080:8080\n    environment:\n        JAVA_OPTS: \"-Drocketmq.namesrv.addr=rmqnamesrv1:9876;rmqnamesrv2:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false\"\n    depends_on:\n      - rmqbroker1\n      - rmqbroker2\n      - rmqbroker3\n    networks:\n      - nt_dev\n \nnetworks:\n  nt_dev:\n    external: true\n    driver: bridge\n\n  \n~~~\n\n\n\n**brokerconf下新建broker.conf文件并存储**\n\n创建文件\n\n\n\n/Users/lison/work/data/dockerData/rocketmq/rmqbroker1/brokerconf/broker.conf\n\n~~~\nbrokerClusterName = DefaultCluster\n#broker名称\nbrokerName = rmqbroker1\nbrokerId = 0\ndeleteWhen = 04\nfileReservedTime = 48\nbrokerRole = ASYNC_MASTER\nflushDiskType = ASYNC_FLUSH\n\n~~~\n\n/Users/lison/work/data/dockerData/rocketmq/rmqbroker2/brokerconf/broker.conf\n\n~~~\nbrokerClusterName = DefaultCluster\n#broker名称\nbrokerName = rmqbroker2\nbrokerId = 1\ndeleteWhen = 04\nfileReservedTime = 48\nbrokerRole = ASYNC_MASTER\nflushDiskType = ASYNC_FLUSH\n\n~~~\n\n\n\n/Users/lison/work/data/dockerData/rocketmq/rmqbroker3/brokerconf/broker.conf\n\n~~~\nbrokerClusterName = DefaultCluster\n#broker名称\nbrokerName = rmqbroker3\nbrokerId = 2\ndeleteWhen = 04\nfileReservedTime = 48\nbrokerRole = ASYNC_MASTER\nflushDiskType = ASYNC_FLUSH\n\n~~~\n\n\n\n\n\n**保存上边配置，执行docker-compose**\n\n~~~\ndocker-compose up -d\n~~~\n\ndocker ps 查看是否都启动了，如果都启动了，在成功，如果有没有启动成功，则可以查看docker日志，一般都是，ip设置问题。\n\n![image-20240509105505568](typora-user-images/image-20240509105505568.png)\n\n\n\n**打开对应的对口之后可以通过浏览器控制台进行查看**\n\n![image-20240509105539663](typora-user-images/image-20240509105539663.png)\n\n\n\n\n\n## SpringBoot 集成 RocketMQ\n\n1、使用Java代码来演示消息的发送和接收，加入依赖\n\n~~~xml\n <!-- RocketMQ客户端，版本与Broker保持一致  -->\n        <dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-spring-boot-starter</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        \n <!-- 也可直接定义指定版本  \n \t\t\t<dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-client</artifactId>\n            <version>4.5.2</version>\n        </dependency>-->\n        \n~~~\n\n\n\n2、配置应用 application.yml。\n\n\n\n~~~yaml\n#rocketmq配置\nrocketmq:\n  enhance:\n    # 启动隔离，用于激活配置类EnvironmentIsolationConfig\n    # 启动后会自动在topic上拼接激活的配置文件，达到自动隔离的效果\n    enabledIsolation: true\n    # 隔离环境名称，拼接到topic后，topic_dev，默认空字符串\n    environment: dev\n  topic: springboot-mq\n  name-server: 127.0.0.1:9876\n  # 生产者配置\n  producer:\n    # 发送同一类消息的设置为同一个group，保证唯一\n    group: rocketmq-pro-group\n    # 发送消息超时时间,默认3000\n    sendMessageTimeout: 30000\n    # 发送消息失败重试次数，默认2\n    retryTimesWhenSendFailed: 10\n    # 异步消息重试此处，默认2\n    retryTimesWhenSendAsyncFailed: 10\n    # 消息最大长度 默认1024*4(4M)\n    maxMessageSize: 4096\n    # 是否在内部发送失败时重试另一个broker，默认false\n    retryNextServer: false\n    # 压缩消息阈值，默认4k(1024 * 4)\n    compressMessageBodyThreshold: 4096\n  consumer:\n    group: rocketmq-consumer-group\n~~~\n\n\n\n\n\n~~~java\npackage com.ruipeng.service;\n//发送短信的服务\n@Slf4j\n@Service\n@RocketMQMessageListener(consumerGroup = \"rocketmq-consumer-group\", topic = \"springboot-mq\") \npublic class SmsService implements RocketMQListener<Order> { \n\t@Override \n\tpublic void onMessage(Order order) {\n\t log.info(\"收到一个信息{},接下来发送短信\", JSON.toJSONString(order)); \n  }\n   } \n\n\n~~~\n\n\n\n\n\n~~~java\n//测试\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = OrderApplication.class)\npublic class MessageTypeTest {\n    @Autowired\n    private RocketMQTemplate rocketMQTemplate;\n\n    //同步消息\n    @Test\n    public void testSyncSend() {\n//参数一: topic， 如果想添加tag 可以使用\"topic:tag\"的写法 //参数二: 消息内容\n        SendResult sendResult =\n                rocketMQTemplate.syncSend(\"test-topic-1\", \"这是一条同步消息\");\n        System.out.println(sendResult);\n    }\n\n    //异步消息\n    @Test\n    public void testAsyncSend() throws InterruptedException {\n        public void testSyncSendMsg () {\n//参数一: topic, 如果想添加tag 可以使用\"topic:tag\"的写法\n//参数二: 消息内容\n//参数三: 回调函数, 处理返回结果 rocketMQTemplate.asyncSend(\"test-topic-1\", \"这是一条异步消息\", new \n            SendCallback() {\n                @Override\n                public void onSuccess (SendResult sendResult){\n                    System.out.println(sendResult);\n                }\n                @Override\n                public void onException (Throwable throwable){\n                    System.out.println(throwable);\n                }\n            });\n//让线程不要终止 Thread.sleep(30000000); \n\n        }\n    }\n\n    //单向消息\n    @Test\n    public void testOneWay() {\n        rocketMQTemplate.sendOneWay(\"test-topic-1\", \"这是一条单向消息\");\n    } \n}\n\n~~~\n\n\n\n三种发送方式的对比\n\n| 发送方式 | 发送 TPS | 发送结果反馈 | 可靠性   |\n| -------- | -------- | ------------ | -------- |\n| 同步发送 | 快       | 有           | 不丢失   |\n| 异步发送 | 快       | 有           | 不丢失   |\n| 单向发送 | 最快     | 无           | 可能丢失 |\n\n\n\n消费主义细节：\n\n~~~java\n@RocketMQMessageListener(\nconsumerGroup = \"shop\",//消费者分组\ntopic = \"order-topic\",//要消费的主题\nconsumeMode = ConsumeMode.CONCURRENTLY, //消费模式:无序和有序 messageModel = MessageModel.CLUSTERING, //消息模式:广播和集群,默认是集群 \n)\npublic class SmsService implements RocketMQListener<Order> {}\n\n~~~\n\nRocketMQ支持两种消息模式:\n\n- 广播消费: 每个消费者实例都会收到消息,也就是一条消息可以被每个消费者实例处理;\n- 集群消费: 一条消息只能被一个消费者实例消费\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-07-RocketMQ消息驱动.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.4.20`\n\n# Spring Cloud Alibaba-07-RocketMQ消息驱动\n\n[toc]\n\n\n\n##  MQ简介\n\n消息队列（Message Queue）简称 MQ，是一种跨进程的通信机制，通常用于应用程序间进行数据的异步传输，MQ 产品在架构中通常也被叫作“消息中间件”。它的最主要职责就是保证服务间进行可靠的数据传输，同时实现服务间的解耦。\n\n\n\n![image-20240507111933014](typora-user-images/image-20240507111933014.png)\n\n\n\n\n\n### MQ的应用场景\n\n* 应用解耦\n\n  >在电商平台中，用户下订单需要调用订单系统，此时订单系统还需要调用库存系统、支付系统、物流系统完成业务。此时会产生两个问题：\n  >\n  >1 如果库存系统出现故障，会造成整个订单系统崩溃。\n  >\n  >2 如果需求修改，新增了一个X系统，此时必须修改订单系统的代码。\n  >\n  >![image-20230627191528034](typora-user-images/image-20230627191528034.png)\n  >\n  >\n  >\n  >如果在系统中引入MQ，即订单系统将消息先发送到MQ中，MQ再转发到其他系统，则会解决以下问题： \n  >\n  >1、由于订单系统只发消息给MQ，不直接对接其他系统，如果库存系统出现故障，不影响整个订单。\n  >\n  >2、如果需求修改，新增了一个X系统，此时无需修改订单系统的代码，只需修改MQ将消息发送给X系统即可。\n  >\n  >![image-20240507112405845](typora-user-images/image-20240507112405845.png)\n\n  \n\n  \n\n* 异步提速\n\n  >如果订单系统同步访问每个系统，则用户下单等待时长如下：\n  >\n  >![image-20230628093823674](typora-user-images/image-20230628093823674.png)\n  >\n  >\n  >\n  >如果引入MQ,则用户等待时间如下：\n  >\n  >![image-20230628094058045](typora-user-images/image-20230628094058045.png)\n\n  \n\n* 消峰填谷\n\n  > 假设我们的系统每秒只能承载1000请求，如果请求瞬间增多到每秒 5000，则会造成系统崩溃。此时引入mq即可解决该问题\n  >\n  > ![image-20230628094428585](typora-user-images/image-20230628094428585.png)\n  >\n  > 使用了MQ之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持 在1000，直到消费完积压的消息，这就叫做“填谷”。 \n  >\n  > ![image-20230628094521252](typora-user-images/image-20230628094521252.png)\n  >\n  > 流量削峰也是消息队列 MQ 的常用场景，一般在秒杀或团队抢购(高并发)活动中使用广泛。\n  > 在秒杀或团队抢购活动中，由于用户请求量较大，导致流量暴增，秒杀的应用在处理如此大量的访问流 量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况。为解 决这些问题，可在应用和下游通知系统之间加入消息队列 MQ。\n  >\n  > 秒杀处理流程如下所述:\n  >\n  > 1. 用户发起海量秒杀请求到秒杀业务处理系统。\n  > 2. 秒杀处理系统按照秒杀处理逻辑将满足秒杀条件的请求发送至消息队列 MQ。\n  > 3. 下游的通知系统订阅消息队列 MQ 的秒杀相关消息，再将秒杀成功的消息发送到相应用户。\n  > 4. 用户收到秒杀成功的通知。\n\n  \n\n\n\n### 常见的MQ产品\n\n目前业界有很多MQ产品，比较出名的有下面这些:\n\n**ZeroMQ**\n\n号称最快的消息队列系统，尤其针对大吞吐量的需求场景。扩展性好，开发比较灵活，采用C语言 实现，实际上只是一个socket库的重新封装，如果做为消息队列使用，需要开发大量的代码。 ZeroMQ仅提供非持久性的队列，也就是说如果down机，数据将会丢失。\n\n**RabbitMQ**\n\n使用erlang语言开发，性能较好，适合于企业级的开发。但是不利于做二次开发和维护。 ActiveMQ\n历史悠久的Apache开源项目。已经在很多产品中得到应用，实现了JMS1.1规范，可以和spring- jms轻松融合，实现了多种协议，支持持久化到数据库，对队列数较多的情况支持不好。\n\n**RocketMQ**\n\n阿里巴巴的MQ中间件，由java语言开发，性能非常好，能够撑住双十一的大流量，而且使用起来 很简单。\n\n**Kafka**\n\nKafka是Apache下的一个子项目，是一个高性能跨语言分布式Publish/Subscribe消息队列系统， 相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布 式系统。\n\n\n\n### RocketeMQ的架构及概念\n\n\n\nRocketMQ 有很多优秀的特性，在可用性方面，RocketMQ 强调集群无单点，任意一点高可用，客户端具备负载均衡能力，可以轻松实现水平扩容；在性能方面，在天猫双 11 大促背后的亿级消息处理就是通过 RocketMQ 提供的保障；在 API 方面，提供了丰富的功能，可以实现异步消息、同步消息、顺序消息、事务消息等丰富的功能，能满足大多数应用场景；在可靠性方面，提供了消息持久化、失败重试机制、消息查询追溯的功能，进一步为可靠性提供保障。\n\n\n\n![在这里插入图片描述](typora-user-images/72746e97a2cd474bb21601f507779a25.png)\n\n\n\n了解 RocketMQ 的诸多特性后，咱们来理解 RocketMQ 几个重要的概念：\n\n* 消息模型（Message Model）：RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。\n* 消息生产者（Producer）：负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。\n* 消息消费者（Consumer）：负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。\n* 生产者组（Producer Group）：同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事物消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。\n* 消费者组（Consumer Group）：同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。\n* 代理服务器（Broker Server）：消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。\n* 名字服务（Name Server）：名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。\n* 主题（Topic）：表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。\n* 标签（Tag）:为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。\n* 消息（Message）:消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。\n* 拉取式消费（Pull Consumer）:Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。\n* 推动式消费（Push Consumer）:Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。\n* 集群消费（Clustering）:集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。\n* 广播消费（Broadcasting）:广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。\n* 普通顺序消息（Normal Ordered Message）：普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。\n* 严格顺序消息（Strictly Ordered Message）：严格顺序消息模式下，消费者收到的所有消息均是有顺序的。\n\n\n\n官方文档地址：https://rocketmq.apache.org/zh/docs/\n\n\n\n\n\n\n\n## RocketMQ入门\n\nRocketMQ 是一款分布式消息队列中间件，官方地址为http://rocketmq.apache.org/，目前最新版本为4.8.0。RocketMQ 最初设计是为了满足阿里巴巴自身业务对异步消息传递的需要，在 3.X 版本后正式开源并捐献给 Apache，目前已孵化为 Apache 顶级项目，同时也是国内使用最广泛、使用人数最多的 MQ 产品之一\n\n![image-20240507112941777](typora-user-images/image-20240507112941777.png)\n\n\n\n\n\n### RocketMQ环境搭建\n\n接下来我们先在linux平台下安装一个RocketMQ的服务,本文使用 docker-compose 安装RocketMq\n\n**创建docker文件夹**\n\n~~~\nmkdir rocketmq\ncd rocketmq\nmkdir data\ncd data\nmkdir -p brokerconf logs store\n~~~\n\n\n\n**在rocketmq文件夹下创建docker-compose.yml文件**\n\n\n\n~~~\n\n## rocketmq\nversion: '3.8'\nservices:\n  rmqnamesrv1:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqnamesrv1\n    ports:\n      - 9876:9876\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/store:/opt/store\n    command: sh mqnamesrv  \n    networks:\n      - nt_dev\n\n  rmqnamesrv2:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqnamesrv2\n    ports:\n      - 9877:9876\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/store:/opt/store\n    command: sh mqnamesrv  \n    networks:\n      - nt_dev         \n \n\n  rmqbroker1:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqbroker1\n    ports:\n      - 10911:10911\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/store:/opt/store\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv1:9876;rmqnamesrv2:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &\n    depends_on:\n      - rmqnamesrv1\n      - rmqnamesrv2\n    networks:\n      - nt_dev \n\n\n  rmqbroker2:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqbroker2\n    ports:\n      - 10912:10911\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/store:/opt/store\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv1:9876;rmqnamesrv2:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &\n    depends_on:\n      - rmqnamesrv1\n      - rmqnamesrv2\n    networks:\n      - nt_dev \n\n  rmqbroker3:\n    image: apache/rocketmq:4.9.3\n    container_name: rmqbroker3\n    ports:\n      - 10913:10911\n    volumes:\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/logs:/opt/logs\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/store:/opt/store\n      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/brokerconf/broker.conf:/etc/rocketmq/broker.conf\n    environment:\n        NAMESRV_ADDR: \"rmqnamesrv1:9876;rmqnamesrv2:9876\"\n        JAVA_OPTS: \" -Duser.home=/opt\"\n        JAVA_OPT_EXT: \"-server -Xms128m -Xmx128m -Xmn128m\"\n    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &\n    depends_on:\n      - rmqnamesrv1\n      - rmqnamesrv2\n    networks:\n      - nt_dev\n\n \n  rmqconsole:\n    image: styletang/rocketmq-console-ng\n    container_name: rmqconsole\n    ports:\n      - 8080:8080\n    environment:\n        JAVA_OPTS: \"-Drocketmq.namesrv.addr=rmqnamesrv1:9876;rmqnamesrv2:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false\"\n    depends_on:\n      - rmqbroker1\n      - rmqbroker2\n      - rmqbroker3\n    networks:\n      - nt_dev\n \nnetworks:\n  nt_dev:\n    external: true\n    driver: bridge\n\n  \n~~~\n\n\n\n**brokerconf下新建broker.conf文件并存储**\n\n创建文件\n\n\n\n/Users/lison/work/data/dockerData/rocketmq/rmqbroker1/brokerconf/broker.conf\n\n~~~\nbrokerClusterName = DefaultCluster\n#broker名称\nbrokerName = rmqbroker1\nbrokerId = 0\ndeleteWhen = 04\nfileReservedTime = 48\nbrokerRole = ASYNC_MASTER\nflushDiskType = ASYNC_FLUSH\n\n~~~\n\n/Users/lison/work/data/dockerData/rocketmq/rmqbroker2/brokerconf/broker.conf\n\n~~~\nbrokerClusterName = DefaultCluster\n#broker名称\nbrokerName = rmqbroker2\nbrokerId = 1\ndeleteWhen = 04\nfileReservedTime = 48\nbrokerRole = ASYNC_MASTER\nflushDiskType = ASYNC_FLUSH\n\n~~~\n\n\n\n/Users/lison/work/data/dockerData/rocketmq/rmqbroker3/brokerconf/broker.conf\n\n~~~\nbrokerClusterName = DefaultCluster\n#broker名称\nbrokerName = rmqbroker3\nbrokerId = 2\ndeleteWhen = 04\nfileReservedTime = 48\nbrokerRole = ASYNC_MASTER\nflushDiskType = ASYNC_FLUSH\n\n~~~\n\n\n\n\n\n**保存上边配置，执行docker-compose**\n\n~~~\ndocker-compose up -d\n~~~\n\ndocker ps 查看是否都启动了，如果都启动了，在成功，如果有没有启动成功，则可以查看docker日志，一般都是，ip设置问题。\n\n![image-20240509105505568](typora-user-images/image-20240509105505568.png)\n\n\n\n**打开对应的对口之后可以通过浏览器控制台进行查看**\n\n![image-20240509105539663](typora-user-images/image-20240509105539663.png)\n\n\n\n\n\n## SpringBoot 集成 RocketMQ\n\n1、使用Java代码来演示消息的发送和接收，加入依赖\n\n~~~xml\n <!-- RocketMQ客户端，版本与Broker保持一致  -->\n        <dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-spring-boot-starter</artifactId>\n            <version>2.2.2</version>\n        </dependency>\n        \n <!-- 也可直接定义指定版本  \n \t\t\t<dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-client</artifactId>\n            <version>4.5.2</version>\n        </dependency>-->\n        \n~~~\n\n\n\n2、配置应用 application.yml。\n\n\n\n~~~yaml\n#rocketmq配置\nrocketmq:\n  enhance:\n    # 启动隔离，用于激活配置类EnvironmentIsolationConfig\n    # 启动后会自动在topic上拼接激活的配置文件，达到自动隔离的效果\n    enabledIsolation: true\n    # 隔离环境名称，拼接到topic后，topic_dev，默认空字符串\n    environment: dev\n  topic: springboot-mq\n  name-server: 127.0.0.1:9876\n  # 生产者配置\n  producer:\n    # 发送同一类消息的设置为同一个group，保证唯一\n    group: rocketmq-pro-group\n    # 发送消息超时时间,默认3000\n    sendMessageTimeout: 30000\n    # 发送消息失败重试次数，默认2\n    retryTimesWhenSendFailed: 10\n    # 异步消息重试此处，默认2\n    retryTimesWhenSendAsyncFailed: 10\n    # 消息最大长度 默认1024*4(4M)\n    maxMessageSize: 4096\n    # 是否在内部发送失败时重试另一个broker，默认false\n    retryNextServer: false\n    # 压缩消息阈值，默认4k(1024 * 4)\n    compressMessageBodyThreshold: 4096\n  consumer:\n    group: rocketmq-consumer-group\n~~~\n\n\n\n\n\n~~~java\npackage com.ruipeng.service;\n//发送短信的服务\n@Slf4j\n@Service\n@RocketMQMessageListener(consumerGroup = \"rocketmq-consumer-group\", topic = \"springboot-mq\") \npublic class SmsService implements RocketMQListener<Order> { \n\t@Override \n\tpublic void onMessage(Order order) {\n\t log.info(\"收到一个信息{},接下来发送短信\", JSON.toJSONString(order)); \n  }\n   } \n\n\n~~~\n\n\n\n\n\n~~~java\n//测试\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = OrderApplication.class)\npublic class MessageTypeTest {\n    @Autowired\n    private RocketMQTemplate rocketMQTemplate;\n\n    //同步消息\n    @Test\n    public void testSyncSend() {\n//参数一: topic， 如果想添加tag 可以使用\"topic:tag\"的写法 //参数二: 消息内容\n        SendResult sendResult =\n                rocketMQTemplate.syncSend(\"test-topic-1\", \"这是一条同步消息\");\n        System.out.println(sendResult);\n    }\n\n    //异步消息\n    @Test\n    public void testAsyncSend() throws InterruptedException {\n        public void testSyncSendMsg () {\n//参数一: topic, 如果想添加tag 可以使用\"topic:tag\"的写法\n//参数二: 消息内容\n//参数三: 回调函数, 处理返回结果 rocketMQTemplate.asyncSend(\"test-topic-1\", \"这是一条异步消息\", new \n            SendCallback() {\n                @Override\n                public void onSuccess (SendResult sendResult){\n                    System.out.println(sendResult);\n                }\n                @Override\n                public void onException (Throwable throwable){\n                    System.out.println(throwable);\n                }\n            });\n//让线程不要终止 Thread.sleep(30000000); \n\n        }\n    }\n\n    //单向消息\n    @Test\n    public void testOneWay() {\n        rocketMQTemplate.sendOneWay(\"test-topic-1\", \"这是一条单向消息\");\n    } \n}\n\n~~~\n\n\n\n三种发送方式的对比\n\n| 发送方式 | 发送 TPS | 发送结果反馈 | 可靠性   |\n| -------- | -------- | ------------ | -------- |\n| 同步发送 | 快       | 有           | 不丢失   |\n| 异步发送 | 快       | 有           | 不丢失   |\n| 单向发送 | 最快     | 无           | 可能丢失 |\n\n\n\n消费主义细节：\n\n~~~java\n@RocketMQMessageListener(\nconsumerGroup = \"shop\",//消费者分组\ntopic = \"order-topic\",//要消费的主题\nconsumeMode = ConsumeMode.CONCURRENTLY, //消费模式:无序和有序 messageModel = MessageModel.CLUSTERING, //消息模式:广播和集群,默认是集群 \n)\npublic class SmsService implements RocketMQListener<Order> {}\n\n~~~\n\nRocketMQ支持两种消息模式:\n\n- 广播消费: 每个消费者实例都会收到消息,也就是一条消息可以被每个消费者实例处理;\n- 集群消费: 一条消息只能被一个消费者实例消费\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-07-RocketMQ消息驱动","published":1,"date":"2024-04-08T01:27:09.194Z","updated":"2024-05-14T01:07:13.826Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhn0008ecfy311lar40","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.4.20</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-07-RocketMQ消息驱动\"><a href=\"#Spring-Cloud-Alibaba-07-RocketMQ消息驱动\" class=\"headerlink\" title=\"Spring Cloud Alibaba-07-RocketMQ消息驱动\"></a>Spring Cloud Alibaba-07-RocketMQ消息驱动</h1><p>[toc]</p>\n<h2 id=\"MQ简介\"><a href=\"#MQ简介\" class=\"headerlink\" title=\"MQ简介\"></a>MQ简介</h2><p>消息队列（Message Queue）简称 MQ，是一种跨进程的通信机制，通常用于应用程序间进行数据的异步传输，MQ 产品在架构中通常也被叫作“消息中间件”。它的最主要职责就是保证服务间进行可靠的数据传输，同时实现服务间的解耦。</p>\n<p><img src=\"/typora-user-images/image-20240507111933014.png\" alt=\"image-20240507111933014\"></p>\n<h3 id=\"MQ的应用场景\"><a href=\"#MQ的应用场景\" class=\"headerlink\" title=\"MQ的应用场景\"></a>MQ的应用场景</h3><ul>\n<li><p>应用解耦</p>\n<blockquote>\n<p>在电商平台中，用户下订单需要调用订单系统，此时订单系统还需要调用库存系统、支付系统、物流系统完成业务。此时会产生两个问题：</p>\n<p>1 如果库存系统出现故障，会造成整个订单系统崩溃。</p>\n<p>2 如果需求修改，新增了一个X系统，此时必须修改订单系统的代码。</p>\n<p><img src=\"/typora-user-images/image-20230627191528034.png\" alt=\"image-20230627191528034\"></p>\n<p>如果在系统中引入MQ，即订单系统将消息先发送到MQ中，MQ再转发到其他系统，则会解决以下问题： </p>\n<p>1、由于订单系统只发消息给MQ，不直接对接其他系统，如果库存系统出现故障，不影响整个订单。</p>\n<p>2、如果需求修改，新增了一个X系统，此时无需修改订单系统的代码，只需修改MQ将消息发送给X系统即可。</p>\n<p><img src=\"/typora-user-images/image-20240507112405845.png\" alt=\"image-20240507112405845\"></p>\n</blockquote>\n</li>\n<li><p>异步提速</p>\n<blockquote>\n<p>如果订单系统同步访问每个系统，则用户下单等待时长如下：</p>\n<p><img src=\"/typora-user-images/image-20230628093823674.png\" alt=\"image-20230628093823674\"></p>\n<p>如果引入MQ,则用户等待时间如下：</p>\n<p><img src=\"/typora-user-images/image-20230628094058045.png\" alt=\"image-20230628094058045\"></p>\n</blockquote>\n</li>\n<li><p>消峰填谷</p>\n<blockquote>\n<p>假设我们的系统每秒只能承载1000请求，如果请求瞬间增多到每秒 5000，则会造成系统崩溃。此时引入mq即可解决该问题</p>\n<p><img src=\"/typora-user-images/image-20230628094428585.png\" alt=\"image-20230628094428585\"></p>\n<p>使用了MQ之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持 在1000，直到消费完积压的消息，这就叫做“填谷”。 </p>\n<p><img src=\"/typora-user-images/image-20230628094521252.png\" alt=\"image-20230628094521252\"></p>\n<p>流量削峰也是消息队列 MQ 的常用场景，一般在秒杀或团队抢购(高并发)活动中使用广泛。<br>在秒杀或团队抢购活动中，由于用户请求量较大，导致流量暴增，秒杀的应用在处理如此大量的访问流 量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况。为解 决这些问题，可在应用和下游通知系统之间加入消息队列 MQ。</p>\n<p>秒杀处理流程如下所述:</p>\n<ol>\n<li>用户发起海量秒杀请求到秒杀业务处理系统。</li>\n<li>秒杀处理系统按照秒杀处理逻辑将满足秒杀条件的请求发送至消息队列 MQ。</li>\n<li>下游的通知系统订阅消息队列 MQ 的秒杀相关消息，再将秒杀成功的消息发送到相应用户。</li>\n<li>用户收到秒杀成功的通知。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"常见的MQ产品\"><a href=\"#常见的MQ产品\" class=\"headerlink\" title=\"常见的MQ产品\"></a>常见的MQ产品</h3><p>目前业界有很多MQ产品，比较出名的有下面这些:</p>\n<p><strong>ZeroMQ</strong></p>\n<p>号称最快的消息队列系统，尤其针对大吞吐量的需求场景。扩展性好，开发比较灵活，采用C语言 实现，实际上只是一个socket库的重新封装，如果做为消息队列使用，需要开发大量的代码。 ZeroMQ仅提供非持久性的队列，也就是说如果down机，数据将会丢失。</p>\n<p><strong>RabbitMQ</strong></p>\n<p>使用erlang语言开发，性能较好，适合于企业级的开发。但是不利于做二次开发和维护。 ActiveMQ<br>历史悠久的Apache开源项目。已经在很多产品中得到应用，实现了JMS1.1规范，可以和spring- jms轻松融合，实现了多种协议，支持持久化到数据库，对队列数较多的情况支持不好。</p>\n<p><strong>RocketMQ</strong></p>\n<p>阿里巴巴的MQ中间件，由java语言开发，性能非常好，能够撑住双十一的大流量，而且使用起来 很简单。</p>\n<p><strong>Kafka</strong></p>\n<p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式Publish&#x2F;Subscribe消息队列系统， 相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布 式系统。</p>\n<h3 id=\"RocketeMQ的架构及概念\"><a href=\"#RocketeMQ的架构及概念\" class=\"headerlink\" title=\"RocketeMQ的架构及概念\"></a>RocketeMQ的架构及概念</h3><p>RocketMQ 有很多优秀的特性，在可用性方面，RocketMQ 强调集群无单点，任意一点高可用，客户端具备负载均衡能力，可以轻松实现水平扩容；在性能方面，在天猫双 11 大促背后的亿级消息处理就是通过 RocketMQ 提供的保障；在 API 方面，提供了丰富的功能，可以实现异步消息、同步消息、顺序消息、事务消息等丰富的功能，能满足大多数应用场景；在可靠性方面，提供了消息持久化、失败重试机制、消息查询追溯的功能，进一步为可靠性提供保障。</p>\n<p><img src=\"/typora-user-images/72746e97a2cd474bb21601f507779a25.png\" alt=\"在这里插入图片描述\"></p>\n<p>了解 RocketMQ 的诸多特性后，咱们来理解 RocketMQ 几个重要的概念：</p>\n<ul>\n<li>消息模型（Message Model）：RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。</li>\n<li>消息生产者（Producer）：负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</li>\n<li>消息消费者（Consumer）：负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</li>\n<li>生产者组（Producer Group）：同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事物消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</li>\n<li>消费者组（Consumer Group）：同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。</li>\n<li>代理服务器（Broker Server）：消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</li>\n<li>名字服务（Name Server）：名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</li>\n<li>主题（Topic）：表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</li>\n<li>标签（Tag）:为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</li>\n<li>消息（Message）:消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</li>\n<li>拉取式消费（Pull Consumer）:Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</li>\n<li>推动式消费（Push Consumer）:Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。</li>\n<li>集群消费（Clustering）:集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</li>\n<li>广播消费（Broadcasting）:广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</li>\n<li>普通顺序消息（Normal Ordered Message）：普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</li>\n<li>严格顺序消息（Strictly Ordered Message）：严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</li>\n</ul>\n<p>官方文档地址：<a href=\"https://rocketmq.apache.org/zh/docs/\">https://rocketmq.apache.org/zh/docs/</a></p>\n<h2 id=\"RocketMQ入门\"><a href=\"#RocketMQ入门\" class=\"headerlink\" title=\"RocketMQ入门\"></a>RocketMQ入门</h2><p>RocketMQ 是一款分布式消息队列中间件，官方地址为<a href=\"http://rocketmq.apache.org/%EF%BC%8C%E7%9B%AE%E5%89%8D%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%BA4.8.0%E3%80%82RocketMQ\">http://rocketmq.apache.org/，目前最新版本为4.8.0。RocketMQ</a> 最初设计是为了满足阿里巴巴自身业务对异步消息传递的需要，在 3.X 版本后正式开源并捐献给 Apache，目前已孵化为 Apache 顶级项目，同时也是国内使用最广泛、使用人数最多的 MQ 产品之一</p>\n<p><img src=\"/typora-user-images/image-20240507112941777.png\" alt=\"image-20240507112941777\"></p>\n<h3 id=\"RocketMQ环境搭建\"><a href=\"#RocketMQ环境搭建\" class=\"headerlink\" title=\"RocketMQ环境搭建\"></a>RocketMQ环境搭建</h3><p>接下来我们先在linux平台下安装一个RocketMQ的服务,本文使用 docker-compose 安装RocketMq</p>\n<p><strong>创建docker文件夹</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir rocketmq</span><br><span class=\"line\">cd rocketmq</span><br><span class=\"line\">mkdir data</span><br><span class=\"line\">cd data</span><br><span class=\"line\">mkdir -p brokerconf logs store</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>在rocketmq文件夹下创建docker-compose.yml文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## rocketmq</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  rmqnamesrv1:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqnamesrv1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9876:9876</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/store:/opt/store</span><br><span class=\"line\">    command: sh mqnamesrv  </span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev</span><br><span class=\"line\"></span><br><span class=\"line\">  rmqnamesrv2:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqnamesrv2</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9877:9876</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/store:/opt/store</span><br><span class=\"line\">    command: sh mqnamesrv  </span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev         </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker1:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqbroker1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10911:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/store:/opt/store</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv1:9876;rmqnamesrv2:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &amp;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv1</span><br><span class=\"line\">      - rmqnamesrv2</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker2:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqbroker2</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10912:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/store:/opt/store</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv1:9876;rmqnamesrv2:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &amp;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv1</span><br><span class=\"line\">      - rmqnamesrv2</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev </span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker3:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqbroker3</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10913:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/store:/opt/store</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv1:9876;rmqnamesrv2:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &amp;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv1</span><br><span class=\"line\">      - rmqnamesrv2</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  rmqconsole:</span><br><span class=\"line\">    image: styletang/rocketmq-console-ng</span><br><span class=\"line\">    container_name: rmqconsole</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8080:8080</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        JAVA_OPTS: &quot;-Drocketmq.namesrv.addr=rmqnamesrv1:9876;rmqnamesrv2:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqbroker1</span><br><span class=\"line\">      - rmqbroker2</span><br><span class=\"line\">      - rmqbroker3</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev</span><br><span class=\"line\"> </span><br><span class=\"line\">networks:</span><br><span class=\"line\">  nt_dev:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>brokerconf下新建broker.conf文件并存储</strong></p>\n<p>创建文件</p>\n<p>&#x2F;Users&#x2F;lison&#x2F;work&#x2F;data&#x2F;dockerData&#x2F;rocketmq&#x2F;rmqbroker1&#x2F;brokerconf&#x2F;broker.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster</span><br><span class=\"line\">#broker名称</span><br><span class=\"line\">brokerName = rmqbroker1</span><br><span class=\"line\">brokerId = 0</span><br><span class=\"line\">deleteWhen = 04</span><br><span class=\"line\">fileReservedTime = 48</span><br><span class=\"line\">brokerRole = ASYNC_MASTER</span><br><span class=\"line\">flushDiskType = ASYNC_FLUSH</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;Users&#x2F;lison&#x2F;work&#x2F;data&#x2F;dockerData&#x2F;rocketmq&#x2F;rmqbroker2&#x2F;brokerconf&#x2F;broker.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster</span><br><span class=\"line\">#broker名称</span><br><span class=\"line\">brokerName = rmqbroker2</span><br><span class=\"line\">brokerId = 1</span><br><span class=\"line\">deleteWhen = 04</span><br><span class=\"line\">fileReservedTime = 48</span><br><span class=\"line\">brokerRole = ASYNC_MASTER</span><br><span class=\"line\">flushDiskType = ASYNC_FLUSH</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>&#x2F;Users&#x2F;lison&#x2F;work&#x2F;data&#x2F;dockerData&#x2F;rocketmq&#x2F;rmqbroker3&#x2F;brokerconf&#x2F;broker.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster</span><br><span class=\"line\">#broker名称</span><br><span class=\"line\">brokerName = rmqbroker3</span><br><span class=\"line\">brokerId = 2</span><br><span class=\"line\">deleteWhen = 04</span><br><span class=\"line\">fileReservedTime = 48</span><br><span class=\"line\">brokerRole = ASYNC_MASTER</span><br><span class=\"line\">flushDiskType = ASYNC_FLUSH</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>保存上边配置，执行docker-compose</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>docker ps 查看是否都启动了，如果都启动了，在成功，如果有没有启动成功，则可以查看docker日志，一般都是，ip设置问题。</p>\n<p><img src=\"/typora-user-images/image-20240509105505568.png\" alt=\"image-20240509105505568\"></p>\n<p><strong>打开对应的对口之后可以通过浏览器控制台进行查看</strong></p>\n<p><img src=\"/typora-user-images/image-20240509105539663.png\" alt=\"image-20240509105539663\"></p>\n<h2 id=\"SpringBoot-集成-RocketMQ\"><a href=\"#SpringBoot-集成-RocketMQ\" class=\"headerlink\" title=\"SpringBoot 集成 RocketMQ\"></a>SpringBoot 集成 RocketMQ</h2><p>1、使用Java代码来演示消息的发送和接收，加入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- RocketMQ客户端，版本与Broker保持一致  --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.rocketmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也可直接定义指定版本  </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">           &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">           &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">           &lt;version&gt;4.5.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">       &lt;/dependency&gt;--&gt;</span></span><br><span class=\"line\">       </span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、配置应用 application.yml。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#rocketmq配置</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq:</span></span><br><span class=\"line\">  <span class=\"attr\">enhance:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动隔离，用于激活配置类EnvironmentIsolationConfig</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动后会自动在topic上拼接激活的配置文件，达到自动隔离的效果</span></span><br><span class=\"line\">    <span class=\"attr\">enabledIsolation:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 隔离环境名称，拼接到topic后，topic_dev，默认空字符串</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">topic:</span> <span class=\"string\">springboot-mq</span></span><br><span class=\"line\">  <span class=\"attr\">name-server:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9876</span></span><br><span class=\"line\">  <span class=\"comment\"># 生产者配置</span></span><br><span class=\"line\">  <span class=\"attr\">producer:</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送同一类消息的设置为同一个group，保证唯一</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">rocketmq-pro-group</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息超时时间,默认3000</span></span><br><span class=\"line\">    <span class=\"attr\">sendMessageTimeout:</span> <span class=\"number\">30000</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息失败重试次数，默认2</span></span><br><span class=\"line\">    <span class=\"attr\">retryTimesWhenSendFailed:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\"># 异步消息重试此处，默认2</span></span><br><span class=\"line\">    <span class=\"attr\">retryTimesWhenSendAsyncFailed:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\"># 消息最大长度 默认1024*4(4M)</span></span><br><span class=\"line\">    <span class=\"attr\">maxMessageSize:</span> <span class=\"number\">4096</span></span><br><span class=\"line\">    <span class=\"comment\"># 是否在内部发送失败时重试另一个broker，默认false</span></span><br><span class=\"line\">    <span class=\"attr\">retryNextServer:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># 压缩消息阈值，默认4k(1024 * 4)</span></span><br><span class=\"line\">    <span class=\"attr\">compressMessageBodyThreshold:</span> <span class=\"number\">4096</span></span><br><span class=\"line\">  <span class=\"attr\">consumer:</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">rocketmq-consumer-group</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ruipeng.service;</span><br><span class=\"line\"><span class=\"comment\">//发送短信的服务</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@RocketMQMessageListener(consumerGroup = &quot;rocketmq-consumer-group&quot;, topic = &quot;springboot-mq&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RocketMQListener</span>&lt;Order&gt; &#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Order order)</span> &#123;</span><br><span class=\"line\">\t log.info(<span class=\"string\">&quot;收到一个信息&#123;&#125;,接下来发送短信&quot;</span>, JSON.toJSONString(order)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = OrderApplication.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageTypeTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//同步消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSyncSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//参数一: topic， 如果想添加tag 可以使用&quot;topic:tag&quot;的写法 //参数二: 消息内容</span></span><br><span class=\"line\">        <span class=\"type\">SendResult</span> <span class=\"variable\">sendResult</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                rocketMQTemplate.syncSend(<span class=\"string\">&quot;test-topic-1&quot;</span>, <span class=\"string\">&quot;这是一条同步消息&quot;</span>);</span><br><span class=\"line\">        System.out.println(sendResult);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异步消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAsyncSend</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSyncSendMsg</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//参数一: topic, 如果想添加tag 可以使用&quot;topic:tag&quot;的写法</span></span><br><span class=\"line\"><span class=\"comment\">//参数二: 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">//参数三: 回调函数, 处理返回结果 rocketMQTemplate.asyncSend(&quot;test-topic-1&quot;, &quot;这是一条异步消息&quot;, new </span></span><br><span class=\"line\">            SendCallback() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span> <span class=\"params\">(SendResult sendResult)</span>&#123;</span><br><span class=\"line\">                    System.out.println(sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onException</span> <span class=\"params\">(Throwable throwable)</span>&#123;</span><br><span class=\"line\">                    System.out.println(throwable);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"><span class=\"comment\">//让线程不要终止 Thread.sleep(30000000); </span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单向消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testOneWay</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        rocketMQTemplate.sendOneWay(<span class=\"string\">&quot;test-topic-1&quot;</span>, <span class=\"string\">&quot;这是一条单向消息&quot;</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>三种发送方式的对比</p>\n<table>\n<thead>\n<tr>\n<th>发送方式</th>\n<th>发送 TPS</th>\n<th>发送结果反馈</th>\n<th>可靠性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步发送</td>\n<td>快</td>\n<td>有</td>\n<td>不丢失</td>\n</tr>\n<tr>\n<td>异步发送</td>\n<td>快</td>\n<td>有</td>\n<td>不丢失</td>\n</tr>\n<tr>\n<td>单向发送</td>\n<td>最快</td>\n<td>无</td>\n<td>可能丢失</td>\n</tr>\n</tbody></table>\n<p>消费主义细节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RocketMQMessageListener(</span></span><br><span class=\"line\"><span class=\"meta\">consumerGroup = &quot;shop&quot;,//消费者分组</span></span><br><span class=\"line\"><span class=\"meta\">topic = &quot;order-topic&quot;,//要消费的主题</span></span><br><span class=\"line\"><span class=\"meta\">consumeMode = ConsumeMode.CONCURRENTLY, //消费模式:无序和有序 messageModel = MessageModel.CLUSTERING, //消息模式:广播和集群,默认是集群 </span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RocketMQListener</span>&lt;Order&gt; &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>RocketMQ支持两种消息模式:</p>\n<ul>\n<li>广播消费: 每个消费者实例都会收到消息,也就是一条消息可以被每个消费者实例处理;</li>\n<li>集群消费: 一条消息只能被一个消费者实例消费</li>\n</ul>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.4.20</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-07-RocketMQ消息驱动\"><a href=\"#Spring-Cloud-Alibaba-07-RocketMQ消息驱动\" class=\"headerlink\" title=\"Spring Cloud Alibaba-07-RocketMQ消息驱动\"></a>Spring Cloud Alibaba-07-RocketMQ消息驱动</h1><p>[toc]</p>\n<h2 id=\"MQ简介\"><a href=\"#MQ简介\" class=\"headerlink\" title=\"MQ简介\"></a>MQ简介</h2><p>消息队列（Message Queue）简称 MQ，是一种跨进程的通信机制，通常用于应用程序间进行数据的异步传输，MQ 产品在架构中通常也被叫作“消息中间件”。它的最主要职责就是保证服务间进行可靠的数据传输，同时实现服务间的解耦。</p>\n<p><img src=\"/typora-user-images/image-20240507111933014.png\" alt=\"image-20240507111933014\"></p>\n<h3 id=\"MQ的应用场景\"><a href=\"#MQ的应用场景\" class=\"headerlink\" title=\"MQ的应用场景\"></a>MQ的应用场景</h3><ul>\n<li><p>应用解耦</p>\n<blockquote>\n<p>在电商平台中，用户下订单需要调用订单系统，此时订单系统还需要调用库存系统、支付系统、物流系统完成业务。此时会产生两个问题：</p>\n<p>1 如果库存系统出现故障，会造成整个订单系统崩溃。</p>\n<p>2 如果需求修改，新增了一个X系统，此时必须修改订单系统的代码。</p>\n<p><img src=\"/typora-user-images/image-20230627191528034.png\" alt=\"image-20230627191528034\"></p>\n<p>如果在系统中引入MQ，即订单系统将消息先发送到MQ中，MQ再转发到其他系统，则会解决以下问题： </p>\n<p>1、由于订单系统只发消息给MQ，不直接对接其他系统，如果库存系统出现故障，不影响整个订单。</p>\n<p>2、如果需求修改，新增了一个X系统，此时无需修改订单系统的代码，只需修改MQ将消息发送给X系统即可。</p>\n<p><img src=\"/typora-user-images/image-20240507112405845.png\" alt=\"image-20240507112405845\"></p>\n</blockquote>\n</li>\n<li><p>异步提速</p>\n<blockquote>\n<p>如果订单系统同步访问每个系统，则用户下单等待时长如下：</p>\n<p><img src=\"/typora-user-images/image-20230628093823674.png\" alt=\"image-20230628093823674\"></p>\n<p>如果引入MQ,则用户等待时间如下：</p>\n<p><img src=\"/typora-user-images/image-20230628094058045.png\" alt=\"image-20230628094058045\"></p>\n</blockquote>\n</li>\n<li><p>消峰填谷</p>\n<blockquote>\n<p>假设我们的系统每秒只能承载1000请求，如果请求瞬间增多到每秒 5000，则会造成系统崩溃。此时引入mq即可解决该问题</p>\n<p><img src=\"/typora-user-images/image-20230628094428585.png\" alt=\"image-20230628094428585\"></p>\n<p>使用了MQ之后，限制消费消息的速度为1000，这样一来，高峰期产生的数据势必会被积压在MQ中，高峰就被“削”掉了，但是因为消息积压，在高峰期过后的一段时间内，消费消息的速度还是会维持 在1000，直到消费完积压的消息，这就叫做“填谷”。 </p>\n<p><img src=\"/typora-user-images/image-20230628094521252.png\" alt=\"image-20230628094521252\"></p>\n<p>流量削峰也是消息队列 MQ 的常用场景，一般在秒杀或团队抢购(高并发)活动中使用广泛。<br>在秒杀或团队抢购活动中，由于用户请求量较大，导致流量暴增，秒杀的应用在处理如此大量的访问流 量后，下游的通知系统无法承载海量的调用量，甚至会导致系统崩溃等问题而发生漏通知的情况。为解 决这些问题，可在应用和下游通知系统之间加入消息队列 MQ。</p>\n<p>秒杀处理流程如下所述:</p>\n<ol>\n<li>用户发起海量秒杀请求到秒杀业务处理系统。</li>\n<li>秒杀处理系统按照秒杀处理逻辑将满足秒杀条件的请求发送至消息队列 MQ。</li>\n<li>下游的通知系统订阅消息队列 MQ 的秒杀相关消息，再将秒杀成功的消息发送到相应用户。</li>\n<li>用户收到秒杀成功的通知。</li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"常见的MQ产品\"><a href=\"#常见的MQ产品\" class=\"headerlink\" title=\"常见的MQ产品\"></a>常见的MQ产品</h3><p>目前业界有很多MQ产品，比较出名的有下面这些:</p>\n<p><strong>ZeroMQ</strong></p>\n<p>号称最快的消息队列系统，尤其针对大吞吐量的需求场景。扩展性好，开发比较灵活，采用C语言 实现，实际上只是一个socket库的重新封装，如果做为消息队列使用，需要开发大量的代码。 ZeroMQ仅提供非持久性的队列，也就是说如果down机，数据将会丢失。</p>\n<p><strong>RabbitMQ</strong></p>\n<p>使用erlang语言开发，性能较好，适合于企业级的开发。但是不利于做二次开发和维护。 ActiveMQ<br>历史悠久的Apache开源项目。已经在很多产品中得到应用，实现了JMS1.1规范，可以和spring- jms轻松融合，实现了多种协议，支持持久化到数据库，对队列数较多的情况支持不好。</p>\n<p><strong>RocketMQ</strong></p>\n<p>阿里巴巴的MQ中间件，由java语言开发，性能非常好，能够撑住双十一的大流量，而且使用起来 很简单。</p>\n<p><strong>Kafka</strong></p>\n<p>Kafka是Apache下的一个子项目，是一个高性能跨语言分布式Publish&#x2F;Subscribe消息队列系统， 相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布 式系统。</p>\n<h3 id=\"RocketeMQ的架构及概念\"><a href=\"#RocketeMQ的架构及概念\" class=\"headerlink\" title=\"RocketeMQ的架构及概念\"></a>RocketeMQ的架构及概念</h3><p>RocketMQ 有很多优秀的特性，在可用性方面，RocketMQ 强调集群无单点，任意一点高可用，客户端具备负载均衡能力，可以轻松实现水平扩容；在性能方面，在天猫双 11 大促背后的亿级消息处理就是通过 RocketMQ 提供的保障；在 API 方面，提供了丰富的功能，可以实现异步消息、同步消息、顺序消息、事务消息等丰富的功能，能满足大多数应用场景；在可靠性方面，提供了消息持久化、失败重试机制、消息查询追溯的功能，进一步为可靠性提供保障。</p>\n<p><img src=\"/typora-user-images/72746e97a2cd474bb21601f507779a25.png\" alt=\"在这里插入图片描述\"></p>\n<p>了解 RocketMQ 的诸多特性后，咱们来理解 RocketMQ 几个重要的概念：</p>\n<ul>\n<li>消息模型（Message Model）：RocketMQ主要由 Producer、Broker、Consumer 三部分组成，其中Producer 负责生产消息，Consumer 负责消费消息，Broker 负责存储消息。Broker 在实际部署过程中对应一台服务器，每个 Broker 可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的 Broker。Message Queue 用于存储消息的物理地址，每个Topic中的消息地址存储于多个 Message Queue 中。ConsumerGroup 由多个Consumer 实例构成。</li>\n<li>消息生产者（Producer）：负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</li>\n<li>消息消费者（Consumer）：负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。</li>\n<li>生产者组（Producer Group）：同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事物消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</li>\n<li>消费者组（Consumer Group）：同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：集群消费（Clustering）和广播消费（Broadcasting）。</li>\n<li>代理服务器（Broker Server）：消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</li>\n<li>名字服务（Name Server）：名称服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。</li>\n<li>主题（Topic）：表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</li>\n<li>标签（Tag）:为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</li>\n<li>消息（Message）:消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</li>\n<li>拉取式消费（Pull Consumer）:Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</li>\n<li>推动式消费（Push Consumer）:Consumer消费的一种类型，该模式下Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。</li>\n<li>集群消费（Clustering）:集群消费模式下,相同Consumer Group的每个Consumer实例平均分摊消息。</li>\n<li>广播消费（Broadcasting）:广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。</li>\n<li>普通顺序消息（Normal Ordered Message）：普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</li>\n<li>严格顺序消息（Strictly Ordered Message）：严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</li>\n</ul>\n<p>官方文档地址：<a href=\"https://rocketmq.apache.org/zh/docs/\">https://rocketmq.apache.org/zh/docs/</a></p>\n<h2 id=\"RocketMQ入门\"><a href=\"#RocketMQ入门\" class=\"headerlink\" title=\"RocketMQ入门\"></a>RocketMQ入门</h2><p>RocketMQ 是一款分布式消息队列中间件，官方地址为<a href=\"http://rocketmq.apache.org/%EF%BC%8C%E7%9B%AE%E5%89%8D%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%BA4.8.0%E3%80%82RocketMQ\">http://rocketmq.apache.org/，目前最新版本为4.8.0。RocketMQ</a> 最初设计是为了满足阿里巴巴自身业务对异步消息传递的需要，在 3.X 版本后正式开源并捐献给 Apache，目前已孵化为 Apache 顶级项目，同时也是国内使用最广泛、使用人数最多的 MQ 产品之一</p>\n<p><img src=\"/typora-user-images/image-20240507112941777.png\" alt=\"image-20240507112941777\"></p>\n<h3 id=\"RocketMQ环境搭建\"><a href=\"#RocketMQ环境搭建\" class=\"headerlink\" title=\"RocketMQ环境搭建\"></a>RocketMQ环境搭建</h3><p>接下来我们先在linux平台下安装一个RocketMQ的服务,本文使用 docker-compose 安装RocketMq</p>\n<p><strong>创建docker文件夹</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir rocketmq</span><br><span class=\"line\">cd rocketmq</span><br><span class=\"line\">mkdir data</span><br><span class=\"line\">cd data</span><br><span class=\"line\">mkdir -p brokerconf logs store</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>在rocketmq文件夹下创建docker-compose.yml文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## rocketmq</span><br><span class=\"line\">version: &#x27;3.8&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  rmqnamesrv1:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqnamesrv1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9876:9876</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv1/data/store:/opt/store</span><br><span class=\"line\">    command: sh mqnamesrv  </span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev</span><br><span class=\"line\"></span><br><span class=\"line\">  rmqnamesrv2:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqnamesrv2</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 9877:9876</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqnamesrv2/data/store:/opt/store</span><br><span class=\"line\">    command: sh mqnamesrv  </span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev         </span><br><span class=\"line\"> </span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker1:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqbroker1</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10911:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/data/store:/opt/store</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker1/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv1:9876;rmqnamesrv2:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &amp;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv1</span><br><span class=\"line\">      - rmqnamesrv2</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker2:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqbroker2</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10912:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/data/store:/opt/store</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker2/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv1:9876;rmqnamesrv2:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &amp;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv1</span><br><span class=\"line\">      - rmqnamesrv2</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev </span><br><span class=\"line\"></span><br><span class=\"line\">  rmqbroker3:</span><br><span class=\"line\">    image: apache/rocketmq:4.9.3</span><br><span class=\"line\">    container_name: rmqbroker3</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 10913:10911</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/logs:/opt/logs</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/data/store:/opt/store</span><br><span class=\"line\">      - /Users/lison/work/data/dockerData/rocketmq/rmqbroker3/brokerconf/broker.conf:/etc/rocketmq/broker.conf</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        NAMESRV_ADDR: &quot;rmqnamesrv1:9876;rmqnamesrv2:9876&quot;</span><br><span class=\"line\">        JAVA_OPTS: &quot; -Duser.home=/opt&quot;</span><br><span class=\"line\">        JAVA_OPT_EXT: &quot;-server -Xms128m -Xmx128m -Xmn128m&quot;</span><br><span class=\"line\">    command: sh mqbroker -c /etc/rocketmq/broker.conf autoCreateTopicEnable=true &amp;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqnamesrv1</span><br><span class=\"line\">      - rmqnamesrv2</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\">  rmqconsole:</span><br><span class=\"line\">    image: styletang/rocketmq-console-ng</span><br><span class=\"line\">    container_name: rmqconsole</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 8080:8080</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">        JAVA_OPTS: &quot;-Drocketmq.namesrv.addr=rmqnamesrv1:9876;rmqnamesrv2:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false&quot;</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - rmqbroker1</span><br><span class=\"line\">      - rmqbroker2</span><br><span class=\"line\">      - rmqbroker3</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - nt_dev</span><br><span class=\"line\"> </span><br><span class=\"line\">networks:</span><br><span class=\"line\">  nt_dev:</span><br><span class=\"line\">    external: true</span><br><span class=\"line\">    driver: bridge</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>brokerconf下新建broker.conf文件并存储</strong></p>\n<p>创建文件</p>\n<p>&#x2F;Users&#x2F;lison&#x2F;work&#x2F;data&#x2F;dockerData&#x2F;rocketmq&#x2F;rmqbroker1&#x2F;brokerconf&#x2F;broker.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster</span><br><span class=\"line\">#broker名称</span><br><span class=\"line\">brokerName = rmqbroker1</span><br><span class=\"line\">brokerId = 0</span><br><span class=\"line\">deleteWhen = 04</span><br><span class=\"line\">fileReservedTime = 48</span><br><span class=\"line\">brokerRole = ASYNC_MASTER</span><br><span class=\"line\">flushDiskType = ASYNC_FLUSH</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;Users&#x2F;lison&#x2F;work&#x2F;data&#x2F;dockerData&#x2F;rocketmq&#x2F;rmqbroker2&#x2F;brokerconf&#x2F;broker.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster</span><br><span class=\"line\">#broker名称</span><br><span class=\"line\">brokerName = rmqbroker2</span><br><span class=\"line\">brokerId = 1</span><br><span class=\"line\">deleteWhen = 04</span><br><span class=\"line\">fileReservedTime = 48</span><br><span class=\"line\">brokerRole = ASYNC_MASTER</span><br><span class=\"line\">flushDiskType = ASYNC_FLUSH</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>&#x2F;Users&#x2F;lison&#x2F;work&#x2F;data&#x2F;dockerData&#x2F;rocketmq&#x2F;rmqbroker3&#x2F;brokerconf&#x2F;broker.conf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brokerClusterName = DefaultCluster</span><br><span class=\"line\">#broker名称</span><br><span class=\"line\">brokerName = rmqbroker3</span><br><span class=\"line\">brokerId = 2</span><br><span class=\"line\">deleteWhen = 04</span><br><span class=\"line\">fileReservedTime = 48</span><br><span class=\"line\">brokerRole = ASYNC_MASTER</span><br><span class=\"line\">flushDiskType = ASYNC_FLUSH</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>保存上边配置，执行docker-compose</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n<p>docker ps 查看是否都启动了，如果都启动了，在成功，如果有没有启动成功，则可以查看docker日志，一般都是，ip设置问题。</p>\n<p><img src=\"/typora-user-images/image-20240509105505568.png\" alt=\"image-20240509105505568\"></p>\n<p><strong>打开对应的对口之后可以通过浏览器控制台进行查看</strong></p>\n<p><img src=\"/typora-user-images/image-20240509105539663.png\" alt=\"image-20240509105539663\"></p>\n<h2 id=\"SpringBoot-集成-RocketMQ\"><a href=\"#SpringBoot-集成-RocketMQ\" class=\"headerlink\" title=\"SpringBoot 集成 RocketMQ\"></a>SpringBoot 集成 RocketMQ</h2><p>1、使用Java代码来演示消息的发送和接收，加入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- RocketMQ客户端，版本与Broker保持一致  --&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.rocketmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 也可直接定义指定版本  </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t&lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">           &lt;groupId&gt;org.apache.rocketmq&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">           &lt;artifactId&gt;rocketmq-client&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">           &lt;version&gt;4.5.2&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">       &lt;/dependency&gt;--&gt;</span></span><br><span class=\"line\">       </span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、配置应用 application.yml。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#rocketmq配置</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq:</span></span><br><span class=\"line\">  <span class=\"attr\">enhance:</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动隔离，用于激活配置类EnvironmentIsolationConfig</span></span><br><span class=\"line\">    <span class=\"comment\"># 启动后会自动在topic上拼接激活的配置文件，达到自动隔离的效果</span></span><br><span class=\"line\">    <span class=\"attr\">enabledIsolation:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\"># 隔离环境名称，拼接到topic后，topic_dev，默认空字符串</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span> <span class=\"string\">dev</span></span><br><span class=\"line\">  <span class=\"attr\">topic:</span> <span class=\"string\">springboot-mq</span></span><br><span class=\"line\">  <span class=\"attr\">name-server:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:9876</span></span><br><span class=\"line\">  <span class=\"comment\"># 生产者配置</span></span><br><span class=\"line\">  <span class=\"attr\">producer:</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送同一类消息的设置为同一个group，保证唯一</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">rocketmq-pro-group</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息超时时间,默认3000</span></span><br><span class=\"line\">    <span class=\"attr\">sendMessageTimeout:</span> <span class=\"number\">30000</span></span><br><span class=\"line\">    <span class=\"comment\"># 发送消息失败重试次数，默认2</span></span><br><span class=\"line\">    <span class=\"attr\">retryTimesWhenSendFailed:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\"># 异步消息重试此处，默认2</span></span><br><span class=\"line\">    <span class=\"attr\">retryTimesWhenSendAsyncFailed:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"comment\"># 消息最大长度 默认1024*4(4M)</span></span><br><span class=\"line\">    <span class=\"attr\">maxMessageSize:</span> <span class=\"number\">4096</span></span><br><span class=\"line\">    <span class=\"comment\"># 是否在内部发送失败时重试另一个broker，默认false</span></span><br><span class=\"line\">    <span class=\"attr\">retryNextServer:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"comment\"># 压缩消息阈值，默认4k(1024 * 4)</span></span><br><span class=\"line\">    <span class=\"attr\">compressMessageBodyThreshold:</span> <span class=\"number\">4096</span></span><br><span class=\"line\">  <span class=\"attr\">consumer:</span></span><br><span class=\"line\">    <span class=\"attr\">group:</span> <span class=\"string\">rocketmq-consumer-group</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.ruipeng.service;</span><br><span class=\"line\"><span class=\"comment\">//发送短信的服务</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@RocketMQMessageListener(consumerGroup = &quot;rocketmq-consumer-group&quot;, topic = &quot;springboot-mq&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RocketMQListener</span>&lt;Order&gt; &#123; </span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> </span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onMessage</span><span class=\"params\">(Order order)</span> &#123;</span><br><span class=\"line\">\t log.info(<span class=\"string\">&quot;收到一个信息&#123;&#125;,接下来发送短信&quot;</span>, JSON.toJSONString(order)); </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = OrderApplication.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageTypeTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//同步消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSyncSend</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//参数一: topic， 如果想添加tag 可以使用&quot;topic:tag&quot;的写法 //参数二: 消息内容</span></span><br><span class=\"line\">        <span class=\"type\">SendResult</span> <span class=\"variable\">sendResult</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                rocketMQTemplate.syncSend(<span class=\"string\">&quot;test-topic-1&quot;</span>, <span class=\"string\">&quot;这是一条同步消息&quot;</span>);</span><br><span class=\"line\">        System.out.println(sendResult);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异步消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testAsyncSend</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSyncSendMsg</span> <span class=\"params\">()</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//参数一: topic, 如果想添加tag 可以使用&quot;topic:tag&quot;的写法</span></span><br><span class=\"line\"><span class=\"comment\">//参数二: 消息内容</span></span><br><span class=\"line\"><span class=\"comment\">//参数三: 回调函数, 处理返回结果 rocketMQTemplate.asyncSend(&quot;test-topic-1&quot;, &quot;这是一条异步消息&quot;, new </span></span><br><span class=\"line\">            SendCallback() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onSuccess</span> <span class=\"params\">(SendResult sendResult)</span>&#123;</span><br><span class=\"line\">                    System.out.println(sendResult);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onException</span> <span class=\"params\">(Throwable throwable)</span>&#123;</span><br><span class=\"line\">                    System.out.println(throwable);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"><span class=\"comment\">//让线程不要终止 Thread.sleep(30000000); </span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//单向消息</span></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testOneWay</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        rocketMQTemplate.sendOneWay(<span class=\"string\">&quot;test-topic-1&quot;</span>, <span class=\"string\">&quot;这是一条单向消息&quot;</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>三种发送方式的对比</p>\n<table>\n<thead>\n<tr>\n<th>发送方式</th>\n<th>发送 TPS</th>\n<th>发送结果反馈</th>\n<th>可靠性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步发送</td>\n<td>快</td>\n<td>有</td>\n<td>不丢失</td>\n</tr>\n<tr>\n<td>异步发送</td>\n<td>快</td>\n<td>有</td>\n<td>不丢失</td>\n</tr>\n<tr>\n<td>单向发送</td>\n<td>最快</td>\n<td>无</td>\n<td>可能丢失</td>\n</tr>\n</tbody></table>\n<p>消费主义细节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RocketMQMessageListener(</span></span><br><span class=\"line\"><span class=\"meta\">consumerGroup = &quot;shop&quot;,//消费者分组</span></span><br><span class=\"line\"><span class=\"meta\">topic = &quot;order-topic&quot;,//要消费的主题</span></span><br><span class=\"line\"><span class=\"meta\">consumeMode = ConsumeMode.CONCURRENTLY, //消费模式:无序和有序 messageModel = MessageModel.CLUSTERING, //消息模式:广播和集群,默认是集群 </span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SmsService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RocketMQListener</span>&lt;Order&gt; &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>RocketMQ支持两种消息模式:</p>\n<ul>\n<li>广播消费: 每个消费者实例都会收到消息,也就是一条消息可以被每个消费者实例处理;</li>\n<li>集群消费: 一条消息只能被一个消费者实例消费</li>\n</ul>\n"},{"_content":"\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.5.03`\n\n# Spring Cloud Alibaba-09-Seata分布式事务\n\n[toc]\n\n## 分布式事务基础\n\n### 事务\n\n事务指的就是一个操作单元，在这个操作单元中的所有操作最终要保持一致的行为，要么所有操作都成功，要么所有的操作都被撤销。简单地说，事务提供一种“要么什么都不做，要么做全套”机制。\n\n### 本地事务\n\n本地事物其实可以认为是数据库提供的事务机制。说到数据库事务就不得不说，数据库事务中的四 大特性:\n\n* A:原子性(Atomicity)，一个事务中的所有操作，要么全部完成，要么全部不完成\n* C:一致性(Consistency)，在一个事务执行之前和执行之后数据库都必须处于一致性状态\n* I:隔离性(Isolation)，在并发环境中，当不同的事务同时操作相同的数据时，事务之间互不影响\n* D:持久性(Durability)，指的是只要事务成功结束，它对数据库所做的更新就必须永久的保存下来\n\n数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚\n\n### 分布式事务\n\n分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布\n式系统的不同节点之上。\n\n简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同\n的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。\n\n本质上来说，分布式事务就是为了保证不同数据库的数据一致性。\n\n### 分布式事务的场景\n\n**1、单体系统访问多个数据库，一个服务需要调用多个数据库实例完成数据的增删改操作**\n\n![image-20240514095424805](typora-user-images/image-20240514095424805.png)\n\n\n\n**2、多个微服务访问同一个数据库实例完成数据的增删改操作**\n\n![image-20240514095650303](typora-user-images/image-20240514095650303.png)\n\n\n\n3、多个微服务访问多个数据库，完成数据的增删改操作\n\n![image-20240514095835213](typora-user-images/image-20240514095835213.png)\n\n\n\n\n\n## 分布式事务的解决方案\n\n### 全局事务\n\n全局事务基于DTP模型实现。DTP是由X/Open组织提出的一种分布式事务模型——X/Open Distributed Transaction Processing Reference Model。它规定了要实现分布式事务，需要三种角色:\n\n* AP: Application 应用系统 (微服务)\n* TM: Transaction Manager 事务管理器 (全局事务管理)\n* RM: Resource Manager 资源管理器 (数据库)\n\n整个事务分成两个阶段:\n\n- 阶段一: 表决阶段，所有参与者都将本事务执行预提交，并将能否成功的信息反馈发给协调者。\n- 阶段二: 执行阶段，协调者根据所有参与者的反馈，通知所有参与者，步调一致地执行提交或者回 滚。\n\n![image-20240516094845785](typora-user-images/image-20240516094845785.png)\n\n优点\n\n- 提高了数据一致性的概率，实现成本较低\n\n缺点\n\n- 单点问题: 事务协调者宕机\n- 同步阻塞: 延迟了提交时间，加长了资源阻塞时间\n- 数据不一致: 提交第二阶段，依然存在commit结果未知的情况，有可能导致数据不一致\n\n\n\n### 可靠消息服务\n\n基于可靠消息服务的方案是通过消息中间件保证上、下游应用数据操作的一致性。假设有A和B两个 系统，分别可以处理任务A和任务B。此时存在一个业务流程，需要将任务A和任务B在同一个事务中处 理。就可以使用消息中间件来实现这种分布式事务\n\n\n\n![image-20240520161819461](typora-user-images/image-20240520161819461.png)\n\n\n\n**第一步: 消息由系统A投递到中间件**\n\n1. 在系统A处理任务A前，首先向消息中间件发送一条消息\n2. 消息中间件收到后将该条消息持久化，但并不投递。持久化成功后，向A回复一个确认应答\n3. 系统A收到确认应答后，则可以开始处理任务A\n4. 任务A处理完成后，向消息中间件发送Commit或者Rollback请求。该请求发送完成后，对系统A而 言，该事务的处理过程就结束了\n5. 如果消息中间件收到Commit，则向B系统投递消息;如果收到Rollback，则直接丢弃消息。但是 如果消息中间件收不到Commit和Rollback指令，那么就要依靠\"超时询问机制\"。\n\n>超时询问机制\n>系统A除了实现正常的业务流程外，还需提供一个事务询问的接口，供消息中间件调 用。当消息中间件收到发布消息便开始计时，如果到了超时没收到确认指令，就会主动调用 系统A提供的事务询问接口询问该系统目前的状态。该接口会返回三种结果，中间件根据三 种结果做出不同反应:\n>提交:将该消息投递给系统B\n>回滚:直接将条消息丢弃\n>处理中:继续等待\n\n\n\n**第二步: 消息由中间件投递到系统B**\n\n消息中间件向下游系统投递完消息后便进入阻塞等待状态，下游系统便立即进行任务的处理，任务\n处理完成后便向消息中间件返回应答\n\n* 如果消息中间件收到确认应答后便认为该事务处理完毕\n* 如果消息中间件在等待确认应答超时之后就会重新投递，直到下游消费者返回消费成功响应为止。\n  一般消息中间件可以设置消息重试的次数和时间间隔，如果最终还是不能成功投递，则需要手工干\n  预。这里之所以使用人工干预，而不是使用让A系统回滚，主要是考虑到整个系统设计的复杂度问\n  题。\n\n基于可靠消息服务的分布式事务，前半部分使用异步，注重性能;后半部分使用同步，注重开发成本。\n\n\n\n### 最大努力通知\n\n最大努力通知也被称为定期校对，其实是对第二种解决方案的进一步优化。它引入了本地消息表来\n记录错误消息，然后加入失败消息的定期校对功能，来进一步保证消息会被下游系统消费。\n\n\n\n![image-20240521094502177](typora-user-images/image-20240521094502177.png)\n\n\n\n**第一步: 消息由系统A投递到中间件**\n\n1. 处理业务的同一事务中，向本地消息表中写入一条记录\n\n2. 准备专门的消息发送者不断地发送本地消息表中的消息到消息中间件，如果发送失败则重试\n\n\n\n**第二步: 消息由中间件投递到系统B**\n\n1. 消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行\n2. 当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该\n   事务完成\n3. 对于投递失败的消息，利用重试机制进行重试，对于重试失败的，写入错误消息表\n4. 消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费\n\n这种方式的优缺点:\n   **优点:** 一种非常经典的实现，实现了最终一致性。\n   **缺点:** 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。\n\n\n\n### TCC事务\n\nTCC即为Try Confirm Cancel，它属于补偿型分布式事务。TCC实现分布式事务一共有三个步骤:\n\n**Try:尝试待执行的业务**\n\n这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源\n\n**Confirm:确认执行业务**\n\n确认执行业务操作，不做任何业务检查， 只使用Try阶段预留的业务资源。通常情况下，采用TCC 则认为 Confirm阶段是不会出错的。即:只要Try成功，Confirm一定成功。若Confirm阶段真的 出错了，需引入重试机制或人工处理。\n\n**Cancel:取消待执行的业务**\n\n取消Try阶段预留的业务资源。通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若 Cancel阶段真的出错了，需引入重试机制或人工处理。\n\n\n\n![image-20240522090312508](typora-user-images/image-20240522090312508.png)\n\n\n\n![image-20240522090352573](typora-user-images/image-20240522090352573.png)\n\n\n\nTCC两阶段提交与XA两阶段提交的区别是:\nXA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。\nTCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。\n\nTCC事务的优缺点:\n\n**优点**:把数据库层的二阶段提交上提到了应用层来实现，规避了数据库层的2PC性能低下问题。\n**缺点**:TCC的Try、Confirm和Cancel操作功能需业务提供，开发成本高。\n\n\n\n## Seata介绍\n\n2019 年 1 月，阿里巴巴中间件团队发起了开源项目 Fescar(Fast & EaSy Commit And Rollback)，其愿景是让分布式事务的使用像本地事务的使用一样，简单和高效，并逐步解决开发者们 遇到的分布式事务方面的所有难题。后来更名为 Seata，意为:Simple Extensible Autonomous Transaction Architecture，是一套分布式事务解决方案。\n\n官方网站：https://seata.apache.org/\n\n\n\n![image-20240522091143334](typora-user-images/image-20240522091143334.png)\n\n\n\nSeata的设计目标是对业务无侵入，因此从业务无侵入的2PC方案着手，在传统2PC的基础上演进。 它把一个分布式事务理解成一个包含了若干分支事务的全局事务。全局事务的职责是协调其下管辖的分 支事务达成一致，要么一起成功提交，要么一起失败回滚。此外，通常分支事务本身就是一个关系数据 库的本地事务。\n\n![image-20240522090958255](typora-user-images/image-20240522090958255.png)\n\n\n\nSeata主要由三个重要组件组成:\n\n**TC**:Transaction Coordinator 事务协调器，管理全局的分支事务的状态，用于全局性事务的提交 和回滚。\n\n**TM**:Transaction Manager 事务管理器，用于开启、提交或者回滚全局事务。\n\n**RM:**Resource Manager 资源管理器，用于分支事务上的资源管理，向TC注册分支事务，上报分 支事务的状态，接受TC的命令来提交或者回滚分支事务。\n\n![在这里插入图片描述](typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png)\n\n\n\n**Seata的执行流程如下:**\n\n1. **全局事务开始**：TM向TC请求开启一个全局事务，TC生成一个全局事务ID（XID）。\n2. **分支事务注册**：TM通知涉及的每个RM开始分支事务，RM在执行本地事务前向TC注册分支事务，并在本地保存XID。\n3. **执行业务操作**：RM在本地事务上下文中执行SQL操作，同时记录undo log（用于事务回滚）。\n4. **一阶段提交预处理**：TM请求TC进行一阶段提交的预处理，TC通知所有RM准备提交，RM将本地事务状态置为预提交，并回复TC。\n5. **二阶段提交**：若所有RM的预提交都成功，TM通知TC进行二阶段提交。TC命令所有RM正式提交分支事务，RM提交本地事务并清理undo log。\n6. **二阶段回滚**：如果任意RM的预提交失败，或TM请求回滚，TC会命令所有RM进行分支事务的回滚，RM使用undo log恢复数据到事务前状态，并清除undo log。\n\n\n\n**Seata实现2PC与传统2PC的差别:**\n\n1. 架构层次方面，传统2PC方案的 RM 实际上是在数据库层，RM本质上就是数据库自身，通过XA协 议实现，而 Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。\n2. 两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保 持到Phase2完成才释放。而Seata的做法是在Phase1 就将本地事务提交，这样就可以省去Phase2 持锁的时间，整体提高效率。\n\n\n\n## Docker安装Seata-Nacos注册中心，DB存储\n\n### 准备工作\n\n**1、生成seata配置文件**\n\n我们通过创建临时容器的方式，直接从中拷贝出自动生成的配置信息，待挂载使用\n\n**2、创建文件夹**\n\n~~~\nmkdir -p /Users/lison/work/data/dockerData/seata/resources\n~~~\n\n**3、创建临时容器**\n\n~~~shell\ndocker run -d \\\n--name seata \\\nseataio/seata-server\n~~~\n\n**4、拷贝容器内置配置文件**\n\n~~~\ndocker cp seata:/seata-server/resources /Users/lison/work/data/dockerData/seata/\n~~~\n\n**5、删除临时容器**\n\n~~~\ndocker rm -f seata\n~~~\n\n\n\n### **导入Seata配置到Nacos**\n\n由于我们需要使用nacos作为seata服务的配置中心和注册中心，其中，配置中心的配置，我们需要先行导入\n\n> https://github.com/apache/incubator-seata/tree/2.x/script/config-center\n\n里面有很多配置，但我们只取重点需要的，如下：\n\n~~~properties\n\ntransport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.enableClientBatchSendRequest=true\ntransport.threadFactory.bossThreadPrefix=NettyBoss\ntransport.threadFactory.workerThreadPrefix=NettyServerNIOWorker\ntransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler\ntransport.threadFactory.shareBossWorker=false\ntransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector\ntransport.threadFactory.clientSelectorThreadSize=1\ntransport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread\ntransport.threadFactory.bossThreadSize=1\ntransport.threadFactory.workerThreadSize=default\ntransport.shutdown.wait=3\nservice.vgroupMapping.my_test_tx_group=default\nservice.default.grouplist=127.0.0.1:8091\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\nclient.rm.asyncCommitBufferLimit=10000\nclient.rm.lock.retryInterval=10\nclient.rm.lock.retryTimes=30\nclient.rm.lock.retryPolicyBranchRollbackOnConflict=true\nclient.rm.reportRetryCount=5\nclient.rm.tableMetaCheckEnable=false\nclient.rm.tableMetaCheckerInterval=60000\nclient.rm.sqlParserType=druid\nclient.rm.reportSuccessEnable=false\nclient.rm.sagaBranchRegisterEnable=false\nclient.rm.tccActionInterceptorOrder=-2147482648\nclient.tm.commitRetryCount=5\nclient.tm.rollbackRetryCount=5\nclient.tm.defaultGlobalTransactionTimeout=60000\nclient.tm.degradeCheck=false\nclient.tm.degradeCheckAllowTimes=10\nclient.tm.degradeCheckPeriod=2000\nclient.tm.interceptorOrder=-2147482648\nstore.mode=db\nstore.lock.mode=file\nstore.session.mode=file\nstore.file.dir=file_store/data\nstore.file.maxBranchSessionSize=16384\nstore.file.maxGlobalSessionSize=512\nstore.file.fileWriteBufferCacheSize=16384\nstore.file.flushDiskMode=async\nstore.file.sessionReloadReadSize=100\nstore.db.datasource=druid\nstore.db.dbType=mysql\nstore.db.driverClassName=com.mysql.jdbc.Driver\nstore.db.url=jdbc:mysql://172.18.0.2:3306/seata-server?useUnicode=true&rewriteBatchedStatements=true\nstore.db.user=root\nstore.db.password=123456\nstore.db.minConn=5\nstore.db.maxConn=30\nstore.db.globalTable=global_table\nstore.db.branchTable=branch_table\nstore.db.queryLimit=100\nstore.db.lockTable=lock_table\nstore.db.maxWait=5000\nstore.redis.mode=single\nstore.redis.single.host=127.0.0.1\nstore.redis.single.port=6379\nstore.redis.maxConn=10\nstore.redis.minConn=1\nstore.redis.maxTotal=100\nstore.redis.database=0\nstore.redis.queryLimit=100\nserver.recovery.committingRetryPeriod=1000\nserver.recovery.asynCommittingRetryPeriod=1000\nserver.recovery.rollbackingRetryPeriod=1000\nserver.recovery.timeoutRetryPeriod=1000\nserver.maxCommitRetryTimeout=-1\nserver.maxRollbackRetryTimeout=-1\nserver.rollbackRetryTimeoutUnlockEnable=false\nserver.distributedLockExpireTime=10000\nclient.undo.dataValidation=true\nclient.undo.logSerialization=jackson\nclient.undo.onlyCareUpdateColumns=true\nserver.undo.logSaveDays=7\nserver.undo.logDeletePeriod=86400000\nclient.undo.logTable=undo_log\nclient.undo.compress.enable=true\nclient.undo.compress.type=zip\nclient.undo.compress.threshold=64k\nlog.exceptionRate=100\ntransport.serialization=seata\ntransport.compressor=none\nmetrics.enabled=false\nmetrics.registryType=compact\nmetrics.exporterList=prometheus\nmetrics.exporterPrometheusPort=9898\n\n\n\n\n\n~~~\n\n将上述配置导入nacos，命名seata-server.properties，如下图:\n\n![image-20240524174544128](typora-user-images/image-20240524174544128.png)\n\n\n\n\n\n### **修改application.yml配置文件**\n\n在上面从容器中拷贝出来的resources文件夹中找到application.yml文件,根据你实际的nacos等配置信息，设置相应的application.yml配置项\n\n~~~yaml\n#  Copyright 1999-2019 Seata.io Group.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nserver:\n  port: 7091\n\nspring:\n  application:\n    name: seata-server\n    \nconsole:\n  user:\n    username: seata\n    password: seata\n\nseata:\n  config:\n    # support: nacos, consul, apollo, zk, etcd3\n    type: nacos\n    nacos:\n      server-addr: 172.18.0.6:8848   # nacos的访问地址，因为是在docker中，ip地址改为宿主机地址\n      namespace: seata\n      group: DEFAULT_GROUP  # nacos的分组\n      username: nacos     # nacos的用户名\n      password: nacos     # nacos的密码\n      context-path:\n      #file-extension: yaml # 配置文件格式\n      ##if use MSE Nacos with auth, mutex with username/password attribute\n      #access-key:\n      #secret-key:\n      data-id: seata-server.properties # nacos中的配置文件名称\n  registry:\n    # support: nacos, eureka, redis, zk, consul, etcd3, sofa\n    type: nacos\n    nacos:\n      application: seata-server       # seata启动后在nacos的服务名\n      server-addr: 172.18.0.6:8848  # nacos的访问地址，因为是在docker中，ip地址改为宿主机地址\n      group: DEFAULT_GROUP   # nacos的分组\n      namespace: seata\n      cluster: default     # 这个歌参数在每个微服务seata时会用到\n      username: nacos      # nacos的用户名\n      password: nacos      # nacos的密码\n      context-path:\n      ##if use MSE Nacos with auth, mutex with username/password attribute\n      #access-key:\n      #secret-key:\n\n  security:\n    secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017\n    tokenValidityInMilliseconds: 1800000\n    ignore:\n      urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login    \n\n\n~~~\n\n如果你想修改到时候生成的web登陆的账号密码，就修改console里的username和password\n\n\n\n### 生成seata所需mysql表\n\nTC 运行需要将事务信息保存在数据库，因此需要创建一些表\n\n- https://github.com/apache/incubator-seata/blob/2.x/script/server/db/mysql.sql\n\n\n\n访问上面链接，去到源码中，找到script\\server\\db 这个目录。由于是使用mysql的，所以下载mysql.sql\n\n~~~sql\n--\n-- Licensed to the Apache Software Foundation (ASF) under one or more\n-- contributor license agreements.  See the NOTICE file distributed with\n-- this work for additional information regarding copyright ownership.\n-- The ASF licenses this file to You under the Apache License, Version 2.0\n-- (the \"License\"); you may not use this file except in compliance with\n-- the License.  You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n--\n\n-- -------------------------------- The script used when storeMode is 'db' --------------------------------\n-- the table to store GlobalSession data\nCREATE TABLE IF NOT EXISTS `global_table`\n(\n    `xid`                       VARCHAR(128) NOT NULL,\n    `transaction_id`            BIGINT,\n    `status`                    TINYINT      NOT NULL,\n    `application_id`            VARCHAR(32),\n    `transaction_service_group` VARCHAR(32),\n    `transaction_name`          VARCHAR(128),\n    `timeout`                   INT,\n    `begin_time`                BIGINT,\n    `application_data`          VARCHAR(2000),\n    `gmt_create`                DATETIME,\n    `gmt_modified`              DATETIME,\n    PRIMARY KEY (`xid`),\n    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),\n    KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store BranchSession data\nCREATE TABLE IF NOT EXISTS `branch_table`\n(\n    `branch_id`         BIGINT       NOT NULL,\n    `xid`               VARCHAR(128) NOT NULL,\n    `transaction_id`    BIGINT,\n    `resource_group_id` VARCHAR(32),\n    `resource_id`       VARCHAR(256),\n    `branch_type`       VARCHAR(8),\n    `status`            TINYINT,\n    `client_id`         VARCHAR(64),\n    `application_data`  VARCHAR(2000),\n    `gmt_create`        DATETIME(6),\n    `gmt_modified`      DATETIME(6),\n    PRIMARY KEY (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store lock data\nCREATE TABLE IF NOT EXISTS `lock_table`\n(\n    `row_key`        VARCHAR(128) NOT NULL,\n    `xid`            VARCHAR(128),\n    `transaction_id` BIGINT,\n    `branch_id`      BIGINT       NOT NULL,\n    `resource_id`    VARCHAR(256),\n    `table_name`     VARCHAR(32),\n    `pk`             VARCHAR(36),\n    `status`         TINYINT      NOT NULL DEFAULT '0' COMMENT '0:locked ,1:rollbacking',\n    `gmt_create`     DATETIME,\n    `gmt_modified`   DATETIME,\n    PRIMARY KEY (`row_key`),\n    KEY `idx_status` (`status`),\n    KEY `idx_branch_id` (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nCREATE TABLE IF NOT EXISTS `distributed_lock`\n(\n    `lock_key`       CHAR(20) NOT NULL,\n    `lock_value`     VARCHAR(20) NOT NULL,\n    `expire`         BIGINT,\n    primary key (`lock_key`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('AsyncCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryRollbacking', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('TxTimeoutCheck', ' ', 0);\n~~~\n\n\n\n### **制作docker-compose.yaml文件**\n\n~~~yaml\n# Seata 基础组件服务\nversion: '3.8'\nservices:\n# seata服务1\n  seata-server1:\n    image: seataio/seata-server\n    hostname: seata-server1\n    ports:\n      - 8091:8091\n      - 7091:7091\n    environment:\n      - TZ=Asia/Shanghai\n      - LANG=en_US.UTF-8\n      - STORE_MODE=db\n      - SEATA_IP=127.0.0.1\n      - SEATA_PORT=8091\n    volumes:\n      - /Users/lison/work/data/dockerData/seata/resources:/seata-server/resources\n~~~\n\n>SEATA_IP：可选，指定seata-server启动的IP，该IP用于向注册中心注册时使用\n>SEATA_PORT：可选，指定seata-server启动的端口，默认为 8091\n>STORE_MODE：可选，指定seata-server的事务日志存储方式，支持 db、file、redis，默认是 file\n>SERVER_NODE：可选, 用于指定seata-server节点ID, 如 1,2,3…，默认根据IP生成\n>SEATA_ENV：可选，指定 seata-server 运行环境，如 dev、test 等，服务启动时会使用 registry-dev.conf 这样的配置\n\n### 启动验证\n\n\n\n**1、启动Seata服务**\n\n~~~\ndocker-compose up -d\n~~~\n\n\n\n**2、查看nacos服务里是否启动成功**\n\n![image-20240524175254196](typora-user-images/image-20240524175254196.png)\n\n**3、查看网站**\n\n>http://127.0.0.1:7091/#/\n\n\n\n- 默认账号：seata\n- 默认密码：seata\n- 如果需要修改就改application.yml里的console配置项\n\n\n\n![image-20240524175527451](typora-user-images/image-20240524175527451.png)\n\n\n\n## Seata实现分布式事务控制\n\n\n\n本示例通过Seata中间件实现分布式事务，模拟电商中的下单和扣库存的过程\n我们通过订单微服务执行下单操作，然后由订单微服务调用商品微服务扣除库存\n\n### 配置\n\n\n\n1、搭建我们所需要写的demo的库springbootbuild,创建一个名为test的数据库,然后执行以下sql代码:\n\n~~~\n\n\nDROP TABLE IF EXISTS `test`;\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `one` varchar(255) DEFAULT NULL,\n  `two` varchar(255) DEFAULT NULL,\n  `createTime` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `t_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `user_name` varchar(255) DEFAULT NULL COMMENT '用户名称',\n  `sex` tinyint(1) DEFAULT '0' COMMENT '性别，0：男，1：女',\n  `age` int(3) DEFAULT '0' COMMENT '年龄',\n  `address` varchar(255) DEFAULT NULL COMMENT '地址',\n  `phone` varchar(11) DEFAULT NULL COMMENT '手机',\n  `create_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\n\nINSERT INTO `t_test` VALUES ('1', '1', '2', '2024-05-27 16:07:34');\n\nINSERT INTO `t_user`  VALUES('1', 'name', '0', '11','地址','18818900000','2024-05-27 16:07:34');\n\n~~~\n\n\n\n\n\n2、引入依赖\n\n~~~\n\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-seata</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>io.seata</groupId>\n                    <artifactId>seata-spring-boot-starter</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>io.seata</groupId>\n            <artifactId>seata-spring-boot-starter</artifactId>\n            <version>1.4.2</version>\n        </dependency>\n~~~\n\n1.4.2版本不需要在项目里引入file.conf和registry.conf了。\n\n\n\n3、增加数据源配置\n\n~~~yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    master:\n      url: jdbc:mysql://127.0.0.1:3306/springbootbuild?useSSL=false&serverTimezone=Asia/Shanghai\n      username: root\n      password: 123456\n      driver-class-name: com.mysql.jdbc.Driver\n      initialSize: 5\n      minIdle: 5\n      maxActive: 20\n      maxWait: 60000\n      timeBetweenEvictionRunsMillis: 60000\n      minEvictableIdleTimeMillis: 300000\n      validationQuery: SELECT user()\n      testWhileIdle: true\n      testOnBorrow: false\n      testOnReturn: false\n      poolPreparedStatements: true\n      connection-properties: druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000\n    \nseata:\n  registry:\n    type: nacos\n    nacos:\n      server-addr: 127.0.0.1:8848\n      namespace: \"seata\"\n      group: DEFAULT_GROUP\n      application: seata-server\n      username: nacos\n      password: nacos    \n~~~\n\n\n\n### 配置seata代理数据源\n\n新增DatabaseConfiguration，Seata的RM通过DataSourceProxy才能在业务代码的失误提交时，通过这个切入点，与TC通讯交互，记录undo_log等\n\n~~~java\npackage com.lison.springcloudservice.config.base;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport io.seata.rm.datasource.DataSourceProxy;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.sql.DataSource;\n\n/**\n * @className: com.lison.springcloudservice.config.base-> DatabaseConfiguration\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n@Configuration\npublic class DatabaseConfiguration {\n\n    private final ApplicationContext applicationContext;\n\n    public DatabaseConfiguration(ApplicationContext applicationContext) {\n        this.applicationContext = applicationContext;\n    }\n\n    @Bean\n    @ConfigurationProperties(prefix = \"spring.datasource.master\")\n    public DruidDataSource ds0() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n        return druidDataSource;\n    }\n\n    @Primary\n    @Bean\n    public DataSource dataSource(DruidDataSource ds0)  {\n        DataSourceProxy pds0 = new DataSourceProxy(ds0);\n        return pds0;\n    }\n}\n\n~~~\n\n\n\n### 启动类修改\n\n注意：需要把spirngboot自带的数据源排除掉，否则出现配置的代理数据源与spirngboot自带的形成循环依赖\n\n~~~\n//启动时排除springboot自带的数据源配置类\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class SpringCloudServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudServiceApplication.class, args);\n    }\n\n}\n~~~\n\n\n\n### 添加undo_log表\n\n该表用来事务回滚，分支事务提交时记录事务相关信息，在分布式事务异常时回滚，分布式事务结束后会删除undo_log的记录。\n在spring配置指定的数据库中创建表，每个需要注册到seata server的业务模块都有创建该表，创建语句如下：\n\n~~~\n\n-- ----------------------------\n\n-- Table structure for undo_log\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n\n-- Records of undo_log\n~~~\n\n\n\n\n\n这里只简单的演示在一个微服务中，一个分布式事物包含两个分支事物。\n\n\n\n### seata使用示例\n\n\n\n**Controller**\n\n~~~java\npackage com.lison.springcloudservice.controller;\n\nimport com.lison.springcloudservice.service.ITestService;\nimport com.lison.springcloudservice.service.TestGlobalTransServiceImpl;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n/**\n * @className: com.lison.springcloudservice.controller-> TestSeataController\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n\n@RestController\n@RequestMapping(value = \"/test/\")\npublic class TestSeataController {\n    @Resource\n    private TestGlobalTransServiceImpl testGlobalTransService;\n    @GetMapping(\"/seataTrans\")\n    public String testSeataTrans() throws Exception {\n        testGlobalTransService.testTrans();\n        return \"success\";\n    }\n}\n\n~~~\n\n\n\n**Service**\n\n~~~java\n\npackage com.lison.springcloudservice.service;\n\nimport io.seata.spring.annotation.GlobalTransactional;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * @className: com.lison.springcloudservice.service-> TestGlobalTransService\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n@Service\npublic class TestGlobalTransServiceImpl {\n    @Autowired\n    private ITestService iTestService;\n    //@GlobalTransactional\n    public void testTrans() throws Exception {\n        // 分支事务添加用户信息\n        iTestService.insertUser();\n        // 分支事务添加测试\n        iTestService.insertTest();\n        // 抛出异常，事务回滚\n        throw new Exception(\"test exception\");\n    }\n}\n\n~~~\n\n负责分支事务的服务类，单独拿出来是因为spring事务代理要求事务方法如果和调用方法放在一个类中，代理不生效，具体原因不在赘述。\n\n\n\n\n\n~~~java\npackage com.lison.springcloudservice.service.impl;\n\nimport com.lison.springcloudservice.mapper.TestMapper;\nimport com.lison.springcloudservice.mapper.UserMapper;\nimport com.lison.springcloudservice.service.ITestService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @className: com.lison.springcloudservice.service.impl-> TestServiceImpl\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n@Service\npublic class TestServiceImpl  implements ITestService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private TestMapper testMapper;\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void insertUser() {\n        userMapper.insert();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void insertTest() {\n        testMapper.insert();\n    }\n\n\n\n\n\n}\n\n~~~\n\n\n\n**Mapper**\n\n~~~java\n@Mapper\n@Component\npublic interface TestMapper {\n    @Insert(\"insert into t_test(one,two,createTime) values ( 0,18,now())\")\n    int insert();\n}\n\n\n@Mapper\n@Component\npublic interface UserMapper{\n    @Insert(\"insert into t_user (user_name,sex,age, create_time) values ('aaaaaaaaa', 0,18,now())\")\n    int insert();\n\n}\n\n~~~\n\n\n\n测试结果：\n\n1、调用：http://localhost:18001/test/seataTrans\n\n2、因为 我们的代码中@GlobalTransactional 被注释。当有异常抛出，所有数据库中插入数据。\n\n~~~\n2024-05-27 16:58:57.346 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]\n2024-05-27 16:58:57.504 [TID:Ignored_Trace] [http-nio-18001-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.Exception: test exception] with root cause\njava.lang.Exception: test exception\n\tat com.lison.springcloudservice.service.TestGlobalTransServiceImpl.testTrans(TestGlobalTransServiceImpl.java:24)\n\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3(TestSeataController.java:25)\n\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3$accessor$$sw$ful2f31(TestSeataController.java)\n\tat com.lison.springcloudservice.controller.TestSeataController$$sw$auxiliary$p4qqk42.call(Unknown Source)\n\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)\n\tat com.lison.springcloudservice.controller.TestSeataController.testSeataTrans(TestSeataController.java)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:68)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:87)\n\tat org.springframework.cloud.sleuth.instrument.web.LazyTracingFilter.doFilter(TraceWebServletAutoConfiguration.java:139)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\n\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3(StandardHostValve.java:139)\n\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3$accessor$$sw$p8ebm33(StandardHostValve.java)\n\tat org.apache.catalina.core.StandardHostValve$$sw$auxiliary$1213ni1.call(Unknown Source)\n\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n2024-05-27 16:58:57.516 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]\n2024-05-27 16:58:58.508 [TID:N/A] [AsyncReporter{org.springframework.cloud.sleuth.zipkin2.sender.RestTemplateSender@3f169051}] WARN  z.r.AsyncReporter$BoundedAsyncReporter -Spans were dropped due to exceptions. All subsequent errors will be logged at FINE level.\n~~~\n\n\n\n3、修改代码取消注释，再次调用，数据没有保存成功。\n\n~~~\n */\n@Service\npublic class TestGlobalTransServiceImpl {\n    @Autowired\n    private ITestService iTestService;\n    @GlobalTransactional\n    public void testTrans() throws Exception {\n        // 分支事务添加用户信息\n        iTestService.insertUser();\n        // 分支事务添加测试\n        iTestService.insertTest();\n        // 抛出异常，事务回滚\n        throw new Exception(\"test exception\");\n    }\n}\n~~~\n\n\n\n4、去掉异常，数据保存成功\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-09-Seata 分布式事务.md","raw":"\n\n\n\n`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2024.5.03`\n\n# Spring Cloud Alibaba-09-Seata分布式事务\n\n[toc]\n\n## 分布式事务基础\n\n### 事务\n\n事务指的就是一个操作单元，在这个操作单元中的所有操作最终要保持一致的行为，要么所有操作都成功，要么所有的操作都被撤销。简单地说，事务提供一种“要么什么都不做，要么做全套”机制。\n\n### 本地事务\n\n本地事物其实可以认为是数据库提供的事务机制。说到数据库事务就不得不说，数据库事务中的四 大特性:\n\n* A:原子性(Atomicity)，一个事务中的所有操作，要么全部完成，要么全部不完成\n* C:一致性(Consistency)，在一个事务执行之前和执行之后数据库都必须处于一致性状态\n* I:隔离性(Isolation)，在并发环境中，当不同的事务同时操作相同的数据时，事务之间互不影响\n* D:持久性(Durability)，指的是只要事务成功结束，它对数据库所做的更新就必须永久的保存下来\n\n数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚\n\n### 分布式事务\n\n分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布\n式系统的不同节点之上。\n\n简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同\n的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。\n\n本质上来说，分布式事务就是为了保证不同数据库的数据一致性。\n\n### 分布式事务的场景\n\n**1、单体系统访问多个数据库，一个服务需要调用多个数据库实例完成数据的增删改操作**\n\n![image-20240514095424805](typora-user-images/image-20240514095424805.png)\n\n\n\n**2、多个微服务访问同一个数据库实例完成数据的增删改操作**\n\n![image-20240514095650303](typora-user-images/image-20240514095650303.png)\n\n\n\n3、多个微服务访问多个数据库，完成数据的增删改操作\n\n![image-20240514095835213](typora-user-images/image-20240514095835213.png)\n\n\n\n\n\n## 分布式事务的解决方案\n\n### 全局事务\n\n全局事务基于DTP模型实现。DTP是由X/Open组织提出的一种分布式事务模型——X/Open Distributed Transaction Processing Reference Model。它规定了要实现分布式事务，需要三种角色:\n\n* AP: Application 应用系统 (微服务)\n* TM: Transaction Manager 事务管理器 (全局事务管理)\n* RM: Resource Manager 资源管理器 (数据库)\n\n整个事务分成两个阶段:\n\n- 阶段一: 表决阶段，所有参与者都将本事务执行预提交，并将能否成功的信息反馈发给协调者。\n- 阶段二: 执行阶段，协调者根据所有参与者的反馈，通知所有参与者，步调一致地执行提交或者回 滚。\n\n![image-20240516094845785](typora-user-images/image-20240516094845785.png)\n\n优点\n\n- 提高了数据一致性的概率，实现成本较低\n\n缺点\n\n- 单点问题: 事务协调者宕机\n- 同步阻塞: 延迟了提交时间，加长了资源阻塞时间\n- 数据不一致: 提交第二阶段，依然存在commit结果未知的情况，有可能导致数据不一致\n\n\n\n### 可靠消息服务\n\n基于可靠消息服务的方案是通过消息中间件保证上、下游应用数据操作的一致性。假设有A和B两个 系统，分别可以处理任务A和任务B。此时存在一个业务流程，需要将任务A和任务B在同一个事务中处 理。就可以使用消息中间件来实现这种分布式事务\n\n\n\n![image-20240520161819461](typora-user-images/image-20240520161819461.png)\n\n\n\n**第一步: 消息由系统A投递到中间件**\n\n1. 在系统A处理任务A前，首先向消息中间件发送一条消息\n2. 消息中间件收到后将该条消息持久化，但并不投递。持久化成功后，向A回复一个确认应答\n3. 系统A收到确认应答后，则可以开始处理任务A\n4. 任务A处理完成后，向消息中间件发送Commit或者Rollback请求。该请求发送完成后，对系统A而 言，该事务的处理过程就结束了\n5. 如果消息中间件收到Commit，则向B系统投递消息;如果收到Rollback，则直接丢弃消息。但是 如果消息中间件收不到Commit和Rollback指令，那么就要依靠\"超时询问机制\"。\n\n>超时询问机制\n>系统A除了实现正常的业务流程外，还需提供一个事务询问的接口，供消息中间件调 用。当消息中间件收到发布消息便开始计时，如果到了超时没收到确认指令，就会主动调用 系统A提供的事务询问接口询问该系统目前的状态。该接口会返回三种结果，中间件根据三 种结果做出不同反应:\n>提交:将该消息投递给系统B\n>回滚:直接将条消息丢弃\n>处理中:继续等待\n\n\n\n**第二步: 消息由中间件投递到系统B**\n\n消息中间件向下游系统投递完消息后便进入阻塞等待状态，下游系统便立即进行任务的处理，任务\n处理完成后便向消息中间件返回应答\n\n* 如果消息中间件收到确认应答后便认为该事务处理完毕\n* 如果消息中间件在等待确认应答超时之后就会重新投递，直到下游消费者返回消费成功响应为止。\n  一般消息中间件可以设置消息重试的次数和时间间隔，如果最终还是不能成功投递，则需要手工干\n  预。这里之所以使用人工干预，而不是使用让A系统回滚，主要是考虑到整个系统设计的复杂度问\n  题。\n\n基于可靠消息服务的分布式事务，前半部分使用异步，注重性能;后半部分使用同步，注重开发成本。\n\n\n\n### 最大努力通知\n\n最大努力通知也被称为定期校对，其实是对第二种解决方案的进一步优化。它引入了本地消息表来\n记录错误消息，然后加入失败消息的定期校对功能，来进一步保证消息会被下游系统消费。\n\n\n\n![image-20240521094502177](typora-user-images/image-20240521094502177.png)\n\n\n\n**第一步: 消息由系统A投递到中间件**\n\n1. 处理业务的同一事务中，向本地消息表中写入一条记录\n\n2. 准备专门的消息发送者不断地发送本地消息表中的消息到消息中间件，如果发送失败则重试\n\n\n\n**第二步: 消息由中间件投递到系统B**\n\n1. 消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行\n2. 当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该\n   事务完成\n3. 对于投递失败的消息，利用重试机制进行重试，对于重试失败的，写入错误消息表\n4. 消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费\n\n这种方式的优缺点:\n   **优点:** 一种非常经典的实现，实现了最终一致性。\n   **缺点:** 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。\n\n\n\n### TCC事务\n\nTCC即为Try Confirm Cancel，它属于补偿型分布式事务。TCC实现分布式事务一共有三个步骤:\n\n**Try:尝试待执行的业务**\n\n这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源\n\n**Confirm:确认执行业务**\n\n确认执行业务操作，不做任何业务检查， 只使用Try阶段预留的业务资源。通常情况下，采用TCC 则认为 Confirm阶段是不会出错的。即:只要Try成功，Confirm一定成功。若Confirm阶段真的 出错了，需引入重试机制或人工处理。\n\n**Cancel:取消待执行的业务**\n\n取消Try阶段预留的业务资源。通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若 Cancel阶段真的出错了，需引入重试机制或人工处理。\n\n\n\n![image-20240522090312508](typora-user-images/image-20240522090312508.png)\n\n\n\n![image-20240522090352573](typora-user-images/image-20240522090352573.png)\n\n\n\nTCC两阶段提交与XA两阶段提交的区别是:\nXA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。\nTCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。\n\nTCC事务的优缺点:\n\n**优点**:把数据库层的二阶段提交上提到了应用层来实现，规避了数据库层的2PC性能低下问题。\n**缺点**:TCC的Try、Confirm和Cancel操作功能需业务提供，开发成本高。\n\n\n\n## Seata介绍\n\n2019 年 1 月，阿里巴巴中间件团队发起了开源项目 Fescar(Fast & EaSy Commit And Rollback)，其愿景是让分布式事务的使用像本地事务的使用一样，简单和高效，并逐步解决开发者们 遇到的分布式事务方面的所有难题。后来更名为 Seata，意为:Simple Extensible Autonomous Transaction Architecture，是一套分布式事务解决方案。\n\n官方网站：https://seata.apache.org/\n\n\n\n![image-20240522091143334](typora-user-images/image-20240522091143334.png)\n\n\n\nSeata的设计目标是对业务无侵入，因此从业务无侵入的2PC方案着手，在传统2PC的基础上演进。 它把一个分布式事务理解成一个包含了若干分支事务的全局事务。全局事务的职责是协调其下管辖的分 支事务达成一致，要么一起成功提交，要么一起失败回滚。此外，通常分支事务本身就是一个关系数据 库的本地事务。\n\n![image-20240522090958255](typora-user-images/image-20240522090958255.png)\n\n\n\nSeata主要由三个重要组件组成:\n\n**TC**:Transaction Coordinator 事务协调器，管理全局的分支事务的状态，用于全局性事务的提交 和回滚。\n\n**TM**:Transaction Manager 事务管理器，用于开启、提交或者回滚全局事务。\n\n**RM:**Resource Manager 资源管理器，用于分支事务上的资源管理，向TC注册分支事务，上报分 支事务的状态，接受TC的命令来提交或者回滚分支事务。\n\n![在这里插入图片描述](typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png)\n\n\n\n**Seata的执行流程如下:**\n\n1. **全局事务开始**：TM向TC请求开启一个全局事务，TC生成一个全局事务ID（XID）。\n2. **分支事务注册**：TM通知涉及的每个RM开始分支事务，RM在执行本地事务前向TC注册分支事务，并在本地保存XID。\n3. **执行业务操作**：RM在本地事务上下文中执行SQL操作，同时记录undo log（用于事务回滚）。\n4. **一阶段提交预处理**：TM请求TC进行一阶段提交的预处理，TC通知所有RM准备提交，RM将本地事务状态置为预提交，并回复TC。\n5. **二阶段提交**：若所有RM的预提交都成功，TM通知TC进行二阶段提交。TC命令所有RM正式提交分支事务，RM提交本地事务并清理undo log。\n6. **二阶段回滚**：如果任意RM的预提交失败，或TM请求回滚，TC会命令所有RM进行分支事务的回滚，RM使用undo log恢复数据到事务前状态，并清除undo log。\n\n\n\n**Seata实现2PC与传统2PC的差别:**\n\n1. 架构层次方面，传统2PC方案的 RM 实际上是在数据库层，RM本质上就是数据库自身，通过XA协 议实现，而 Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。\n2. 两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保 持到Phase2完成才释放。而Seata的做法是在Phase1 就将本地事务提交，这样就可以省去Phase2 持锁的时间，整体提高效率。\n\n\n\n## Docker安装Seata-Nacos注册中心，DB存储\n\n### 准备工作\n\n**1、生成seata配置文件**\n\n我们通过创建临时容器的方式，直接从中拷贝出自动生成的配置信息，待挂载使用\n\n**2、创建文件夹**\n\n~~~\nmkdir -p /Users/lison/work/data/dockerData/seata/resources\n~~~\n\n**3、创建临时容器**\n\n~~~shell\ndocker run -d \\\n--name seata \\\nseataio/seata-server\n~~~\n\n**4、拷贝容器内置配置文件**\n\n~~~\ndocker cp seata:/seata-server/resources /Users/lison/work/data/dockerData/seata/\n~~~\n\n**5、删除临时容器**\n\n~~~\ndocker rm -f seata\n~~~\n\n\n\n### **导入Seata配置到Nacos**\n\n由于我们需要使用nacos作为seata服务的配置中心和注册中心，其中，配置中心的配置，我们需要先行导入\n\n> https://github.com/apache/incubator-seata/tree/2.x/script/config-center\n\n里面有很多配置，但我们只取重点需要的，如下：\n\n~~~properties\n\ntransport.type=TCP\ntransport.server=NIO\ntransport.heartbeat=true\ntransport.enableClientBatchSendRequest=true\ntransport.threadFactory.bossThreadPrefix=NettyBoss\ntransport.threadFactory.workerThreadPrefix=NettyServerNIOWorker\ntransport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler\ntransport.threadFactory.shareBossWorker=false\ntransport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector\ntransport.threadFactory.clientSelectorThreadSize=1\ntransport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread\ntransport.threadFactory.bossThreadSize=1\ntransport.threadFactory.workerThreadSize=default\ntransport.shutdown.wait=3\nservice.vgroupMapping.my_test_tx_group=default\nservice.default.grouplist=127.0.0.1:8091\nservice.enableDegrade=false\nservice.disableGlobalTransaction=false\nclient.rm.asyncCommitBufferLimit=10000\nclient.rm.lock.retryInterval=10\nclient.rm.lock.retryTimes=30\nclient.rm.lock.retryPolicyBranchRollbackOnConflict=true\nclient.rm.reportRetryCount=5\nclient.rm.tableMetaCheckEnable=false\nclient.rm.tableMetaCheckerInterval=60000\nclient.rm.sqlParserType=druid\nclient.rm.reportSuccessEnable=false\nclient.rm.sagaBranchRegisterEnable=false\nclient.rm.tccActionInterceptorOrder=-2147482648\nclient.tm.commitRetryCount=5\nclient.tm.rollbackRetryCount=5\nclient.tm.defaultGlobalTransactionTimeout=60000\nclient.tm.degradeCheck=false\nclient.tm.degradeCheckAllowTimes=10\nclient.tm.degradeCheckPeriod=2000\nclient.tm.interceptorOrder=-2147482648\nstore.mode=db\nstore.lock.mode=file\nstore.session.mode=file\nstore.file.dir=file_store/data\nstore.file.maxBranchSessionSize=16384\nstore.file.maxGlobalSessionSize=512\nstore.file.fileWriteBufferCacheSize=16384\nstore.file.flushDiskMode=async\nstore.file.sessionReloadReadSize=100\nstore.db.datasource=druid\nstore.db.dbType=mysql\nstore.db.driverClassName=com.mysql.jdbc.Driver\nstore.db.url=jdbc:mysql://172.18.0.2:3306/seata-server?useUnicode=true&rewriteBatchedStatements=true\nstore.db.user=root\nstore.db.password=123456\nstore.db.minConn=5\nstore.db.maxConn=30\nstore.db.globalTable=global_table\nstore.db.branchTable=branch_table\nstore.db.queryLimit=100\nstore.db.lockTable=lock_table\nstore.db.maxWait=5000\nstore.redis.mode=single\nstore.redis.single.host=127.0.0.1\nstore.redis.single.port=6379\nstore.redis.maxConn=10\nstore.redis.minConn=1\nstore.redis.maxTotal=100\nstore.redis.database=0\nstore.redis.queryLimit=100\nserver.recovery.committingRetryPeriod=1000\nserver.recovery.asynCommittingRetryPeriod=1000\nserver.recovery.rollbackingRetryPeriod=1000\nserver.recovery.timeoutRetryPeriod=1000\nserver.maxCommitRetryTimeout=-1\nserver.maxRollbackRetryTimeout=-1\nserver.rollbackRetryTimeoutUnlockEnable=false\nserver.distributedLockExpireTime=10000\nclient.undo.dataValidation=true\nclient.undo.logSerialization=jackson\nclient.undo.onlyCareUpdateColumns=true\nserver.undo.logSaveDays=7\nserver.undo.logDeletePeriod=86400000\nclient.undo.logTable=undo_log\nclient.undo.compress.enable=true\nclient.undo.compress.type=zip\nclient.undo.compress.threshold=64k\nlog.exceptionRate=100\ntransport.serialization=seata\ntransport.compressor=none\nmetrics.enabled=false\nmetrics.registryType=compact\nmetrics.exporterList=prometheus\nmetrics.exporterPrometheusPort=9898\n\n\n\n\n\n~~~\n\n将上述配置导入nacos，命名seata-server.properties，如下图:\n\n![image-20240524174544128](typora-user-images/image-20240524174544128.png)\n\n\n\n\n\n### **修改application.yml配置文件**\n\n在上面从容器中拷贝出来的resources文件夹中找到application.yml文件,根据你实际的nacos等配置信息，设置相应的application.yml配置项\n\n~~~yaml\n#  Copyright 1999-2019 Seata.io Group.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\nserver:\n  port: 7091\n\nspring:\n  application:\n    name: seata-server\n    \nconsole:\n  user:\n    username: seata\n    password: seata\n\nseata:\n  config:\n    # support: nacos, consul, apollo, zk, etcd3\n    type: nacos\n    nacos:\n      server-addr: 172.18.0.6:8848   # nacos的访问地址，因为是在docker中，ip地址改为宿主机地址\n      namespace: seata\n      group: DEFAULT_GROUP  # nacos的分组\n      username: nacos     # nacos的用户名\n      password: nacos     # nacos的密码\n      context-path:\n      #file-extension: yaml # 配置文件格式\n      ##if use MSE Nacos with auth, mutex with username/password attribute\n      #access-key:\n      #secret-key:\n      data-id: seata-server.properties # nacos中的配置文件名称\n  registry:\n    # support: nacos, eureka, redis, zk, consul, etcd3, sofa\n    type: nacos\n    nacos:\n      application: seata-server       # seata启动后在nacos的服务名\n      server-addr: 172.18.0.6:8848  # nacos的访问地址，因为是在docker中，ip地址改为宿主机地址\n      group: DEFAULT_GROUP   # nacos的分组\n      namespace: seata\n      cluster: default     # 这个歌参数在每个微服务seata时会用到\n      username: nacos      # nacos的用户名\n      password: nacos      # nacos的密码\n      context-path:\n      ##if use MSE Nacos with auth, mutex with username/password attribute\n      #access-key:\n      #secret-key:\n\n  security:\n    secretKey: SeataSecretKey0c382ef121d778043159209298fd40bf3850a017\n    tokenValidityInMilliseconds: 1800000\n    ignore:\n      urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login    \n\n\n~~~\n\n如果你想修改到时候生成的web登陆的账号密码，就修改console里的username和password\n\n\n\n### 生成seata所需mysql表\n\nTC 运行需要将事务信息保存在数据库，因此需要创建一些表\n\n- https://github.com/apache/incubator-seata/blob/2.x/script/server/db/mysql.sql\n\n\n\n访问上面链接，去到源码中，找到script\\server\\db 这个目录。由于是使用mysql的，所以下载mysql.sql\n\n~~~sql\n--\n-- Licensed to the Apache Software Foundation (ASF) under one or more\n-- contributor license agreements.  See the NOTICE file distributed with\n-- this work for additional information regarding copyright ownership.\n-- The ASF licenses this file to You under the Apache License, Version 2.0\n-- (the \"License\"); you may not use this file except in compliance with\n-- the License.  You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n--\n\n-- -------------------------------- The script used when storeMode is 'db' --------------------------------\n-- the table to store GlobalSession data\nCREATE TABLE IF NOT EXISTS `global_table`\n(\n    `xid`                       VARCHAR(128) NOT NULL,\n    `transaction_id`            BIGINT,\n    `status`                    TINYINT      NOT NULL,\n    `application_id`            VARCHAR(32),\n    `transaction_service_group` VARCHAR(32),\n    `transaction_name`          VARCHAR(128),\n    `timeout`                   INT,\n    `begin_time`                BIGINT,\n    `application_data`          VARCHAR(2000),\n    `gmt_create`                DATETIME,\n    `gmt_modified`              DATETIME,\n    PRIMARY KEY (`xid`),\n    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),\n    KEY `idx_transaction_id` (`transaction_id`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store BranchSession data\nCREATE TABLE IF NOT EXISTS `branch_table`\n(\n    `branch_id`         BIGINT       NOT NULL,\n    `xid`               VARCHAR(128) NOT NULL,\n    `transaction_id`    BIGINT,\n    `resource_group_id` VARCHAR(32),\n    `resource_id`       VARCHAR(256),\n    `branch_type`       VARCHAR(8),\n    `status`            TINYINT,\n    `client_id`         VARCHAR(64),\n    `application_data`  VARCHAR(2000),\n    `gmt_create`        DATETIME(6),\n    `gmt_modified`      DATETIME(6),\n    PRIMARY KEY (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\n-- the table to store lock data\nCREATE TABLE IF NOT EXISTS `lock_table`\n(\n    `row_key`        VARCHAR(128) NOT NULL,\n    `xid`            VARCHAR(128),\n    `transaction_id` BIGINT,\n    `branch_id`      BIGINT       NOT NULL,\n    `resource_id`    VARCHAR(256),\n    `table_name`     VARCHAR(32),\n    `pk`             VARCHAR(36),\n    `status`         TINYINT      NOT NULL DEFAULT '0' COMMENT '0:locked ,1:rollbacking',\n    `gmt_create`     DATETIME,\n    `gmt_modified`   DATETIME,\n    PRIMARY KEY (`row_key`),\n    KEY `idx_status` (`status`),\n    KEY `idx_branch_id` (`branch_id`),\n    KEY `idx_xid` (`xid`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nCREATE TABLE IF NOT EXISTS `distributed_lock`\n(\n    `lock_key`       CHAR(20) NOT NULL,\n    `lock_value`     VARCHAR(20) NOT NULL,\n    `expire`         BIGINT,\n    primary key (`lock_key`)\n) ENGINE = InnoDB\n  DEFAULT CHARSET = utf8mb4;\n\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('AsyncCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryCommitting', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('RetryRollbacking', ' ', 0);\nINSERT INTO `distributed_lock` (lock_key, lock_value, expire) VALUES ('TxTimeoutCheck', ' ', 0);\n~~~\n\n\n\n### **制作docker-compose.yaml文件**\n\n~~~yaml\n# Seata 基础组件服务\nversion: '3.8'\nservices:\n# seata服务1\n  seata-server1:\n    image: seataio/seata-server\n    hostname: seata-server1\n    ports:\n      - 8091:8091\n      - 7091:7091\n    environment:\n      - TZ=Asia/Shanghai\n      - LANG=en_US.UTF-8\n      - STORE_MODE=db\n      - SEATA_IP=127.0.0.1\n      - SEATA_PORT=8091\n    volumes:\n      - /Users/lison/work/data/dockerData/seata/resources:/seata-server/resources\n~~~\n\n>SEATA_IP：可选，指定seata-server启动的IP，该IP用于向注册中心注册时使用\n>SEATA_PORT：可选，指定seata-server启动的端口，默认为 8091\n>STORE_MODE：可选，指定seata-server的事务日志存储方式，支持 db、file、redis，默认是 file\n>SERVER_NODE：可选, 用于指定seata-server节点ID, 如 1,2,3…，默认根据IP生成\n>SEATA_ENV：可选，指定 seata-server 运行环境，如 dev、test 等，服务启动时会使用 registry-dev.conf 这样的配置\n\n### 启动验证\n\n\n\n**1、启动Seata服务**\n\n~~~\ndocker-compose up -d\n~~~\n\n\n\n**2、查看nacos服务里是否启动成功**\n\n![image-20240524175254196](typora-user-images/image-20240524175254196.png)\n\n**3、查看网站**\n\n>http://127.0.0.1:7091/#/\n\n\n\n- 默认账号：seata\n- 默认密码：seata\n- 如果需要修改就改application.yml里的console配置项\n\n\n\n![image-20240524175527451](typora-user-images/image-20240524175527451.png)\n\n\n\n## Seata实现分布式事务控制\n\n\n\n本示例通过Seata中间件实现分布式事务，模拟电商中的下单和扣库存的过程\n我们通过订单微服务执行下单操作，然后由订单微服务调用商品微服务扣除库存\n\n### 配置\n\n\n\n1、搭建我们所需要写的demo的库springbootbuild,创建一个名为test的数据库,然后执行以下sql代码:\n\n~~~\n\n\nDROP TABLE IF EXISTS `test`;\nCREATE TABLE `test` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `one` varchar(255) DEFAULT NULL,\n  `two` varchar(255) DEFAULT NULL,\n  `createTime` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;\n\nCREATE TABLE `t_user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `user_name` varchar(255) DEFAULT NULL COMMENT '用户名称',\n  `sex` tinyint(1) DEFAULT '0' COMMENT '性别，0：男，1：女',\n  `age` int(3) DEFAULT '0' COMMENT '年龄',\n  `address` varchar(255) DEFAULT NULL COMMENT '地址',\n  `phone` varchar(11) DEFAULT NULL COMMENT '手机',\n  `create_time` datetime DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\n\nINSERT INTO `t_test` VALUES ('1', '1', '2', '2024-05-27 16:07:34');\n\nINSERT INTO `t_user`  VALUES('1', 'name', '0', '11','地址','18818900000','2024-05-27 16:07:34');\n\n~~~\n\n\n\n\n\n2、引入依赖\n\n~~~\n\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-seata</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>io.seata</groupId>\n                    <artifactId>seata-spring-boot-starter</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n        <dependency>\n            <groupId>io.seata</groupId>\n            <artifactId>seata-spring-boot-starter</artifactId>\n            <version>1.4.2</version>\n        </dependency>\n~~~\n\n1.4.2版本不需要在项目里引入file.conf和registry.conf了。\n\n\n\n3、增加数据源配置\n\n~~~yaml\nspring:\n  datasource:\n    type: com.alibaba.druid.pool.DruidDataSource\n    master:\n      url: jdbc:mysql://127.0.0.1:3306/springbootbuild?useSSL=false&serverTimezone=Asia/Shanghai\n      username: root\n      password: 123456\n      driver-class-name: com.mysql.jdbc.Driver\n      initialSize: 5\n      minIdle: 5\n      maxActive: 20\n      maxWait: 60000\n      timeBetweenEvictionRunsMillis: 60000\n      minEvictableIdleTimeMillis: 300000\n      validationQuery: SELECT user()\n      testWhileIdle: true\n      testOnBorrow: false\n      testOnReturn: false\n      poolPreparedStatements: true\n      connection-properties: druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000\n    \nseata:\n  registry:\n    type: nacos\n    nacos:\n      server-addr: 127.0.0.1:8848\n      namespace: \"seata\"\n      group: DEFAULT_GROUP\n      application: seata-server\n      username: nacos\n      password: nacos    \n~~~\n\n\n\n### 配置seata代理数据源\n\n新增DatabaseConfiguration，Seata的RM通过DataSourceProxy才能在业务代码的失误提交时，通过这个切入点，与TC通讯交互，记录undo_log等\n\n~~~java\npackage com.lison.springcloudservice.config.base;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport io.seata.rm.datasource.DataSourceProxy;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.sql.DataSource;\n\n/**\n * @className: com.lison.springcloudservice.config.base-> DatabaseConfiguration\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n@Configuration\npublic class DatabaseConfiguration {\n\n    private final ApplicationContext applicationContext;\n\n    public DatabaseConfiguration(ApplicationContext applicationContext) {\n        this.applicationContext = applicationContext;\n    }\n\n    @Bean\n    @ConfigurationProperties(prefix = \"spring.datasource.master\")\n    public DruidDataSource ds0() {\n        DruidDataSource druidDataSource = new DruidDataSource();\n        return druidDataSource;\n    }\n\n    @Primary\n    @Bean\n    public DataSource dataSource(DruidDataSource ds0)  {\n        DataSourceProxy pds0 = new DataSourceProxy(ds0);\n        return pds0;\n    }\n}\n\n~~~\n\n\n\n### 启动类修改\n\n注意：需要把spirngboot自带的数据源排除掉，否则出现配置的代理数据源与spirngboot自带的形成循环依赖\n\n~~~\n//启动时排除springboot自带的数据源配置类\n@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)\n@EnableDiscoveryClient\n@EnableFeignClients\npublic class SpringCloudServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringCloudServiceApplication.class, args);\n    }\n\n}\n~~~\n\n\n\n### 添加undo_log表\n\n该表用来事务回滚，分支事务提交时记录事务相关信息，在分布式事务异常时回滚，分布式事务结束后会删除undo_log的记录。\n在spring配置指定的数据库中创建表，每个需要注册到seata server的业务模块都有创建该表，创建语句如下：\n\n~~~\n\n-- ----------------------------\n\n-- Table structure for undo_log\n\n-- ----------------------------\n\nDROP TABLE IF EXISTS `undo_log`;\nCREATE TABLE `undo_log` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `branch_id` bigint(20) NOT NULL,\n  `xid` varchar(100) NOT NULL,\n  `context` varchar(128) NOT NULL,\n  `rollback_info` longblob NOT NULL,\n  `log_status` int(11) NOT NULL,\n  `log_created` datetime NOT NULL,\n  `log_modified` datetime NOT NULL,\n  `ext` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)\n) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n\n-- Records of undo_log\n~~~\n\n\n\n\n\n这里只简单的演示在一个微服务中，一个分布式事物包含两个分支事物。\n\n\n\n### seata使用示例\n\n\n\n**Controller**\n\n~~~java\npackage com.lison.springcloudservice.controller;\n\nimport com.lison.springcloudservice.service.ITestService;\nimport com.lison.springcloudservice.service.TestGlobalTransServiceImpl;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\n\n/**\n * @className: com.lison.springcloudservice.controller-> TestSeataController\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n\n@RestController\n@RequestMapping(value = \"/test/\")\npublic class TestSeataController {\n    @Resource\n    private TestGlobalTransServiceImpl testGlobalTransService;\n    @GetMapping(\"/seataTrans\")\n    public String testSeataTrans() throws Exception {\n        testGlobalTransService.testTrans();\n        return \"success\";\n    }\n}\n\n~~~\n\n\n\n**Service**\n\n~~~java\n\npackage com.lison.springcloudservice.service;\n\nimport io.seata.spring.annotation.GlobalTransactional;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n/**\n * @className: com.lison.springcloudservice.service-> TestGlobalTransService\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n@Service\npublic class TestGlobalTransServiceImpl {\n    @Autowired\n    private ITestService iTestService;\n    //@GlobalTransactional\n    public void testTrans() throws Exception {\n        // 分支事务添加用户信息\n        iTestService.insertUser();\n        // 分支事务添加测试\n        iTestService.insertTest();\n        // 抛出异常，事务回滚\n        throw new Exception(\"test exception\");\n    }\n}\n\n~~~\n\n负责分支事务的服务类，单独拿出来是因为spring事务代理要求事务方法如果和调用方法放在一个类中，代理不生效，具体原因不在赘述。\n\n\n\n\n\n~~~java\npackage com.lison.springcloudservice.service.impl;\n\nimport com.lison.springcloudservice.mapper.TestMapper;\nimport com.lison.springcloudservice.mapper.UserMapper;\nimport com.lison.springcloudservice.service.ITestService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n/**\n * @className: com.lison.springcloudservice.service.impl-> TestServiceImpl\n * @description:\n * @author: Lison\n * @createDate: 2024-05-27\n */\n@Service\npublic class TestServiceImpl  implements ITestService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private TestMapper testMapper;\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void insertUser() {\n        userMapper.insert();\n    }\n\n    @Transactional(rollbackFor = Exception.class)\n    @Override\n    public void insertTest() {\n        testMapper.insert();\n    }\n\n\n\n\n\n}\n\n~~~\n\n\n\n**Mapper**\n\n~~~java\n@Mapper\n@Component\npublic interface TestMapper {\n    @Insert(\"insert into t_test(one,two,createTime) values ( 0,18,now())\")\n    int insert();\n}\n\n\n@Mapper\n@Component\npublic interface UserMapper{\n    @Insert(\"insert into t_user (user_name,sex,age, create_time) values ('aaaaaaaaa', 0,18,now())\")\n    int insert();\n\n}\n\n~~~\n\n\n\n测试结果：\n\n1、调用：http://localhost:18001/test/seataTrans\n\n2、因为 我们的代码中@GlobalTransactional 被注释。当有异常抛出，所有数据库中插入数据。\n\n~~~\n2024-05-27 16:58:57.346 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]\n2024-05-27 16:58:57.504 [TID:Ignored_Trace] [http-nio-18001-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.Exception: test exception] with root cause\njava.lang.Exception: test exception\n\tat com.lison.springcloudservice.service.TestGlobalTransServiceImpl.testTrans(TestGlobalTransServiceImpl.java:24)\n\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3(TestSeataController.java:25)\n\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3$accessor$$sw$ful2f31(TestSeataController.java)\n\tat com.lison.springcloudservice.controller.TestSeataController$$sw$auxiliary$p4qqk42.call(Unknown Source)\n\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)\n\tat com.lison.springcloudservice.controller.TestSeataController.testSeataTrans(TestSeataController.java)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:68)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:87)\n\tat org.springframework.cloud.sleuth.instrument.web.LazyTracingFilter.doFilter(TraceWebServletAutoConfiguration.java:139)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)\n\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3(StandardHostValve.java:139)\n\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3$accessor$$sw$p8ebm33(StandardHostValve.java)\n\tat org.apache.catalina.core.StandardHostValve$$sw$auxiliary$1213ni1.call(Unknown Source)\n\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n2024-05-27 16:58:57.516 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]\n2024-05-27 16:58:58.508 [TID:N/A] [AsyncReporter{org.springframework.cloud.sleuth.zipkin2.sender.RestTemplateSender@3f169051}] WARN  z.r.AsyncReporter$BoundedAsyncReporter -Spans were dropped due to exceptions. All subsequent errors will be logged at FINE level.\n~~~\n\n\n\n3、修改代码取消注释，再次调用，数据没有保存成功。\n\n~~~\n */\n@Service\npublic class TestGlobalTransServiceImpl {\n    @Autowired\n    private ITestService iTestService;\n    @GlobalTransactional\n    public void testTrans() throws Exception {\n        // 分支事务添加用户信息\n        iTestService.insertUser();\n        // 分支事务添加测试\n        iTestService.insertTest();\n        // 抛出异常，事务回滚\n        throw new Exception(\"test exception\");\n    }\n}\n~~~\n\n\n\n4、去掉异常，数据保存成功\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-09-Seata 分布式事务","published":1,"date":"2024-04-08T01:29:32.111Z","updated":"2024-05-31T09:04:19.065Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhq0009ecfybeux64ut","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.5.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-09-Seata分布式事务\"><a href=\"#Spring-Cloud-Alibaba-09-Seata分布式事务\" class=\"headerlink\" title=\"Spring Cloud Alibaba-09-Seata分布式事务\"></a>Spring Cloud Alibaba-09-Seata分布式事务</h1><p>[toc]</p>\n<h2 id=\"分布式事务基础\"><a href=\"#分布式事务基础\" class=\"headerlink\" title=\"分布式事务基础\"></a>分布式事务基础</h2><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务指的就是一个操作单元，在这个操作单元中的所有操作最终要保持一致的行为，要么所有操作都成功，要么所有的操作都被撤销。简单地说，事务提供一种“要么什么都不做，要么做全套”机制。</p>\n<h3 id=\"本地事务\"><a href=\"#本地事务\" class=\"headerlink\" title=\"本地事务\"></a>本地事务</h3><p>本地事物其实可以认为是数据库提供的事务机制。说到数据库事务就不得不说，数据库事务中的四 大特性:</p>\n<ul>\n<li>A:原子性(Atomicity)，一个事务中的所有操作，要么全部完成，要么全部不完成</li>\n<li>C:一致性(Consistency)，在一个事务执行之前和执行之后数据库都必须处于一致性状态</li>\n<li>I:隔离性(Isolation)，在并发环境中，当不同的事务同时操作相同的数据时，事务之间互不影响</li>\n<li>D:持久性(Durability)，指的是只要事务成功结束，它对数据库所做的更新就必须永久的保存下来</li>\n</ul>\n<p>数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚</p>\n<h3 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h3><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布<br>式系统的不同节点之上。</p>\n<p>简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同<br>的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。</p>\n<p>本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p>\n<h3 id=\"分布式事务的场景\"><a href=\"#分布式事务的场景\" class=\"headerlink\" title=\"分布式事务的场景\"></a>分布式事务的场景</h3><p><strong>1、单体系统访问多个数据库，一个服务需要调用多个数据库实例完成数据的增删改操作</strong></p>\n<p><img src=\"/typora-user-images/image-20240514095424805.png\" alt=\"image-20240514095424805\"></p>\n<p><strong>2、多个微服务访问同一个数据库实例完成数据的增删改操作</strong></p>\n<p><img src=\"/typora-user-images/image-20240514095650303.png\" alt=\"image-20240514095650303\"></p>\n<p>3、多个微服务访问多个数据库，完成数据的增删改操作</p>\n<p><img src=\"/typora-user-images/image-20240514095835213.png\" alt=\"image-20240514095835213\"></p>\n<h2 id=\"分布式事务的解决方案\"><a href=\"#分布式事务的解决方案\" class=\"headerlink\" title=\"分布式事务的解决方案\"></a>分布式事务的解决方案</h2><h3 id=\"全局事务\"><a href=\"#全局事务\" class=\"headerlink\" title=\"全局事务\"></a>全局事务</h3><p>全局事务基于DTP模型实现。DTP是由X&#x2F;Open组织提出的一种分布式事务模型——X&#x2F;Open Distributed Transaction Processing Reference Model。它规定了要实现分布式事务，需要三种角色:</p>\n<ul>\n<li>AP: Application 应用系统 (微服务)</li>\n<li>TM: Transaction Manager 事务管理器 (全局事务管理)</li>\n<li>RM: Resource Manager 资源管理器 (数据库)</li>\n</ul>\n<p>整个事务分成两个阶段:</p>\n<ul>\n<li>阶段一: 表决阶段，所有参与者都将本事务执行预提交，并将能否成功的信息反馈发给协调者。</li>\n<li>阶段二: 执行阶段，协调者根据所有参与者的反馈，通知所有参与者，步调一致地执行提交或者回 滚。</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20240516094845785.png\" alt=\"image-20240516094845785\"></p>\n<p>优点</p>\n<ul>\n<li>提高了数据一致性的概率，实现成本较低</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>单点问题: 事务协调者宕机</li>\n<li>同步阻塞: 延迟了提交时间，加长了资源阻塞时间</li>\n<li>数据不一致: 提交第二阶段，依然存在commit结果未知的情况，有可能导致数据不一致</li>\n</ul>\n<h3 id=\"可靠消息服务\"><a href=\"#可靠消息服务\" class=\"headerlink\" title=\"可靠消息服务\"></a>可靠消息服务</h3><p>基于可靠消息服务的方案是通过消息中间件保证上、下游应用数据操作的一致性。假设有A和B两个 系统，分别可以处理任务A和任务B。此时存在一个业务流程，需要将任务A和任务B在同一个事务中处 理。就可以使用消息中间件来实现这种分布式事务</p>\n<p><img src=\"/typora-user-images/image-20240520161819461.png\" alt=\"image-20240520161819461\"></p>\n<p><strong>第一步: 消息由系统A投递到中间件</strong></p>\n<ol>\n<li>在系统A处理任务A前，首先向消息中间件发送一条消息</li>\n<li>消息中间件收到后将该条消息持久化，但并不投递。持久化成功后，向A回复一个确认应答</li>\n<li>系统A收到确认应答后，则可以开始处理任务A</li>\n<li>任务A处理完成后，向消息中间件发送Commit或者Rollback请求。该请求发送完成后，对系统A而 言，该事务的处理过程就结束了</li>\n<li>如果消息中间件收到Commit，则向B系统投递消息;如果收到Rollback，则直接丢弃消息。但是 如果消息中间件收不到Commit和Rollback指令，那么就要依靠”超时询问机制”。</li>\n</ol>\n<blockquote>\n<p>超时询问机制<br>系统A除了实现正常的业务流程外，还需提供一个事务询问的接口，供消息中间件调 用。当消息中间件收到发布消息便开始计时，如果到了超时没收到确认指令，就会主动调用 系统A提供的事务询问接口询问该系统目前的状态。该接口会返回三种结果，中间件根据三 种结果做出不同反应:<br>提交:将该消息投递给系统B<br>回滚:直接将条消息丢弃<br>处理中:继续等待</p>\n</blockquote>\n<p><strong>第二步: 消息由中间件投递到系统B</strong></p>\n<p>消息中间件向下游系统投递完消息后便进入阻塞等待状态，下游系统便立即进行任务的处理，任务<br>处理完成后便向消息中间件返回应答</p>\n<ul>\n<li>如果消息中间件收到确认应答后便认为该事务处理完毕</li>\n<li>如果消息中间件在等待确认应答超时之后就会重新投递，直到下游消费者返回消费成功响应为止。<br>一般消息中间件可以设置消息重试的次数和时间间隔，如果最终还是不能成功投递，则需要手工干<br>预。这里之所以使用人工干预，而不是使用让A系统回滚，主要是考虑到整个系统设计的复杂度问<br>题。</li>\n</ul>\n<p>基于可靠消息服务的分布式事务，前半部分使用异步，注重性能;后半部分使用同步，注重开发成本。</p>\n<h3 id=\"最大努力通知\"><a href=\"#最大努力通知\" class=\"headerlink\" title=\"最大努力通知\"></a>最大努力通知</h3><p>最大努力通知也被称为定期校对，其实是对第二种解决方案的进一步优化。它引入了本地消息表来<br>记录错误消息，然后加入失败消息的定期校对功能，来进一步保证消息会被下游系统消费。</p>\n<p><img src=\"/typora-user-images/image-20240521094502177.png\" alt=\"image-20240521094502177\"></p>\n<p><strong>第一步: 消息由系统A投递到中间件</strong></p>\n<ol>\n<li><p>处理业务的同一事务中，向本地消息表中写入一条记录</p>\n</li>\n<li><p>准备专门的消息发送者不断地发送本地消息表中的消息到消息中间件，如果发送失败则重试</p>\n</li>\n</ol>\n<p><strong>第二步: 消息由中间件投递到系统B</strong></p>\n<ol>\n<li>消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行</li>\n<li>当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该<br>事务完成</li>\n<li>对于投递失败的消息，利用重试机制进行重试，对于重试失败的，写入错误消息表</li>\n<li>消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费</li>\n</ol>\n<p>这种方式的优缺点:<br>   <strong>优点:</strong> 一种非常经典的实现，实现了最终一致性。<br>   <strong>缺点:</strong> 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p>\n<h3 id=\"TCC事务\"><a href=\"#TCC事务\" class=\"headerlink\" title=\"TCC事务\"></a>TCC事务</h3><p>TCC即为Try Confirm Cancel，它属于补偿型分布式事务。TCC实现分布式事务一共有三个步骤:</p>\n<p><strong>Try:尝试待执行的业务</strong></p>\n<p>这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源</p>\n<p><strong>Confirm:确认执行业务</strong></p>\n<p>确认执行业务操作，不做任何业务检查， 只使用Try阶段预留的业务资源。通常情况下，采用TCC 则认为 Confirm阶段是不会出错的。即:只要Try成功，Confirm一定成功。若Confirm阶段真的 出错了，需引入重试机制或人工处理。</p>\n<p><strong>Cancel:取消待执行的业务</strong></p>\n<p>取消Try阶段预留的业务资源。通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若 Cancel阶段真的出错了，需引入重试机制或人工处理。</p>\n<p><img src=\"/typora-user-images/image-20240522090312508.png\" alt=\"image-20240522090312508\"></p>\n<p><img src=\"/typora-user-images/image-20240522090352573.png\" alt=\"image-20240522090352573\"></p>\n<p>TCC两阶段提交与XA两阶段提交的区别是:<br>XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。<br>TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。</p>\n<p>TCC事务的优缺点:</p>\n<p><strong>优点</strong>:把数据库层的二阶段提交上提到了应用层来实现，规避了数据库层的2PC性能低下问题。<br><strong>缺点</strong>:TCC的Try、Confirm和Cancel操作功能需业务提供，开发成本高。</p>\n<h2 id=\"Seata介绍\"><a href=\"#Seata介绍\" class=\"headerlink\" title=\"Seata介绍\"></a>Seata介绍</h2><p>2019 年 1 月，阿里巴巴中间件团队发起了开源项目 Fescar(Fast &amp; EaSy Commit And Rollback)，其愿景是让分布式事务的使用像本地事务的使用一样，简单和高效，并逐步解决开发者们 遇到的分布式事务方面的所有难题。后来更名为 Seata，意为:Simple Extensible Autonomous Transaction Architecture，是一套分布式事务解决方案。</p>\n<p>官方网站：<a href=\"https://seata.apache.org/\">https://seata.apache.org/</a></p>\n<p><img src=\"/typora-user-images/image-20240522091143334.png\" alt=\"image-20240522091143334\"></p>\n<p>Seata的设计目标是对业务无侵入，因此从业务无侵入的2PC方案着手，在传统2PC的基础上演进。 它把一个分布式事务理解成一个包含了若干分支事务的全局事务。全局事务的职责是协调其下管辖的分 支事务达成一致，要么一起成功提交，要么一起失败回滚。此外，通常分支事务本身就是一个关系数据 库的本地事务。</p>\n<p><img src=\"/typora-user-images/image-20240522090958255.png\" alt=\"image-20240522090958255\"></p>\n<p>Seata主要由三个重要组件组成:</p>\n<p><strong>TC</strong>:Transaction Coordinator 事务协调器，管理全局的分支事务的状态，用于全局性事务的提交 和回滚。</p>\n<p><strong>TM</strong>:Transaction Manager 事务管理器，用于开启、提交或者回滚全局事务。</p>\n<p>**RM:**Resource Manager 资源管理器，用于分支事务上的资源管理，向TC注册分支事务，上报分 支事务的状态，接受TC的命令来提交或者回滚分支事务。</p>\n<p><img src=\"/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>Seata的执行流程如下:</strong></p>\n<ol>\n<li><strong>全局事务开始</strong>：TM向TC请求开启一个全局事务，TC生成一个全局事务ID（XID）。</li>\n<li><strong>分支事务注册</strong>：TM通知涉及的每个RM开始分支事务，RM在执行本地事务前向TC注册分支事务，并在本地保存XID。</li>\n<li><strong>执行业务操作</strong>：RM在本地事务上下文中执行SQL操作，同时记录undo log（用于事务回滚）。</li>\n<li><strong>一阶段提交预处理</strong>：TM请求TC进行一阶段提交的预处理，TC通知所有RM准备提交，RM将本地事务状态置为预提交，并回复TC。</li>\n<li><strong>二阶段提交</strong>：若所有RM的预提交都成功，TM通知TC进行二阶段提交。TC命令所有RM正式提交分支事务，RM提交本地事务并清理undo log。</li>\n<li><strong>二阶段回滚</strong>：如果任意RM的预提交失败，或TM请求回滚，TC会命令所有RM进行分支事务的回滚，RM使用undo log恢复数据到事务前状态，并清除undo log。</li>\n</ol>\n<p><strong>Seata实现2PC与传统2PC的差别:</strong></p>\n<ol>\n<li>架构层次方面，传统2PC方案的 RM 实际上是在数据库层，RM本质上就是数据库自身，通过XA协 议实现，而 Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。</li>\n<li>两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保 持到Phase2完成才释放。而Seata的做法是在Phase1 就将本地事务提交，这样就可以省去Phase2 持锁的时间，整体提高效率。</li>\n</ol>\n<h2 id=\"Docker安装Seata-Nacos注册中心，DB存储\"><a href=\"#Docker安装Seata-Nacos注册中心，DB存储\" class=\"headerlink\" title=\"Docker安装Seata-Nacos注册中心，DB存储\"></a>Docker安装Seata-Nacos注册中心，DB存储</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p><strong>1、生成seata配置文件</strong></p>\n<p>我们通过创建临时容器的方式，直接从中拷贝出自动生成的配置信息，待挂载使用</p>\n<p><strong>2、创建文件夹</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /Users/lison/work/data/dockerData/seata/resources</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、创建临时容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name seata \\</span><br><span class=\"line\">seataio/seata-server</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、拷贝容器内置配置文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp seata:/seata-server/resources /Users/lison/work/data/dockerData/seata/</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、删除临时容器</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f seata</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"导入Seata配置到Nacos\"><a href=\"#导入Seata配置到Nacos\" class=\"headerlink\" title=\"导入Seata配置到Nacos\"></a><strong>导入Seata配置到Nacos</strong></h3><p>由于我们需要使用nacos作为seata服务的配置中心和注册中心，其中，配置中心的配置，我们需要先行导入</p>\n<blockquote>\n<p><a href=\"https://github.com/apache/incubator-seata/tree/2.x/script/config-center\">https://github.com/apache/incubator-seata/tree/2.x/script/config-center</a></p>\n</blockquote>\n<p>里面有很多配置，但我们只取重点需要的，如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">transport.type</span>=<span class=\"string\">TCP</span></span><br><span class=\"line\"><span class=\"attr\">transport.server</span>=<span class=\"string\">NIO</span></span><br><span class=\"line\"><span class=\"attr\">transport.heartbeat</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">transport.enableClientBatchSendRequest</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.bossThreadPrefix</span>=<span class=\"string\">NettyBoss</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.workerThreadPrefix</span>=<span class=\"string\">NettyServerNIOWorker</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class=\"string\">NettyServerBizHandler</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.shareBossWorker</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class=\"string\">NettyClientSelector</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.clientSelectorThreadSize</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class=\"string\">NettyClientWorkerThread</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.bossThreadSize</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.workerThreadSize</span>=<span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">transport.shutdown.wait</span>=<span class=\"string\">3</span></span><br><span class=\"line\"><span class=\"attr\">service.vgroupMapping.my_test_tx_group</span>=<span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">service.default.grouplist</span>=<span class=\"string\">127.0.0.1:8091</span></span><br><span class=\"line\"><span class=\"attr\">service.enableDegrade</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">service.disableGlobalTransaction</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.asyncCommitBufferLimit</span>=<span class=\"string\">10000</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.lock.retryInterval</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.lock.retryTimes</span>=<span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.reportRetryCount</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.tableMetaCheckEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.tableMetaCheckerInterval</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.sqlParserType</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.reportSuccessEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.sagaBranchRegisterEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.tccActionInterceptorOrder</span>=<span class=\"string\">-2147482648</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.commitRetryCount</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.rollbackRetryCount</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.defaultGlobalTransactionTimeout</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.degradeCheck</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.degradeCheckAllowTimes</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.degradeCheckPeriod</span>=<span class=\"string\">2000</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.interceptorOrder</span>=<span class=\"string\">-2147482648</span></span><br><span class=\"line\"><span class=\"attr\">store.mode</span>=<span class=\"string\">db</span></span><br><span class=\"line\"><span class=\"attr\">store.lock.mode</span>=<span class=\"string\">file</span></span><br><span class=\"line\"><span class=\"attr\">store.session.mode</span>=<span class=\"string\">file</span></span><br><span class=\"line\"><span class=\"attr\">store.file.dir</span>=<span class=\"string\">file_store/data</span></span><br><span class=\"line\"><span class=\"attr\">store.file.maxBranchSessionSize</span>=<span class=\"string\">16384</span></span><br><span class=\"line\"><span class=\"attr\">store.file.maxGlobalSessionSize</span>=<span class=\"string\">512</span></span><br><span class=\"line\"><span class=\"attr\">store.file.fileWriteBufferCacheSize</span>=<span class=\"string\">16384</span></span><br><span class=\"line\"><span class=\"attr\">store.file.flushDiskMode</span>=<span class=\"string\">async</span></span><br><span class=\"line\"><span class=\"attr\">store.file.sessionReloadReadSize</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">store.db.datasource</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"attr\">store.db.dbType</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">store.db.driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">store.db.url</span>=<span class=\"string\">jdbc:mysql://172.18.0.2:3306/seata-server?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class=\"line\"><span class=\"attr\">store.db.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">store.db.password</span>=<span class=\"string\">123456</span></span><br><span class=\"line\"><span class=\"attr\">store.db.minConn</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">store.db.maxConn</span>=<span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"attr\">store.db.globalTable</span>=<span class=\"string\">global_table</span></span><br><span class=\"line\"><span class=\"attr\">store.db.branchTable</span>=<span class=\"string\">branch_table</span></span><br><span class=\"line\"><span class=\"attr\">store.db.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">store.db.lockTable</span>=<span class=\"string\">lock_table</span></span><br><span class=\"line\"><span class=\"attr\">store.db.maxWait</span>=<span class=\"string\">5000</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.mode</span>=<span class=\"string\">single</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.single.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.single.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.maxConn</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.minConn</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.maxTotal</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.database</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.committingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.asynCommittingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.rollbackingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.timeoutRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.maxCommitRetryTimeout</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"attr\">server.maxRollbackRetryTimeout</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"attr\">server.rollbackRetryTimeoutUnlockEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">server.distributedLockExpireTime</span>=<span class=\"string\">10000</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.dataValidation</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.logSerialization</span>=<span class=\"string\">jackson</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.onlyCareUpdateColumns</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">server.undo.logSaveDays</span>=<span class=\"string\">7</span></span><br><span class=\"line\"><span class=\"attr\">server.undo.logDeletePeriod</span>=<span class=\"string\">86400000</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.logTable</span>=<span class=\"string\">undo_log</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.compress.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.compress.type</span>=<span class=\"string\">zip</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.compress.threshold</span>=<span class=\"string\">64k</span></span><br><span class=\"line\"><span class=\"attr\">log.exceptionRate</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">transport.serialization</span>=<span class=\"string\">seata</span></span><br><span class=\"line\"><span class=\"attr\">transport.compressor</span>=<span class=\"string\">none</span></span><br><span class=\"line\"><span class=\"attr\">metrics.enabled</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">metrics.registryType</span>=<span class=\"string\">compact</span></span><br><span class=\"line\"><span class=\"attr\">metrics.exporterList</span>=<span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">metrics.exporterPrometheusPort</span>=<span class=\"string\">9898</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将上述配置导入nacos，命名seata-server.properties，如下图:</p>\n<p><img src=\"/typora-user-images/image-20240524174544128.png\" alt=\"image-20240524174544128\"></p>\n<h3 id=\"修改application-yml配置文件\"><a href=\"#修改application-yml配置文件\" class=\"headerlink\" title=\"修改application.yml配置文件\"></a><strong>修改application.yml配置文件</strong></h3><p>在上面从容器中拷贝出来的resources文件夹中找到application.yml文件,根据你实际的nacos等配置信息，设置相应的application.yml配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  Copyright 1999-2019 Seata.io Group.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">#  you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\">#  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">#  See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">#  limitations under the License.</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7091</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">console:</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">seata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">seata:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"comment\"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.6</span><span class=\"string\">:8848</span>   <span class=\"comment\"># nacos的访问地址，因为是在docker中，ip地址改为宿主机地址</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span>  <span class=\"comment\"># nacos的分组</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span>     <span class=\"comment\"># nacos的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span>     <span class=\"comment\"># nacos的密码</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span></span><br><span class=\"line\">      <span class=\"comment\">#file-extension: yaml # 配置文件格式</span></span><br><span class=\"line\">      <span class=\"comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></span><br><span class=\"line\">      <span class=\"comment\">#access-key:</span></span><br><span class=\"line\">      <span class=\"comment\">#secret-key:</span></span><br><span class=\"line\">      <span class=\"attr\">data-id:</span> <span class=\"string\">seata-server.properties</span> <span class=\"comment\"># nacos中的配置文件名称</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">application:</span> <span class=\"string\">seata-server</span>       <span class=\"comment\"># seata启动后在nacos的服务名</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.6</span><span class=\"string\">:8848</span>  <span class=\"comment\"># nacos的访问地址，因为是在docker中，ip地址改为宿主机地址</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span>   <span class=\"comment\"># nacos的分组</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">      <span class=\"attr\">cluster:</span> <span class=\"string\">default</span>     <span class=\"comment\"># 这个歌参数在每个微服务seata时会用到</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span>      <span class=\"comment\"># nacos的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span>      <span class=\"comment\"># nacos的密码</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span></span><br><span class=\"line\">      <span class=\"comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></span><br><span class=\"line\">      <span class=\"comment\">#access-key:</span></span><br><span class=\"line\">      <span class=\"comment\">#secret-key:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">security:</span></span><br><span class=\"line\">    <span class=\"attr\">secretKey:</span> <span class=\"string\">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class=\"line\">    <span class=\"attr\">tokenValidityInMilliseconds:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\">    <span class=\"attr\">ignore:</span></span><br><span class=\"line\">      <span class=\"attr\">urls:</span> <span class=\"string\">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span>    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果你想修改到时候生成的web登陆的账号密码，就修改console里的username和password</p>\n<h3 id=\"生成seata所需mysql表\"><a href=\"#生成seata所需mysql表\" class=\"headerlink\" title=\"生成seata所需mysql表\"></a>生成seata所需mysql表</h3><p>TC 运行需要将事务信息保存在数据库，因此需要创建一些表</p>\n<ul>\n<li><a href=\"https://github.com/apache/incubator-seata/blob/2.x/script/server/db/mysql.sql\">https://github.com/apache/incubator-seata/blob/2.x/script/server/db/mysql.sql</a></li>\n</ul>\n<p>访问上面链接，去到源码中，找到script\\server\\db 这个目录。由于是使用mysql的，所以下载mysql.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class=\"line\"><span class=\"comment\">-- contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class=\"line\"><span class=\"comment\">-- this work for additional information regarding copyright ownership.</span></span><br><span class=\"line\"><span class=\"comment\">-- The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class=\"line\"><span class=\"comment\">-- (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\">-- the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">--     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">-- distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">-- See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">-- limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- the table to store GlobalSession data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `global_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `xid`                       <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `transaction_id`            <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `status`                    TINYINT      <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `application_id`            <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `transaction_service_group` <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `transaction_name`          <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    `timeout`                   <span class=\"type\">INT</span>,</span><br><span class=\"line\">    `begin_time`                <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `application_data`          <span class=\"type\">VARCHAR</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">    `gmt_create`                DATETIME,</span><br><span class=\"line\">    `gmt_modified`              DATETIME,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY KEY</span> (`xid`),</span><br><span class=\"line\">    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),</span><br><span class=\"line\">    KEY `idx_transaction_id` (`transaction_id`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store BranchSession data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `branch_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `branch_id`         <span class=\"type\">BIGINT</span>       <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `xid`               <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `transaction_id`    <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `resource_group_id` <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `resource_id`       <span class=\"type\">VARCHAR</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    `branch_type`       <span class=\"type\">VARCHAR</span>(<span class=\"number\">8</span>),</span><br><span class=\"line\">    `status`            TINYINT,</span><br><span class=\"line\">    `client_id`         <span class=\"type\">VARCHAR</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    `application_data`  <span class=\"type\">VARCHAR</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">    `gmt_create`        DATETIME(<span class=\"number\">6</span>),</span><br><span class=\"line\">    `gmt_modified`      DATETIME(<span class=\"number\">6</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY KEY</span> (`branch_id`),</span><br><span class=\"line\">    KEY `idx_xid` (`xid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store lock data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `lock_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `row_key`        <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `xid`            <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    `transaction_id` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `branch_id`      <span class=\"type\">BIGINT</span>       <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `resource_id`    <span class=\"type\">VARCHAR</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    `table_name`     <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `pk`             <span class=\"type\">VARCHAR</span>(<span class=\"number\">36</span>),</span><br><span class=\"line\">    `status`         TINYINT      <span class=\"keyword\">NOT NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;0:locked ,1:rollbacking&#x27;</span>,</span><br><span class=\"line\">    `gmt_create`     DATETIME,</span><br><span class=\"line\">    `gmt_modified`   DATETIME,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY KEY</span> (`row_key`),</span><br><span class=\"line\">    KEY `idx_status` (`status`),</span><br><span class=\"line\">    KEY `idx_branch_id` (`branch_id`),</span><br><span class=\"line\">    KEY `idx_xid` (`xid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `distributed_lock`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `lock_key`       <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `lock_value`     <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `expire`         <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">primary key</span> (`lock_key`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;AsyncCommitting&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;RetryCommitting&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;RetryRollbacking&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;TxTimeoutCheck&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"制作docker-compose-yaml文件\"><a href=\"#制作docker-compose-yaml文件\" class=\"headerlink\" title=\"制作docker-compose.yaml文件\"></a><strong>制作docker-compose.yaml文件</strong></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Seata 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"comment\"># seata服务1</span></span><br><span class=\"line\">  <span class=\"attr\">seata-server1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">seataio/seata-server</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">seata-server1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8091</span><span class=\"string\">:8091</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">7091</span><span class=\"string\">:7091</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">LANG=en_US.UTF-8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">STORE_MODE=db</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SEATA_IP=127.0.0.1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SEATA_PORT=8091</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/seata/resources:/seata-server/resources</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SEATA_IP：可选，指定seata-server启动的IP，该IP用于向注册中心注册时使用<br>SEATA_PORT：可选，指定seata-server启动的端口，默认为 8091<br>STORE_MODE：可选，指定seata-server的事务日志存储方式，支持 db、file、redis，默认是 file<br>SERVER_NODE：可选, 用于指定seata-server节点ID, 如 1,2,3…，默认根据IP生成<br>SEATA_ENV：可选，指定 seata-server 运行环境，如 dev、test 等，服务启动时会使用 registry-dev.conf 这样的配置</p>\n</blockquote>\n<h3 id=\"启动验证\"><a href=\"#启动验证\" class=\"headerlink\" title=\"启动验证\"></a>启动验证</h3><p><strong>1、启动Seata服务</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、查看nacos服务里是否启动成功</strong></p>\n<p><img src=\"/typora-user-images/image-20240524175254196.png\" alt=\"image-20240524175254196\"></p>\n<p><strong>3、查看网站</strong></p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:7091/#/\">http://127.0.0.1:7091/#/</a></p>\n</blockquote>\n<ul>\n<li>默认账号：seata</li>\n<li>默认密码：seata</li>\n<li>如果需要修改就改application.yml里的console配置项</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20240524175527451.png\" alt=\"image-20240524175527451\"></p>\n<h2 id=\"Seata实现分布式事务控制\"><a href=\"#Seata实现分布式事务控制\" class=\"headerlink\" title=\"Seata实现分布式事务控制\"></a>Seata实现分布式事务控制</h2><p>本示例通过Seata中间件实现分布式事务，模拟电商中的下单和扣库存的过程<br>我们通过订单微服务执行下单操作，然后由订单微服务调用商品微服务扣除库存</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>1、搭建我们所需要写的demo的库springbootbuild,创建一个名为test的数据库,然后执行以下sql代码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `test`;</span><br><span class=\"line\">CREATE TABLE `test` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `one` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `two` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `createTime` datetime DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `t_user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class=\"line\">  `user_name` varchar(255) DEFAULT NULL COMMENT &#x27;用户名称&#x27;,</span><br><span class=\"line\">  `sex` tinyint(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;性别，0：男，1：女&#x27;,</span><br><span class=\"line\">  `age` int(3) DEFAULT &#x27;0&#x27; COMMENT &#x27;年龄&#x27;,</span><br><span class=\"line\">  `address` varchar(255) DEFAULT NULL COMMENT &#x27;地址&#x27;,</span><br><span class=\"line\">  `phone` varchar(11) DEFAULT NULL COMMENT &#x27;手机&#x27;,</span><br><span class=\"line\">  `create_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `t_test` VALUES (&#x27;1&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;2024-05-27 16:07:34&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `t_user`  VALUES(&#x27;1&#x27;, &#x27;name&#x27;, &#x27;0&#x27;, &#x27;11&#x27;,&#x27;地址&#x27;,&#x27;18818900000&#x27;,&#x27;2024-05-27 16:07:34&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>2、引入依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>1.4.2版本不需要在项目里引入file.conf和registry.conf了。</p>\n<p>3、增加数据源配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">master:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/springbootbuild?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">      <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"string\">user()</span></span><br><span class=\"line\">      <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">connection-properties:</span> <span class=\"string\">druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">seata:</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">&quot;seata&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">      <span class=\"attr\">application:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span>    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置seata代理数据源\"><a href=\"#配置seata代理数据源\" class=\"headerlink\" title=\"配置seata代理数据源\"></a>配置seata代理数据源</h3><p>新增DatabaseConfiguration，Seata的RM通过DataSourceProxy才能在业务代码的失误提交时，通过这个切入点，与TC通讯交互，记录undo_log等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.config.base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.config.base-&gt; DatabaseConfiguration</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatabaseConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DatabaseConfiguration</span><span class=\"params\">(ApplicationContext applicationContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource.master&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DruidDataSource <span class=\"title function_\">ds0</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DruidDataSource</span> <span class=\"variable\">druidDataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">(DruidDataSource ds0)</span>  &#123;</span><br><span class=\"line\">        <span class=\"type\">DataSourceProxy</span> <span class=\"variable\">pds0</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceProxy</span>(ds0);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pds0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动类修改\"><a href=\"#启动类修改\" class=\"headerlink\" title=\"启动类修改\"></a>启动类修改</h3><p>注意：需要把spirngboot自带的数据源排除掉，否则出现配置的代理数据源与spirngboot自带的形成循环依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动时排除springboot自带的数据源配置类</span><br><span class=\"line\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class SpringCloudServiceApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加undo-log表\"><a href=\"#添加undo-log表\" class=\"headerlink\" title=\"添加undo_log表\"></a>添加undo_log表</h3><p>该表用来事务回滚，分支事务提交时记录事务相关信息，在分布式事务异常时回滚，分布式事务结束后会删除undo_log的记录。<br>在spring配置指定的数据库中创建表，每个需要注册到seata server的业务模块都有创建该表，创建语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">-- Table structure for undo_log</span><br><span class=\"line\"></span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `undo_log`;</span><br><span class=\"line\">CREATE TABLE `undo_log` (</span><br><span class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `branch_id` bigint(20) NOT NULL,</span><br><span class=\"line\">  `xid` varchar(100) NOT NULL,</span><br><span class=\"line\">  `context` varchar(128) NOT NULL,</span><br><span class=\"line\">  `rollback_info` longblob NOT NULL,</span><br><span class=\"line\">  `log_status` int(11) NOT NULL,</span><br><span class=\"line\">  `log_created` datetime NOT NULL,</span><br><span class=\"line\">  `log_modified` datetime NOT NULL,</span><br><span class=\"line\">  `ext` varchar(100) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">-- Records of undo_log</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>这里只简单的演示在一个微服务中，一个分布式事物包含两个分支事物。</p>\n<h3 id=\"seata使用示例\"><a href=\"#seata使用示例\" class=\"headerlink\" title=\"seata使用示例\"></a>seata使用示例</h3><p><strong>Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.service.ITestService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.service.TestGlobalTransServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.controller-&gt; TestSeataController</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/test/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSeataController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestGlobalTransServiceImpl testGlobalTransService;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/seataTrans&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testSeataTrans</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        testGlobalTransService.testTrans();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.service-&gt; TestGlobalTransService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestGlobalTransServiceImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITestService iTestService;</span><br><span class=\"line\">    <span class=\"comment\">//@GlobalTransactional</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTrans</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分支事务添加用户信息</span></span><br><span class=\"line\">        iTestService.insertUser();</span><br><span class=\"line\">        <span class=\"comment\">// 分支事务添加测试</span></span><br><span class=\"line\">        iTestService.insertTest();</span><br><span class=\"line\">        <span class=\"comment\">// 抛出异常，事务回滚</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;test exception&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>负责分支事务的服务类，单独拿出来是因为spring事务代理要求事务方法如果和调用方法放在一个类中，代理不生效，具体原因不在赘述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.mapper.TestMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.service.ITestService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.service.impl-&gt; TestServiceImpl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestServiceImpl</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">ITestService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestMapper testMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        userMapper.insert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        testMapper.insert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Mapper</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into t_test(one,two,createTime) values ( 0,18,now())&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into t_user (user_name,sex,age, create_time) values (&#x27;aaaaaaaaa&#x27;, 0,18,now())&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试结果：</p>\n<p>1、调用：<a href=\"http://localhost:18001/test/seataTrans\">http://localhost:18001/test/seataTrans</a></p>\n<p>2、因为 我们的代码中@GlobalTransactional 被注释。当有异常抛出，所有数据库中插入数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-05-27 16:58:57.346 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]</span><br><span class=\"line\">2024-05-27 16:58:57.504 [TID:Ignored_Trace] [http-nio-18001-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.Exception: test exception] with root cause</span><br><span class=\"line\">java.lang.Exception: test exception</span><br><span class=\"line\">\tat com.lison.springcloudservice.service.TestGlobalTransServiceImpl.testTrans(TestGlobalTransServiceImpl.java:24)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3(TestSeataController.java:25)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3$accessor$$sw$ful2f31(TestSeataController.java)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController$$sw$auxiliary$p4qqk42.call(Unknown Source)</span><br><span class=\"line\">\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController.testSeataTrans(TestSeataController.java)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)</span><br><span class=\"line\">\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)</span><br><span class=\"line\">\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)</span><br><span class=\"line\">\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)</span><br><span class=\"line\">\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)</span><br><span class=\"line\">\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)</span><br><span class=\"line\">\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)</span><br><span class=\"line\">\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)</span><br><span class=\"line\">\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:68)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:87)</span><br><span class=\"line\">\tat org.springframework.cloud.sleuth.instrument.web.LazyTracingFilter.doFilter(TraceWebServletAutoConfiguration.java:139)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class=\"line\">\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3(StandardHostValve.java:139)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3$accessor$$sw$p8ebm33(StandardHostValve.java)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve$$sw$auxiliary$1213ni1.call(Unknown Source)</span><br><span class=\"line\">\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)</span><br><span class=\"line\">\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)</span><br><span class=\"line\">\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)</span><br><span class=\"line\">\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class=\"line\">\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">2024-05-27 16:58:57.516 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]</span><br><span class=\"line\">2024-05-27 16:58:58.508 [TID:N/A] [AsyncReporter&#123;org.springframework.cloud.sleuth.zipkin2.sender.RestTemplateSender@3f169051&#125;] WARN  z.r.AsyncReporter$BoundedAsyncReporter -Spans were dropped due to exceptions. All subsequent errors will be logged at FINE level.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3、修改代码取消注释，再次调用，数据没有保存成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> */</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class TestGlobalTransServiceImpl &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private ITestService iTestService;</span><br><span class=\"line\">    @GlobalTransactional</span><br><span class=\"line\">    public void testTrans() throws Exception &#123;</span><br><span class=\"line\">        // 分支事务添加用户信息</span><br><span class=\"line\">        iTestService.insertUser();</span><br><span class=\"line\">        // 分支事务添加测试</span><br><span class=\"line\">        iTestService.insertTest();</span><br><span class=\"line\">        // 抛出异常，事务回滚</span><br><span class=\"line\">        throw new Exception(&quot;test exception&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4、去掉异常，数据保存成功</p>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2024.5.03</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-09-Seata分布式事务\"><a href=\"#Spring-Cloud-Alibaba-09-Seata分布式事务\" class=\"headerlink\" title=\"Spring Cloud Alibaba-09-Seata分布式事务\"></a>Spring Cloud Alibaba-09-Seata分布式事务</h1><p>[toc]</p>\n<h2 id=\"分布式事务基础\"><a href=\"#分布式事务基础\" class=\"headerlink\" title=\"分布式事务基础\"></a>分布式事务基础</h2><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>事务指的就是一个操作单元，在这个操作单元中的所有操作最终要保持一致的行为，要么所有操作都成功，要么所有的操作都被撤销。简单地说，事务提供一种“要么什么都不做，要么做全套”机制。</p>\n<h3 id=\"本地事务\"><a href=\"#本地事务\" class=\"headerlink\" title=\"本地事务\"></a>本地事务</h3><p>本地事物其实可以认为是数据库提供的事务机制。说到数据库事务就不得不说，数据库事务中的四 大特性:</p>\n<ul>\n<li>A:原子性(Atomicity)，一个事务中的所有操作，要么全部完成，要么全部不完成</li>\n<li>C:一致性(Consistency)，在一个事务执行之前和执行之后数据库都必须处于一致性状态</li>\n<li>I:隔离性(Isolation)，在并发环境中，当不同的事务同时操作相同的数据时，事务之间互不影响</li>\n<li>D:持久性(Durability)，指的是只要事务成功结束，它对数据库所做的更新就必须永久的保存下来</li>\n</ul>\n<p>数据库事务在实现时会将一次事务涉及的所有操作全部纳入到一个不可分割的执行单元，该执行单元中的所有操作要么都成功，要么都失败，只要其中任一操作执行失败，都将导致整个事务的回滚</p>\n<h3 id=\"分布式事务\"><a href=\"#分布式事务\" class=\"headerlink\" title=\"分布式事务\"></a>分布式事务</h3><p>分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同的分布<br>式系统的不同节点之上。</p>\n<p>简单的说，就是一次大的操作由不同的小操作组成，这些小的操作分布在不同的服务器上，且属于不同<br>的应用，分布式事务需要保证这些小操作要么全部成功，要么全部失败。</p>\n<p>本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</p>\n<h3 id=\"分布式事务的场景\"><a href=\"#分布式事务的场景\" class=\"headerlink\" title=\"分布式事务的场景\"></a>分布式事务的场景</h3><p><strong>1、单体系统访问多个数据库，一个服务需要调用多个数据库实例完成数据的增删改操作</strong></p>\n<p><img src=\"/typora-user-images/image-20240514095424805.png\" alt=\"image-20240514095424805\"></p>\n<p><strong>2、多个微服务访问同一个数据库实例完成数据的增删改操作</strong></p>\n<p><img src=\"/typora-user-images/image-20240514095650303.png\" alt=\"image-20240514095650303\"></p>\n<p>3、多个微服务访问多个数据库，完成数据的增删改操作</p>\n<p><img src=\"/typora-user-images/image-20240514095835213.png\" alt=\"image-20240514095835213\"></p>\n<h2 id=\"分布式事务的解决方案\"><a href=\"#分布式事务的解决方案\" class=\"headerlink\" title=\"分布式事务的解决方案\"></a>分布式事务的解决方案</h2><h3 id=\"全局事务\"><a href=\"#全局事务\" class=\"headerlink\" title=\"全局事务\"></a>全局事务</h3><p>全局事务基于DTP模型实现。DTP是由X&#x2F;Open组织提出的一种分布式事务模型——X&#x2F;Open Distributed Transaction Processing Reference Model。它规定了要实现分布式事务，需要三种角色:</p>\n<ul>\n<li>AP: Application 应用系统 (微服务)</li>\n<li>TM: Transaction Manager 事务管理器 (全局事务管理)</li>\n<li>RM: Resource Manager 资源管理器 (数据库)</li>\n</ul>\n<p>整个事务分成两个阶段:</p>\n<ul>\n<li>阶段一: 表决阶段，所有参与者都将本事务执行预提交，并将能否成功的信息反馈发给协调者。</li>\n<li>阶段二: 执行阶段，协调者根据所有参与者的反馈，通知所有参与者，步调一致地执行提交或者回 滚。</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20240516094845785.png\" alt=\"image-20240516094845785\"></p>\n<p>优点</p>\n<ul>\n<li>提高了数据一致性的概率，实现成本较低</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>单点问题: 事务协调者宕机</li>\n<li>同步阻塞: 延迟了提交时间，加长了资源阻塞时间</li>\n<li>数据不一致: 提交第二阶段，依然存在commit结果未知的情况，有可能导致数据不一致</li>\n</ul>\n<h3 id=\"可靠消息服务\"><a href=\"#可靠消息服务\" class=\"headerlink\" title=\"可靠消息服务\"></a>可靠消息服务</h3><p>基于可靠消息服务的方案是通过消息中间件保证上、下游应用数据操作的一致性。假设有A和B两个 系统，分别可以处理任务A和任务B。此时存在一个业务流程，需要将任务A和任务B在同一个事务中处 理。就可以使用消息中间件来实现这种分布式事务</p>\n<p><img src=\"/typora-user-images/image-20240520161819461.png\" alt=\"image-20240520161819461\"></p>\n<p><strong>第一步: 消息由系统A投递到中间件</strong></p>\n<ol>\n<li>在系统A处理任务A前，首先向消息中间件发送一条消息</li>\n<li>消息中间件收到后将该条消息持久化，但并不投递。持久化成功后，向A回复一个确认应答</li>\n<li>系统A收到确认应答后，则可以开始处理任务A</li>\n<li>任务A处理完成后，向消息中间件发送Commit或者Rollback请求。该请求发送完成后，对系统A而 言，该事务的处理过程就结束了</li>\n<li>如果消息中间件收到Commit，则向B系统投递消息;如果收到Rollback，则直接丢弃消息。但是 如果消息中间件收不到Commit和Rollback指令，那么就要依靠”超时询问机制”。</li>\n</ol>\n<blockquote>\n<p>超时询问机制<br>系统A除了实现正常的业务流程外，还需提供一个事务询问的接口，供消息中间件调 用。当消息中间件收到发布消息便开始计时，如果到了超时没收到确认指令，就会主动调用 系统A提供的事务询问接口询问该系统目前的状态。该接口会返回三种结果，中间件根据三 种结果做出不同反应:<br>提交:将该消息投递给系统B<br>回滚:直接将条消息丢弃<br>处理中:继续等待</p>\n</blockquote>\n<p><strong>第二步: 消息由中间件投递到系统B</strong></p>\n<p>消息中间件向下游系统投递完消息后便进入阻塞等待状态，下游系统便立即进行任务的处理，任务<br>处理完成后便向消息中间件返回应答</p>\n<ul>\n<li>如果消息中间件收到确认应答后便认为该事务处理完毕</li>\n<li>如果消息中间件在等待确认应答超时之后就会重新投递，直到下游消费者返回消费成功响应为止。<br>一般消息中间件可以设置消息重试的次数和时间间隔，如果最终还是不能成功投递，则需要手工干<br>预。这里之所以使用人工干预，而不是使用让A系统回滚，主要是考虑到整个系统设计的复杂度问<br>题。</li>\n</ul>\n<p>基于可靠消息服务的分布式事务，前半部分使用异步，注重性能;后半部分使用同步，注重开发成本。</p>\n<h3 id=\"最大努力通知\"><a href=\"#最大努力通知\" class=\"headerlink\" title=\"最大努力通知\"></a>最大努力通知</h3><p>最大努力通知也被称为定期校对，其实是对第二种解决方案的进一步优化。它引入了本地消息表来<br>记录错误消息，然后加入失败消息的定期校对功能，来进一步保证消息会被下游系统消费。</p>\n<p><img src=\"/typora-user-images/image-20240521094502177.png\" alt=\"image-20240521094502177\"></p>\n<p><strong>第一步: 消息由系统A投递到中间件</strong></p>\n<ol>\n<li><p>处理业务的同一事务中，向本地消息表中写入一条记录</p>\n</li>\n<li><p>准备专门的消息发送者不断地发送本地消息表中的消息到消息中间件，如果发送失败则重试</p>\n</li>\n</ol>\n<p><strong>第二步: 消息由中间件投递到系统B</strong></p>\n<ol>\n<li>消息中间件收到消息后负责将该消息同步投递给相应的下游系统，并触发下游系统的任务执行</li>\n<li>当下游系统处理成功后，向消息中间件反馈确认应答，消息中间件便可以将该条消息删除，从而该<br>事务完成</li>\n<li>对于投递失败的消息，利用重试机制进行重试，对于重试失败的，写入错误消息表</li>\n<li>消息中间件需要提供失败消息的查询接口，下游系统会定期查询失败消息，并将其消费</li>\n</ol>\n<p>这种方式的优缺点:<br>   <strong>优点:</strong> 一种非常经典的实现，实现了最终一致性。<br>   <strong>缺点:</strong> 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</p>\n<h3 id=\"TCC事务\"><a href=\"#TCC事务\" class=\"headerlink\" title=\"TCC事务\"></a>TCC事务</h3><p>TCC即为Try Confirm Cancel，它属于补偿型分布式事务。TCC实现分布式事务一共有三个步骤:</p>\n<p><strong>Try:尝试待执行的业务</strong></p>\n<p>这个过程并未执行业务，只是完成所有业务的一致性检查，并预留好执行所需的全部资源</p>\n<p><strong>Confirm:确认执行业务</strong></p>\n<p>确认执行业务操作，不做任何业务检查， 只使用Try阶段预留的业务资源。通常情况下，采用TCC 则认为 Confirm阶段是不会出错的。即:只要Try成功，Confirm一定成功。若Confirm阶段真的 出错了，需引入重试机制或人工处理。</p>\n<p><strong>Cancel:取消待执行的业务</strong></p>\n<p>取消Try阶段预留的业务资源。通常情况下，采用TCC则认为Cancel阶段也是一定成功的。若 Cancel阶段真的出错了，需引入重试机制或人工处理。</p>\n<p><img src=\"/typora-user-images/image-20240522090312508.png\" alt=\"image-20240522090312508\"></p>\n<p><img src=\"/typora-user-images/image-20240522090352573.png\" alt=\"image-20240522090352573\"></p>\n<p>TCC两阶段提交与XA两阶段提交的区别是:<br>XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁。<br>TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁。</p>\n<p>TCC事务的优缺点:</p>\n<p><strong>优点</strong>:把数据库层的二阶段提交上提到了应用层来实现，规避了数据库层的2PC性能低下问题。<br><strong>缺点</strong>:TCC的Try、Confirm和Cancel操作功能需业务提供，开发成本高。</p>\n<h2 id=\"Seata介绍\"><a href=\"#Seata介绍\" class=\"headerlink\" title=\"Seata介绍\"></a>Seata介绍</h2><p>2019 年 1 月，阿里巴巴中间件团队发起了开源项目 Fescar(Fast &amp; EaSy Commit And Rollback)，其愿景是让分布式事务的使用像本地事务的使用一样，简单和高效，并逐步解决开发者们 遇到的分布式事务方面的所有难题。后来更名为 Seata，意为:Simple Extensible Autonomous Transaction Architecture，是一套分布式事务解决方案。</p>\n<p>官方网站：<a href=\"https://seata.apache.org/\">https://seata.apache.org/</a></p>\n<p><img src=\"/typora-user-images/image-20240522091143334.png\" alt=\"image-20240522091143334\"></p>\n<p>Seata的设计目标是对业务无侵入，因此从业务无侵入的2PC方案着手，在传统2PC的基础上演进。 它把一个分布式事务理解成一个包含了若干分支事务的全局事务。全局事务的职责是协调其下管辖的分 支事务达成一致，要么一起成功提交，要么一起失败回滚。此外，通常分支事务本身就是一个关系数据 库的本地事务。</p>\n<p><img src=\"/typora-user-images/image-20240522090958255.png\" alt=\"image-20240522090958255\"></p>\n<p>Seata主要由三个重要组件组成:</p>\n<p><strong>TC</strong>:Transaction Coordinator 事务协调器，管理全局的分支事务的状态，用于全局性事务的提交 和回滚。</p>\n<p><strong>TM</strong>:Transaction Manager 事务管理器，用于开启、提交或者回滚全局事务。</p>\n<p>**RM:**Resource Manager 资源管理器，用于分支事务上的资源管理，向TC注册分支事务，上报分 支事务的状态，接受TC的命令来提交或者回滚分支事务。</p>\n<p><img src=\"/typora-user-images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3J1aXBlbmcyNTA=,size_16,color_FFFFFF,t_70-6340401.png\" alt=\"在这里插入图片描述\"></p>\n<p><strong>Seata的执行流程如下:</strong></p>\n<ol>\n<li><strong>全局事务开始</strong>：TM向TC请求开启一个全局事务，TC生成一个全局事务ID（XID）。</li>\n<li><strong>分支事务注册</strong>：TM通知涉及的每个RM开始分支事务，RM在执行本地事务前向TC注册分支事务，并在本地保存XID。</li>\n<li><strong>执行业务操作</strong>：RM在本地事务上下文中执行SQL操作，同时记录undo log（用于事务回滚）。</li>\n<li><strong>一阶段提交预处理</strong>：TM请求TC进行一阶段提交的预处理，TC通知所有RM准备提交，RM将本地事务状态置为预提交，并回复TC。</li>\n<li><strong>二阶段提交</strong>：若所有RM的预提交都成功，TM通知TC进行二阶段提交。TC命令所有RM正式提交分支事务，RM提交本地事务并清理undo log。</li>\n<li><strong>二阶段回滚</strong>：如果任意RM的预提交失败，或TM请求回滚，TC会命令所有RM进行分支事务的回滚，RM使用undo log恢复数据到事务前状态，并清除undo log。</li>\n</ol>\n<p><strong>Seata实现2PC与传统2PC的差别:</strong></p>\n<ol>\n<li>架构层次方面，传统2PC方案的 RM 实际上是在数据库层，RM本质上就是数据库自身，通过XA协 议实现，而 Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。</li>\n<li>两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保 持到Phase2完成才释放。而Seata的做法是在Phase1 就将本地事务提交，这样就可以省去Phase2 持锁的时间，整体提高效率。</li>\n</ol>\n<h2 id=\"Docker安装Seata-Nacos注册中心，DB存储\"><a href=\"#Docker安装Seata-Nacos注册中心，DB存储\" class=\"headerlink\" title=\"Docker安装Seata-Nacos注册中心，DB存储\"></a>Docker安装Seata-Nacos注册中心，DB存储</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p><strong>1、生成seata配置文件</strong></p>\n<p>我们通过创建临时容器的方式，直接从中拷贝出自动生成的配置信息，待挂载使用</p>\n<p><strong>2、创建文件夹</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /Users/lison/work/data/dockerData/seata/resources</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、创建临时容器</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--name seata \\</span><br><span class=\"line\">seataio/seata-server</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、拷贝容器内置配置文件</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp seata:/seata-server/resources /Users/lison/work/data/dockerData/seata/</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、删除临时容器</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f seata</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"导入Seata配置到Nacos\"><a href=\"#导入Seata配置到Nacos\" class=\"headerlink\" title=\"导入Seata配置到Nacos\"></a><strong>导入Seata配置到Nacos</strong></h3><p>由于我们需要使用nacos作为seata服务的配置中心和注册中心，其中，配置中心的配置，我们需要先行导入</p>\n<blockquote>\n<p><a href=\"https://github.com/apache/incubator-seata/tree/2.x/script/config-center\">https://github.com/apache/incubator-seata/tree/2.x/script/config-center</a></p>\n</blockquote>\n<p>里面有很多配置，但我们只取重点需要的，如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">transport.type</span>=<span class=\"string\">TCP</span></span><br><span class=\"line\"><span class=\"attr\">transport.server</span>=<span class=\"string\">NIO</span></span><br><span class=\"line\"><span class=\"attr\">transport.heartbeat</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">transport.enableClientBatchSendRequest</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.bossThreadPrefix</span>=<span class=\"string\">NettyBoss</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.workerThreadPrefix</span>=<span class=\"string\">NettyServerNIOWorker</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.serverExecutorThreadPrefix</span>=<span class=\"string\">NettyServerBizHandler</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.shareBossWorker</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.clientSelectorThreadPrefix</span>=<span class=\"string\">NettyClientSelector</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.clientSelectorThreadSize</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.clientWorkerThreadPrefix</span>=<span class=\"string\">NettyClientWorkerThread</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.bossThreadSize</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">transport.threadFactory.workerThreadSize</span>=<span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">transport.shutdown.wait</span>=<span class=\"string\">3</span></span><br><span class=\"line\"><span class=\"attr\">service.vgroupMapping.my_test_tx_group</span>=<span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"attr\">service.default.grouplist</span>=<span class=\"string\">127.0.0.1:8091</span></span><br><span class=\"line\"><span class=\"attr\">service.enableDegrade</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">service.disableGlobalTransaction</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.asyncCommitBufferLimit</span>=<span class=\"string\">10000</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.lock.retryInterval</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.lock.retryTimes</span>=<span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.reportRetryCount</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.tableMetaCheckEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.tableMetaCheckerInterval</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.sqlParserType</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.reportSuccessEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.sagaBranchRegisterEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.rm.tccActionInterceptorOrder</span>=<span class=\"string\">-2147482648</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.commitRetryCount</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.rollbackRetryCount</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.defaultGlobalTransactionTimeout</span>=<span class=\"string\">60000</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.degradeCheck</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.degradeCheckAllowTimes</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.degradeCheckPeriod</span>=<span class=\"string\">2000</span></span><br><span class=\"line\"><span class=\"attr\">client.tm.interceptorOrder</span>=<span class=\"string\">-2147482648</span></span><br><span class=\"line\"><span class=\"attr\">store.mode</span>=<span class=\"string\">db</span></span><br><span class=\"line\"><span class=\"attr\">store.lock.mode</span>=<span class=\"string\">file</span></span><br><span class=\"line\"><span class=\"attr\">store.session.mode</span>=<span class=\"string\">file</span></span><br><span class=\"line\"><span class=\"attr\">store.file.dir</span>=<span class=\"string\">file_store/data</span></span><br><span class=\"line\"><span class=\"attr\">store.file.maxBranchSessionSize</span>=<span class=\"string\">16384</span></span><br><span class=\"line\"><span class=\"attr\">store.file.maxGlobalSessionSize</span>=<span class=\"string\">512</span></span><br><span class=\"line\"><span class=\"attr\">store.file.fileWriteBufferCacheSize</span>=<span class=\"string\">16384</span></span><br><span class=\"line\"><span class=\"attr\">store.file.flushDiskMode</span>=<span class=\"string\">async</span></span><br><span class=\"line\"><span class=\"attr\">store.file.sessionReloadReadSize</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">store.db.datasource</span>=<span class=\"string\">druid</span></span><br><span class=\"line\"><span class=\"attr\">store.db.dbType</span>=<span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"attr\">store.db.driverClassName</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">store.db.url</span>=<span class=\"string\">jdbc:mysql://172.18.0.2:3306/seata-server?useUnicode=true&amp;rewriteBatchedStatements=true</span></span><br><span class=\"line\"><span class=\"attr\">store.db.user</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">store.db.password</span>=<span class=\"string\">123456</span></span><br><span class=\"line\"><span class=\"attr\">store.db.minConn</span>=<span class=\"string\">5</span></span><br><span class=\"line\"><span class=\"attr\">store.db.maxConn</span>=<span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"attr\">store.db.globalTable</span>=<span class=\"string\">global_table</span></span><br><span class=\"line\"><span class=\"attr\">store.db.branchTable</span>=<span class=\"string\">branch_table</span></span><br><span class=\"line\"><span class=\"attr\">store.db.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">store.db.lockTable</span>=<span class=\"string\">lock_table</span></span><br><span class=\"line\"><span class=\"attr\">store.db.maxWait</span>=<span class=\"string\">5000</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.mode</span>=<span class=\"string\">single</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.single.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.single.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.maxConn</span>=<span class=\"string\">10</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.minConn</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.maxTotal</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.database</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">store.redis.queryLimit</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.committingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.asynCommittingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.rollbackingRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.recovery.timeoutRetryPeriod</span>=<span class=\"string\">1000</span></span><br><span class=\"line\"><span class=\"attr\">server.maxCommitRetryTimeout</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"attr\">server.maxRollbackRetryTimeout</span>=<span class=\"string\">-1</span></span><br><span class=\"line\"><span class=\"attr\">server.rollbackRetryTimeoutUnlockEnable</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">server.distributedLockExpireTime</span>=<span class=\"string\">10000</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.dataValidation</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.logSerialization</span>=<span class=\"string\">jackson</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.onlyCareUpdateColumns</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">server.undo.logSaveDays</span>=<span class=\"string\">7</span></span><br><span class=\"line\"><span class=\"attr\">server.undo.logDeletePeriod</span>=<span class=\"string\">86400000</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.logTable</span>=<span class=\"string\">undo_log</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.compress.enable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.compress.type</span>=<span class=\"string\">zip</span></span><br><span class=\"line\"><span class=\"attr\">client.undo.compress.threshold</span>=<span class=\"string\">64k</span></span><br><span class=\"line\"><span class=\"attr\">log.exceptionRate</span>=<span class=\"string\">100</span></span><br><span class=\"line\"><span class=\"attr\">transport.serialization</span>=<span class=\"string\">seata</span></span><br><span class=\"line\"><span class=\"attr\">transport.compressor</span>=<span class=\"string\">none</span></span><br><span class=\"line\"><span class=\"attr\">metrics.enabled</span>=<span class=\"string\">false</span></span><br><span class=\"line\"><span class=\"attr\">metrics.registryType</span>=<span class=\"string\">compact</span></span><br><span class=\"line\"><span class=\"attr\">metrics.exporterList</span>=<span class=\"string\">prometheus</span></span><br><span class=\"line\"><span class=\"attr\">metrics.exporterPrometheusPort</span>=<span class=\"string\">9898</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将上述配置导入nacos，命名seata-server.properties，如下图:</p>\n<p><img src=\"/typora-user-images/image-20240524174544128.png\" alt=\"image-20240524174544128\"></p>\n<h3 id=\"修改application-yml配置文件\"><a href=\"#修改application-yml配置文件\" class=\"headerlink\" title=\"修改application.yml配置文件\"></a><strong>修改application.yml配置文件</strong></h3><p>在上面从容器中拷贝出来的resources文件夹中找到application.yml文件,根据你实际的nacos等配置信息，设置相应的application.yml配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  Copyright 1999-2019 Seata.io Group.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">#  you may not use this file except in compliance with the License.</span></span><br><span class=\"line\"><span class=\"comment\">#  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#  Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">#  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">#  See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">#  limitations under the License.</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">7091</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">console:</span></span><br><span class=\"line\">  <span class=\"attr\">user:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">seata</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">seata:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"comment\"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.6</span><span class=\"string\">:8848</span>   <span class=\"comment\"># nacos的访问地址，因为是在docker中，ip地址改为宿主机地址</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span>  <span class=\"comment\"># nacos的分组</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span>     <span class=\"comment\"># nacos的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span>     <span class=\"comment\"># nacos的密码</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span></span><br><span class=\"line\">      <span class=\"comment\">#file-extension: yaml # 配置文件格式</span></span><br><span class=\"line\">      <span class=\"comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></span><br><span class=\"line\">      <span class=\"comment\">#access-key:</span></span><br><span class=\"line\">      <span class=\"comment\">#secret-key:</span></span><br><span class=\"line\">      <span class=\"attr\">data-id:</span> <span class=\"string\">seata-server.properties</span> <span class=\"comment\"># nacos中的配置文件名称</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">application:</span> <span class=\"string\">seata-server</span>       <span class=\"comment\"># seata启动后在nacos的服务名</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">172.18</span><span class=\"number\">.0</span><span class=\"number\">.6</span><span class=\"string\">:8848</span>  <span class=\"comment\"># nacos的访问地址，因为是在docker中，ip地址改为宿主机地址</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span>   <span class=\"comment\"># nacos的分组</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">seata</span></span><br><span class=\"line\">      <span class=\"attr\">cluster:</span> <span class=\"string\">default</span>     <span class=\"comment\"># 这个歌参数在每个微服务seata时会用到</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span>      <span class=\"comment\"># nacos的用户名</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span>      <span class=\"comment\"># nacos的密码</span></span><br><span class=\"line\">      <span class=\"attr\">context-path:</span></span><br><span class=\"line\">      <span class=\"comment\">##if use MSE Nacos with auth, mutex with username/password attribute</span></span><br><span class=\"line\">      <span class=\"comment\">#access-key:</span></span><br><span class=\"line\">      <span class=\"comment\">#secret-key:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">security:</span></span><br><span class=\"line\">    <span class=\"attr\">secretKey:</span> <span class=\"string\">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span></span><br><span class=\"line\">    <span class=\"attr\">tokenValidityInMilliseconds:</span> <span class=\"number\">1800000</span></span><br><span class=\"line\">    <span class=\"attr\">ignore:</span></span><br><span class=\"line\">      <span class=\"attr\">urls:</span> <span class=\"string\">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span>    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果你想修改到时候生成的web登陆的账号密码，就修改console里的username和password</p>\n<h3 id=\"生成seata所需mysql表\"><a href=\"#生成seata所需mysql表\" class=\"headerlink\" title=\"生成seata所需mysql表\"></a>生成seata所需mysql表</h3><p>TC 运行需要将事务信息保存在数据库，因此需要创建一些表</p>\n<ul>\n<li><a href=\"https://github.com/apache/incubator-seata/blob/2.x/script/server/db/mysql.sql\">https://github.com/apache/incubator-seata/blob/2.x/script/server/db/mysql.sql</a></li>\n</ul>\n<p>访问上面链接，去到源码中，找到script\\server\\db 这个目录。由于是使用mysql的，所以下载mysql.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class=\"line\"><span class=\"comment\">-- contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class=\"line\"><span class=\"comment\">-- this work for additional information regarding copyright ownership.</span></span><br><span class=\"line\"><span class=\"comment\">-- The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class=\"line\"><span class=\"comment\">-- (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class=\"line\"><span class=\"comment\">-- the License.  You may obtain a copy of the License at</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">--     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"><span class=\"comment\">-- Unless required by applicable law or agreed to in writing, software</span></span><br><span class=\"line\"><span class=\"comment\">-- distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class=\"line\"><span class=\"comment\">-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class=\"line\"><span class=\"comment\">-- See the License for the specific language governing permissions and</span></span><br><span class=\"line\"><span class=\"comment\">-- limitations under the License.</span></span><br><span class=\"line\"><span class=\"comment\">--</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- -------------------------------- The script used when storeMode is &#x27;db&#x27; --------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- the table to store GlobalSession data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `global_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `xid`                       <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `transaction_id`            <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `status`                    TINYINT      <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `application_id`            <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `transaction_service_group` <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `transaction_name`          <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    `timeout`                   <span class=\"type\">INT</span>,</span><br><span class=\"line\">    `begin_time`                <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `application_data`          <span class=\"type\">VARCHAR</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">    `gmt_create`                DATETIME,</span><br><span class=\"line\">    `gmt_modified`              DATETIME,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY KEY</span> (`xid`),</span><br><span class=\"line\">    KEY `idx_status_gmt_modified` (`status` , `gmt_modified`),</span><br><span class=\"line\">    KEY `idx_transaction_id` (`transaction_id`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store BranchSession data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `branch_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `branch_id`         <span class=\"type\">BIGINT</span>       <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `xid`               <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `transaction_id`    <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `resource_group_id` <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `resource_id`       <span class=\"type\">VARCHAR</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    `branch_type`       <span class=\"type\">VARCHAR</span>(<span class=\"number\">8</span>),</span><br><span class=\"line\">    `status`            TINYINT,</span><br><span class=\"line\">    `client_id`         <span class=\"type\">VARCHAR</span>(<span class=\"number\">64</span>),</span><br><span class=\"line\">    `application_data`  <span class=\"type\">VARCHAR</span>(<span class=\"number\">2000</span>),</span><br><span class=\"line\">    `gmt_create`        DATETIME(<span class=\"number\">6</span>),</span><br><span class=\"line\">    `gmt_modified`      DATETIME(<span class=\"number\">6</span>),</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY KEY</span> (`branch_id`),</span><br><span class=\"line\">    KEY `idx_xid` (`xid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- the table to store lock data</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `lock_table`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `row_key`        <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `xid`            <span class=\"type\">VARCHAR</span>(<span class=\"number\">128</span>),</span><br><span class=\"line\">    `transaction_id` <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    `branch_id`      <span class=\"type\">BIGINT</span>       <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `resource_id`    <span class=\"type\">VARCHAR</span>(<span class=\"number\">256</span>),</span><br><span class=\"line\">    `table_name`     <span class=\"type\">VARCHAR</span>(<span class=\"number\">32</span>),</span><br><span class=\"line\">    `pk`             <span class=\"type\">VARCHAR</span>(<span class=\"number\">36</span>),</span><br><span class=\"line\">    `status`         TINYINT      <span class=\"keyword\">NOT NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">&#x27;0&#x27;</span> COMMENT <span class=\"string\">&#x27;0:locked ,1:rollbacking&#x27;</span>,</span><br><span class=\"line\">    `gmt_create`     DATETIME,</span><br><span class=\"line\">    `gmt_modified`   DATETIME,</span><br><span class=\"line\">    <span class=\"keyword\">PRIMARY KEY</span> (`row_key`),</span><br><span class=\"line\">    KEY `idx_status` (`status`),</span><br><span class=\"line\">    KEY `idx_branch_id` (`branch_id`),</span><br><span class=\"line\">    KEY `idx_xid` (`xid`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `distributed_lock`</span><br><span class=\"line\">(</span><br><span class=\"line\">    `lock_key`       <span class=\"type\">CHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `lock_value`     <span class=\"type\">VARCHAR</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT NULL</span>,</span><br><span class=\"line\">    `expire`         <span class=\"type\">BIGINT</span>,</span><br><span class=\"line\">    <span class=\"keyword\">primary key</span> (`lock_key`)</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB</span><br><span class=\"line\">  <span class=\"keyword\">DEFAULT</span> CHARSET <span class=\"operator\">=</span> utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;AsyncCommitting&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;RetryCommitting&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;RetryRollbacking&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">INSERT INTO</span> `distributed_lock` (lock_key, lock_value, expire) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;TxTimeoutCheck&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"制作docker-compose-yaml文件\"><a href=\"#制作docker-compose-yaml文件\" class=\"headerlink\" title=\"制作docker-compose.yaml文件\"></a><strong>制作docker-compose.yaml文件</strong></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Seata 基础组件服务</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.8&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"comment\"># seata服务1</span></span><br><span class=\"line\">  <span class=\"attr\">seata-server1:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">seataio/seata-server</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">seata-server1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8091</span><span class=\"string\">:8091</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">7091</span><span class=\"string\">:7091</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">TZ=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">LANG=en_US.UTF-8</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">STORE_MODE=db</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SEATA_IP=127.0.0.1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SEATA_PORT=8091</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/Users/lison/work/data/dockerData/seata/resources:/seata-server/resources</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SEATA_IP：可选，指定seata-server启动的IP，该IP用于向注册中心注册时使用<br>SEATA_PORT：可选，指定seata-server启动的端口，默认为 8091<br>STORE_MODE：可选，指定seata-server的事务日志存储方式，支持 db、file、redis，默认是 file<br>SERVER_NODE：可选, 用于指定seata-server节点ID, 如 1,2,3…，默认根据IP生成<br>SEATA_ENV：可选，指定 seata-server 运行环境，如 dev、test 等，服务启动时会使用 registry-dev.conf 这样的配置</p>\n</blockquote>\n<h3 id=\"启动验证\"><a href=\"#启动验证\" class=\"headerlink\" title=\"启动验证\"></a>启动验证</h3><p><strong>1、启动Seata服务</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、查看nacos服务里是否启动成功</strong></p>\n<p><img src=\"/typora-user-images/image-20240524175254196.png\" alt=\"image-20240524175254196\"></p>\n<p><strong>3、查看网站</strong></p>\n<blockquote>\n<p><a href=\"http://127.0.0.1:7091/#/\">http://127.0.0.1:7091/#/</a></p>\n</blockquote>\n<ul>\n<li>默认账号：seata</li>\n<li>默认密码：seata</li>\n<li>如果需要修改就改application.yml里的console配置项</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20240524175527451.png\" alt=\"image-20240524175527451\"></p>\n<h2 id=\"Seata实现分布式事务控制\"><a href=\"#Seata实现分布式事务控制\" class=\"headerlink\" title=\"Seata实现分布式事务控制\"></a>Seata实现分布式事务控制</h2><p>本示例通过Seata中间件实现分布式事务，模拟电商中的下单和扣库存的过程<br>我们通过订单微服务执行下单操作，然后由订单微服务调用商品微服务扣除库存</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>1、搭建我们所需要写的demo的库springbootbuild,创建一个名为test的数据库,然后执行以下sql代码:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `test`;</span><br><span class=\"line\">CREATE TABLE `test` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `one` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `two` varchar(255) DEFAULT NULL,</span><br><span class=\"line\">  `createTime` datetime DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4;</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE `t_user` (</span><br><span class=\"line\">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class=\"line\">  `user_name` varchar(255) DEFAULT NULL COMMENT &#x27;用户名称&#x27;,</span><br><span class=\"line\">  `sex` tinyint(1) DEFAULT &#x27;0&#x27; COMMENT &#x27;性别，0：男，1：女&#x27;,</span><br><span class=\"line\">  `age` int(3) DEFAULT &#x27;0&#x27; COMMENT &#x27;年龄&#x27;,</span><br><span class=\"line\">  `address` varchar(255) DEFAULT NULL COMMENT &#x27;地址&#x27;,</span><br><span class=\"line\">  `phone` varchar(11) DEFAULT NULL COMMENT &#x27;手机&#x27;,</span><br><span class=\"line\">  `create_time` datetime DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `t_test` VALUES (&#x27;1&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;2024-05-27 16:07:34&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">INSERT INTO `t_user`  VALUES(&#x27;1&#x27;, &#x27;name&#x27;, &#x27;0&#x27;, &#x27;11&#x27;,&#x27;地址&#x27;,&#x27;18818900000&#x27;,&#x27;2024-05-27 16:07:34&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>2、引入依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;exclusions&gt;</span><br><span class=\"line\">        &lt;exclusion&gt;</span><br><span class=\"line\">            &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/exclusion&gt;</span><br><span class=\"line\">    &lt;/exclusions&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>1.4.2版本不需要在项目里引入file.conf和registry.conf了。</p>\n<p>3、增加数据源配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">    <span class=\"attr\">master:</span></span><br><span class=\"line\">      <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/springbootbuild?useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">      <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\">      <span class=\"attr\">initialSize:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">minIdle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">      <span class=\"attr\">maxActive:</span> <span class=\"number\">20</span></span><br><span class=\"line\">      <span class=\"attr\">maxWait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">timeBetweenEvictionRunsMillis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">      <span class=\"attr\">minEvictableIdleTimeMillis:</span> <span class=\"number\">300000</span></span><br><span class=\"line\">      <span class=\"attr\">validationQuery:</span> <span class=\"string\">SELECT</span> <span class=\"string\">user()</span></span><br><span class=\"line\">      <span class=\"attr\">testWhileIdle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">testOnBorrow:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">testOnReturn:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">      <span class=\"attr\">poolPreparedStatements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">connection-properties:</span> <span class=\"string\">druid.stat.mergeSql:true;druid.stat.slowSqlMillis:5000</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"attr\">seata:</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">      <span class=\"attr\">namespace:</span> <span class=\"string\">&quot;seata&quot;</span></span><br><span class=\"line\">      <span class=\"attr\">group:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">      <span class=\"attr\">application:</span> <span class=\"string\">seata-server</span></span><br><span class=\"line\">      <span class=\"attr\">username:</span> <span class=\"string\">nacos</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"string\">nacos</span>    </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置seata代理数据源\"><a href=\"#配置seata代理数据源\" class=\"headerlink\" title=\"配置seata代理数据源\"></a>配置seata代理数据源</h3><p>新增DatabaseConfiguration，Seata的RM通过DataSourceProxy才能在业务代码的失误提交时，通过这个切入点，与TC通讯交互，记录undo_log等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.config.base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.rm.datasource.DataSourceProxy;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.config.base-&gt; DatabaseConfiguration</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatabaseConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">DatabaseConfiguration</span><span class=\"params\">(ApplicationContext applicationContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource.master&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DruidDataSource <span class=\"title function_\">ds0</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">DruidDataSource</span> <span class=\"variable\">druidDataSource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> druidDataSource;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">(DruidDataSource ds0)</span>  &#123;</span><br><span class=\"line\">        <span class=\"type\">DataSourceProxy</span> <span class=\"variable\">pds0</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DataSourceProxy</span>(ds0);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pds0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"启动类修改\"><a href=\"#启动类修改\" class=\"headerlink\" title=\"启动类修改\"></a>启动类修改</h3><p>注意：需要把spirngboot自带的数据源排除掉，否则出现配置的代理数据源与spirngboot自带的形成循环依赖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动时排除springboot自带的数据源配置类</span><br><span class=\"line\">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><br><span class=\"line\">@EnableDiscoveryClient</span><br><span class=\"line\">@EnableFeignClients</span><br><span class=\"line\">public class SpringCloudServiceApplication &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringCloudServiceApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"添加undo-log表\"><a href=\"#添加undo-log表\" class=\"headerlink\" title=\"添加undo_log表\"></a>添加undo_log表</h3><p>该表用来事务回滚，分支事务提交时记录事务相关信息，在分布式事务异常时回滚，分布式事务结束后会删除undo_log的记录。<br>在spring配置指定的数据库中创建表，每个需要注册到seata server的业务模块都有创建该表，创建语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">-- Table structure for undo_log</span><br><span class=\"line\"></span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">DROP TABLE IF EXISTS `undo_log`;</span><br><span class=\"line\">CREATE TABLE `undo_log` (</span><br><span class=\"line\">  `id` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">  `branch_id` bigint(20) NOT NULL,</span><br><span class=\"line\">  `xid` varchar(100) NOT NULL,</span><br><span class=\"line\">  `context` varchar(128) NOT NULL,</span><br><span class=\"line\">  `rollback_info` longblob NOT NULL,</span><br><span class=\"line\">  `log_status` int(11) NOT NULL,</span><br><span class=\"line\">  `log_created` datetime NOT NULL,</span><br><span class=\"line\">  `log_modified` datetime NOT NULL,</span><br><span class=\"line\">  `ext` varchar(100) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`id`),</span><br><span class=\"line\">  UNIQUE KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class=\"line\">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">-- ----------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">-- Records of undo_log</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>这里只简单的演示在一个微服务中，一个分布式事物包含两个分支事物。</p>\n<h3 id=\"seata使用示例\"><a href=\"#seata使用示例\" class=\"headerlink\" title=\"seata使用示例\"></a>seata使用示例</h3><p><strong>Controller</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.service.ITestService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.service.TestGlobalTransServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.controller-&gt; TestSeataController</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/test/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSeataController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Resource</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestGlobalTransServiceImpl testGlobalTransService;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/seataTrans&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">testSeataTrans</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        testGlobalTransService.testTrans();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Service</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.seata.spring.annotation.GlobalTransactional;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.service-&gt; TestGlobalTransService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestGlobalTransServiceImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ITestService iTestService;</span><br><span class=\"line\">    <span class=\"comment\">//@GlobalTransactional</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testTrans</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 分支事务添加用户信息</span></span><br><span class=\"line\">        iTestService.insertUser();</span><br><span class=\"line\">        <span class=\"comment\">// 分支事务添加测试</span></span><br><span class=\"line\">        iTestService.insertTest();</span><br><span class=\"line\">        <span class=\"comment\">// 抛出异常，事务回滚</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Exception</span>(<span class=\"string\">&quot;test exception&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>负责分支事务的服务类，单独拿出来是因为spring事务代理要求事务方法如果和调用方法放在一个类中，代理不生效，具体原因不在赘述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lison.springcloudservice.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.mapper.TestMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lison.springcloudservice.service.ITestService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@className</span>: com.lison.springcloudservice.service.impl-&gt; TestServiceImpl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: Lison</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@createDate</span>: 2024-05-27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestServiceImpl</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">ITestService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestMapper testMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        userMapper.insert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Transactional(rollbackFor = Exception.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        testMapper.insert();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Mapper</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">TestMapper</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into t_test(one,two,createTime) values ( 0,18,now())&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Mapper</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into t_user (user_name,sex,age, create_time) values (&#x27;aaaaaaaaa&#x27;, 0,18,now())&quot;)</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">insert</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>测试结果：</p>\n<p>1、调用：<a href=\"http://localhost:18001/test/seataTrans\">http://localhost:18001/test/seataTrans</a></p>\n<p>2、因为 我们的代码中@GlobalTransactional 被注释。当有异常抛出，所有数据库中插入数据。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2024-05-27 16:58:57.346 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]</span><br><span class=\"line\">2024-05-27 16:58:57.504 [TID:Ignored_Trace] [http-nio-18001-exec-1] ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] -Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.Exception: test exception] with root cause</span><br><span class=\"line\">java.lang.Exception: test exception</span><br><span class=\"line\">\tat com.lison.springcloudservice.service.TestGlobalTransServiceImpl.testTrans(TestGlobalTransServiceImpl.java:24)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3(TestSeataController.java:25)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController.$sw$original$testSeataTrans$6lb26m3$accessor$$sw$ful2f31(TestSeataController.java)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController$$sw$auxiliary$p4qqk42.call(Unknown Source)</span><br><span class=\"line\">\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)</span><br><span class=\"line\">\tat com.lison.springcloudservice.controller.TestSeataController.testSeataTrans(TestSeataController.java)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">\tat java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class=\"line\">\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)</span><br><span class=\"line\">\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:879)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:793)</span><br><span class=\"line\">\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)</span><br><span class=\"line\">\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)</span><br><span class=\"line\">\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)</span><br><span class=\"line\">\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)</span><br><span class=\"line\">\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)</span><br><span class=\"line\">\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)</span><br><span class=\"line\">\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)</span><br><span class=\"line\">\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:68)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat brave.servlet.TracingFilter.doFilter(TracingFilter.java:87)</span><br><span class=\"line\">\tat org.springframework.cloud.sleuth.instrument.web.LazyTracingFilter.doFilter(TraceWebServletAutoConfiguration.java:139)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:109)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)</span><br><span class=\"line\">\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)</span><br><span class=\"line\">\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)</span><br><span class=\"line\">\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3(StandardHostValve.java:139)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.$sw$original$invoke$6qrnli3$accessor$$sw$p8ebm33(StandardHostValve.java)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve$$sw$auxiliary$1213ni1.call(Unknown Source)</span><br><span class=\"line\">\tat org.apache.skywalking.apm.agent.core.plugin.interceptor.enhance.InstMethodsInter.intercept(InstMethodsInter.java:86)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java)</span><br><span class=\"line\">\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)</span><br><span class=\"line\">\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)</span><br><span class=\"line\">\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)</span><br><span class=\"line\">\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)</span><br><span class=\"line\">\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1594)</span><br><span class=\"line\">\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class=\"line\">\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">2024-05-27 16:58:57.516 [TID:Ignored_Trace] [http-nio-18001-exec-1] INFO  c.l.s.config.seata.SeataInterceptor -xid in RootContext[null] xid in HttpContext[null]</span><br><span class=\"line\">2024-05-27 16:58:58.508 [TID:N/A] [AsyncReporter&#123;org.springframework.cloud.sleuth.zipkin2.sender.RestTemplateSender@3f169051&#125;] WARN  z.r.AsyncReporter$BoundedAsyncReporter -Spans were dropped due to exceptions. All subsequent errors will be logged at FINE level.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>3、修改代码取消注释，再次调用，数据没有保存成功。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> */</span><br><span class=\"line\">@Service</span><br><span class=\"line\">public class TestGlobalTransServiceImpl &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    private ITestService iTestService;</span><br><span class=\"line\">    @GlobalTransactional</span><br><span class=\"line\">    public void testTrans() throws Exception &#123;</span><br><span class=\"line\">        // 分支事务添加用户信息</span><br><span class=\"line\">        iTestService.insertUser();</span><br><span class=\"line\">        // 分支事务添加测试</span><br><span class=\"line\">        iTestService.insertTest();</span><br><span class=\"line\">        // 抛出异常，事务回滚</span><br><span class=\"line\">        throw new Exception(&quot;test exception&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>4、去掉异常，数据保存成功</p>\n"},{"_content":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.09.10`\n\n# Spring Cloud Alibaba-04-Sentinel服务容错\n\n[toc]\n\n\n\n## 高并发带来的问题\n\n在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络 原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会 出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。\n\n\n\n## 服务雪崩效应\n\n在分布式系统中,由于网络原因或自身的原因,服务一般无法保证 100% 可用。如果一个服务出现了 问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等 待，进而导致服务瘫痪。\n\n由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是 服务故障的 “雪崩效应” 。\n\n![image-20231024102201145](typora-user-images/image-20231024102201145.png)\n\n\n\n雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是\"雪落而不雪崩\"。\n\n\n\n\n\n## 常见容错方案\n\n要防止雪崩的扩散，我们就要做好服务的容错，容错说白了就是保护自己不被猪队友拖垮的一些措 施, 下面介绍常见的服务容错思路和组件。\n\n**常见的容错思路**\n\n常见的容错思路有隔离、超时、限流、熔断、降级这几种，下面分别介绍一下。\n\n- **隔离**\n\n  它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故\n  障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的\n  系统服务。常见的隔离方式有:线程池隔离和信号量隔离.\n\n\n\n![image-20231024104338016](typora-user-images/image-20231024104338016.png)\n\n\n\n* **超时**\n\n在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程。\n\n![image-20231201143940420](typora-user-images/image-20231201143940420.png)\n\n\n\n* **限流**\n\n限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行,一旦达到 的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的。\n\n![image-20231201144020748](typora-user-images/image-20231201144020748.png)\n\n* **熔断**\n\n在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整 体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。\n\n![image-20231201144119343](typora-user-images/image-20231201144119343.png)\n\n服务熔断一般有三种状态:\n\n* 熔断关闭状态(Closed)：  服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制 \n* 熔断开启状态（Open）：  后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法 \n* 半熔断状态（Half-Open）\t：  尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态;如果成功率仍旧很低，则重新进入熔断关闭状态。\n\n\n\n\n\n* **降级**\n\n降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案。\n\n![image-20231201153117052](typora-user-images/image-20231201153117052.png)\n\n\n\n**常见的容错组件**\n\n**Hystrix**\nHystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止 级联失败，从而提升系统的可用性与容错性。\n\n**Resilience4J**\nResilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推 荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x/2.x，而且监控也支持和 prometheus等多款主流产品进行整合。\n\n**Sentinel**\nSentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定。 下面是三个组件在各方面的对比:\n\n|                | Sentinel                                                   | Hystrix                | Resilience4J                     |\n| -------------- | ---------------------------------------------------------- | ---------------------- | -------------------------------- |\n| 隔离策略       | 信号量隔离（并发线程数限流）                               | 线程池隔离/信号量隔离  | 信号量隔离                       |\n| 熔断降级策略   | 基于响应时间、异常比率、异常数                             | 基于异常比率           | 基于异常比率、响应时间           |\n| 实时统计实现   | 活动窗口（LeapArray）                                      | 滑动窗口（基于RxJava） | Ring Bit Buffer                  |\n| 动态规则配置   | 支持多数据源                                               | 支持多数据源           | 有限支持                         |\n| 扩展性         | 多个扩展点                                                 | 插件的形式             | 插件的形式                       |\n| 基于注解的支持 | 支持                                                       | 支持                   | 支持                             |\n| 限流           | 基于QPS,支持基于调用关系的限流                             | 不支持                 | Rate Limiter                     |\n| 流量整形       | 支持预热模式、匀速器模式、预热排队模式                     | 不支持                 | 简单的Rate Limiter模式           |\n| 系统自适应保护 | 支持                                                       | 不支持                 | 不支持                           |\n| 控制台         | 提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等 | 简单的监控查 看        | 不提供控制台，可对接其它监控系统 |\n\n\n\n## Sentinel入门\n\n### 什么是Sentinel\n\nSentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于**服务容错**的综合性解决方案。它以流量 为切入点, 从**流量控制、熔断降级、系统负载保护**等多个维度来保护服务的稳定性。\n\n\n\nSentinel具有以下特征:\n\nSentinel 具有以下特征:\n\n**丰富的应用场景 :**Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景, 例如秒杀(即 突发流量控制在系统容量可以承受的范围)、消息削峰填谷、集群流量控制、实时熔断下游不可用 应用等。\n完备的实时监控:Sentinel 提供了实时的监控功能。通过控制台可以看到接入应用的单台机器秒 级数据, 甚至 500 台以下规模的集群的汇总运行情况。\n**广泛的开源生态**:Sentinel 提供开箱即用的与其它开源框架/库的整合模块, 例如与 Spring Cloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。\n\n**完善的 SPI 扩展点:**Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快 速地定制逻辑。例如定制规则管理、适配动态数据源等。\n\n**Sentinel 分为两个部分:**\n\n* 核心库(Java 客户端)不依赖任何框架/库,能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。\n* 控制台(Dashboard)基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等 应用容器。\n\n\n\n### 微服务集成Sentinel\n\n为微服务集成Sentinel非常简单, 只需要加入Sentinel的依赖即可\n\n**1、在pom.xml中加入下面依赖**\n\n~~~xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n</dependency>\n\n~~~\n\n\n\n**2、application.yml 配置sentinel**\n**`注意：yml配置client-ip 是本地ip才行`**\n\n~~~yaml\nspring:\n    cloud:\n        sentinel:\n            transport:\n                dashboard: 192.168.32.131:8858\n                client-ip: 192.168.32.1\n                port: 8719\n\n~~~\n\n\n\n\n\n\n\n**3、编写一个Controller测试使用**\n\n~~~java\n@RestController\npublic class TestSentinelController {\n\n    @RequestMapping(\"/sentinel/message1\")\n    public String message1() {\n        return \"message1\";\n    }\n    @RequestMapping(\"/sentinel/message2\")\n    public String message2() {\n        return \"message2\";\n    }\n    \n}\n~~~\n\n\n\n### 安装Sentinel控制台\n\nSentinel 提供一个轻量级的控制台, 它提供机器发现、单机资源实时监控以及规则管理等功能。\n\n**1、jar包方式安装**\n\n~~~\n下载jar包,解压到文件夹 https://github.com/alibaba/Sentinel/releases \n\n\n启动：\n# 直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)\njava -Dserver.port=8858 -Dcsp.sentinel.dashboard.server=localhost:8858 - Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.1.jar \n\n\n~~~\n\n\n\n2、docker方式安装\n\n~~~\n\n//拉去sentinel镜像\ndocker pull bladex/sentinel-dashboard:1.8.1\n\n\n\n//启动容器\ndocker run --name sentinel  -d -p 8858:8858 -p 8719:8719 -d bladex/sentinel-dashboard:1.8.1 -e username=sentinel -e password=sentinel -e server=localhost:8858\n~~~\n\n\n\n通过浏览器访问localhost:8858 进入控制台 ( 默认用户名密码是 sentinel/sentinel )\n\n\n\n\n\n注意：重启后还是看不到自己注册接口服务？\n\n**原因：Sentinel是 懒加载机制所以呢，需要访问一下接口即可再去访问Sentinel 就有数据了**\n\n\n\n\n\n**补充:了解控制台的使用原理**\n\nSentinel的控制台其实就是一个SpringBoot编写的程序。我们需要将我们的微服务程序注册到控制台上, 即在微服务中指定控制台的地址, 并且还要开启一个跟控制台传递数据的端口, 控制台也可以通过此端口 调用微服务中的监控程序获取微服务的各种信息。\n\n![image-20240219114233026](typora-user-images/image-20240219114233026.png)\n\n\n\n![image-20240219113719157](typora-user-images/image-20240219113719157.png)\n\n\n\n\n\n\n\n## 实现一个接口的限流\n\n\n\n1、通过控制台为message1添加一个流控规则\n\n\n\n![image-20240219114343151](typora-user-images/image-20240219114343151.png)\n\n\n\n2、通过控制台快速频繁访问, 观察效果\n\n![image-20240219114515952](typora-user-images/image-20240219114515952.png)\n\n## Sentinel的概念和功能\n\n\n\n### 基本概念\n\n* **资源**\n\n资源就是Sentinel要保护的东西\n\n资源是Sentinel的关键概念，它可以是Java应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码\n\n>上述案例中message1方法就可以认为是一个资源\n\n* **规则**\n\n规则就是用来定义如何保护资源的\n\n作为资源之上，定义以什么样的方式保护资源，主要包括流量控制规则、熔断降级规则以及系统保护规则。\n\n>上述案例中message1资源设置一种流控规则，限制了进入message1的流量\n\n### 重要功能\n\n\n\n![image-20240219144606520](typora-user-images/image-20240219144606520.png)\n\nSentinel的主要功能就是容错,主要体现为下面这三个:\n\n**1、流量控制**\n流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是 随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。 Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状。\n\n**2、熔断降级**\n\n当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则\n对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。\n\n\n\n**Sentinel 对这个问题采取了两种手段:**\n\n(1)通过并发线程数进行限制\n\nSentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。当某个资源 出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆 积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的 线程完成任务后才开始继续接收请求。\n\n(2)通过响应时间对资源进行降级\n\n除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。 当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的 时间窗口之后才重新恢复。\n\n\n\n**Sentinel 和 Hystrix 的区别**\n\n>两者的原则是一致的, 都是当一个资源出现问题时, 让其快速失败, 不要波及到其它服务 但是在限制的手段上, 确采取了完全不一样的方法:\n>\n>~~~\n>       Hystrix 采用的是线程池隔离的方式, 优点是做到了资源之间的隔离, 缺点是增加了线程 切换的成本。 \n>\n>       Sentinel 采用的是通过并发线程的数量和响应时间来对资源做限制。 \n>~~~\n\n\n\n**3、系统负载保护**\n\nSentinel 同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让 请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其 它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保 护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请 求。总之一句话: 我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功 能。\n\n\n\n## Sentinel规则\n\n\n\n### 流程控制\n\n流量控制，其原理是监控应用流量的QPS(每秒查询率) 或并发线程数等指标，当达到指定的阈值时 对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。\n\n第1步: 点击簇点链路，我们就可以看到访问过的接口地址，然后点击对应的流控按钮，进入流控规则配 置页面。新增流控规则界面如下:\n\n![image-20240219150634816](typora-user-images/image-20240219150634816.png)\n\n\n\n**资源名:**唯一名称，默认是请求路径，可自定义\n\n针对来源:指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制\n\n**阈值类型/单机阈值:**\n\n* QPS(每秒请求数量): 当调用该接口的QPS达到阈值的时候，进行限流\n* 线程数:当调用该接口的线程数达到阈值的时候，进行限流\n\n**是否集群:**暂不需要集群 接下来我们以QPS为例来研究限流规则的配置。\n\n\n\n#### 简单配置\n\n我们先做一个简单配置，设置阈值类型为QPS，单机阈值为3。即每秒请求量大于3的时候开始限流。\n\n接下来，在流控规则页面就可以看到这个配置\n\n![image-20240219150821657](typora-user-images/image-20240219150821657.png)\n\n然后快速访问 /order/message1 接口，观察效果。此时发现，当QPS > 3的时候，服务就不能正常响 应，而是返回Blocked by Sentinel (flow limiting)结果。\n\n![image-20240219150910898](typora-user-images/image-20240219150910898.png)\n\n#### 配置流控模式\n\n![image-20240219151031448](typora-user-images/image-20240219151031448.png)\n\nsentinel共有三种流控模式，分别是:\n\n**直接**(默认):接口达到限流条件时，开启限流\n\n**关联**:当关联的资源达到限流条件时，开启限流 [适合做应用让步]\n\n**链路**:当从某个接口过来的资源达到限流条件时，开启限流\n\n\n\n下面呢分别演示三种模式:\n\n**直接流控模式**\n\n直接流控模式是最简单的模式，当指定的接口达到限流条件时开启限流。上面案例使用的就是直接流控模式。\n\n**关联流控模式**\n\n关联流控模式指的是，当指定接口关联的接口达到限流条件时，开启对指定接口开启限流。\n\n第1步:配置限流规则, 将流控模式设置为关联，关联资源设置为的 /sentinel/message2。\n\n![image-20240219151212695](typora-user-images/image-20240219151212695.png)\n\n第2步:通过postman软件向/sentinel/message2连续发送请求，注意QPS一定要大于3\n\n![image-20240219152607457](typora-user-images/image-20240219152607457.png)\n\n\n\n第3步:访问/sentinel/message1,会发现已经被限流\n\n![image-20240219152638390](typora-user-images/image-20240219152638390.png)\n\n**链路流控模式**\n\n链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流。它的功能有点类似于针对 来源配置项，区别在于:**针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度 更细。**\n\n\n\n第1步: 编写一个service，在里面添加一个方法message\n\n~~~java\n@Service\npublic class TestSentinelMessage3ServiceImpl {\n    @SentinelResource(\"message\")\n    public void message() {\n        System.out.println(\"message\");\n    }\n}\n~~~\n\n\n\n第2步: 在Controller中声明两个方法，分别调用service中的方法\n\n~~~java\n\n@RestController\npublic class TestSentinelController {\n\n    @Autowired\n    private TestSentinelMessage3ServiceImpl testSentinelMessage3Service;\n\n    @RequestMapping(\"/sentinel/message1\")\n    public String message1() {\n        testSentinelMessage3Service.message();\n        return \"message1\";\n    }\n    @RequestMapping(\"/sentinel/message2\")\n    public String message2() {\n        testSentinelMessage3Service.message();\n        return \"message2\";\n    }\n\n}\n~~~\n\n\n\n\n\n![image-20240219154032740](typora-user-images/image-20240219154032740.png)\n\n 分别通过 /sentinel/message1 和 /sentinel/message2 访问, 发现2没问题, 1的被限流了\n\n#### 配置流控效果\n\n**快速失败(默认):** 直接失败，抛出异常，不做任何额外的处理，是最简单的效果\n\n**Warm Up:**它从开始阈值到最大QPS阈值会有一个缓冲阶段，一开始的阈值是最大QPS阈值的 1/3，然后慢慢增长，直到最大阈值，适用于将\n突然增大的流量转换为缓步增长的场景。\n\n**排队等待:**让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待; 它还会让设 置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃\n\n### 降级规则 降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件:\n\n\n\n#### 慢调用比例 (SLOW_REQUEST_RATIO)\n\n选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。\n\n当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。（默认1秒内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。）\n\n> 经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。\n\n- 最大 RT（响应时间）：200意思是 在200毫秒处理完这个请求\n- 比例阀值：0~1之间。\n- `慢调用比例`：例如1秒内请求10次，8次是慢请求，则慢请求比例 0.8\n- java 接口响应时间为睡眠400毫秒\n\n\n\n根据上述可以看出触发必要条件后才会降级：\n\n1. 请求时间 > RT\n2. 单位统计时长（statIntervalMs）> 最小请求数\n3. 慢比例调用比例 > 比例阀值（maxSlowRequestRatio）\n4. 触发熔断后进入探测恢复状态（HALF-OPEN 状态），下一个请求响应时间小于设置的慢调用 RT 则结束熔断否则会再次被熔断\n\n如下是我的一次降级调用，接口中休眠400毫秒，1s内连续请求5次后\n\n![image-20240220094227461](typora-user-images/image-20240220094227461.png)\n\n\n\n如下是我多次往复测试，不太好测试。需要参考 `经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。`\n\n请求被熔断\n\n\n\n![image-20240220095107292](typora-user-images/image-20240220095107292.png)\n\n#### 异常比例 (ERROR_RATIO)\n\n当单位统计时长（statIntervalMs 以 s 为单位）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。\n\n经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。\n\n异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。\n\n同慢调用比例相似，逻辑相似\n\n![image-20240220095645324](typora-user-images/image-20240220095645324.png)\n\n![image-20240220101010503](typora-user-images/image-20240220101010503.png)\n\n#### 异常数 (ERROR_COUNT)\n\n当单位统计时长（1s）内的异常数目超过阈值之后会自动进行熔断。\n\n经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。\n\n注意由于统计时间窗口是分钟级别的，若timeWindow小于 60s，则结束熔断状态后仍可能再进入熔断状态；\n\n同慢调用比例相似，逻辑相似\n\n![image-20240220101429844](typora-user-images/image-20240220101429844.png)\n\n代码中未传递参数时可以看出异常概率应该在50%左右，从图中前部分可以看出，平均请求未出现熔断，因为请求间隔时间较长，当后半部分，1秒内多次请求时出现熔断了，老版本是以分钟来统计的，新版是秒为单位\n\n\n\n![image-20240220101701432](typora-user-images/image-20240220101701432.png)\n\n\n\n### 热点规则\n\n热点参数流控规则是一种更细粒度的流控规则, 它允许将规则具体到参数上。\n\n**热点规则简单使用**\n\n1、编写代码\n\n~~~java\n@RequestMapping(\"/sentinel/message3\")\n@SentinelResource(\"message3\")//注意这里必须使用这个注解标识,热点规则不生效 \npublic String message3(String name, Integer age) {\n  return name + age;\n}\n~~~\n\n第2步: 配置热点规则\n\n\n\n![image-20240220102332812](typora-user-images/image-20240220102332812.png)\n\n第3步: 分别用两个参数访问,会发现只对第一个参数限流了\n\n\n\n![image-20240220102431979](typora-user-images/image-20240220102431979.png)\n\n![image-20240220102457440](typora-user-images/image-20240220102457440.png)\n\n\n\n\n\n\n\n**热点规则增强使用**\n\n参数例外项允许对一个参数的具体值进行流控\n\n编辑刚才定义的规则,增加参数例外项\n\n![image-20240220102621265](typora-user-images/image-20240220102621265.png)\n\n### 授权规则\n\n很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源 访问控制的功能。来源访问控制根据资源的请求来源(origin)限制资源是否通过:\n\n若配置白名单，则只有请求来源位于白名单内时才可通过;\n若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过。\n\n![image-20240220102752041](typora-user-images/image-20240220102752041.png)\n\n上面的资源名和授权类型不难理解，但是流控应用怎么填写呢?\n\n>其实这个位置要填写的是来源标识，Sentinel提供了 RequestOriginParser 接口来处理来源。 只要Sentinel保护的接口资源被访问，Sentinel就会调用 RequestOriginParser 的实现类去解析\n>访问来源。\n\n\n\n第1步: 自定义来源处理规则\n\n\n\n~~~java\n@Component\npublic class RequestOriginParserDefinition implements RequestOriginParser {\n    @Override\n    public String parseOrigin(HttpServletRequest request) {\n        String serviceName = request.getParameter(\"serviceName\");\n        return serviceName;\n    } \n} \n\n~~~\n\n\n\n第2步: 授权规则配置\n这个配置的意思是只有serviceName=pc不能访问(黑名单)\n\n\n\n![image-20240220103006353](typora-user-images/image-20240220103006353.png)\n\n\n\n第3步：访问 http://localhost:18001/sentinel/message3?serviceName=pc  观察结果\n\n\n\n![image-20240220103217414](typora-user-images/image-20240220103217414.png)\n\n### 系统规则\n\n系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 Load、RT、入口 QPS 、CPU 使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。\n\n系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效。\n\n* Load(仅对 Linux/Unix-like 机器生效):当系统 load1 超过阈值，且系统当前的并发线程数超过 系统容量时才会触发系统保护。系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般 是 CPU cores * 2.5。\n* RT:当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。\n* 线程数:当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。\n* 入口 QPS:当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。\n* CPU使用率:当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护。\n\n\n\n**扩展: 自定义异常返回**\n\n~~~java\n\n\n//异常处理页面\n@Component\npublic class ExceptionHandlerPage implements BlockExceptionHandler {\n    //BlockException 异常接口,包含Sentinel的五个异常\n    // FlowException 限流异常\n    // DegradeException 降级异常\n    // ParamFlowException 参数限流异常\n    // AuthorityException 授权异常\n    // SystemBlockException 系统负载异常\n\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, BlockException ex) throws Exception {\n        String msg = null;\n        if (ex instanceof FlowException) {\n            msg = \"限流了\";\n        } else if (ex instanceof DegradeException) {\n            msg = \"降级了\";\n        } else if (ex instanceof ParamFlowException) {\n            msg = \"热点参数限流\";\n        } else if (ex instanceof SystemBlockException) {\n            msg = \"系统规则（负载/...不满足要求）\";\n        } else if (ex instanceof AuthorityException) {\n            msg = \"授权规则不通过\";\n        }\n        // http状态码\n        response.setStatus(500);\n        response.setCharacterEncoding(\"utf-8\");\n        response.setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\n        response.setContentType(\"application/json;charset=utf-8\");\n        // spring mvc自带的json操作工具，叫jackson\n        //返回json数据\n        response.setStatus(200);\n        response.setCharacterEncoding(\"utf-8\");\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        //springmvc 的一个json转换类 （jackson）\n        new ObjectMapper().writeValue(response.getWriter(), msg);\n        //重定向\n        //response.sendRedirect(\"http://www.baidu.com\");\n    }\n}\n~~~\n\n注意:最近在学习SpringCloudAlibaba时候，需要sentinel进行流量管理控制，在配置统一处理返回异常时候，实现 UrlBlockHandler 这个接口直接爆红，原因是我使用的sentinel是2.2.5.RELEASE，官方改成了BlockExceptionHandler这个接口与实现\n\n\n\n\n\n## @SentinelResource的使用\n\n在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护。同时还能\n通过@SentinelResource来指定出现异常时的处理策略。\n\n@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:\n\n\n\n| 属性               | 作用                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| value              | 资源名称                                                     |\n| entryType          | entry类型，标记流量的方向，取值IN/OUT，默认是OUT             |\n| blockHandler       | 处理BlockException的函数名称,函数要求:1. 必须是 public2.返回类型 参数与原方法一致3. 默认需和原方在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法。 |\n| blockHandlerClass  | 存放blockHandler的类,对应的处理函数必须static修饰            |\n| fallback           | 用于在抛出异常的时候提供fallback处理逻辑。fallback函数可以针对所 有类型的异常(除了 exceptionsToIgnore 里面排除掉的异常类型)进 行处理。函数要求:1. 返回类型与原方法一致 2. 参数类型需要和原方法相匹配3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法。 |\n| fallbackClass      | 存放fallback的类。对应的处理函数必须static修饰。             |\n| defaultFallback    | 用于通用的 fallback 逻辑。默认fallback函数可以针对所有类型的异常进 行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。函 数要求:1. 返回类型与原方法一致 2. 方法参数列表为空，或者有一个 Throwable 类型的参数。3. 默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法。 |\n| exceptionsToIgnore | 指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入 fallback逻辑，而是原样抛出 |\n| exceptionsToTrace  | 需要trace的异常                                              |\n\n**定义限流和降级后的处理方法**\n\n\n\n~~~java\n\n@Service\npublic class TestSentinelMessage3ServiceImpl {\n        int i = 0;\n\n        @SentinelResource(\n                value = \"message\",\n                blockHandler = \"blockHandler\",//指定发生BlockException时进入的方法\n                fallback = \"fallback\"//指定发生Throwable时进入的方法\n        )\n        public String message() {\n            i++;\n            if (i % 3 == 0) {\n                throw new RuntimeException();\n            }\n            return \"message\";\n        }\n\n        //BlockException时进入的方法\n        public String blockHandler(BlockException ex) {\n            return \"接口被限流或者降级了...\";\n        }\n\n        //Throwable时进入的方法\n        public String fallback(Throwable throwable) {\n            return \"接口发生异常了...\";\n        }\n    \n\n~~~\n\n**将限流和降级方法外置到单独的类中**\n\n~~~java\n@Service\n@Slf4j\npublic class TestSentinelMessage3ServiceImpl {\n    int i = 0;\n\n    @SentinelResource(\n            value = \"message\",\n            blockHandlerClass = TestSentinelMessage3ServiceImplBlockHandlerClass.class,\n            blockHandler = \"blockHandler\",\n            fallbackClass = TestSentinelMessage3ServiceImplFallbackClass.class,\n            fallback = \"fallback\"\n    )\n    public String message() {\n        i++;\n        if (i % 3 == 0) {\n            throw new RuntimeException();\n        }\n        return \"message4\";\n    }\n}\n\n@Slf4j\npublic class TestSentinelMessage3ServiceImplBlockHandlerClass { //注意这里必须使用static修饰方法\n    public static String blockHandler(BlockException ex) {\n        log.error(\"{}\", ex);\n        return \"接口被限流或者降级了...\";\n    }\n}\n\n@Slf4j\npublic class TestSentinelMessage3ServiceImplFallbackClass { //注意这里必须使用static修饰方法\n    public static String fallback(Throwable throwable) {\n        log.error(\"{}\", throwable);\n        return \"接口发生异常了...\";\n    }\n} \n\n\n~~~\n\n\n\n## Sentinel规则持久化\n\n\n\n通过前面的讲解，我们已经知道，可以通过Dashboard来为每个Sentinel客户端设置各种各样的规 则，但是这里有一个问题，就是这些规则默认是存放在内存中，极不稳定，所以需要将其持久化。\n\n### Sentinel规则的推送有下面三种模式:\n\n| 推送模式 | 说明                                                         | 有点                         | 缺点                                                         |\n| -------- | ------------------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ |\n| 原始模式 | API将规则推送至客户端并直接更新到内存中                      | 简单，无任何依赖             | 不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境 |\n| Pull模式 | 扩展写数据源（WritableDataSource），客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是RDBMS、文件等 | 简单，无任何依赖；规则持久化 | 不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。 |\n| Push模式 | 扩展读数据源（ReadableDataSource），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用Nacos、Zookeeper等配置中心。这种方式有更好的实时性和一致性保证。生产环境下一般采用push模式的数据源。 | 规则持久化；一致性；快速     | 引入第三方依赖                                               |\n\n\n\n#### 原始模式\n\n如果不做任何修改，Dashboard的推送规则方式是通过API将规则推送至客户端并直接更新到内存中：\n\n![img](typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png)\n\n这种做法的好处是简单，无依赖；坏处是应用重启规则就会消失，仅用于简单测试，不能用于生产环境。\n\n#### 拉模式\n\npull模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至transport的WritableDataSourceRegistry中。\n\n\n\n![img](typora-user-images/afb25fa106bada4b37da64e902060269.png)\n\n\n\n首先Sentinel控制台通过API将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。使用 pull模式的数据源时一般不需要对Sentinel控制台进行改造。这种实现方法好处是简单，坏处是无法保证监控数据的一致性。\n\n具体使用方式如下：\n\n引入依赖：\n\n~~~xml\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-datasource-extension</artifactId>\n</dependency>\n~~~\n\n实现InitFunc接口，在init中处理DataSource初始化逻辑，并利用spi机制实现加载。\n\n\n\n~~~java\n\npublic class FileDataSourceInit implements InitFunc {\n\n    private static final String RULE_FILE_PATH = System.getProperty(\"user.home\") + File.separator;\n\n    private static final String FLOW_RULE_FILE_NAME = \"FlowRule.json\";\n\n    @Override\n    public void init() throws Exception {\n\n        //处理流控规则逻辑\n        dealFlowRules();\n    }\n\n\n    private void dealFlowRules() throws FileNotFoundException {\n        String ruleFilePath = RULE_FILE_PATH + FLOW_RULE_FILE_NAME;\n\n        //创建流控规则的可读数据源\n        FileRefreshableDataSource flowRuleRDS = new FileRefreshableDataSource(\n                ruleFilePath, source -> JSON.parseObject((String) source,\n                new TypeReference<List<FlowRule>>() {\n                })\n        );\n\n        // 将可读数据源注册至FlowRuleManager 这样当规则文件发生变化时，就会更新规则到内存\n        FlowRuleManager.register2Property(flowRuleRDS.getProperty());\n\n        WritableDataSource<List<FlowRule>> flowRuleWDS = new FileWritableDataSource<>(\n                ruleFilePath, this::encodeJson\n        );\n\n        // 将可写数据源注册至 transport 模块的 WritableDataSourceRegistry 中.\n        // 这样收到控制台推送的规则时，Sentinel 会先更新到内存，然后将规则写入到文件中.\n        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);\n    }\n\n\n    private <T> String encodeJson(T t) {\n        return JSON.toJSONString(t);\n    }\n\n}\n~~~\n\n\n\n在META-INF/services目录下创建com.alibaba.csp.sentinel.init.InitFunc，内容如下：\n\n~~~\ncom.lison.springcloudservice.config.sentinel.FileDataSourceInit\n~~~\n\n这样当在Dashboard中修改了配置后，Dashboard会调用客户端的接口修改客户端内存中的值，同时将配置写入文件FlowRule.json中，这样操作的话规则是实时生效的，如果是直接修改FlowRule.json的内容，这样需要等定时任务3秒后执行才能读到最新的规则。\n\n\n\n#### 推模式\n\n生产环境下一般更常用的是push模式的数据源。对于push模式的数据源，如远程配置中心（ZooKeeper, Nacos, Apollo等等），推送的操作不应由Sentinel客户端进行，而应该经控制台统一进行管理，直接进行推送，数据源仅负责获取配置中心推送的配置并更新到本地。因此推送规则正确做法应该是配置中心控制台/Sentinel控制台 → 配置中心 → Sentinel数据源 → Sentinel，而不是经Sentinel数据源推送至配置中心。这样的流程就非常清晰了：\n\n![img](typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png)\n\n\n\n### 基于Nacos配置中心控制台实现推送\n\n配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel\n\n\n\n引入依赖：\n\n~~~\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-datasource-nacos</artifactId>\n</dependency>\n\n~~~\n\n配置文件增加nacos的数据源：\n\n~~~yaml\nspring:\n  application:\n    name: spring-cloud-service\n  cloud:\n    sentinel:\n      transport:\n        dashboard: 127.0.0.1:8080\n      datasource:\n        flow-ds:\n          nacos:\n            server-addr: 127.0.0.1:8848\n            dataId: ${spring.application.name}-flow\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow\n\n~~~\n\n这样直接在Nacos控制台修改规则就能实时生效了，缺点是直接在Sentinel Dashboard中修改规则配置，配置中心的配置不会发生变化。\n\n思考：如何实现将通过sentinel控制台设置的规则直接持久化到nacos配置中心？\n\n方法一：微服务增加基于Nacos的写数据源（WritableDataSource），发布配置到nacos配置中心。\n\n~~~java\n//核心逻辑： 实现WritableDataSource#write方法，发布配置到nacos配置中心\n@Override\npublic void write(T t) throws Exception {\n    lock.lock();\n    try {\n        configService.publishConfig(dataId, groupId, this.configEncoder.convert(t), ConfigType.JSON.getType());\n    } finally {\n        lock.unlock();\n    }\n}\n\n~~~\n\n方法二：Sentinel Dashboard监听Nacos配置的变化，如发生变化就更新本地缓存。在Sentinel Dashboard端新增或修改规则配置在保存到内存的同时，直接发布配置到nacos配置中心；Sentinel Dashboard直接从nacos拉取所有的规则配置。Sentinel Dashboard和微服务不直接通信，而是通过nacos配置中心获取到配置的变更，也就是下面的基于Sentinel控制台实现推送。\n\n\n\nAbstractDataSourceProperties\nSentinelProperties内部提供了TreeMap类型的datasource属性用于配置数据源信息。\n\n> com.alibaba.cloud.sentinel.datasource.config.AbstractDataSourceProperties#postRegister\n\n\n\n~~~java\npublic void postRegister(AbstractDataSource dataSource) {\n    switch (this.getRuleType()) {\n    case FLOW:\n        FlowRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case DEGRADE:\n        DegradeRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case PARAM_FLOW:\n        ParamFlowRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case SYSTEM:\n        SystemRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case AUTHORITY:\n        AuthorityRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case GW_FLOW:\n        GatewayRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case GW_API_GROUP:\n        GatewayApiDefinitionManager.register2Property(dataSource.getProperty());\n        break;\n    default:\n        break;\n    }\n}\n~~~\n\n\n\n**NacosDataSource从Nacos读取配置**\n\nNacosDataSource主要负责与Nacos进行通信，实时获取Nacos的配置。\n\n\n\n~~~java\npublic NacosDataSource(final Properties properties, final String groupId, final String dataId,\n                       Converter<String, T> parser) {\n    super(parser);\n    if (StringUtil.isBlank(groupId) || StringUtil.isBlank(dataId)) {\n        throw new IllegalArgumentException(String.format(\"Bad argument: groupId=[%s], dataId=[%s]\",\n            groupId, dataId));\n    }\n    AssertUtil.notNull(properties, \"Nacos properties must not be null, you could put some keys from PropertyKeyConst\");\n    this.groupId = groupId;\n    this.dataId = dataId;\n    this.properties = properties;\n    this.configListener = new Listener() {\n        @Override\n        public Executor getExecutor() {\n            return pool;\n        }\n\n        @Override\n        public void receiveConfigInfo(final String configInfo) {\n            // 配置发送变更\n            RecordLog.info(\"[NacosDataSource] New property value received for (properties: {}) (dataId: {}, groupId: {}): {}\",\n                properties, dataId, groupId, configInfo);\n            T newValue = NacosDataSource.this.parser.convert(configInfo);\n            // Update the new value to the property.\n            getProperty().updateValue(newValue);\n        }\n    };\n    // 监听配置\n    initNacosListener();\n    // 第一次读取配置\n    loadInitialConfig();\n}\n\nprivate void loadInitialConfig() {\n    try {\n        T newValue = loadConfig();\n        if (newValue == null) {\n            RecordLog.warn(\"[NacosDataSource] WARN: initial config is null, you may have to check your data source\");\n        }\n        getProperty().updateValue(newValue);\n    } catch (Exception ex) {\n        RecordLog.warn(\"[NacosDataSource] Error when loading initial config\", ex);\n    }\n}\n\nprivate void initNacosListener() {\n    try {\n        this.configService = NacosFactory.createConfigService(this.properties);\n        // Add config listener.\n        configService.addListener(dataId, groupId, configListener);\n    } catch (Exception e) {\n        RecordLog.warn(\"[NacosDataSource] Error occurred when initializing Nacos data source\", e);\n        e.printStackTrace();\n    }\n}\n\n~~~\n\n**SentinelDataSourceHandler注入NacosDataSource**\nSentinelAutoConfiguration中注入了SentinelDataSourceHandler。\n\nSentinelDataSourceHandler负责遍历配置文件中配置的DataSource，然后注入到spring容器中。\n\n> com.alibaba.cloud.sentinel.custom.SentinelDataSourceHandler#afterSingletonsInstantiated\n\n\n\n~~~java\npublic void afterSingletonsInstantiated() {\n    this.sentinelProperties.getDatasource().forEach((dataSourceName, dataSourceProperties) -> {\n        try {\n            List<String> validFields = dataSourceProperties.getValidField();\n            if (validFields.size() != 1) {\n                log.error(\"[Sentinel Starter] DataSource \" + dataSourceName + \" multi datasource active and won't loaded: \" + dataSourceProperties.getValidField());\n                return;\n            }\n\n            AbstractDataSourceProperties abstractDataSourceProperties = dataSourceProperties.getValidDataSourceProperties();\n            abstractDataSourceProperties.setEnv(this.env);\n            abstractDataSourceProperties.preCheck(dataSourceName);\n            this.registerBean(abstractDataSourceProperties, dataSourceName + \"-sentinel-\" + (String)validFields.get(0) + \"-datasource\");\n        } catch (Exception var5) {\n            log.error(\"[Sentinel Starter] DataSource \" + dataSourceName + \" build error: \" + var5.getMessage(), var5);\n        }\n\n    });\n}\n\n~~~\n\n\n\n基于Sentinel控制台实现推送\n配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel\n\n从Sentinel1.4.0开始，Sentinel控制台提供DynamicRulePublisher和DynamicRuleProvider接口用于实现应用维度的规则推送和拉取：\n\n* DynamicRuleProvider: 拉取规则\n* DynamicRulePublisher: 推送规则\n\n可以参考Sentinel Dashboard test包下的流控规则拉取和推送的实现逻辑：\n\n\n\n![image-20240220144907721](typora-user-images/image-20240220144907721.png)\n\n这里主要改造Dashboard端，客户端还是采用前面的配置。\n\n引入nacos的依赖\n\n\n\n~~~java\n <dependency>\n   <groupId>com.alibaba.nacos</groupId>\n   <artifactId>nacos-client</artifactId>\n   <version>2.0.3</version>\n</dependency>\n~~~\n\n\n\nNacosConfig负责注入一些最基本的配置：\n\n~~~java\n\npackage com.alibaba.csp.sentinel.dashboard.rule.nacos;\n\nimport java.util.List;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.datasource.Converter;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.nacos.api.config.ConfigFactory;\nimport com.alibaba.nacos.api.config.ConfigService;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author Eric Zhao\n * @since 1.4.0\n */\n@Configuration\npublic class NacosConfig {\n\n    @Bean\n    public Converter<List<FlowRuleEntity>, String> flowRuleEntityEncoder() {\n        return JSON::toJSONString;\n    }\n\n    @Bean\n    public Converter<String, List<FlowRuleEntity>> flowRuleEntityDecoder() {\n        return s -> JSON.parseArray(s, FlowRuleEntity.class);\n    }\n\n    @Bean\n    public ConfigService nacosConfigService() throws Exception {\n        return ConfigFactory.createConfigService(\"localhost\");\n    }\n}\n\n~~~\n\nFlowRuleNacosProvider负责从Nacos读取配置：\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.rule.nacos;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;\nimport com.alibaba.csp.sentinel.datasource.Converter;\nimport com.alibaba.csp.sentinel.util.StringUtil;\nimport com.alibaba.nacos.api.config.ConfigService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author Eric Zhao\n * @since 1.4.0\n */\n@Component(\"flowRuleNacosProvider\")\npublic class FlowRuleNacosProvider implements DynamicRuleProvider<List<FlowRuleEntity>> {\n\n    @Autowired\n    private ConfigService configService;\n    @Autowired\n    private Converter<String, List<FlowRuleEntity>> converter;\n\n    @Override\n    public List<FlowRuleEntity> getRules(String appName) throws Exception {\n        String rules = configService.getConfig(appName + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,\n            NacosConfigUtil.GROUP_ID, 3000);\n        if (StringUtil.isEmpty(rules)) {\n            return new ArrayList<>();\n        }\n        return converter.convert(rules);\n    }\n}\n\n~~~\n\n\n\nFlowRuleNacosPublisher负责将配置写入Nacos：\n\n\n\n~~~java\n\npackage com.alibaba.csp.sentinel.dashboard.rule.nacos;\n\nimport java.util.List;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;\nimport com.alibaba.csp.sentinel.datasource.Converter;\nimport com.alibaba.csp.sentinel.util.AssertUtil;\nimport com.alibaba.nacos.api.config.ConfigService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author Eric Zhao\n * @since 1.4.0\n */\n@Component(\"flowRuleNacosPublisher\")\npublic class FlowRuleNacosPublisher implements DynamicRulePublisher<List<FlowRuleEntity>> {\n\n    @Autowired\n    private ConfigService configService;\n    @Autowired\n    private Converter<List<FlowRuleEntity>, String> converter;\n\n    @Override\n    public void publish(String app, List<FlowRuleEntity> rules) throws Exception {\n        AssertUtil.notEmpty(app, \"app name cannot be empty\");\n        if (rules == null) {\n            return;\n        }\n        configService.publishConfig(app + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,\n            NacosConfigUtil.GROUP_ID, converter.convert(rules));\n    }\n}\n\n~~~\n\n上面都是新增的类，最后还需要在Dashboard查询和修改规则时进行修改，具体修改是在FlowControllerV2\n\n\n\n![image-20240221092028120](typora-user-images/image-20240221092028120.png)\n\n\n\n以 Nacos 为例，若希望使用 Nacos 作为动态规则配置中心，用户可以提取出相关的类，然后只需在 FlowControllerV2 中指定对应的 bean 即可开启 Nacos 适配。前端页面需要手动切换，或者修改前端路由配置（sidebar.html 流控规则路由从 dashboard.flowV1 改成 dashboard.flow 即可，注意簇点链路页面对话框需要自行改造）。\n\n~~~java\n@Autowired\n@Qualifier(\"flowRuleNacosProvider\")\nprivate DynamicRuleProvider<List<FlowRuleEntity>> ruleProvider;\n@Autowired\n@Qualifier(\"flowRuleNacosPublisher\")\nprivate DynamicRulePublisher<List<FlowRuleEntity>> rulePublisher;\n\n~~~\n\n\n\n**修改控制台源码实现流控规则持久化**\n\n接下来，参考以上官方提供的解决方案，我们来实际操作一下\n\n**1、改造代码**\n\n首先将pom中的sentinel-datasource-nacos中的scope去掉，将Nacos相关依赖引入到编译环境中来。\n\n~~~xml\n  <!-- for Nacos rule publisher sample -->\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n        </dependency>\n~~~\n\n\n\n![image-20240221091728143](typora-user-images/image-20240221091728143.png)\n\n\n\n将test目录下nacos动态规则实现的相关代码，复制到com.alibaba.csp.sentinel.dashboard.rule包下\n\n![image-20240221091837069](typora-user-images/image-20240221091837069.png)\n\n\n\n修改FlowControllerV2类，将动态规则发布及拉取的注入类，替换为flowRuleNacosProvider及flowRuleNacosPublisher。\n\n\n\n![image-20240221091441127](typora-user-images/image-20240221091441127.png)\n\n\n\n**2、改造页面**\n\n找到图中目录下的sidebar页面，将流控规则菜单中的dashboard.flowV1改为dashboard.flow。\n\n![image-20240221092353574](typora-user-images/image-20240221092353574.png)\n\n\n\n![image-20240221092419244](typora-user-images/image-20240221092419244.png)\n\n![image-20240221092834785](typora-user-images/image-20240221092834785.png)\n\n以流控规则测试，当在sentinel dashboard配置了流控规则，会在nacos配置中心生成对应的配置，这样客户端就能读取到这个流控规则配置了。\n\n![image-20240221093021265](typora-user-images/image-20240221093021265.png)\n\n\n\nspring-cloud-service.json\n\n~~~json\n[\n    {\n        \"app\":\"spring-cloud-service\",\n        \"clusterConfig\":{\n            \"acquireRefuseStrategy\":0,\n            \"clientOfflineTime\":2000,\n            \"fallbackToLocalWhenFail\":true,\n            \"resourceTimeout\":2000,\n            \"resourceTimeoutStrategy\":0,\n            \"sampleCount\":10,\n            \"strategy\":0,\n            \"thresholdType\":0,\n            \"windowIntervalMs\":1000\n        },\n        \"clusterMode\":false,\n        \"controlBehavior\":0,\n        \"count\":5,\n        \"gmtCreate\":1708478952132,\n        \"gmtModified\":1708478952132,\n        \"grade\":1,\n        \"id\":9,\n        \"ip\":\"10.108.202.7\",\n        \"limitApp\":\"default\",\n        \"port\":9998,\n        \"resource\":\"/sentinel/message3\",\n        \"strategy\":0\n    }\n]\n~~~\n\n\n\n\n\n**进阶：**\n\n**此时你启动nacos-dashboard，正要到流控规则页面进行尝试时，你会发现**\n\n![image-20240221093711599](typora-user-images/image-20240221093711599.png)\n\n**有个回到单机页面的按钮，你好奇的点了一下，满怀期待的进行配置，但是却发现配置不能生效，这是因为单机页面的执行的方法还是默认的方法，需要进行如下修改：**\n\n\n\n>\n>\n>resources/app/views/flow_v2.html  \n>\n>两种方法：1.进到这个页面，找到执行的方法修改为自定义的V2类下的方法\n>\n>​         2.注释掉按钮\n>\n>为了方便快捷，我们直接注释\n\n![image-20240221093819873](typora-user-images/image-20240221093819873.png)\n\n\n\n***为了方便我们以后的配置，更为牛逼的进阶之旅开启，快上车***\n\n 一般我们习惯从簇点链路直接配置流控，而不是到流控规则页面进行配置，但是问题来了，从簇点链路进行配置的不生效，按F12看请求会发现，他还是请求的 /v1/flow 而不是 /v2/flow\n\n\n\n![image-20240221094018816](typora-user-images/image-20240221094018816.png)\n\n解决问题：\n\n>resources/app/scripts/controllers/identity.js  \n>\n>对比这修改，至于为什么这么改不再赘述，有兴趣的可以对比一下两个路径执行的方法 \n\n\n\n![image-20240221094225094](typora-user-images/image-20240221094225094.png)\n\n\n\n![image-20240221094244920](typora-user-images/image-20240221094244920.png)\n\n修改到这，你会发现从簇点链路配置的流程规则可以推送到nacos了，但是新问题，出现了，保存完后会自动跳转到展示页面，但是展示页面是空的~~~~~~~~~~~~~~\n\n原因：F12查看请求得知，查询方法还是执行的V1版本的默认方法，而不是我们自定义的V2里面的方法，继续在当前js文件进行修改\n\n\n\n![image-20240221094447664](typora-user-images/image-20240221094447664.png)\n\n![image-20240221094852671](typora-user-images/image-20240221094852671.png)\n\n终于实现了分别在两个页面进行流控配置\n\n![image-20240221095745495](typora-user-images/image-20240221095745495.png)\n\n![image-20240221155333042](typora-user-images/image-20240221155333042.png)\n","source":"_posts/Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-04-Sentinel服务容错.md","raw":"`Lison `  `<dreamlison@163.com>`,  `v1.0.0`, `2023.09.10`\n\n# Spring Cloud Alibaba-04-Sentinel服务容错\n\n[toc]\n\n\n\n## 高并发带来的问题\n\n在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络 原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会 出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。\n\n\n\n## 服务雪崩效应\n\n在分布式系统中,由于网络原因或自身的原因,服务一般无法保证 100% 可用。如果一个服务出现了 问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等 待，进而导致服务瘫痪。\n\n由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是 服务故障的 “雪崩效应” 。\n\n![image-20231024102201145](typora-user-images/image-20231024102201145.png)\n\n\n\n雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是\"雪落而不雪崩\"。\n\n\n\n\n\n## 常见容错方案\n\n要防止雪崩的扩散，我们就要做好服务的容错，容错说白了就是保护自己不被猪队友拖垮的一些措 施, 下面介绍常见的服务容错思路和组件。\n\n**常见的容错思路**\n\n常见的容错思路有隔离、超时、限流、熔断、降级这几种，下面分别介绍一下。\n\n- **隔离**\n\n  它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故\n  障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的\n  系统服务。常见的隔离方式有:线程池隔离和信号量隔离.\n\n\n\n![image-20231024104338016](typora-user-images/image-20231024104338016.png)\n\n\n\n* **超时**\n\n在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程。\n\n![image-20231201143940420](typora-user-images/image-20231201143940420.png)\n\n\n\n* **限流**\n\n限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行,一旦达到 的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的。\n\n![image-20231201144020748](typora-user-images/image-20231201144020748.png)\n\n* **熔断**\n\n在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整 体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。\n\n![image-20231201144119343](typora-user-images/image-20231201144119343.png)\n\n服务熔断一般有三种状态:\n\n* 熔断关闭状态(Closed)：  服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制 \n* 熔断开启状态（Open）：  后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法 \n* 半熔断状态（Half-Open）\t：  尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态;如果成功率仍旧很低，则重新进入熔断关闭状态。\n\n\n\n\n\n* **降级**\n\n降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案。\n\n![image-20231201153117052](typora-user-images/image-20231201153117052.png)\n\n\n\n**常见的容错组件**\n\n**Hystrix**\nHystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止 级联失败，从而提升系统的可用性与容错性。\n\n**Resilience4J**\nResilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推 荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x/2.x，而且监控也支持和 prometheus等多款主流产品进行整合。\n\n**Sentinel**\nSentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定。 下面是三个组件在各方面的对比:\n\n|                | Sentinel                                                   | Hystrix                | Resilience4J                     |\n| -------------- | ---------------------------------------------------------- | ---------------------- | -------------------------------- |\n| 隔离策略       | 信号量隔离（并发线程数限流）                               | 线程池隔离/信号量隔离  | 信号量隔离                       |\n| 熔断降级策略   | 基于响应时间、异常比率、异常数                             | 基于异常比率           | 基于异常比率、响应时间           |\n| 实时统计实现   | 活动窗口（LeapArray）                                      | 滑动窗口（基于RxJava） | Ring Bit Buffer                  |\n| 动态规则配置   | 支持多数据源                                               | 支持多数据源           | 有限支持                         |\n| 扩展性         | 多个扩展点                                                 | 插件的形式             | 插件的形式                       |\n| 基于注解的支持 | 支持                                                       | 支持                   | 支持                             |\n| 限流           | 基于QPS,支持基于调用关系的限流                             | 不支持                 | Rate Limiter                     |\n| 流量整形       | 支持预热模式、匀速器模式、预热排队模式                     | 不支持                 | 简单的Rate Limiter模式           |\n| 系统自适应保护 | 支持                                                       | 不支持                 | 不支持                           |\n| 控制台         | 提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等 | 简单的监控查 看        | 不提供控制台，可对接其它监控系统 |\n\n\n\n## Sentinel入门\n\n### 什么是Sentinel\n\nSentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于**服务容错**的综合性解决方案。它以流量 为切入点, 从**流量控制、熔断降级、系统负载保护**等多个维度来保护服务的稳定性。\n\n\n\nSentinel具有以下特征:\n\nSentinel 具有以下特征:\n\n**丰富的应用场景 :**Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景, 例如秒杀(即 突发流量控制在系统容量可以承受的范围)、消息削峰填谷、集群流量控制、实时熔断下游不可用 应用等。\n完备的实时监控:Sentinel 提供了实时的监控功能。通过控制台可以看到接入应用的单台机器秒 级数据, 甚至 500 台以下规模的集群的汇总运行情况。\n**广泛的开源生态**:Sentinel 提供开箱即用的与其它开源框架/库的整合模块, 例如与 Spring Cloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。\n\n**完善的 SPI 扩展点:**Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快 速地定制逻辑。例如定制规则管理、适配动态数据源等。\n\n**Sentinel 分为两个部分:**\n\n* 核心库(Java 客户端)不依赖任何框架/库,能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。\n* 控制台(Dashboard)基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等 应用容器。\n\n\n\n### 微服务集成Sentinel\n\n为微服务集成Sentinel非常简单, 只需要加入Sentinel的依赖即可\n\n**1、在pom.xml中加入下面依赖**\n\n~~~xml\n<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>\n</dependency>\n\n~~~\n\n\n\n**2、application.yml 配置sentinel**\n**`注意：yml配置client-ip 是本地ip才行`**\n\n~~~yaml\nspring:\n    cloud:\n        sentinel:\n            transport:\n                dashboard: 192.168.32.131:8858\n                client-ip: 192.168.32.1\n                port: 8719\n\n~~~\n\n\n\n\n\n\n\n**3、编写一个Controller测试使用**\n\n~~~java\n@RestController\npublic class TestSentinelController {\n\n    @RequestMapping(\"/sentinel/message1\")\n    public String message1() {\n        return \"message1\";\n    }\n    @RequestMapping(\"/sentinel/message2\")\n    public String message2() {\n        return \"message2\";\n    }\n    \n}\n~~~\n\n\n\n### 安装Sentinel控制台\n\nSentinel 提供一个轻量级的控制台, 它提供机器发现、单机资源实时监控以及规则管理等功能。\n\n**1、jar包方式安装**\n\n~~~\n下载jar包,解压到文件夹 https://github.com/alibaba/Sentinel/releases \n\n\n启动：\n# 直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)\njava -Dserver.port=8858 -Dcsp.sentinel.dashboard.server=localhost:8858 - Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.1.jar \n\n\n~~~\n\n\n\n2、docker方式安装\n\n~~~\n\n//拉去sentinel镜像\ndocker pull bladex/sentinel-dashboard:1.8.1\n\n\n\n//启动容器\ndocker run --name sentinel  -d -p 8858:8858 -p 8719:8719 -d bladex/sentinel-dashboard:1.8.1 -e username=sentinel -e password=sentinel -e server=localhost:8858\n~~~\n\n\n\n通过浏览器访问localhost:8858 进入控制台 ( 默认用户名密码是 sentinel/sentinel )\n\n\n\n\n\n注意：重启后还是看不到自己注册接口服务？\n\n**原因：Sentinel是 懒加载机制所以呢，需要访问一下接口即可再去访问Sentinel 就有数据了**\n\n\n\n\n\n**补充:了解控制台的使用原理**\n\nSentinel的控制台其实就是一个SpringBoot编写的程序。我们需要将我们的微服务程序注册到控制台上, 即在微服务中指定控制台的地址, 并且还要开启一个跟控制台传递数据的端口, 控制台也可以通过此端口 调用微服务中的监控程序获取微服务的各种信息。\n\n![image-20240219114233026](typora-user-images/image-20240219114233026.png)\n\n\n\n![image-20240219113719157](typora-user-images/image-20240219113719157.png)\n\n\n\n\n\n\n\n## 实现一个接口的限流\n\n\n\n1、通过控制台为message1添加一个流控规则\n\n\n\n![image-20240219114343151](typora-user-images/image-20240219114343151.png)\n\n\n\n2、通过控制台快速频繁访问, 观察效果\n\n![image-20240219114515952](typora-user-images/image-20240219114515952.png)\n\n## Sentinel的概念和功能\n\n\n\n### 基本概念\n\n* **资源**\n\n资源就是Sentinel要保护的东西\n\n资源是Sentinel的关键概念，它可以是Java应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码\n\n>上述案例中message1方法就可以认为是一个资源\n\n* **规则**\n\n规则就是用来定义如何保护资源的\n\n作为资源之上，定义以什么样的方式保护资源，主要包括流量控制规则、熔断降级规则以及系统保护规则。\n\n>上述案例中message1资源设置一种流控规则，限制了进入message1的流量\n\n### 重要功能\n\n\n\n![image-20240219144606520](typora-user-images/image-20240219144606520.png)\n\nSentinel的主要功能就是容错,主要体现为下面这三个:\n\n**1、流量控制**\n流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是 随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。 Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状。\n\n**2、熔断降级**\n\n当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则\n对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。\n\n\n\n**Sentinel 对这个问题采取了两种手段:**\n\n(1)通过并发线程数进行限制\n\nSentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。当某个资源 出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆 积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的 线程完成任务后才开始继续接收请求。\n\n(2)通过响应时间对资源进行降级\n\n除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。 当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的 时间窗口之后才重新恢复。\n\n\n\n**Sentinel 和 Hystrix 的区别**\n\n>两者的原则是一致的, 都是当一个资源出现问题时, 让其快速失败, 不要波及到其它服务 但是在限制的手段上, 确采取了完全不一样的方法:\n>\n>~~~\n>       Hystrix 采用的是线程池隔离的方式, 优点是做到了资源之间的隔离, 缺点是增加了线程 切换的成本。 \n>\n>       Sentinel 采用的是通过并发线程的数量和响应时间来对资源做限制。 \n>~~~\n\n\n\n**3、系统负载保护**\n\nSentinel 同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让 请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其 它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保 护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请 求。总之一句话: 我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功 能。\n\n\n\n## Sentinel规则\n\n\n\n### 流程控制\n\n流量控制，其原理是监控应用流量的QPS(每秒查询率) 或并发线程数等指标，当达到指定的阈值时 对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。\n\n第1步: 点击簇点链路，我们就可以看到访问过的接口地址，然后点击对应的流控按钮，进入流控规则配 置页面。新增流控规则界面如下:\n\n![image-20240219150634816](typora-user-images/image-20240219150634816.png)\n\n\n\n**资源名:**唯一名称，默认是请求路径，可自定义\n\n针对来源:指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制\n\n**阈值类型/单机阈值:**\n\n* QPS(每秒请求数量): 当调用该接口的QPS达到阈值的时候，进行限流\n* 线程数:当调用该接口的线程数达到阈值的时候，进行限流\n\n**是否集群:**暂不需要集群 接下来我们以QPS为例来研究限流规则的配置。\n\n\n\n#### 简单配置\n\n我们先做一个简单配置，设置阈值类型为QPS，单机阈值为3。即每秒请求量大于3的时候开始限流。\n\n接下来，在流控规则页面就可以看到这个配置\n\n![image-20240219150821657](typora-user-images/image-20240219150821657.png)\n\n然后快速访问 /order/message1 接口，观察效果。此时发现，当QPS > 3的时候，服务就不能正常响 应，而是返回Blocked by Sentinel (flow limiting)结果。\n\n![image-20240219150910898](typora-user-images/image-20240219150910898.png)\n\n#### 配置流控模式\n\n![image-20240219151031448](typora-user-images/image-20240219151031448.png)\n\nsentinel共有三种流控模式，分别是:\n\n**直接**(默认):接口达到限流条件时，开启限流\n\n**关联**:当关联的资源达到限流条件时，开启限流 [适合做应用让步]\n\n**链路**:当从某个接口过来的资源达到限流条件时，开启限流\n\n\n\n下面呢分别演示三种模式:\n\n**直接流控模式**\n\n直接流控模式是最简单的模式，当指定的接口达到限流条件时开启限流。上面案例使用的就是直接流控模式。\n\n**关联流控模式**\n\n关联流控模式指的是，当指定接口关联的接口达到限流条件时，开启对指定接口开启限流。\n\n第1步:配置限流规则, 将流控模式设置为关联，关联资源设置为的 /sentinel/message2。\n\n![image-20240219151212695](typora-user-images/image-20240219151212695.png)\n\n第2步:通过postman软件向/sentinel/message2连续发送请求，注意QPS一定要大于3\n\n![image-20240219152607457](typora-user-images/image-20240219152607457.png)\n\n\n\n第3步:访问/sentinel/message1,会发现已经被限流\n\n![image-20240219152638390](typora-user-images/image-20240219152638390.png)\n\n**链路流控模式**\n\n链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流。它的功能有点类似于针对 来源配置项，区别在于:**针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度 更细。**\n\n\n\n第1步: 编写一个service，在里面添加一个方法message\n\n~~~java\n@Service\npublic class TestSentinelMessage3ServiceImpl {\n    @SentinelResource(\"message\")\n    public void message() {\n        System.out.println(\"message\");\n    }\n}\n~~~\n\n\n\n第2步: 在Controller中声明两个方法，分别调用service中的方法\n\n~~~java\n\n@RestController\npublic class TestSentinelController {\n\n    @Autowired\n    private TestSentinelMessage3ServiceImpl testSentinelMessage3Service;\n\n    @RequestMapping(\"/sentinel/message1\")\n    public String message1() {\n        testSentinelMessage3Service.message();\n        return \"message1\";\n    }\n    @RequestMapping(\"/sentinel/message2\")\n    public String message2() {\n        testSentinelMessage3Service.message();\n        return \"message2\";\n    }\n\n}\n~~~\n\n\n\n\n\n![image-20240219154032740](typora-user-images/image-20240219154032740.png)\n\n 分别通过 /sentinel/message1 和 /sentinel/message2 访问, 发现2没问题, 1的被限流了\n\n#### 配置流控效果\n\n**快速失败(默认):** 直接失败，抛出异常，不做任何额外的处理，是最简单的效果\n\n**Warm Up:**它从开始阈值到最大QPS阈值会有一个缓冲阶段，一开始的阈值是最大QPS阈值的 1/3，然后慢慢增长，直到最大阈值，适用于将\n突然增大的流量转换为缓步增长的场景。\n\n**排队等待:**让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待; 它还会让设 置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃\n\n### 降级规则 降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件:\n\n\n\n#### 慢调用比例 (SLOW_REQUEST_RATIO)\n\n选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。\n\n当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。（默认1秒内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。）\n\n> 经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。\n\n- 最大 RT（响应时间）：200意思是 在200毫秒处理完这个请求\n- 比例阀值：0~1之间。\n- `慢调用比例`：例如1秒内请求10次，8次是慢请求，则慢请求比例 0.8\n- java 接口响应时间为睡眠400毫秒\n\n\n\n根据上述可以看出触发必要条件后才会降级：\n\n1. 请求时间 > RT\n2. 单位统计时长（statIntervalMs）> 最小请求数\n3. 慢比例调用比例 > 比例阀值（maxSlowRequestRatio）\n4. 触发熔断后进入探测恢复状态（HALF-OPEN 状态），下一个请求响应时间小于设置的慢调用 RT 则结束熔断否则会再次被熔断\n\n如下是我的一次降级调用，接口中休眠400毫秒，1s内连续请求5次后\n\n![image-20240220094227461](typora-user-images/image-20240220094227461.png)\n\n\n\n如下是我多次往复测试，不太好测试。需要参考 `经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。`\n\n请求被熔断\n\n\n\n![image-20240220095107292](typora-user-images/image-20240220095107292.png)\n\n#### 异常比例 (ERROR_RATIO)\n\n当单位统计时长（statIntervalMs 以 s 为单位）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。\n\n经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。\n\n异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。\n\n同慢调用比例相似，逻辑相似\n\n![image-20240220095645324](typora-user-images/image-20240220095645324.png)\n\n![image-20240220101010503](typora-user-images/image-20240220101010503.png)\n\n#### 异常数 (ERROR_COUNT)\n\n当单位统计时长（1s）内的异常数目超过阈值之后会自动进行熔断。\n\n经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。\n\n注意由于统计时间窗口是分钟级别的，若timeWindow小于 60s，则结束熔断状态后仍可能再进入熔断状态；\n\n同慢调用比例相似，逻辑相似\n\n![image-20240220101429844](typora-user-images/image-20240220101429844.png)\n\n代码中未传递参数时可以看出异常概率应该在50%左右，从图中前部分可以看出，平均请求未出现熔断，因为请求间隔时间较长，当后半部分，1秒内多次请求时出现熔断了，老版本是以分钟来统计的，新版是秒为单位\n\n\n\n![image-20240220101701432](typora-user-images/image-20240220101701432.png)\n\n\n\n### 热点规则\n\n热点参数流控规则是一种更细粒度的流控规则, 它允许将规则具体到参数上。\n\n**热点规则简单使用**\n\n1、编写代码\n\n~~~java\n@RequestMapping(\"/sentinel/message3\")\n@SentinelResource(\"message3\")//注意这里必须使用这个注解标识,热点规则不生效 \npublic String message3(String name, Integer age) {\n  return name + age;\n}\n~~~\n\n第2步: 配置热点规则\n\n\n\n![image-20240220102332812](typora-user-images/image-20240220102332812.png)\n\n第3步: 分别用两个参数访问,会发现只对第一个参数限流了\n\n\n\n![image-20240220102431979](typora-user-images/image-20240220102431979.png)\n\n![image-20240220102457440](typora-user-images/image-20240220102457440.png)\n\n\n\n\n\n\n\n**热点规则增强使用**\n\n参数例外项允许对一个参数的具体值进行流控\n\n编辑刚才定义的规则,增加参数例外项\n\n![image-20240220102621265](typora-user-images/image-20240220102621265.png)\n\n### 授权规则\n\n很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源 访问控制的功能。来源访问控制根据资源的请求来源(origin)限制资源是否通过:\n\n若配置白名单，则只有请求来源位于白名单内时才可通过;\n若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过。\n\n![image-20240220102752041](typora-user-images/image-20240220102752041.png)\n\n上面的资源名和授权类型不难理解，但是流控应用怎么填写呢?\n\n>其实这个位置要填写的是来源标识，Sentinel提供了 RequestOriginParser 接口来处理来源。 只要Sentinel保护的接口资源被访问，Sentinel就会调用 RequestOriginParser 的实现类去解析\n>访问来源。\n\n\n\n第1步: 自定义来源处理规则\n\n\n\n~~~java\n@Component\npublic class RequestOriginParserDefinition implements RequestOriginParser {\n    @Override\n    public String parseOrigin(HttpServletRequest request) {\n        String serviceName = request.getParameter(\"serviceName\");\n        return serviceName;\n    } \n} \n\n~~~\n\n\n\n第2步: 授权规则配置\n这个配置的意思是只有serviceName=pc不能访问(黑名单)\n\n\n\n![image-20240220103006353](typora-user-images/image-20240220103006353.png)\n\n\n\n第3步：访问 http://localhost:18001/sentinel/message3?serviceName=pc  观察结果\n\n\n\n![image-20240220103217414](typora-user-images/image-20240220103217414.png)\n\n### 系统规则\n\n系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 Load、RT、入口 QPS 、CPU 使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。\n\n系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效。\n\n* Load(仅对 Linux/Unix-like 机器生效):当系统 load1 超过阈值，且系统当前的并发线程数超过 系统容量时才会触发系统保护。系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般 是 CPU cores * 2.5。\n* RT:当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。\n* 线程数:当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。\n* 入口 QPS:当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。\n* CPU使用率:当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护。\n\n\n\n**扩展: 自定义异常返回**\n\n~~~java\n\n\n//异常处理页面\n@Component\npublic class ExceptionHandlerPage implements BlockExceptionHandler {\n    //BlockException 异常接口,包含Sentinel的五个异常\n    // FlowException 限流异常\n    // DegradeException 降级异常\n    // ParamFlowException 参数限流异常\n    // AuthorityException 授权异常\n    // SystemBlockException 系统负载异常\n\n\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, BlockException ex) throws Exception {\n        String msg = null;\n        if (ex instanceof FlowException) {\n            msg = \"限流了\";\n        } else if (ex instanceof DegradeException) {\n            msg = \"降级了\";\n        } else if (ex instanceof ParamFlowException) {\n            msg = \"热点参数限流\";\n        } else if (ex instanceof SystemBlockException) {\n            msg = \"系统规则（负载/...不满足要求）\";\n        } else if (ex instanceof AuthorityException) {\n            msg = \"授权规则不通过\";\n        }\n        // http状态码\n        response.setStatus(500);\n        response.setCharacterEncoding(\"utf-8\");\n        response.setHeader(\"Content-Type\", \"application/json;charset=utf-8\");\n        response.setContentType(\"application/json;charset=utf-8\");\n        // spring mvc自带的json操作工具，叫jackson\n        //返回json数据\n        response.setStatus(200);\n        response.setCharacterEncoding(\"utf-8\");\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        //springmvc 的一个json转换类 （jackson）\n        new ObjectMapper().writeValue(response.getWriter(), msg);\n        //重定向\n        //response.sendRedirect(\"http://www.baidu.com\");\n    }\n}\n~~~\n\n注意:最近在学习SpringCloudAlibaba时候，需要sentinel进行流量管理控制，在配置统一处理返回异常时候，实现 UrlBlockHandler 这个接口直接爆红，原因是我使用的sentinel是2.2.5.RELEASE，官方改成了BlockExceptionHandler这个接口与实现\n\n\n\n\n\n## @SentinelResource的使用\n\n在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护。同时还能\n通过@SentinelResource来指定出现异常时的处理策略。\n\n@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:\n\n\n\n| 属性               | 作用                                                         |\n| ------------------ | ------------------------------------------------------------ |\n| value              | 资源名称                                                     |\n| entryType          | entry类型，标记流量的方向，取值IN/OUT，默认是OUT             |\n| blockHandler       | 处理BlockException的函数名称,函数要求:1. 必须是 public2.返回类型 参数与原方法一致3. 默认需和原方在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法。 |\n| blockHandlerClass  | 存放blockHandler的类,对应的处理函数必须static修饰            |\n| fallback           | 用于在抛出异常的时候提供fallback处理逻辑。fallback函数可以针对所 有类型的异常(除了 exceptionsToIgnore 里面排除掉的异常类型)进 行处理。函数要求:1. 返回类型与原方法一致 2. 参数类型需要和原方法相匹配3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法。 |\n| fallbackClass      | 存放fallback的类。对应的处理函数必须static修饰。             |\n| defaultFallback    | 用于通用的 fallback 逻辑。默认fallback函数可以针对所有类型的异常进 行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。函 数要求:1. 返回类型与原方法一致 2. 方法参数列表为空，或者有一个 Throwable 类型的参数。3. 默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法。 |\n| exceptionsToIgnore | 指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入 fallback逻辑，而是原样抛出 |\n| exceptionsToTrace  | 需要trace的异常                                              |\n\n**定义限流和降级后的处理方法**\n\n\n\n~~~java\n\n@Service\npublic class TestSentinelMessage3ServiceImpl {\n        int i = 0;\n\n        @SentinelResource(\n                value = \"message\",\n                blockHandler = \"blockHandler\",//指定发生BlockException时进入的方法\n                fallback = \"fallback\"//指定发生Throwable时进入的方法\n        )\n        public String message() {\n            i++;\n            if (i % 3 == 0) {\n                throw new RuntimeException();\n            }\n            return \"message\";\n        }\n\n        //BlockException时进入的方法\n        public String blockHandler(BlockException ex) {\n            return \"接口被限流或者降级了...\";\n        }\n\n        //Throwable时进入的方法\n        public String fallback(Throwable throwable) {\n            return \"接口发生异常了...\";\n        }\n    \n\n~~~\n\n**将限流和降级方法外置到单独的类中**\n\n~~~java\n@Service\n@Slf4j\npublic class TestSentinelMessage3ServiceImpl {\n    int i = 0;\n\n    @SentinelResource(\n            value = \"message\",\n            blockHandlerClass = TestSentinelMessage3ServiceImplBlockHandlerClass.class,\n            blockHandler = \"blockHandler\",\n            fallbackClass = TestSentinelMessage3ServiceImplFallbackClass.class,\n            fallback = \"fallback\"\n    )\n    public String message() {\n        i++;\n        if (i % 3 == 0) {\n            throw new RuntimeException();\n        }\n        return \"message4\";\n    }\n}\n\n@Slf4j\npublic class TestSentinelMessage3ServiceImplBlockHandlerClass { //注意这里必须使用static修饰方法\n    public static String blockHandler(BlockException ex) {\n        log.error(\"{}\", ex);\n        return \"接口被限流或者降级了...\";\n    }\n}\n\n@Slf4j\npublic class TestSentinelMessage3ServiceImplFallbackClass { //注意这里必须使用static修饰方法\n    public static String fallback(Throwable throwable) {\n        log.error(\"{}\", throwable);\n        return \"接口发生异常了...\";\n    }\n} \n\n\n~~~\n\n\n\n## Sentinel规则持久化\n\n\n\n通过前面的讲解，我们已经知道，可以通过Dashboard来为每个Sentinel客户端设置各种各样的规 则，但是这里有一个问题，就是这些规则默认是存放在内存中，极不稳定，所以需要将其持久化。\n\n### Sentinel规则的推送有下面三种模式:\n\n| 推送模式 | 说明                                                         | 有点                         | 缺点                                                         |\n| -------- | ------------------------------------------------------------ | ---------------------------- | ------------------------------------------------------------ |\n| 原始模式 | API将规则推送至客户端并直接更新到内存中                      | 简单，无任何依赖             | 不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境 |\n| Pull模式 | 扩展写数据源（WritableDataSource），客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是RDBMS、文件等 | 简单，无任何依赖；规则持久化 | 不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。 |\n| Push模式 | 扩展读数据源（ReadableDataSource），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用Nacos、Zookeeper等配置中心。这种方式有更好的实时性和一致性保证。生产环境下一般采用push模式的数据源。 | 规则持久化；一致性；快速     | 引入第三方依赖                                               |\n\n\n\n#### 原始模式\n\n如果不做任何修改，Dashboard的推送规则方式是通过API将规则推送至客户端并直接更新到内存中：\n\n![img](typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png)\n\n这种做法的好处是简单，无依赖；坏处是应用重启规则就会消失，仅用于简单测试，不能用于生产环境。\n\n#### 拉模式\n\npull模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至transport的WritableDataSourceRegistry中。\n\n\n\n![img](typora-user-images/afb25fa106bada4b37da64e902060269.png)\n\n\n\n首先Sentinel控制台通过API将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。使用 pull模式的数据源时一般不需要对Sentinel控制台进行改造。这种实现方法好处是简单，坏处是无法保证监控数据的一致性。\n\n具体使用方式如下：\n\n引入依赖：\n\n~~~xml\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-datasource-extension</artifactId>\n</dependency>\n~~~\n\n实现InitFunc接口，在init中处理DataSource初始化逻辑，并利用spi机制实现加载。\n\n\n\n~~~java\n\npublic class FileDataSourceInit implements InitFunc {\n\n    private static final String RULE_FILE_PATH = System.getProperty(\"user.home\") + File.separator;\n\n    private static final String FLOW_RULE_FILE_NAME = \"FlowRule.json\";\n\n    @Override\n    public void init() throws Exception {\n\n        //处理流控规则逻辑\n        dealFlowRules();\n    }\n\n\n    private void dealFlowRules() throws FileNotFoundException {\n        String ruleFilePath = RULE_FILE_PATH + FLOW_RULE_FILE_NAME;\n\n        //创建流控规则的可读数据源\n        FileRefreshableDataSource flowRuleRDS = new FileRefreshableDataSource(\n                ruleFilePath, source -> JSON.parseObject((String) source,\n                new TypeReference<List<FlowRule>>() {\n                })\n        );\n\n        // 将可读数据源注册至FlowRuleManager 这样当规则文件发生变化时，就会更新规则到内存\n        FlowRuleManager.register2Property(flowRuleRDS.getProperty());\n\n        WritableDataSource<List<FlowRule>> flowRuleWDS = new FileWritableDataSource<>(\n                ruleFilePath, this::encodeJson\n        );\n\n        // 将可写数据源注册至 transport 模块的 WritableDataSourceRegistry 中.\n        // 这样收到控制台推送的规则时，Sentinel 会先更新到内存，然后将规则写入到文件中.\n        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);\n    }\n\n\n    private <T> String encodeJson(T t) {\n        return JSON.toJSONString(t);\n    }\n\n}\n~~~\n\n\n\n在META-INF/services目录下创建com.alibaba.csp.sentinel.init.InitFunc，内容如下：\n\n~~~\ncom.lison.springcloudservice.config.sentinel.FileDataSourceInit\n~~~\n\n这样当在Dashboard中修改了配置后，Dashboard会调用客户端的接口修改客户端内存中的值，同时将配置写入文件FlowRule.json中，这样操作的话规则是实时生效的，如果是直接修改FlowRule.json的内容，这样需要等定时任务3秒后执行才能读到最新的规则。\n\n\n\n#### 推模式\n\n生产环境下一般更常用的是push模式的数据源。对于push模式的数据源，如远程配置中心（ZooKeeper, Nacos, Apollo等等），推送的操作不应由Sentinel客户端进行，而应该经控制台统一进行管理，直接进行推送，数据源仅负责获取配置中心推送的配置并更新到本地。因此推送规则正确做法应该是配置中心控制台/Sentinel控制台 → 配置中心 → Sentinel数据源 → Sentinel，而不是经Sentinel数据源推送至配置中心。这样的流程就非常清晰了：\n\n![img](typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png)\n\n\n\n### 基于Nacos配置中心控制台实现推送\n\n配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel\n\n\n\n引入依赖：\n\n~~~\n<dependency>\n    <groupId>com.alibaba.csp</groupId>\n    <artifactId>sentinel-datasource-nacos</artifactId>\n</dependency>\n\n~~~\n\n配置文件增加nacos的数据源：\n\n~~~yaml\nspring:\n  application:\n    name: spring-cloud-service\n  cloud:\n    sentinel:\n      transport:\n        dashboard: 127.0.0.1:8080\n      datasource:\n        flow-ds:\n          nacos:\n            server-addr: 127.0.0.1:8848\n            dataId: ${spring.application.name}-flow\n            groupId: DEFAULT_GROUP\n            data-type: json\n            rule-type: flow\n\n~~~\n\n这样直接在Nacos控制台修改规则就能实时生效了，缺点是直接在Sentinel Dashboard中修改规则配置，配置中心的配置不会发生变化。\n\n思考：如何实现将通过sentinel控制台设置的规则直接持久化到nacos配置中心？\n\n方法一：微服务增加基于Nacos的写数据源（WritableDataSource），发布配置到nacos配置中心。\n\n~~~java\n//核心逻辑： 实现WritableDataSource#write方法，发布配置到nacos配置中心\n@Override\npublic void write(T t) throws Exception {\n    lock.lock();\n    try {\n        configService.publishConfig(dataId, groupId, this.configEncoder.convert(t), ConfigType.JSON.getType());\n    } finally {\n        lock.unlock();\n    }\n}\n\n~~~\n\n方法二：Sentinel Dashboard监听Nacos配置的变化，如发生变化就更新本地缓存。在Sentinel Dashboard端新增或修改规则配置在保存到内存的同时，直接发布配置到nacos配置中心；Sentinel Dashboard直接从nacos拉取所有的规则配置。Sentinel Dashboard和微服务不直接通信，而是通过nacos配置中心获取到配置的变更，也就是下面的基于Sentinel控制台实现推送。\n\n\n\nAbstractDataSourceProperties\nSentinelProperties内部提供了TreeMap类型的datasource属性用于配置数据源信息。\n\n> com.alibaba.cloud.sentinel.datasource.config.AbstractDataSourceProperties#postRegister\n\n\n\n~~~java\npublic void postRegister(AbstractDataSource dataSource) {\n    switch (this.getRuleType()) {\n    case FLOW:\n        FlowRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case DEGRADE:\n        DegradeRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case PARAM_FLOW:\n        ParamFlowRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case SYSTEM:\n        SystemRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case AUTHORITY:\n        AuthorityRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case GW_FLOW:\n        GatewayRuleManager.register2Property(dataSource.getProperty());\n        break;\n    case GW_API_GROUP:\n        GatewayApiDefinitionManager.register2Property(dataSource.getProperty());\n        break;\n    default:\n        break;\n    }\n}\n~~~\n\n\n\n**NacosDataSource从Nacos读取配置**\n\nNacosDataSource主要负责与Nacos进行通信，实时获取Nacos的配置。\n\n\n\n~~~java\npublic NacosDataSource(final Properties properties, final String groupId, final String dataId,\n                       Converter<String, T> parser) {\n    super(parser);\n    if (StringUtil.isBlank(groupId) || StringUtil.isBlank(dataId)) {\n        throw new IllegalArgumentException(String.format(\"Bad argument: groupId=[%s], dataId=[%s]\",\n            groupId, dataId));\n    }\n    AssertUtil.notNull(properties, \"Nacos properties must not be null, you could put some keys from PropertyKeyConst\");\n    this.groupId = groupId;\n    this.dataId = dataId;\n    this.properties = properties;\n    this.configListener = new Listener() {\n        @Override\n        public Executor getExecutor() {\n            return pool;\n        }\n\n        @Override\n        public void receiveConfigInfo(final String configInfo) {\n            // 配置发送变更\n            RecordLog.info(\"[NacosDataSource] New property value received for (properties: {}) (dataId: {}, groupId: {}): {}\",\n                properties, dataId, groupId, configInfo);\n            T newValue = NacosDataSource.this.parser.convert(configInfo);\n            // Update the new value to the property.\n            getProperty().updateValue(newValue);\n        }\n    };\n    // 监听配置\n    initNacosListener();\n    // 第一次读取配置\n    loadInitialConfig();\n}\n\nprivate void loadInitialConfig() {\n    try {\n        T newValue = loadConfig();\n        if (newValue == null) {\n            RecordLog.warn(\"[NacosDataSource] WARN: initial config is null, you may have to check your data source\");\n        }\n        getProperty().updateValue(newValue);\n    } catch (Exception ex) {\n        RecordLog.warn(\"[NacosDataSource] Error when loading initial config\", ex);\n    }\n}\n\nprivate void initNacosListener() {\n    try {\n        this.configService = NacosFactory.createConfigService(this.properties);\n        // Add config listener.\n        configService.addListener(dataId, groupId, configListener);\n    } catch (Exception e) {\n        RecordLog.warn(\"[NacosDataSource] Error occurred when initializing Nacos data source\", e);\n        e.printStackTrace();\n    }\n}\n\n~~~\n\n**SentinelDataSourceHandler注入NacosDataSource**\nSentinelAutoConfiguration中注入了SentinelDataSourceHandler。\n\nSentinelDataSourceHandler负责遍历配置文件中配置的DataSource，然后注入到spring容器中。\n\n> com.alibaba.cloud.sentinel.custom.SentinelDataSourceHandler#afterSingletonsInstantiated\n\n\n\n~~~java\npublic void afterSingletonsInstantiated() {\n    this.sentinelProperties.getDatasource().forEach((dataSourceName, dataSourceProperties) -> {\n        try {\n            List<String> validFields = dataSourceProperties.getValidField();\n            if (validFields.size() != 1) {\n                log.error(\"[Sentinel Starter] DataSource \" + dataSourceName + \" multi datasource active and won't loaded: \" + dataSourceProperties.getValidField());\n                return;\n            }\n\n            AbstractDataSourceProperties abstractDataSourceProperties = dataSourceProperties.getValidDataSourceProperties();\n            abstractDataSourceProperties.setEnv(this.env);\n            abstractDataSourceProperties.preCheck(dataSourceName);\n            this.registerBean(abstractDataSourceProperties, dataSourceName + \"-sentinel-\" + (String)validFields.get(0) + \"-datasource\");\n        } catch (Exception var5) {\n            log.error(\"[Sentinel Starter] DataSource \" + dataSourceName + \" build error: \" + var5.getMessage(), var5);\n        }\n\n    });\n}\n\n~~~\n\n\n\n基于Sentinel控制台实现推送\n配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel\n\n从Sentinel1.4.0开始，Sentinel控制台提供DynamicRulePublisher和DynamicRuleProvider接口用于实现应用维度的规则推送和拉取：\n\n* DynamicRuleProvider: 拉取规则\n* DynamicRulePublisher: 推送规则\n\n可以参考Sentinel Dashboard test包下的流控规则拉取和推送的实现逻辑：\n\n\n\n![image-20240220144907721](typora-user-images/image-20240220144907721.png)\n\n这里主要改造Dashboard端，客户端还是采用前面的配置。\n\n引入nacos的依赖\n\n\n\n~~~java\n <dependency>\n   <groupId>com.alibaba.nacos</groupId>\n   <artifactId>nacos-client</artifactId>\n   <version>2.0.3</version>\n</dependency>\n~~~\n\n\n\nNacosConfig负责注入一些最基本的配置：\n\n~~~java\n\npackage com.alibaba.csp.sentinel.dashboard.rule.nacos;\n\nimport java.util.List;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.datasource.Converter;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.nacos.api.config.ConfigFactory;\nimport com.alibaba.nacos.api.config.ConfigService;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * @author Eric Zhao\n * @since 1.4.0\n */\n@Configuration\npublic class NacosConfig {\n\n    @Bean\n    public Converter<List<FlowRuleEntity>, String> flowRuleEntityEncoder() {\n        return JSON::toJSONString;\n    }\n\n    @Bean\n    public Converter<String, List<FlowRuleEntity>> flowRuleEntityDecoder() {\n        return s -> JSON.parseArray(s, FlowRuleEntity.class);\n    }\n\n    @Bean\n    public ConfigService nacosConfigService() throws Exception {\n        return ConfigFactory.createConfigService(\"localhost\");\n    }\n}\n\n~~~\n\nFlowRuleNacosProvider负责从Nacos读取配置：\n\n~~~java\npackage com.alibaba.csp.sentinel.dashboard.rule.nacos;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;\nimport com.alibaba.csp.sentinel.datasource.Converter;\nimport com.alibaba.csp.sentinel.util.StringUtil;\nimport com.alibaba.nacos.api.config.ConfigService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author Eric Zhao\n * @since 1.4.0\n */\n@Component(\"flowRuleNacosProvider\")\npublic class FlowRuleNacosProvider implements DynamicRuleProvider<List<FlowRuleEntity>> {\n\n    @Autowired\n    private ConfigService configService;\n    @Autowired\n    private Converter<String, List<FlowRuleEntity>> converter;\n\n    @Override\n    public List<FlowRuleEntity> getRules(String appName) throws Exception {\n        String rules = configService.getConfig(appName + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,\n            NacosConfigUtil.GROUP_ID, 3000);\n        if (StringUtil.isEmpty(rules)) {\n            return new ArrayList<>();\n        }\n        return converter.convert(rules);\n    }\n}\n\n~~~\n\n\n\nFlowRuleNacosPublisher负责将配置写入Nacos：\n\n\n\n~~~java\n\npackage com.alibaba.csp.sentinel.dashboard.rule.nacos;\n\nimport java.util.List;\n\nimport com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;\nimport com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;\nimport com.alibaba.csp.sentinel.datasource.Converter;\nimport com.alibaba.csp.sentinel.util.AssertUtil;\nimport com.alibaba.nacos.api.config.ConfigService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n/**\n * @author Eric Zhao\n * @since 1.4.0\n */\n@Component(\"flowRuleNacosPublisher\")\npublic class FlowRuleNacosPublisher implements DynamicRulePublisher<List<FlowRuleEntity>> {\n\n    @Autowired\n    private ConfigService configService;\n    @Autowired\n    private Converter<List<FlowRuleEntity>, String> converter;\n\n    @Override\n    public void publish(String app, List<FlowRuleEntity> rules) throws Exception {\n        AssertUtil.notEmpty(app, \"app name cannot be empty\");\n        if (rules == null) {\n            return;\n        }\n        configService.publishConfig(app + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,\n            NacosConfigUtil.GROUP_ID, converter.convert(rules));\n    }\n}\n\n~~~\n\n上面都是新增的类，最后还需要在Dashboard查询和修改规则时进行修改，具体修改是在FlowControllerV2\n\n\n\n![image-20240221092028120](typora-user-images/image-20240221092028120.png)\n\n\n\n以 Nacos 为例，若希望使用 Nacos 作为动态规则配置中心，用户可以提取出相关的类，然后只需在 FlowControllerV2 中指定对应的 bean 即可开启 Nacos 适配。前端页面需要手动切换，或者修改前端路由配置（sidebar.html 流控规则路由从 dashboard.flowV1 改成 dashboard.flow 即可，注意簇点链路页面对话框需要自行改造）。\n\n~~~java\n@Autowired\n@Qualifier(\"flowRuleNacosProvider\")\nprivate DynamicRuleProvider<List<FlowRuleEntity>> ruleProvider;\n@Autowired\n@Qualifier(\"flowRuleNacosPublisher\")\nprivate DynamicRulePublisher<List<FlowRuleEntity>> rulePublisher;\n\n~~~\n\n\n\n**修改控制台源码实现流控规则持久化**\n\n接下来，参考以上官方提供的解决方案，我们来实际操作一下\n\n**1、改造代码**\n\n首先将pom中的sentinel-datasource-nacos中的scope去掉，将Nacos相关依赖引入到编译环境中来。\n\n~~~xml\n  <!-- for Nacos rule publisher sample -->\n        <dependency>\n            <groupId>com.alibaba.csp</groupId>\n            <artifactId>sentinel-datasource-nacos</artifactId>\n        </dependency>\n~~~\n\n\n\n![image-20240221091728143](typora-user-images/image-20240221091728143.png)\n\n\n\n将test目录下nacos动态规则实现的相关代码，复制到com.alibaba.csp.sentinel.dashboard.rule包下\n\n![image-20240221091837069](typora-user-images/image-20240221091837069.png)\n\n\n\n修改FlowControllerV2类，将动态规则发布及拉取的注入类，替换为flowRuleNacosProvider及flowRuleNacosPublisher。\n\n\n\n![image-20240221091441127](typora-user-images/image-20240221091441127.png)\n\n\n\n**2、改造页面**\n\n找到图中目录下的sidebar页面，将流控规则菜单中的dashboard.flowV1改为dashboard.flow。\n\n![image-20240221092353574](typora-user-images/image-20240221092353574.png)\n\n\n\n![image-20240221092419244](typora-user-images/image-20240221092419244.png)\n\n![image-20240221092834785](typora-user-images/image-20240221092834785.png)\n\n以流控规则测试，当在sentinel dashboard配置了流控规则，会在nacos配置中心生成对应的配置，这样客户端就能读取到这个流控规则配置了。\n\n![image-20240221093021265](typora-user-images/image-20240221093021265.png)\n\n\n\nspring-cloud-service.json\n\n~~~json\n[\n    {\n        \"app\":\"spring-cloud-service\",\n        \"clusterConfig\":{\n            \"acquireRefuseStrategy\":0,\n            \"clientOfflineTime\":2000,\n            \"fallbackToLocalWhenFail\":true,\n            \"resourceTimeout\":2000,\n            \"resourceTimeoutStrategy\":0,\n            \"sampleCount\":10,\n            \"strategy\":0,\n            \"thresholdType\":0,\n            \"windowIntervalMs\":1000\n        },\n        \"clusterMode\":false,\n        \"controlBehavior\":0,\n        \"count\":5,\n        \"gmtCreate\":1708478952132,\n        \"gmtModified\":1708478952132,\n        \"grade\":1,\n        \"id\":9,\n        \"ip\":\"10.108.202.7\",\n        \"limitApp\":\"default\",\n        \"port\":9998,\n        \"resource\":\"/sentinel/message3\",\n        \"strategy\":0\n    }\n]\n~~~\n\n\n\n\n\n**进阶：**\n\n**此时你启动nacos-dashboard，正要到流控规则页面进行尝试时，你会发现**\n\n![image-20240221093711599](typora-user-images/image-20240221093711599.png)\n\n**有个回到单机页面的按钮，你好奇的点了一下，满怀期待的进行配置，但是却发现配置不能生效，这是因为单机页面的执行的方法还是默认的方法，需要进行如下修改：**\n\n\n\n>\n>\n>resources/app/views/flow_v2.html  \n>\n>两种方法：1.进到这个页面，找到执行的方法修改为自定义的V2类下的方法\n>\n>​         2.注释掉按钮\n>\n>为了方便快捷，我们直接注释\n\n![image-20240221093819873](typora-user-images/image-20240221093819873.png)\n\n\n\n***为了方便我们以后的配置，更为牛逼的进阶之旅开启，快上车***\n\n 一般我们习惯从簇点链路直接配置流控，而不是到流控规则页面进行配置，但是问题来了，从簇点链路进行配置的不生效，按F12看请求会发现，他还是请求的 /v1/flow 而不是 /v2/flow\n\n\n\n![image-20240221094018816](typora-user-images/image-20240221094018816.png)\n\n解决问题：\n\n>resources/app/scripts/controllers/identity.js  \n>\n>对比这修改，至于为什么这么改不再赘述，有兴趣的可以对比一下两个路径执行的方法 \n\n\n\n![image-20240221094225094](typora-user-images/image-20240221094225094.png)\n\n\n\n![image-20240221094244920](typora-user-images/image-20240221094244920.png)\n\n修改到这，你会发现从簇点链路配置的流程规则可以推送到nacos了，但是新问题，出现了，保存完后会自动跳转到展示页面，但是展示页面是空的~~~~~~~~~~~~~~\n\n原因：F12查看请求得知，查询方法还是执行的V1版本的默认方法，而不是我们自定义的V2里面的方法，继续在当前js文件进行修改\n\n\n\n![image-20240221094447664](typora-user-images/image-20240221094447664.png)\n\n![image-20240221094852671](typora-user-images/image-20240221094852671.png)\n\n终于实现了分别在两个页面进行流控配置\n\n![image-20240221095745495](typora-user-images/image-20240221095745495.png)\n\n![image-20240221155333042](typora-user-images/image-20240221155333042.png)\n","slug":"Spring Cloud Alibaba 基础应用/Spring Cloud Alibaba-04-Sentinel服务容错","published":1,"date":"2023-10-24T02:17:50.992Z","updated":"2024-02-21T08:30:03.704Z","title":"","comments":1,"layout":"post","photos":[],"_id":"cmbhu8dhr000aecfy69yvc0oc","content":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.09.10</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-04-Sentinel服务容错\"><a href=\"#Spring-Cloud-Alibaba-04-Sentinel服务容错\" class=\"headerlink\" title=\"Spring Cloud Alibaba-04-Sentinel服务容错\"></a>Spring Cloud Alibaba-04-Sentinel服务容错</h1><p>[toc]</p>\n<h2 id=\"高并发带来的问题\"><a href=\"#高并发带来的问题\" class=\"headerlink\" title=\"高并发带来的问题\"></a>高并发带来的问题</h2><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络 原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会 出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。</p>\n<h2 id=\"服务雪崩效应\"><a href=\"#服务雪崩效应\" class=\"headerlink\" title=\"服务雪崩效应\"></a>服务雪崩效应</h2><p>在分布式系统中,由于网络原因或自身的原因,服务一般无法保证 100% 可用。如果一个服务出现了 问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等 待，进而导致服务瘫痪。</p>\n<p>由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是 服务故障的 “雪崩效应” 。</p>\n<p><img src=\"/typora-user-images/image-20231024102201145.png\" alt=\"image-20231024102201145\"></p>\n<p>雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是”雪落而不雪崩”。</p>\n<h2 id=\"常见容错方案\"><a href=\"#常见容错方案\" class=\"headerlink\" title=\"常见容错方案\"></a>常见容错方案</h2><p>要防止雪崩的扩散，我们就要做好服务的容错，容错说白了就是保护自己不被猪队友拖垮的一些措 施, 下面介绍常见的服务容错思路和组件。</p>\n<p><strong>常见的容错思路</strong></p>\n<p>常见的容错思路有隔离、超时、限流、熔断、降级这几种，下面分别介绍一下。</p>\n<ul>\n<li><p><strong>隔离</strong></p>\n<p>它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故<br>障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的<br>系统服务。常见的隔离方式有:线程池隔离和信号量隔离.</p>\n</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20231024104338016.png\" alt=\"image-20231024104338016\"></p>\n<ul>\n<li><strong>超时</strong></li>\n</ul>\n<p>在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程。</p>\n<p><img src=\"/typora-user-images/image-20231201143940420.png\" alt=\"image-20231201143940420\"></p>\n<ul>\n<li><strong>限流</strong></li>\n</ul>\n<p>限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行,一旦达到 的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的。</p>\n<p><img src=\"/typora-user-images/image-20231201144020748.png\" alt=\"image-20231201144020748\"></p>\n<ul>\n<li><strong>熔断</strong></li>\n</ul>\n<p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整 体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p>\n<p><img src=\"/typora-user-images/image-20231201144119343.png\" alt=\"image-20231201144119343\"></p>\n<p>服务熔断一般有三种状态:</p>\n<ul>\n<li><p>熔断关闭状态(Closed)：  服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制 </p>\n</li>\n<li><p>熔断开启状态（Open）：  后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法 </p>\n</li>\n<li><p>半熔断状态（Half-Open）\t：  尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态;如果成功率仍旧很低，则重新进入熔断关闭状态。</p>\n</li>\n<li><p><strong>降级</strong></p>\n</li>\n</ul>\n<p>降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案。</p>\n<p><img src=\"/typora-user-images/image-20231201153117052.png\" alt=\"image-20231201153117052\"></p>\n<p><strong>常见的容错组件</strong></p>\n<p><strong>Hystrix</strong><br>Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止 级联失败，从而提升系统的可用性与容错性。</p>\n<p><strong>Resilience4J</strong><br>Resilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推 荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x&#x2F;2.x，而且监控也支持和 prometheus等多款主流产品进行整合。</p>\n<p><strong>Sentinel</strong><br>Sentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定。 下面是三个组件在各方面的对比:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sentinel</th>\n<th>Hystrix</th>\n<th>Resilience4J</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隔离策略</td>\n<td>信号量隔离（并发线程数限流）</td>\n<td>线程池隔离&#x2F;信号量隔离</td>\n<td>信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间、异常比率、异常数</td>\n<td>基于异常比率</td>\n<td>基于异常比率、响应时间</td>\n</tr>\n<tr>\n<td>实时统计实现</td>\n<td>活动窗口（LeapArray）</td>\n<td>滑动窗口（基于RxJava）</td>\n<td>Ring Bit Buffer</td>\n</tr>\n<tr>\n<td>动态规则配置</td>\n<td>支持多数据源</td>\n<td>支持多数据源</td>\n<td>有限支持</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于QPS,支持基于调用关系的限流</td>\n<td>不支持</td>\n<td>Rate Limiter</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持预热模式、匀速器模式、预热排队模式</td>\n<td>不支持</td>\n<td>简单的Rate Limiter模式</td>\n</tr>\n<tr>\n<td>系统自适应保护</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td>\n<td>简单的监控查 看</td>\n<td>不提供控制台，可对接其它监控系统</td>\n</tr>\n</tbody></table>\n<h2 id=\"Sentinel入门\"><a href=\"#Sentinel入门\" class=\"headerlink\" title=\"Sentinel入门\"></a>Sentinel入门</h2><h3 id=\"什么是Sentinel\"><a href=\"#什么是Sentinel\" class=\"headerlink\" title=\"什么是Sentinel\"></a>什么是Sentinel</h3><p>Sentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于<strong>服务容错</strong>的综合性解决方案。它以流量 为切入点, 从<strong>流量控制、熔断降级、系统负载保护</strong>等多个维度来保护服务的稳定性。</p>\n<p>Sentinel具有以下特征:</p>\n<p>Sentinel 具有以下特征:</p>\n<p>**丰富的应用场景 :**Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景, 例如秒杀(即 突发流量控制在系统容量可以承受的范围)、消息削峰填谷、集群流量控制、实时熔断下游不可用 应用等。<br>完备的实时监控:Sentinel 提供了实时的监控功能。通过控制台可以看到接入应用的单台机器秒 级数据, 甚至 500 台以下规模的集群的汇总运行情况。<br><strong>广泛的开源生态</strong>:Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块, 例如与 Spring Cloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p>\n<p>**完善的 SPI 扩展点:**Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快 速地定制逻辑。例如定制规则管理、适配动态数据源等。</p>\n<p><strong>Sentinel 分为两个部分:</strong></p>\n<ul>\n<li>核心库(Java 客户端)不依赖任何框架&#x2F;库,能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F; Spring Cloud 等框架也有较好的支持。</li>\n<li>控制台(Dashboard)基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等 应用容器。</li>\n</ul>\n<h3 id=\"微服务集成Sentinel\"><a href=\"#微服务集成Sentinel\" class=\"headerlink\" title=\"微服务集成Sentinel\"></a>微服务集成Sentinel</h3><p>为微服务集成Sentinel非常简单, 只需要加入Sentinel的依赖即可</p>\n<p><strong>1、在pom.xml中加入下面依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、application.yml 配置sentinel</strong><br><strong><code>注意：yml配置client-ip 是本地ip才行</code></strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">            <span class=\"attr\">transport:</span></span><br><span class=\"line\">                <span class=\"attr\">dashboard:</span> <span class=\"number\">192.168</span><span class=\"number\">.32</span><span class=\"number\">.131</span><span class=\"string\">:8858</span></span><br><span class=\"line\">                <span class=\"attr\">client-ip:</span> <span class=\"number\">192.168</span><span class=\"number\">.32</span><span class=\"number\">.1</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span> <span class=\"number\">8719</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>3、编写一个Controller测试使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装Sentinel控制台\"><a href=\"#安装Sentinel控制台\" class=\"headerlink\" title=\"安装Sentinel控制台\"></a>安装Sentinel控制台</h3><p>Sentinel 提供一个轻量级的控制台, 它提供机器发现、单机资源实时监控以及规则管理等功能。</p>\n<p><strong>1、jar包方式安装</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载jar包,解压到文件夹 https://github.com/alibaba/Sentinel/releases </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">启动：</span><br><span class=\"line\"># 直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)</span><br><span class=\"line\">java -Dserver.port=8858 -Dcsp.sentinel.dashboard.server=localhost:8858 - Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.1.jar </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、docker方式安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//拉去sentinel镜像</span><br><span class=\"line\">docker pull bladex/sentinel-dashboard:1.8.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//启动容器</span><br><span class=\"line\">docker run --name sentinel  -d -p 8858:8858 -p 8719:8719 -d bladex/sentinel-dashboard:1.8.1 -e username=sentinel -e password=sentinel -e server=localhost:8858</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问localhost:8858 进入控制台 ( 默认用户名密码是 sentinel&#x2F;sentinel )</p>\n<p>注意：重启后还是看不到自己注册接口服务？</p>\n<p><strong>原因：Sentinel是 懒加载机制所以呢，需要访问一下接口即可再去访问Sentinel 就有数据了</strong></p>\n<p><strong>补充:了解控制台的使用原理</strong></p>\n<p>Sentinel的控制台其实就是一个SpringBoot编写的程序。我们需要将我们的微服务程序注册到控制台上, 即在微服务中指定控制台的地址, 并且还要开启一个跟控制台传递数据的端口, 控制台也可以通过此端口 调用微服务中的监控程序获取微服务的各种信息。</p>\n<p><img src=\"/typora-user-images/image-20240219114233026.png\" alt=\"image-20240219114233026\"></p>\n<p><img src=\"/typora-user-images/image-20240219113719157.png\" alt=\"image-20240219113719157\"></p>\n<h2 id=\"实现一个接口的限流\"><a href=\"#实现一个接口的限流\" class=\"headerlink\" title=\"实现一个接口的限流\"></a>实现一个接口的限流</h2><p>1、通过控制台为message1添加一个流控规则</p>\n<p><img src=\"/typora-user-images/image-20240219114343151.png\" alt=\"image-20240219114343151\"></p>\n<p>2、通过控制台快速频繁访问, 观察效果</p>\n<p><img src=\"/typora-user-images/image-20240219114515952.png\" alt=\"image-20240219114515952\"></p>\n<h2 id=\"Sentinel的概念和功能\"><a href=\"#Sentinel的概念和功能\" class=\"headerlink\" title=\"Sentinel的概念和功能\"></a>Sentinel的概念和功能</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>资源</strong></li>\n</ul>\n<p>资源就是Sentinel要保护的东西</p>\n<p>资源是Sentinel的关键概念，它可以是Java应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码</p>\n<blockquote>\n<p>上述案例中message1方法就可以认为是一个资源</p>\n</blockquote>\n<ul>\n<li><strong>规则</strong></li>\n</ul>\n<p>规则就是用来定义如何保护资源的</p>\n<p>作为资源之上，定义以什么样的方式保护资源，主要包括流量控制规则、熔断降级规则以及系统保护规则。</p>\n<blockquote>\n<p>上述案例中message1资源设置一种流控规则，限制了进入message1的流量</p>\n</blockquote>\n<h3 id=\"重要功能\"><a href=\"#重要功能\" class=\"headerlink\" title=\"重要功能\"></a>重要功能</h3><p><img src=\"/typora-user-images/image-20240219144606520.png\" alt=\"image-20240219144606520\"></p>\n<p>Sentinel的主要功能就是容错,主要体现为下面这三个:</p>\n<p><strong>1、流量控制</strong><br>流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是 随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。 Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状。</p>\n<p><strong>2、熔断降级</strong></p>\n<p>当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则<br>对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。</p>\n<p><strong>Sentinel 对这个问题采取了两种手段:</strong></p>\n<p>(1)通过并发线程数进行限制</p>\n<p>Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。当某个资源 出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆 积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的 线程完成任务后才开始继续接收请求。</p>\n<p>(2)通过响应时间对资源进行降级</p>\n<p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。 当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的 时间窗口之后才重新恢复。</p>\n<p><strong>Sentinel 和 Hystrix 的区别</strong></p>\n<blockquote>\n<p>两者的原则是一致的, 都是当一个资源出现问题时, 让其快速失败, 不要波及到其它服务 但是在限制的手段上, 确采取了完全不一样的方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hystrix 采用的是线程池隔离的方式, 优点是做到了资源之间的隔离, 缺点是增加了线程 切换的成本。 </span><br><span class=\"line\"></span><br><span class=\"line\">Sentinel 采用的是通过并发线程的数量和响应时间来对资源做限制。 </span><br></pre></td></tr></table></figure></blockquote>\n<p><strong>3、系统负载保护</strong></p>\n<p>Sentinel 同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让 请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其 它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保 护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请 求。总之一句话: 我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功 能。</p>\n<h2 id=\"Sentinel规则\"><a href=\"#Sentinel规则\" class=\"headerlink\" title=\"Sentinel规则\"></a>Sentinel规则</h2><h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><p>流量控制，其原理是监控应用流量的QPS(每秒查询率) 或并发线程数等指标，当达到指定的阈值时 对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p>\n<p>第1步: 点击簇点链路，我们就可以看到访问过的接口地址，然后点击对应的流控按钮，进入流控规则配 置页面。新增流控规则界面如下:</p>\n<p><img src=\"/typora-user-images/image-20240219150634816.png\" alt=\"image-20240219150634816\"></p>\n<p>**资源名:**唯一名称，默认是请求路径，可自定义</p>\n<p>针对来源:指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制</p>\n<p><strong>阈值类型&#x2F;单机阈值:</strong></p>\n<ul>\n<li>QPS(每秒请求数量): 当调用该接口的QPS达到阈值的时候，进行限流</li>\n<li>线程数:当调用该接口的线程数达到阈值的时候，进行限流</li>\n</ul>\n<p>**是否集群:**暂不需要集群 接下来我们以QPS为例来研究限流规则的配置。</p>\n<h4 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h4><p>我们先做一个简单配置，设置阈值类型为QPS，单机阈值为3。即每秒请求量大于3的时候开始限流。</p>\n<p>接下来，在流控规则页面就可以看到这个配置</p>\n<p><img src=\"/typora-user-images/image-20240219150821657.png\" alt=\"image-20240219150821657\"></p>\n<p>然后快速访问 &#x2F;order&#x2F;message1 接口，观察效果。此时发现，当QPS &gt; 3的时候，服务就不能正常响 应，而是返回Blocked by Sentinel (flow limiting)结果。</p>\n<p><img src=\"/typora-user-images/image-20240219150910898.png\" alt=\"image-20240219150910898\"></p>\n<h4 id=\"配置流控模式\"><a href=\"#配置流控模式\" class=\"headerlink\" title=\"配置流控模式\"></a>配置流控模式</h4><p><img src=\"/typora-user-images/image-20240219151031448.png\" alt=\"image-20240219151031448\"></p>\n<p>sentinel共有三种流控模式，分别是:</p>\n<p><strong>直接</strong>(默认):接口达到限流条件时，开启限流</p>\n<p><strong>关联</strong>:当关联的资源达到限流条件时，开启限流 [适合做应用让步]</p>\n<p><strong>链路</strong>:当从某个接口过来的资源达到限流条件时，开启限流</p>\n<p>下面呢分别演示三种模式:</p>\n<p><strong>直接流控模式</strong></p>\n<p>直接流控模式是最简单的模式，当指定的接口达到限流条件时开启限流。上面案例使用的就是直接流控模式。</p>\n<p><strong>关联流控模式</strong></p>\n<p>关联流控模式指的是，当指定接口关联的接口达到限流条件时，开启对指定接口开启限流。</p>\n<p>第1步:配置限流规则, 将流控模式设置为关联，关联资源设置为的 &#x2F;sentinel&#x2F;message2。</p>\n<p><img src=\"/typora-user-images/image-20240219151212695.png\" alt=\"image-20240219151212695\"></p>\n<p>第2步:通过postman软件向&#x2F;sentinel&#x2F;message2连续发送请求，注意QPS一定要大于3</p>\n<p><img src=\"/typora-user-images/image-20240219152607457.png\" alt=\"image-20240219152607457\"></p>\n<p>第3步:访问&#x2F;sentinel&#x2F;message1,会发现已经被限流</p>\n<p><img src=\"/typora-user-images/image-20240219152638390.png\" alt=\"image-20240219152638390\"></p>\n<p><strong>链路流控模式</strong></p>\n<p>链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流。它的功能有点类似于针对 来源配置项，区别在于:<strong>针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度 更细。</strong></p>\n<p>第1步: 编写一个service，在里面添加一个方法message</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(&quot;message&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">message</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第2步: 在Controller中声明两个方法，分别调用service中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestSentinelMessage3ServiceImpl testSentinelMessage3Service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        testSentinelMessage3Service.message();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        testSentinelMessage3Service.message();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/typora-user-images/image-20240219154032740.png\" alt=\"image-20240219154032740\"></p>\n<p> 分别通过 &#x2F;sentinel&#x2F;message1 和 &#x2F;sentinel&#x2F;message2 访问, 发现2没问题, 1的被限流了</p>\n<h4 id=\"配置流控效果\"><a href=\"#配置流控效果\" class=\"headerlink\" title=\"配置流控效果\"></a>配置流控效果</h4><p><strong>快速失败(默认):</strong> 直接失败，抛出异常，不做任何额外的处理，是最简单的效果</p>\n<p>**Warm Up:**它从开始阈值到最大QPS阈值会有一个缓冲阶段，一开始的阈值是最大QPS阈值的 1&#x2F;3，然后慢慢增长，直到最大阈值，适用于将<br>突然增大的流量转换为缓步增长的场景。</p>\n<p>**排队等待:**让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待; 它还会让设 置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃</p>\n<h3 id=\"降级规则-降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件\"><a href=\"#降级规则-降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件\" class=\"headerlink\" title=\"降级规则 降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件:\"></a>降级规则 降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件:</h3><h4 id=\"慢调用比例-SLOW-REQUEST-RATIO\"><a href=\"#慢调用比例-SLOW-REQUEST-RATIO\" class=\"headerlink\" title=\"慢调用比例 (SLOW_REQUEST_RATIO)\"></a>慢调用比例 (SLOW_REQUEST_RATIO)</h4><p>选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。</p>\n<p>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。（默认1秒内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。）</p>\n<blockquote>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p>\n</blockquote>\n<ul>\n<li>最大 RT（响应时间）：200意思是 在200毫秒处理完这个请求</li>\n<li>比例阀值：0~1之间。</li>\n<li><code>慢调用比例</code>：例如1秒内请求10次，8次是慢请求，则慢请求比例 0.8</li>\n<li>java 接口响应时间为睡眠400毫秒</li>\n</ul>\n<p>根据上述可以看出触发必要条件后才会降级：</p>\n<ol>\n<li>请求时间 &gt; RT</li>\n<li>单位统计时长（statIntervalMs）&gt; 最小请求数</li>\n<li>慢比例调用比例 &gt; 比例阀值（maxSlowRequestRatio）</li>\n<li>触发熔断后进入探测恢复状态（HALF-OPEN 状态），下一个请求响应时间小于设置的慢调用 RT 则结束熔断否则会再次被熔断</li>\n</ol>\n<p>如下是我的一次降级调用，接口中休眠400毫秒，1s内连续请求5次后</p>\n<p><img src=\"/typora-user-images/image-20240220094227461.png\" alt=\"image-20240220094227461\"></p>\n<p>如下是我多次往复测试，不太好测试。需要参考 <code>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</code></p>\n<p>请求被熔断</p>\n<p><img src=\"/typora-user-images/image-20240220095107292.png\" alt=\"image-20240220095107292\"></p>\n<h4 id=\"异常比例-ERROR-RATIO\"><a href=\"#异常比例-ERROR-RATIO\" class=\"headerlink\" title=\"异常比例 (ERROR_RATIO)\"></a>异常比例 (ERROR_RATIO)</h4><p>当单位统计时长（statIntervalMs 以 s 为单位）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<p>异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p>\n<p>同慢调用比例相似，逻辑相似</p>\n<p><img src=\"/typora-user-images/image-20240220095645324.png\" alt=\"image-20240220095645324\"></p>\n<p><img src=\"/typora-user-images/image-20240220101010503.png\" alt=\"image-20240220101010503\"></p>\n<h4 id=\"异常数-ERROR-COUNT\"><a href=\"#异常数-ERROR-COUNT\" class=\"headerlink\" title=\"异常数 (ERROR_COUNT)\"></a>异常数 (ERROR_COUNT)</h4><p>当单位统计时长（1s）内的异常数目超过阈值之后会自动进行熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<p>注意由于统计时间窗口是分钟级别的，若timeWindow小于 60s，则结束熔断状态后仍可能再进入熔断状态；</p>\n<p>同慢调用比例相似，逻辑相似</p>\n<p><img src=\"/typora-user-images/image-20240220101429844.png\" alt=\"image-20240220101429844\"></p>\n<p>代码中未传递参数时可以看出异常概率应该在50%左右，从图中前部分可以看出，平均请求未出现熔断，因为请求间隔时间较长，当后半部分，1秒内多次请求时出现熔断了，老版本是以分钟来统计的，新版是秒为单位</p>\n<p><img src=\"/typora-user-images/image-20240220101701432.png\" alt=\"image-20240220101701432\"></p>\n<h3 id=\"热点规则\"><a href=\"#热点规则\" class=\"headerlink\" title=\"热点规则\"></a>热点规则</h3><p>热点参数流控规则是一种更细粒度的流控规则, 它允许将规则具体到参数上。</p>\n<p><strong>热点规则简单使用</strong></p>\n<p>1、编写代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sentinel/message3&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(&quot;message3&quot;)</span><span class=\"comment\">//注意这里必须使用这个注解标识,热点规则不生效 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">message3</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name + age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第2步: 配置热点规则</p>\n<p><img src=\"/typora-user-images/image-20240220102332812.png\" alt=\"image-20240220102332812\"></p>\n<p>第3步: 分别用两个参数访问,会发现只对第一个参数限流了</p>\n<p><img src=\"/typora-user-images/image-20240220102431979.png\" alt=\"image-20240220102431979\"></p>\n<p><img src=\"/typora-user-images/image-20240220102457440.png\" alt=\"image-20240220102457440\"></p>\n<p><strong>热点规则增强使用</strong></p>\n<p>参数例外项允许对一个参数的具体值进行流控</p>\n<p>编辑刚才定义的规则,增加参数例外项</p>\n<p><img src=\"/typora-user-images/image-20240220102621265.png\" alt=\"image-20240220102621265\"></p>\n<h3 id=\"授权规则\"><a href=\"#授权规则\" class=\"headerlink\" title=\"授权规则\"></a>授权规则</h3><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源 访问控制的功能。来源访问控制根据资源的请求来源(origin)限制资源是否通过:</p>\n<p>若配置白名单，则只有请求来源位于白名单内时才可通过;<br>若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过。</p>\n<p><img src=\"/typora-user-images/image-20240220102752041.png\" alt=\"image-20240220102752041\"></p>\n<p>上面的资源名和授权类型不难理解，但是流控应用怎么填写呢?</p>\n<blockquote>\n<p>其实这个位置要填写的是来源标识，Sentinel提供了 RequestOriginParser 接口来处理来源。 只要Sentinel保护的接口资源被访问，Sentinel就会调用 RequestOriginParser 的实现类去解析<br>访问来源。</p>\n</blockquote>\n<p>第1步: 自定义来源处理规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestOriginParserDefinition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RequestOriginParser</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">parseOrigin</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">serviceName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;serviceName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serviceName;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>第2步: 授权规则配置<br>这个配置的意思是只有serviceName&#x3D;pc不能访问(黑名单)</p>\n<p><img src=\"/typora-user-images/image-20240220103006353.png\" alt=\"image-20240220103006353\"></p>\n<p>第3步：访问 <a href=\"http://localhost:18001/sentinel/message3?serviceName=pc\">http://localhost:18001/sentinel/message3?serviceName=pc</a>  观察结果</p>\n<p><img src=\"/typora-user-images/image-20240220103217414.png\" alt=\"image-20240220103217414\"></p>\n<h3 id=\"系统规则\"><a href=\"#系统规则\" class=\"headerlink\" title=\"系统规则\"></a>系统规则</h3><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 Load、RT、入口 QPS 、CPU 使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效。</p>\n<ul>\n<li>Load(仅对 Linux&#x2F;Unix-like 机器生效):当系统 load1 超过阈值，且系统当前的并发线程数超过 系统容量时才会触发系统保护。系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般 是 CPU cores * 2.5。</li>\n<li>RT:当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>\n<li>线程数:当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li>入口 QPS:当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>\n<li>CPU使用率:当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护。</li>\n</ul>\n<p><strong>扩展: 自定义异常返回</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异常处理页面</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionHandlerPage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BlockExceptionHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//BlockException 异常接口,包含Sentinel的五个异常</span></span><br><span class=\"line\">    <span class=\"comment\">// FlowException 限流异常</span></span><br><span class=\"line\">    <span class=\"comment\">// DegradeException 降级异常</span></span><br><span class=\"line\">    <span class=\"comment\">// ParamFlowException 参数限流异常</span></span><br><span class=\"line\">    <span class=\"comment\">// AuthorityException 授权异常</span></span><br><span class=\"line\">    <span class=\"comment\">// SystemBlockException 系统负载异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, BlockException ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> FlowException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;限流了&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> DegradeException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;降级了&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> ParamFlowException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;热点参数限流&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> SystemBlockException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;系统规则（负载/...不满足要求）&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> AuthorityException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;授权规则不通过&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// http状态码</span></span><br><span class=\"line\">        response.setStatus(<span class=\"number\">500</span>);</span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// spring mvc自带的json操作工具，叫jackson</span></span><br><span class=\"line\">        <span class=\"comment\">//返回json数据</span></span><br><span class=\"line\">        response.setStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class=\"line\">        <span class=\"comment\">//springmvc 的一个json转换类 （jackson）</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValue(response.getWriter(), msg);</span><br><span class=\"line\">        <span class=\"comment\">//重定向</span></span><br><span class=\"line\">        <span class=\"comment\">//response.sendRedirect(&quot;http://www.baidu.com&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意:最近在学习SpringCloudAlibaba时候，需要sentinel进行流量管理控制，在配置统一处理返回异常时候，实现 UrlBlockHandler 这个接口直接爆红，原因是我使用的sentinel是2.2.5.RELEASE，官方改成了BlockExceptionHandler这个接口与实现</p>\n<h2 id=\"SentinelResource的使用\"><a href=\"#SentinelResource的使用\" class=\"headerlink\" title=\"@SentinelResource的使用\"></a>@SentinelResource的使用</h2><p>在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护。同时还能<br>通过@SentinelResource来指定出现异常时的处理策略。</p>\n<p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>资源名称</td>\n</tr>\n<tr>\n<td>entryType</td>\n<td>entry类型，标记流量的方向，取值IN&#x2F;OUT，默认是OUT</td>\n</tr>\n<tr>\n<td>blockHandler</td>\n<td>处理BlockException的函数名称,函数要求:1. 必须是 public2.返回类型 参数与原方法一致3. 默认需和原方在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法。</td>\n</tr>\n<tr>\n<td>blockHandlerClass</td>\n<td>存放blockHandler的类,对应的处理函数必须static修饰</td>\n</tr>\n<tr>\n<td>fallback</td>\n<td>用于在抛出异常的时候提供fallback处理逻辑。fallback函数可以针对所 有类型的异常(除了 exceptionsToIgnore 里面排除掉的异常类型)进 行处理。函数要求:1. 返回类型与原方法一致 2. 参数类型需要和原方法相匹配3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法。</td>\n</tr>\n<tr>\n<td>fallbackClass</td>\n<td>存放fallback的类。对应的处理函数必须static修饰。</td>\n</tr>\n<tr>\n<td>defaultFallback</td>\n<td>用于通用的 fallback 逻辑。默认fallback函数可以针对所有类型的异常进 行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。函 数要求:1. 返回类型与原方法一致 2. 方法参数列表为空，或者有一个 Throwable 类型的参数。3. 默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法。</td>\n</tr>\n<tr>\n<td>exceptionsToIgnore</td>\n<td>指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入 fallback逻辑，而是原样抛出</td>\n</tr>\n<tr>\n<td>exceptionsToTrace</td>\n<td>需要trace的异常</td>\n</tr>\n</tbody></table>\n<p><strong>定义限流和降级后的处理方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImpl</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SentinelResource(</span></span><br><span class=\"line\"><span class=\"meta\">                value = &quot;message&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                blockHandler = &quot;blockHandler&quot;,//指定发生BlockException时进入的方法</span></span><br><span class=\"line\"><span class=\"meta\">                fallback = &quot;fallback&quot;//指定发生Throwable时进入的方法</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">message</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;message&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//BlockException时进入的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">blockHandler</span><span class=\"params\">(BlockException ex)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口被限流或者降级了...&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Throwable时进入的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">fallback</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口发生异常了...&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>将限流和降级方法外置到单独的类中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(</span></span><br><span class=\"line\"><span class=\"meta\">            value = &quot;message&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            blockHandlerClass = TestSentinelMessage3ServiceImplBlockHandlerClass.class,</span></span><br><span class=\"line\"><span class=\"meta\">            blockHandler = &quot;blockHandler&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            fallbackClass = TestSentinelMessage3ServiceImplFallbackClass.class,</span></span><br><span class=\"line\"><span class=\"meta\">            fallback = &quot;fallback&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message4&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImplBlockHandlerClass</span> &#123; <span class=\"comment\">//注意这里必须使用static修饰方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">blockHandler</span><span class=\"params\">(BlockException ex)</span> &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, ex);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口被限流或者降级了...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImplFallbackClass</span> &#123; <span class=\"comment\">//注意这里必须使用static修饰方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">fallback</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, throwable);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口发生异常了...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Sentinel规则持久化\"><a href=\"#Sentinel规则持久化\" class=\"headerlink\" title=\"Sentinel规则持久化\"></a>Sentinel规则持久化</h2><p>通过前面的讲解，我们已经知道，可以通过Dashboard来为每个Sentinel客户端设置各种各样的规 则，但是这里有一个问题，就是这些规则默认是存放在内存中，极不稳定，所以需要将其持久化。</p>\n<h3 id=\"Sentinel规则的推送有下面三种模式\"><a href=\"#Sentinel规则的推送有下面三种模式\" class=\"headerlink\" title=\"Sentinel规则的推送有下面三种模式:\"></a>Sentinel规则的推送有下面三种模式:</h3><table>\n<thead>\n<tr>\n<th>推送模式</th>\n<th>说明</th>\n<th>有点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始模式</td>\n<td>API将规则推送至客户端并直接更新到内存中</td>\n<td>简单，无任何依赖</td>\n<td>不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境</td>\n</tr>\n<tr>\n<td>Pull模式</td>\n<td>扩展写数据源（WritableDataSource），客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是RDBMS、文件等</td>\n<td>简单，无任何依赖；规则持久化</td>\n<td>不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。</td>\n</tr>\n<tr>\n<td>Push模式</td>\n<td>扩展读数据源（ReadableDataSource），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用Nacos、Zookeeper等配置中心。这种方式有更好的实时性和一致性保证。生产环境下一般采用push模式的数据源。</td>\n<td>规则持久化；一致性；快速</td>\n<td>引入第三方依赖</td>\n</tr>\n</tbody></table>\n<h4 id=\"原始模式\"><a href=\"#原始模式\" class=\"headerlink\" title=\"原始模式\"></a>原始模式</h4><p>如果不做任何修改，Dashboard的推送规则方式是通过API将规则推送至客户端并直接更新到内存中：</p>\n<p><img src=\"/typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png\" alt=\"img\"></p>\n<p>这种做法的好处是简单，无依赖；坏处是应用重启规则就会消失，仅用于简单测试，不能用于生产环境。</p>\n<h4 id=\"拉模式\"><a href=\"#拉模式\" class=\"headerlink\" title=\"拉模式\"></a>拉模式</h4><p>pull模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至transport的WritableDataSourceRegistry中。</p>\n<p><img src=\"/typora-user-images/afb25fa106bada4b37da64e902060269.png\" alt=\"img\"></p>\n<p>首先Sentinel控制台通过API将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。使用 pull模式的数据源时一般不需要对Sentinel控制台进行改造。这种实现方法好处是简单，坏处是无法保证监控数据的一致性。</p>\n<p>具体使用方式如下：</p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-extension<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>实现InitFunc接口，在init中处理DataSource初始化逻辑，并利用spi机制实现加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileDataSourceInit</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitFunc</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">RULE_FILE_PATH</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;user.home&quot;</span>) + File.separator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FLOW_RULE_FILE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;FlowRule.json&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//处理流控规则逻辑</span></span><br><span class=\"line\">        dealFlowRules();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dealFlowRules</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ruleFilePath</span> <span class=\"operator\">=</span> RULE_FILE_PATH + FLOW_RULE_FILE_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建流控规则的可读数据源</span></span><br><span class=\"line\">        <span class=\"type\">FileRefreshableDataSource</span> <span class=\"variable\">flowRuleRDS</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileRefreshableDataSource</span>(</span><br><span class=\"line\">                ruleFilePath, source -&gt; JSON.parseObject((String) source,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">TypeReference</span>&lt;List&lt;FlowRule&gt;&gt;() &#123;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将可读数据源注册至FlowRuleManager 这样当规则文件发生变化时，就会更新规则到内存</span></span><br><span class=\"line\">        FlowRuleManager.register2Property(flowRuleRDS.getProperty());</span><br><span class=\"line\"></span><br><span class=\"line\">        WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWritableDataSource</span>&lt;&gt;(</span><br><span class=\"line\">                ruleFilePath, <span class=\"built_in\">this</span>::encodeJson</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将可写数据源注册至 transport 模块的 WritableDataSourceRegistry 中.</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样收到控制台推送的规则时，Sentinel 会先更新到内存，然后将规则写入到文件中.</span></span><br><span class=\"line\">        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T&gt; String <span class=\"title function_\">encodeJson</span><span class=\"params\">(T t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON.toJSONString(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在META-INF&#x2F;services目录下创建com.alibaba.csp.sentinel.init.InitFunc，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.lison.springcloudservice.config.sentinel.FileDataSourceInit</span><br></pre></td></tr></table></figure>\n\n<p>这样当在Dashboard中修改了配置后，Dashboard会调用客户端的接口修改客户端内存中的值，同时将配置写入文件FlowRule.json中，这样操作的话规则是实时生效的，如果是直接修改FlowRule.json的内容，这样需要等定时任务3秒后执行才能读到最新的规则。</p>\n<h4 id=\"推模式\"><a href=\"#推模式\" class=\"headerlink\" title=\"推模式\"></a>推模式</h4><p>生产环境下一般更常用的是push模式的数据源。对于push模式的数据源，如远程配置中心（ZooKeeper, Nacos, Apollo等等），推送的操作不应由Sentinel客户端进行，而应该经控制台统一进行管理，直接进行推送，数据源仅负责获取配置中心推送的配置并更新到本地。因此推送规则正确做法应该是配置中心控制台&#x2F;Sentinel控制台 → 配置中心 → Sentinel数据源 → Sentinel，而不是经Sentinel数据源推送至配置中心。这样的流程就非常清晰了：</p>\n<p><img src=\"/typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png\" alt=\"img\"></p>\n<h3 id=\"基于Nacos配置中心控制台实现推送\"><a href=\"#基于Nacos配置中心控制台实现推送\" class=\"headerlink\" title=\"基于Nacos配置中心控制台实现推送\"></a>基于Nacos配置中心控制台实现推送</h3><p>配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel</p>\n<p>引入依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置文件增加nacos的数据源：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8080</span></span><br><span class=\"line\">      <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">flow-ds:</span></span><br><span class=\"line\">          <span class=\"attr\">nacos:</span></span><br><span class=\"line\">            <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">            <span class=\"attr\">dataId:</span> <span class=\"string\">$&#123;spring.application.name&#125;-flow</span></span><br><span class=\"line\">            <span class=\"attr\">groupId:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">            <span class=\"attr\">data-type:</span> <span class=\"string\">json</span></span><br><span class=\"line\">            <span class=\"attr\">rule-type:</span> <span class=\"string\">flow</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样直接在Nacos控制台修改规则就能实时生效了，缺点是直接在Sentinel Dashboard中修改规则配置，配置中心的配置不会发生变化。</p>\n<p>思考：如何实现将通过sentinel控制台设置的规则直接持久化到nacos配置中心？</p>\n<p>方法一：微服务增加基于Nacos的写数据源（WritableDataSource），发布配置到nacos配置中心。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心逻辑： 实现WritableDataSource#write方法，发布配置到nacos配置中心</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(T t)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        configService.publishConfig(dataId, groupId, <span class=\"built_in\">this</span>.configEncoder.convert(t), ConfigType.JSON.getType());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>方法二：Sentinel Dashboard监听Nacos配置的变化，如发生变化就更新本地缓存。在Sentinel Dashboard端新增或修改规则配置在保存到内存的同时，直接发布配置到nacos配置中心；Sentinel Dashboard直接从nacos拉取所有的规则配置。Sentinel Dashboard和微服务不直接通信，而是通过nacos配置中心获取到配置的变更，也就是下面的基于Sentinel控制台实现推送。</p>\n<p>AbstractDataSourceProperties<br>SentinelProperties内部提供了TreeMap类型的datasource属性用于配置数据源信息。</p>\n<blockquote>\n<p>com.alibaba.cloud.sentinel.datasource.config.AbstractDataSourceProperties#postRegister</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postRegister</span><span class=\"params\">(AbstractDataSource dataSource)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.getRuleType()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FLOW:</span><br><span class=\"line\">        FlowRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DEGRADE:</span><br><span class=\"line\">        DegradeRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> PARAM_FLOW:</span><br><span class=\"line\">        ParamFlowRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SYSTEM:</span><br><span class=\"line\">        SystemRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> AUTHORITY:</span><br><span class=\"line\">        AuthorityRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GW_FLOW:</span><br><span class=\"line\">        GatewayRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GW_API_GROUP:</span><br><span class=\"line\">        GatewayApiDefinitionManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>NacosDataSource从Nacos读取配置</strong></p>\n<p>NacosDataSource主要负责与Nacos进行通信，实时获取Nacos的配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">NacosDataSource</span><span class=\"params\">(<span class=\"keyword\">final</span> Properties properties, <span class=\"keyword\">final</span> String groupId, <span class=\"keyword\">final</span> String dataId,</span></span><br><span class=\"line\"><span class=\"params\">                       Converter&lt;String, T&gt; parser)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(parser);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtil.isBlank(groupId) || StringUtil.isBlank(dataId)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(String.format(<span class=\"string\">&quot;Bad argument: groupId=[%s], dataId=[%s]&quot;</span>,</span><br><span class=\"line\">            groupId, dataId));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AssertUtil.notNull(properties, <span class=\"string\">&quot;Nacos properties must not be null, you could put some keys from PropertyKeyConst&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.groupId = groupId;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dataId = dataId;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.properties = properties;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.configListener = <span class=\"keyword\">new</span> <span class=\"title class_\">Listener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Executor <span class=\"title function_\">getExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pool;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receiveConfigInfo</span><span class=\"params\">(<span class=\"keyword\">final</span> String configInfo)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 配置发送变更</span></span><br><span class=\"line\">            RecordLog.info(<span class=\"string\">&quot;[NacosDataSource] New property value received for (properties: &#123;&#125;) (dataId: &#123;&#125;, groupId: &#123;&#125;): &#123;&#125;&quot;</span>,</span><br><span class=\"line\">                properties, dataId, groupId, configInfo);</span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> NacosDataSource.<span class=\"built_in\">this</span>.parser.convert(configInfo);</span><br><span class=\"line\">            <span class=\"comment\">// Update the new value to the property.</span></span><br><span class=\"line\">            getProperty().updateValue(newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 监听配置</span></span><br><span class=\"line\">    initNacosListener();</span><br><span class=\"line\">    <span class=\"comment\">// 第一次读取配置</span></span><br><span class=\"line\">    loadInitialConfig();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadInitialConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> loadConfig();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            RecordLog.warn(<span class=\"string\">&quot;[NacosDataSource] WARN: initial config is null, you may have to check your data source&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getProperty().updateValue(newValue);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        RecordLog.warn(<span class=\"string\">&quot;[NacosDataSource] Error when loading initial config&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initNacosListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configService = NacosFactory.createConfigService(<span class=\"built_in\">this</span>.properties);</span><br><span class=\"line\">        <span class=\"comment\">// Add config listener.</span></span><br><span class=\"line\">        configService.addListener(dataId, groupId, configListener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        RecordLog.warn(<span class=\"string\">&quot;[NacosDataSource] Error occurred when initializing Nacos data source&quot;</span>, e);</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>SentinelDataSourceHandler注入NacosDataSource</strong><br>SentinelAutoConfiguration中注入了SentinelDataSourceHandler。</p>\n<p>SentinelDataSourceHandler负责遍历配置文件中配置的DataSource，然后注入到spring容器中。</p>\n<blockquote>\n<p>com.alibaba.cloud.sentinel.custom.SentinelDataSourceHandler#afterSingletonsInstantiated</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSingletonsInstantiated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sentinelProperties.getDatasource().forEach((dataSourceName, dataSourceProperties) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;String&gt; validFields = dataSourceProperties.getValidField();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validFields.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;[Sentinel Starter] DataSource &quot;</span> + dataSourceName + <span class=\"string\">&quot; multi datasource active and won&#x27;t loaded: &quot;</span> + dataSourceProperties.getValidField());</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">AbstractDataSourceProperties</span> <span class=\"variable\">abstractDataSourceProperties</span> <span class=\"operator\">=</span> dataSourceProperties.getValidDataSourceProperties();</span><br><span class=\"line\">            abstractDataSourceProperties.setEnv(<span class=\"built_in\">this</span>.env);</span><br><span class=\"line\">            abstractDataSourceProperties.preCheck(dataSourceName);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.registerBean(abstractDataSourceProperties, dataSourceName + <span class=\"string\">&quot;-sentinel-&quot;</span> + (String)validFields.get(<span class=\"number\">0</span>) + <span class=\"string\">&quot;-datasource&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var5) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;[Sentinel Starter] DataSource &quot;</span> + dataSourceName + <span class=\"string\">&quot; build error: &quot;</span> + var5.getMessage(), var5);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基于Sentinel控制台实现推送<br>配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel</p>\n<p>从Sentinel1.4.0开始，Sentinel控制台提供DynamicRulePublisher和DynamicRuleProvider接口用于实现应用维度的规则推送和拉取：</p>\n<ul>\n<li>DynamicRuleProvider: 拉取规则</li>\n<li>DynamicRulePublisher: 推送规则</li>\n</ul>\n<p>可以参考Sentinel Dashboard test包下的流控规则拉取和推送的实现逻辑：</p>\n<p><img src=\"/typora-user-images/image-20240220144907721.png\" alt=\"image-20240220144907721\"></p>\n<p>这里主要改造Dashboard端，客户端还是采用前面的配置。</p>\n<p>引入nacos的依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;<span class=\"number\">2.0</span><span class=\"number\">.3</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>NacosConfig负责注入一些最基本的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Eric Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.4.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; <span class=\"title function_\">flowRuleEntityEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON::toJSONString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; <span class=\"title function_\">flowRuleEntityDecoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s -&gt; JSON.parseArray(s, FlowRuleEntity.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigService <span class=\"title function_\">nacosConfigService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConfigFactory.createConfigService(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>FlowRuleNacosProvider负责从Nacos读取配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Eric Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.4.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowRuleNacosProvider</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DynamicRuleProvider</span>&lt;List&lt;FlowRuleEntity&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;FlowRuleEntity&gt; <span class=\"title function_\">getRules</span><span class=\"params\">(String appName)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rules</span> <span class=\"operator\">=</span> configService.getConfig(appName + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span><br><span class=\"line\">            NacosConfigUtil.GROUP_ID, <span class=\"number\">3000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtil.isEmpty(rules)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter.convert(rules);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>FlowRuleNacosPublisher负责将配置写入Nacos：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.util.AssertUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Eric Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.4.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowRuleNacosPublisher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DynamicRulePublisher</span>&lt;List&lt;FlowRuleEntity&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publish</span><span class=\"params\">(String app, List&lt;FlowRuleEntity&gt; rules)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        AssertUtil.notEmpty(app, <span class=\"string\">&quot;app name cannot be empty&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rules == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        configService.publishConfig(app + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span><br><span class=\"line\">            NacosConfigUtil.GROUP_ID, converter.convert(rules));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面都是新增的类，最后还需要在Dashboard查询和修改规则时进行修改，具体修改是在FlowControllerV2</p>\n<p><img src=\"/typora-user-images/image-20240221092028120.png\" alt=\"image-20240221092028120\"></p>\n<p>以 Nacos 为例，若希望使用 Nacos 作为动态规则配置中心，用户可以提取出相关的类，然后只需在 FlowControllerV2 中指定对应的 bean 即可开启 Nacos 适配。前端页面需要手动切换，或者修改前端路由配置（sidebar.html 流控规则路由从 dashboard.flowV1 改成 dashboard.flow 即可，注意簇点链路页面对话框需要自行改造）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>修改控制台源码实现流控规则持久化</strong></p>\n<p>接下来，参考以上官方提供的解决方案，我们来实际操作一下</p>\n<p><strong>1、改造代码</strong></p>\n<p>首先将pom中的sentinel-datasource-nacos中的scope去掉，将Nacos相关依赖引入到编译环境中来。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- for Nacos rule publisher sample --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240221091728143.png\" alt=\"image-20240221091728143\"></p>\n<p>将test目录下nacos动态规则实现的相关代码，复制到com.alibaba.csp.sentinel.dashboard.rule包下</p>\n<p><img src=\"/typora-user-images/image-20240221091837069.png\" alt=\"image-20240221091837069\"></p>\n<p>修改FlowControllerV2类，将动态规则发布及拉取的注入类，替换为flowRuleNacosProvider及flowRuleNacosPublisher。</p>\n<p><img src=\"/typora-user-images/image-20240221091441127.png\" alt=\"image-20240221091441127\"></p>\n<p><strong>2、改造页面</strong></p>\n<p>找到图中目录下的sidebar页面，将流控规则菜单中的dashboard.flowV1改为dashboard.flow。</p>\n<p><img src=\"/typora-user-images/image-20240221092353574.png\" alt=\"image-20240221092353574\"></p>\n<p><img src=\"/typora-user-images/image-20240221092419244.png\" alt=\"image-20240221092419244\"></p>\n<p><img src=\"/typora-user-images/image-20240221092834785.png\" alt=\"image-20240221092834785\"></p>\n<p>以流控规则测试，当在sentinel dashboard配置了流控规则，会在nacos配置中心生成对应的配置，这样客户端就能读取到这个流控规则配置了。</p>\n<p><img src=\"/typora-user-images/image-20240221093021265.png\" alt=\"image-20240221093021265\"></p>\n<p>spring-cloud-service.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;app&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;spring-cloud-service&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clusterConfig&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;acquireRefuseStrategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;clientOfflineTime&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;fallbackToLocalWhenFail&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;resourceTimeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;resourceTimeoutStrategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;sampleCount&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;thresholdType&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;windowIntervalMs&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clusterMode&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;controlBehavior&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;gmtCreate&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1708478952132</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;gmtModified&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1708478952132</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;grade&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">9</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ip&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;10.108.202.7&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;limitApp&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;default&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;port&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">9998</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;resource&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;/sentinel/message3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>进阶：</strong></p>\n<p><strong>此时你启动nacos-dashboard，正要到流控规则页面进行尝试时，你会发现</strong></p>\n<p><img src=\"/typora-user-images/image-20240221093711599.png\" alt=\"image-20240221093711599\"></p>\n<p><strong>有个回到单机页面的按钮，你好奇的点了一下，满怀期待的进行配置，但是却发现配置不能生效，这是因为单机页面的执行的方法还是默认的方法，需要进行如下修改：</strong></p>\n<blockquote>\n<p>resources&#x2F;app&#x2F;views&#x2F;flow_v2.html  </p>\n<p>两种方法：1.进到这个页面，找到执行的方法修改为自定义的V2类下的方法</p>\n<p>​         2.注释掉按钮</p>\n<p>为了方便快捷，我们直接注释</p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20240221093819873.png\" alt=\"image-20240221093819873\"></p>\n<p><em><strong>为了方便我们以后的配置，更为牛逼的进阶之旅开启，快上车</strong></em></p>\n<p> 一般我们习惯从簇点链路直接配置流控，而不是到流控规则页面进行配置，但是问题来了，从簇点链路进行配置的不生效，按F12看请求会发现，他还是请求的 &#x2F;v1&#x2F;flow 而不是 &#x2F;v2&#x2F;flow</p>\n<p><img src=\"/typora-user-images/image-20240221094018816.png\" alt=\"image-20240221094018816\"></p>\n<p>解决问题：</p>\n<blockquote>\n<p>resources&#x2F;app&#x2F;scripts&#x2F;controllers&#x2F;identity.js  </p>\n<p>对比这修改，至于为什么这么改不再赘述，有兴趣的可以对比一下两个路径执行的方法 </p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20240221094225094.png\" alt=\"image-20240221094225094\"></p>\n<p><img src=\"/typora-user-images/image-20240221094244920.png\" alt=\"image-20240221094244920\"></p>\n<p>修改到这，你会发现从簇点链路配置的流程规则可以推送到nacos了，但是新问题，出现了，保存完后会自动跳转到展示页面，但是展示页面是空的~~~~~~~~~~~~~~</p>\n<p>原因：F12查看请求得知，查询方法还是执行的V1版本的默认方法，而不是我们自定义的V2里面的方法，继续在当前js文件进行修改</p>\n<p><img src=\"/typora-user-images/image-20240221094447664.png\" alt=\"image-20240221094447664\"></p>\n<p><img src=\"/typora-user-images/image-20240221094852671.png\" alt=\"image-20240221094852671\"></p>\n<p>终于实现了分别在两个页面进行流控配置</p>\n<p><img src=\"/typora-user-images/image-20240221095745495.png\" alt=\"image-20240221095745495\"></p>\n<p><img src=\"/typora-user-images/image-20240221155333042.png\" alt=\"image-20240221155333042\"></p>\n","excerpt":"","more":"<p><code>Lison </code>  <code>&lt;dreamlison@163.com&gt;</code>,  <code>v1.0.0</code>, <code>2023.09.10</code></p>\n<h1 id=\"Spring-Cloud-Alibaba-04-Sentinel服务容错\"><a href=\"#Spring-Cloud-Alibaba-04-Sentinel服务容错\" class=\"headerlink\" title=\"Spring Cloud Alibaba-04-Sentinel服务容错\"></a>Spring Cloud Alibaba-04-Sentinel服务容错</h1><p>[toc]</p>\n<h2 id=\"高并发带来的问题\"><a href=\"#高并发带来的问题\" class=\"headerlink\" title=\"高并发带来的问题\"></a>高并发带来的问题</h2><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络 原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会 出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。</p>\n<h2 id=\"服务雪崩效应\"><a href=\"#服务雪崩效应\" class=\"headerlink\" title=\"服务雪崩效应\"></a>服务雪崩效应</h2><p>在分布式系统中,由于网络原因或自身的原因,服务一般无法保证 100% 可用。如果一个服务出现了 问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等 待，进而导致服务瘫痪。</p>\n<p>由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是 服务故障的 “雪崩效应” 。</p>\n<p><img src=\"/typora-user-images/image-20231024102201145.png\" alt=\"image-20231024102201145\"></p>\n<p>雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是”雪落而不雪崩”。</p>\n<h2 id=\"常见容错方案\"><a href=\"#常见容错方案\" class=\"headerlink\" title=\"常见容错方案\"></a>常见容错方案</h2><p>要防止雪崩的扩散，我们就要做好服务的容错，容错说白了就是保护自己不被猪队友拖垮的一些措 施, 下面介绍常见的服务容错思路和组件。</p>\n<p><strong>常见的容错思路</strong></p>\n<p>常见的容错思路有隔离、超时、限流、熔断、降级这几种，下面分别介绍一下。</p>\n<ul>\n<li><p><strong>隔离</strong></p>\n<p>它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故<br>障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的<br>系统服务。常见的隔离方式有:线程池隔离和信号量隔离.</p>\n</li>\n</ul>\n<p><img src=\"/typora-user-images/image-20231024104338016.png\" alt=\"image-20231024104338016\"></p>\n<ul>\n<li><strong>超时</strong></li>\n</ul>\n<p>在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程。</p>\n<p><img src=\"/typora-user-images/image-20231201143940420.png\" alt=\"image-20231201143940420\"></p>\n<ul>\n<li><strong>限流</strong></li>\n</ul>\n<p>限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行,一旦达到 的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的。</p>\n<p><img src=\"/typora-user-images/image-20231201144020748.png\" alt=\"image-20231201144020748\"></p>\n<ul>\n<li><strong>熔断</strong></li>\n</ul>\n<p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整 体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p>\n<p><img src=\"/typora-user-images/image-20231201144119343.png\" alt=\"image-20231201144119343\"></p>\n<p>服务熔断一般有三种状态:</p>\n<ul>\n<li><p>熔断关闭状态(Closed)：  服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制 </p>\n</li>\n<li><p>熔断开启状态（Open）：  后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法 </p>\n</li>\n<li><p>半熔断状态（Half-Open）\t：  尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态;如果成功率仍旧很低，则重新进入熔断关闭状态。</p>\n</li>\n<li><p><strong>降级</strong></p>\n</li>\n</ul>\n<p>降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案。</p>\n<p><img src=\"/typora-user-images/image-20231201153117052.png\" alt=\"image-20231201153117052\"></p>\n<p><strong>常见的容错组件</strong></p>\n<p><strong>Hystrix</strong><br>Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止 级联失败，从而提升系统的可用性与容错性。</p>\n<p><strong>Resilience4J</strong><br>Resilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推 荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x&#x2F;2.x，而且监控也支持和 prometheus等多款主流产品进行整合。</p>\n<p><strong>Sentinel</strong><br>Sentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定。 下面是三个组件在各方面的对比:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Sentinel</th>\n<th>Hystrix</th>\n<th>Resilience4J</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>隔离策略</td>\n<td>信号量隔离（并发线程数限流）</td>\n<td>线程池隔离&#x2F;信号量隔离</td>\n<td>信号量隔离</td>\n</tr>\n<tr>\n<td>熔断降级策略</td>\n<td>基于响应时间、异常比率、异常数</td>\n<td>基于异常比率</td>\n<td>基于异常比率、响应时间</td>\n</tr>\n<tr>\n<td>实时统计实现</td>\n<td>活动窗口（LeapArray）</td>\n<td>滑动窗口（基于RxJava）</td>\n<td>Ring Bit Buffer</td>\n</tr>\n<tr>\n<td>动态规则配置</td>\n<td>支持多数据源</td>\n<td>支持多数据源</td>\n<td>有限支持</td>\n</tr>\n<tr>\n<td>扩展性</td>\n<td>多个扩展点</td>\n<td>插件的形式</td>\n<td>插件的形式</td>\n</tr>\n<tr>\n<td>基于注解的支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>限流</td>\n<td>基于QPS,支持基于调用关系的限流</td>\n<td>不支持</td>\n<td>Rate Limiter</td>\n</tr>\n<tr>\n<td>流量整形</td>\n<td>支持预热模式、匀速器模式、预热排队模式</td>\n<td>不支持</td>\n<td>简单的Rate Limiter模式</td>\n</tr>\n<tr>\n<td>系统自适应保护</td>\n<td>支持</td>\n<td>不支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>控制台</td>\n<td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td>\n<td>简单的监控查 看</td>\n<td>不提供控制台，可对接其它监控系统</td>\n</tr>\n</tbody></table>\n<h2 id=\"Sentinel入门\"><a href=\"#Sentinel入门\" class=\"headerlink\" title=\"Sentinel入门\"></a>Sentinel入门</h2><h3 id=\"什么是Sentinel\"><a href=\"#什么是Sentinel\" class=\"headerlink\" title=\"什么是Sentinel\"></a>什么是Sentinel</h3><p>Sentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于<strong>服务容错</strong>的综合性解决方案。它以流量 为切入点, 从<strong>流量控制、熔断降级、系统负载保护</strong>等多个维度来保护服务的稳定性。</p>\n<p>Sentinel具有以下特征:</p>\n<p>Sentinel 具有以下特征:</p>\n<p>**丰富的应用场景 :**Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景, 例如秒杀(即 突发流量控制在系统容量可以承受的范围)、消息削峰填谷、集群流量控制、实时熔断下游不可用 应用等。<br>完备的实时监控:Sentinel 提供了实时的监控功能。通过控制台可以看到接入应用的单台机器秒 级数据, 甚至 500 台以下规模的集群的汇总运行情况。<br><strong>广泛的开源生态</strong>:Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块, 例如与 Spring Cloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p>\n<p>**完善的 SPI 扩展点:**Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快 速地定制逻辑。例如定制规则管理、适配动态数据源等。</p>\n<p><strong>Sentinel 分为两个部分:</strong></p>\n<ul>\n<li>核心库(Java 客户端)不依赖任何框架&#x2F;库,能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F; Spring Cloud 等框架也有较好的支持。</li>\n<li>控制台(Dashboard)基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等 应用容器。</li>\n</ul>\n<h3 id=\"微服务集成Sentinel\"><a href=\"#微服务集成Sentinel\" class=\"headerlink\" title=\"微服务集成Sentinel\"></a>微服务集成Sentinel</h3><p>为微服务集成Sentinel非常简单, 只需要加入Sentinel的依赖即可</p>\n<p><strong>1、在pom.xml中加入下面依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>2、application.yml 配置sentinel</strong><br><strong><code>注意：yml配置client-ip 是本地ip才行</code></strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">    <span class=\"attr\">cloud:</span></span><br><span class=\"line\">        <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">            <span class=\"attr\">transport:</span></span><br><span class=\"line\">                <span class=\"attr\">dashboard:</span> <span class=\"number\">192.168</span><span class=\"number\">.32</span><span class=\"number\">.131</span><span class=\"string\">:8858</span></span><br><span class=\"line\">                <span class=\"attr\">client-ip:</span> <span class=\"number\">192.168</span><span class=\"number\">.32</span><span class=\"number\">.1</span></span><br><span class=\"line\">                <span class=\"attr\">port:</span> <span class=\"number\">8719</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><strong>3、编写一个Controller测试使用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装Sentinel控制台\"><a href=\"#安装Sentinel控制台\" class=\"headerlink\" title=\"安装Sentinel控制台\"></a>安装Sentinel控制台</h3><p>Sentinel 提供一个轻量级的控制台, 它提供机器发现、单机资源实时监控以及规则管理等功能。</p>\n<p><strong>1、jar包方式安装</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载jar包,解压到文件夹 https://github.com/alibaba/Sentinel/releases </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">启动：</span><br><span class=\"line\"># 直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)</span><br><span class=\"line\">java -Dserver.port=8858 -Dcsp.sentinel.dashboard.server=localhost:8858 - Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.1.jar </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、docker方式安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//拉去sentinel镜像</span><br><span class=\"line\">docker pull bladex/sentinel-dashboard:1.8.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//启动容器</span><br><span class=\"line\">docker run --name sentinel  -d -p 8858:8858 -p 8719:8719 -d bladex/sentinel-dashboard:1.8.1 -e username=sentinel -e password=sentinel -e server=localhost:8858</span><br></pre></td></tr></table></figure>\n\n\n\n<p>通过浏览器访问localhost:8858 进入控制台 ( 默认用户名密码是 sentinel&#x2F;sentinel )</p>\n<p>注意：重启后还是看不到自己注册接口服务？</p>\n<p><strong>原因：Sentinel是 懒加载机制所以呢，需要访问一下接口即可再去访问Sentinel 就有数据了</strong></p>\n<p><strong>补充:了解控制台的使用原理</strong></p>\n<p>Sentinel的控制台其实就是一个SpringBoot编写的程序。我们需要将我们的微服务程序注册到控制台上, 即在微服务中指定控制台的地址, 并且还要开启一个跟控制台传递数据的端口, 控制台也可以通过此端口 调用微服务中的监控程序获取微服务的各种信息。</p>\n<p><img src=\"/typora-user-images/image-20240219114233026.png\" alt=\"image-20240219114233026\"></p>\n<p><img src=\"/typora-user-images/image-20240219113719157.png\" alt=\"image-20240219113719157\"></p>\n<h2 id=\"实现一个接口的限流\"><a href=\"#实现一个接口的限流\" class=\"headerlink\" title=\"实现一个接口的限流\"></a>实现一个接口的限流</h2><p>1、通过控制台为message1添加一个流控规则</p>\n<p><img src=\"/typora-user-images/image-20240219114343151.png\" alt=\"image-20240219114343151\"></p>\n<p>2、通过控制台快速频繁访问, 观察效果</p>\n<p><img src=\"/typora-user-images/image-20240219114515952.png\" alt=\"image-20240219114515952\"></p>\n<h2 id=\"Sentinel的概念和功能\"><a href=\"#Sentinel的概念和功能\" class=\"headerlink\" title=\"Sentinel的概念和功能\"></a>Sentinel的概念和功能</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><strong>资源</strong></li>\n</ul>\n<p>资源就是Sentinel要保护的东西</p>\n<p>资源是Sentinel的关键概念，它可以是Java应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码</p>\n<blockquote>\n<p>上述案例中message1方法就可以认为是一个资源</p>\n</blockquote>\n<ul>\n<li><strong>规则</strong></li>\n</ul>\n<p>规则就是用来定义如何保护资源的</p>\n<p>作为资源之上，定义以什么样的方式保护资源，主要包括流量控制规则、熔断降级规则以及系统保护规则。</p>\n<blockquote>\n<p>上述案例中message1资源设置一种流控规则，限制了进入message1的流量</p>\n</blockquote>\n<h3 id=\"重要功能\"><a href=\"#重要功能\" class=\"headerlink\" title=\"重要功能\"></a>重要功能</h3><p><img src=\"/typora-user-images/image-20240219144606520.png\" alt=\"image-20240219144606520\"></p>\n<p>Sentinel的主要功能就是容错,主要体现为下面这三个:</p>\n<p><strong>1、流量控制</strong><br>流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是 随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。 Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状。</p>\n<p><strong>2、熔断降级</strong></p>\n<p>当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则<br>对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。</p>\n<p><strong>Sentinel 对这个问题采取了两种手段:</strong></p>\n<p>(1)通过并发线程数进行限制</p>\n<p>Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。当某个资源 出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆 积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的 线程完成任务后才开始继续接收请求。</p>\n<p>(2)通过响应时间对资源进行降级</p>\n<p>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。 当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的 时间窗口之后才重新恢复。</p>\n<p><strong>Sentinel 和 Hystrix 的区别</strong></p>\n<blockquote>\n<p>两者的原则是一致的, 都是当一个资源出现问题时, 让其快速失败, 不要波及到其它服务 但是在限制的手段上, 确采取了完全不一样的方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hystrix 采用的是线程池隔离的方式, 优点是做到了资源之间的隔离, 缺点是增加了线程 切换的成本。 </span><br><span class=\"line\"></span><br><span class=\"line\">Sentinel 采用的是通过并发线程的数量和响应时间来对资源做限制。 </span><br></pre></td></tr></table></figure></blockquote>\n<p><strong>3、系统负载保护</strong></p>\n<p>Sentinel 同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让 请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其 它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保 护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请 求。总之一句话: 我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功 能。</p>\n<h2 id=\"Sentinel规则\"><a href=\"#Sentinel规则\" class=\"headerlink\" title=\"Sentinel规则\"></a>Sentinel规则</h2><h3 id=\"流程控制\"><a href=\"#流程控制\" class=\"headerlink\" title=\"流程控制\"></a>流程控制</h3><p>流量控制，其原理是监控应用流量的QPS(每秒查询率) 或并发线程数等指标，当达到指定的阈值时 对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p>\n<p>第1步: 点击簇点链路，我们就可以看到访问过的接口地址，然后点击对应的流控按钮，进入流控规则配 置页面。新增流控规则界面如下:</p>\n<p><img src=\"/typora-user-images/image-20240219150634816.png\" alt=\"image-20240219150634816\"></p>\n<p>**资源名:**唯一名称，默认是请求路径，可自定义</p>\n<p>针对来源:指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制</p>\n<p><strong>阈值类型&#x2F;单机阈值:</strong></p>\n<ul>\n<li>QPS(每秒请求数量): 当调用该接口的QPS达到阈值的时候，进行限流</li>\n<li>线程数:当调用该接口的线程数达到阈值的时候，进行限流</li>\n</ul>\n<p>**是否集群:**暂不需要集群 接下来我们以QPS为例来研究限流规则的配置。</p>\n<h4 id=\"简单配置\"><a href=\"#简单配置\" class=\"headerlink\" title=\"简单配置\"></a>简单配置</h4><p>我们先做一个简单配置，设置阈值类型为QPS，单机阈值为3。即每秒请求量大于3的时候开始限流。</p>\n<p>接下来，在流控规则页面就可以看到这个配置</p>\n<p><img src=\"/typora-user-images/image-20240219150821657.png\" alt=\"image-20240219150821657\"></p>\n<p>然后快速访问 &#x2F;order&#x2F;message1 接口，观察效果。此时发现，当QPS &gt; 3的时候，服务就不能正常响 应，而是返回Blocked by Sentinel (flow limiting)结果。</p>\n<p><img src=\"/typora-user-images/image-20240219150910898.png\" alt=\"image-20240219150910898\"></p>\n<h4 id=\"配置流控模式\"><a href=\"#配置流控模式\" class=\"headerlink\" title=\"配置流控模式\"></a>配置流控模式</h4><p><img src=\"/typora-user-images/image-20240219151031448.png\" alt=\"image-20240219151031448\"></p>\n<p>sentinel共有三种流控模式，分别是:</p>\n<p><strong>直接</strong>(默认):接口达到限流条件时，开启限流</p>\n<p><strong>关联</strong>:当关联的资源达到限流条件时，开启限流 [适合做应用让步]</p>\n<p><strong>链路</strong>:当从某个接口过来的资源达到限流条件时，开启限流</p>\n<p>下面呢分别演示三种模式:</p>\n<p><strong>直接流控模式</strong></p>\n<p>直接流控模式是最简单的模式，当指定的接口达到限流条件时开启限流。上面案例使用的就是直接流控模式。</p>\n<p><strong>关联流控模式</strong></p>\n<p>关联流控模式指的是，当指定接口关联的接口达到限流条件时，开启对指定接口开启限流。</p>\n<p>第1步:配置限流规则, 将流控模式设置为关联，关联资源设置为的 &#x2F;sentinel&#x2F;message2。</p>\n<p><img src=\"/typora-user-images/image-20240219151212695.png\" alt=\"image-20240219151212695\"></p>\n<p>第2步:通过postman软件向&#x2F;sentinel&#x2F;message2连续发送请求，注意QPS一定要大于3</p>\n<p><img src=\"/typora-user-images/image-20240219152607457.png\" alt=\"image-20240219152607457\"></p>\n<p>第3步:访问&#x2F;sentinel&#x2F;message1,会发现已经被限流</p>\n<p><img src=\"/typora-user-images/image-20240219152638390.png\" alt=\"image-20240219152638390\"></p>\n<p><strong>链路流控模式</strong></p>\n<p>链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流。它的功能有点类似于针对 来源配置项，区别在于:<strong>针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度 更细。</strong></p>\n<p>第1步: 编写一个service，在里面添加一个方法message</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(&quot;message&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">message</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;message&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>第2步: 在Controller中声明两个方法，分别调用service中的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestSentinelMessage3ServiceImpl testSentinelMessage3Service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        testSentinelMessage3Service.message();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message1&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/sentinel/message2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        testSentinelMessage3Service.message();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"/typora-user-images/image-20240219154032740.png\" alt=\"image-20240219154032740\"></p>\n<p> 分别通过 &#x2F;sentinel&#x2F;message1 和 &#x2F;sentinel&#x2F;message2 访问, 发现2没问题, 1的被限流了</p>\n<h4 id=\"配置流控效果\"><a href=\"#配置流控效果\" class=\"headerlink\" title=\"配置流控效果\"></a>配置流控效果</h4><p><strong>快速失败(默认):</strong> 直接失败，抛出异常，不做任何额外的处理，是最简单的效果</p>\n<p>**Warm Up:**它从开始阈值到最大QPS阈值会有一个缓冲阶段，一开始的阈值是最大QPS阈值的 1&#x2F;3，然后慢慢增长，直到最大阈值，适用于将<br>突然增大的流量转换为缓步增长的场景。</p>\n<p>**排队等待:**让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待; 它还会让设 置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃</p>\n<h3 id=\"降级规则-降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件\"><a href=\"#降级规则-降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件\" class=\"headerlink\" title=\"降级规则 降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件:\"></a>降级规则 降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件:</h3><h4 id=\"慢调用比例-SLOW-REQUEST-RATIO\"><a href=\"#慢调用比例-SLOW-REQUEST-RATIO\" class=\"headerlink\" title=\"慢调用比例 (SLOW_REQUEST_RATIO)\"></a>慢调用比例 (SLOW_REQUEST_RATIO)</h4><p>选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。</p>\n<p>当单位统计时长（statIntervalMs）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。（默认1秒内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。）</p>\n<blockquote>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p>\n</blockquote>\n<ul>\n<li>最大 RT（响应时间）：200意思是 在200毫秒处理完这个请求</li>\n<li>比例阀值：0~1之间。</li>\n<li><code>慢调用比例</code>：例如1秒内请求10次，8次是慢请求，则慢请求比例 0.8</li>\n<li>java 接口响应时间为睡眠400毫秒</li>\n</ul>\n<p>根据上述可以看出触发必要条件后才会降级：</p>\n<ol>\n<li>请求时间 &gt; RT</li>\n<li>单位统计时长（statIntervalMs）&gt; 最小请求数</li>\n<li>慢比例调用比例 &gt; 比例阀值（maxSlowRequestRatio）</li>\n<li>触发熔断后进入探测恢复状态（HALF-OPEN 状态），下一个请求响应时间小于设置的慢调用 RT 则结束熔断否则会再次被熔断</li>\n</ol>\n<p>如下是我的一次降级调用，接口中休眠400毫秒，1s内连续请求5次后</p>\n<p><img src=\"/typora-user-images/image-20240220094227461.png\" alt=\"image-20240220094227461\"></p>\n<p>如下是我多次往复测试，不太好测试。需要参考 <code>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</code></p>\n<p>请求被熔断</p>\n<p><img src=\"/typora-user-images/image-20240220095107292.png\" alt=\"image-20240220095107292\"></p>\n<h4 id=\"异常比例-ERROR-RATIO\"><a href=\"#异常比例-ERROR-RATIO\" class=\"headerlink\" title=\"异常比例 (ERROR_RATIO)\"></a>异常比例 (ERROR_RATIO)</h4><p>当单位统计时长（statIntervalMs 以 s 为单位）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<p>异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p>\n<p>同慢调用比例相似，逻辑相似</p>\n<p><img src=\"/typora-user-images/image-20240220095645324.png\" alt=\"image-20240220095645324\"></p>\n<p><img src=\"/typora-user-images/image-20240220101010503.png\" alt=\"image-20240220101010503\"></p>\n<h4 id=\"异常数-ERROR-COUNT\"><a href=\"#异常数-ERROR-COUNT\" class=\"headerlink\" title=\"异常数 (ERROR_COUNT)\"></a>异常数 (ERROR_COUNT)</h4><p>当单位统计时长（1s）内的异常数目超过阈值之后会自动进行熔断。</p>\n<p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<p>注意由于统计时间窗口是分钟级别的，若timeWindow小于 60s，则结束熔断状态后仍可能再进入熔断状态；</p>\n<p>同慢调用比例相似，逻辑相似</p>\n<p><img src=\"/typora-user-images/image-20240220101429844.png\" alt=\"image-20240220101429844\"></p>\n<p>代码中未传递参数时可以看出异常概率应该在50%左右，从图中前部分可以看出，平均请求未出现熔断，因为请求间隔时间较长，当后半部分，1秒内多次请求时出现熔断了，老版本是以分钟来统计的，新版是秒为单位</p>\n<p><img src=\"/typora-user-images/image-20240220101701432.png\" alt=\"image-20240220101701432\"></p>\n<h3 id=\"热点规则\"><a href=\"#热点规则\" class=\"headerlink\" title=\"热点规则\"></a>热点规则</h3><p>热点参数流控规则是一种更细粒度的流控规则, 它允许将规则具体到参数上。</p>\n<p><strong>热点规则简单使用</strong></p>\n<p>1、编写代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/sentinel/message3&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@SentinelResource(&quot;message3&quot;)</span><span class=\"comment\">//注意这里必须使用这个注解标识,热点规则不生效 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">message3</span><span class=\"params\">(String name, Integer age)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> name + age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第2步: 配置热点规则</p>\n<p><img src=\"/typora-user-images/image-20240220102332812.png\" alt=\"image-20240220102332812\"></p>\n<p>第3步: 分别用两个参数访问,会发现只对第一个参数限流了</p>\n<p><img src=\"/typora-user-images/image-20240220102431979.png\" alt=\"image-20240220102431979\"></p>\n<p><img src=\"/typora-user-images/image-20240220102457440.png\" alt=\"image-20240220102457440\"></p>\n<p><strong>热点规则增强使用</strong></p>\n<p>参数例外项允许对一个参数的具体值进行流控</p>\n<p>编辑刚才定义的规则,增加参数例外项</p>\n<p><img src=\"/typora-user-images/image-20240220102621265.png\" alt=\"image-20240220102621265\"></p>\n<h3 id=\"授权规则\"><a href=\"#授权规则\" class=\"headerlink\" title=\"授权规则\"></a>授权规则</h3><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源 访问控制的功能。来源访问控制根据资源的请求来源(origin)限制资源是否通过:</p>\n<p>若配置白名单，则只有请求来源位于白名单内时才可通过;<br>若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过。</p>\n<p><img src=\"/typora-user-images/image-20240220102752041.png\" alt=\"image-20240220102752041\"></p>\n<p>上面的资源名和授权类型不难理解，但是流控应用怎么填写呢?</p>\n<blockquote>\n<p>其实这个位置要填写的是来源标识，Sentinel提供了 RequestOriginParser 接口来处理来源。 只要Sentinel保护的接口资源被访问，Sentinel就会调用 RequestOriginParser 的实现类去解析<br>访问来源。</p>\n</blockquote>\n<p>第1步: 自定义来源处理规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestOriginParserDefinition</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RequestOriginParser</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">parseOrigin</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">serviceName</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;serviceName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> serviceName;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>第2步: 授权规则配置<br>这个配置的意思是只有serviceName&#x3D;pc不能访问(黑名单)</p>\n<p><img src=\"/typora-user-images/image-20240220103006353.png\" alt=\"image-20240220103006353\"></p>\n<p>第3步：访问 <a href=\"http://localhost:18001/sentinel/message3?serviceName=pc\">http://localhost:18001/sentinel/message3?serviceName=pc</a>  观察结果</p>\n<p><img src=\"/typora-user-images/image-20240220103217414.png\" alt=\"image-20240220103217414\"></p>\n<h3 id=\"系统规则\"><a href=\"#系统规则\" class=\"headerlink\" title=\"系统规则\"></a>系统规则</h3><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 Load、RT、入口 QPS 、CPU 使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效。</p>\n<ul>\n<li>Load(仅对 Linux&#x2F;Unix-like 机器生效):当系统 load1 超过阈值，且系统当前的并发线程数超过 系统容量时才会触发系统保护。系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般 是 CPU cores * 2.5。</li>\n<li>RT:当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>\n<li>线程数:当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li>入口 QPS:当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>\n<li>CPU使用率:当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护。</li>\n</ul>\n<p><strong>扩展: 自定义异常返回</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//异常处理页面</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceptionHandlerPage</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BlockExceptionHandler</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//BlockException 异常接口,包含Sentinel的五个异常</span></span><br><span class=\"line\">    <span class=\"comment\">// FlowException 限流异常</span></span><br><span class=\"line\">    <span class=\"comment\">// DegradeException 降级异常</span></span><br><span class=\"line\">    <span class=\"comment\">// ParamFlowException 参数限流异常</span></span><br><span class=\"line\">    <span class=\"comment\">// AuthorityException 授权异常</span></span><br><span class=\"line\">    <span class=\"comment\">// SystemBlockException 系统负载异常</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, BlockException ex)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> FlowException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;限流了&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> DegradeException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;降级了&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> ParamFlowException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;热点参数限流&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> SystemBlockException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;系统规则（负载/...不满足要求）&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> AuthorityException) &#123;</span><br><span class=\"line\">            msg = <span class=\"string\">&quot;授权规则不通过&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// http状态码</span></span><br><span class=\"line\">        response.setStatus(<span class=\"number\">500</span>);</span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">&quot;Content-Type&quot;</span>, <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// spring mvc自带的json操作工具，叫jackson</span></span><br><span class=\"line\">        <span class=\"comment\">//返回json数据</span></span><br><span class=\"line\">        response.setStatus(<span class=\"number\">200</span>);</span><br><span class=\"line\">        response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        response.setContentType(MediaType.APPLICATION_JSON_VALUE);</span><br><span class=\"line\">        <span class=\"comment\">//springmvc 的一个json转换类 （jackson）</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValue(response.getWriter(), msg);</span><br><span class=\"line\">        <span class=\"comment\">//重定向</span></span><br><span class=\"line\">        <span class=\"comment\">//response.sendRedirect(&quot;http://www.baidu.com&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意:最近在学习SpringCloudAlibaba时候，需要sentinel进行流量管理控制，在配置统一处理返回异常时候，实现 UrlBlockHandler 这个接口直接爆红，原因是我使用的sentinel是2.2.5.RELEASE，官方改成了BlockExceptionHandler这个接口与实现</p>\n<h2 id=\"SentinelResource的使用\"><a href=\"#SentinelResource的使用\" class=\"headerlink\" title=\"@SentinelResource的使用\"></a>@SentinelResource的使用</h2><p>在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护。同时还能<br>通过@SentinelResource来指定出现异常时的处理策略。</p>\n<p>@SentinelResource 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>value</td>\n<td>资源名称</td>\n</tr>\n<tr>\n<td>entryType</td>\n<td>entry类型，标记流量的方向，取值IN&#x2F;OUT，默认是OUT</td>\n</tr>\n<tr>\n<td>blockHandler</td>\n<td>处理BlockException的函数名称,函数要求:1. 必须是 public2.返回类型 参数与原方法一致3. 默认需和原方在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法。</td>\n</tr>\n<tr>\n<td>blockHandlerClass</td>\n<td>存放blockHandler的类,对应的处理函数必须static修饰</td>\n</tr>\n<tr>\n<td>fallback</td>\n<td>用于在抛出异常的时候提供fallback处理逻辑。fallback函数可以针对所 有类型的异常(除了 exceptionsToIgnore 里面排除掉的异常类型)进 行处理。函数要求:1. 返回类型与原方法一致 2. 参数类型需要和原方法相匹配3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法。</td>\n</tr>\n<tr>\n<td>fallbackClass</td>\n<td>存放fallback的类。对应的处理函数必须static修饰。</td>\n</tr>\n<tr>\n<td>defaultFallback</td>\n<td>用于通用的 fallback 逻辑。默认fallback函数可以针对所有类型的异常进 行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。函 数要求:1. 返回类型与原方法一致 2. 方法参数列表为空，或者有一个 Throwable 类型的参数。3. 默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法。</td>\n</tr>\n<tr>\n<td>exceptionsToIgnore</td>\n<td>指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入 fallback逻辑，而是原样抛出</td>\n</tr>\n<tr>\n<td>exceptionsToTrace</td>\n<td>需要trace的异常</td>\n</tr>\n</tbody></table>\n<p><strong>定义限流和降级后的处理方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImpl</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@SentinelResource(</span></span><br><span class=\"line\"><span class=\"meta\">                value = &quot;message&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                blockHandler = &quot;blockHandler&quot;,//指定发生BlockException时进入的方法</span></span><br><span class=\"line\"><span class=\"meta\">                fallback = &quot;fallback&quot;//指定发生Throwable时进入的方法</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">message</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;message&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//BlockException时进入的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">blockHandler</span><span class=\"params\">(BlockException ex)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口被限流或者降级了...&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Throwable时进入的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> String <span class=\"title function_\">fallback</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口发生异常了...&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>将限流和降级方法外置到单独的类中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImpl</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SentinelResource(</span></span><br><span class=\"line\"><span class=\"meta\">            value = &quot;message&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            blockHandlerClass = TestSentinelMessage3ServiceImplBlockHandlerClass.class,</span></span><br><span class=\"line\"><span class=\"meta\">            blockHandler = &quot;blockHandler&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">            fallbackClass = TestSentinelMessage3ServiceImplFallbackClass.class,</span></span><br><span class=\"line\"><span class=\"meta\">            fallback = &quot;fallback&quot;</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">message</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;message4&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImplBlockHandlerClass</span> &#123; <span class=\"comment\">//注意这里必须使用static修饰方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">blockHandler</span><span class=\"params\">(BlockException ex)</span> &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, ex);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口被限流或者降级了...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestSentinelMessage3ServiceImplFallbackClass</span> &#123; <span class=\"comment\">//注意这里必须使用static修饰方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">fallback</span><span class=\"params\">(Throwable throwable)</span> &#123;</span><br><span class=\"line\">        log.error(<span class=\"string\">&quot;&#123;&#125;&quot;</span>, throwable);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;接口发生异常了...&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Sentinel规则持久化\"><a href=\"#Sentinel规则持久化\" class=\"headerlink\" title=\"Sentinel规则持久化\"></a>Sentinel规则持久化</h2><p>通过前面的讲解，我们已经知道，可以通过Dashboard来为每个Sentinel客户端设置各种各样的规 则，但是这里有一个问题，就是这些规则默认是存放在内存中，极不稳定，所以需要将其持久化。</p>\n<h3 id=\"Sentinel规则的推送有下面三种模式\"><a href=\"#Sentinel规则的推送有下面三种模式\" class=\"headerlink\" title=\"Sentinel规则的推送有下面三种模式:\"></a>Sentinel规则的推送有下面三种模式:</h3><table>\n<thead>\n<tr>\n<th>推送模式</th>\n<th>说明</th>\n<th>有点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>原始模式</td>\n<td>API将规则推送至客户端并直接更新到内存中</td>\n<td>简单，无任何依赖</td>\n<td>不保证一致性；规则保存在内存中，重启即消失。严重不建议用于生产环境</td>\n</tr>\n<tr>\n<td>Pull模式</td>\n<td>扩展写数据源（WritableDataSource），客户端主动向某个规则管理中心定期轮询拉取规则，这个规则中心可以是RDBMS、文件等</td>\n<td>简单，无任何依赖；规则持久化</td>\n<td>不保证一致性；实时性不保证，拉取过于频繁也可能会有性能问题。</td>\n</tr>\n<tr>\n<td>Push模式</td>\n<td>扩展读数据源（ReadableDataSource），规则中心统一推送，客户端通过注册监听器的方式时刻监听变化，比如使用Nacos、Zookeeper等配置中心。这种方式有更好的实时性和一致性保证。生产环境下一般采用push模式的数据源。</td>\n<td>规则持久化；一致性；快速</td>\n<td>引入第三方依赖</td>\n</tr>\n</tbody></table>\n<h4 id=\"原始模式\"><a href=\"#原始模式\" class=\"headerlink\" title=\"原始模式\"></a>原始模式</h4><p>如果不做任何修改，Dashboard的推送规则方式是通过API将规则推送至客户端并直接更新到内存中：</p>\n<p><img src=\"/typora-user-images/a7002eb5f5b8429c8b8728b9f2e3e10d.png\" alt=\"img\"></p>\n<p>这种做法的好处是简单，无依赖；坏处是应用重启规则就会消失，仅用于简单测试，不能用于生产环境。</p>\n<h4 id=\"拉模式\"><a href=\"#拉模式\" class=\"headerlink\" title=\"拉模式\"></a>拉模式</h4><p>pull模式的数据源（如本地文件、RDBMS 等）一般是可写入的。使用时需要在客户端注册数据源：将对应的读数据源注册至对应的 RuleManager，将写数据源注册至transport的WritableDataSourceRegistry中。</p>\n<p><img src=\"/typora-user-images/afb25fa106bada4b37da64e902060269.png\" alt=\"img\"></p>\n<p>首先Sentinel控制台通过API将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。使用 pull模式的数据源时一般不需要对Sentinel控制台进行改造。这种实现方法好处是简单，坏处是无法保证监控数据的一致性。</p>\n<p>具体使用方式如下：</p>\n<p>引入依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-extension<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>实现InitFunc接口，在init中处理DataSource初始化逻辑，并利用spi机制实现加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileDataSourceInit</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitFunc</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">RULE_FILE_PATH</span> <span class=\"operator\">=</span> System.getProperty(<span class=\"string\">&quot;user.home&quot;</span>) + File.separator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FLOW_RULE_FILE_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;FlowRule.json&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//处理流控规则逻辑</span></span><br><span class=\"line\">        dealFlowRules();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dealFlowRules</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> FileNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">ruleFilePath</span> <span class=\"operator\">=</span> RULE_FILE_PATH + FLOW_RULE_FILE_NAME;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建流控规则的可读数据源</span></span><br><span class=\"line\">        <span class=\"type\">FileRefreshableDataSource</span> <span class=\"variable\">flowRuleRDS</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileRefreshableDataSource</span>(</span><br><span class=\"line\">                ruleFilePath, source -&gt; JSON.parseObject((String) source,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">TypeReference</span>&lt;List&lt;FlowRule&gt;&gt;() &#123;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将可读数据源注册至FlowRuleManager 这样当规则文件发生变化时，就会更新规则到内存</span></span><br><span class=\"line\">        FlowRuleManager.register2Property(flowRuleRDS.getProperty());</span><br><span class=\"line\"></span><br><span class=\"line\">        WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class=\"keyword\">new</span> <span class=\"title class_\">FileWritableDataSource</span>&lt;&gt;(</span><br><span class=\"line\">                ruleFilePath, <span class=\"built_in\">this</span>::encodeJson</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将可写数据源注册至 transport 模块的 WritableDataSourceRegistry 中.</span></span><br><span class=\"line\">        <span class=\"comment\">// 这样收到控制台推送的规则时，Sentinel 会先更新到内存，然后将规则写入到文件中.</span></span><br><span class=\"line\">        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> &lt;T&gt; String <span class=\"title function_\">encodeJson</span><span class=\"params\">(T t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON.toJSONString(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>在META-INF&#x2F;services目录下创建com.alibaba.csp.sentinel.init.InitFunc，内容如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.lison.springcloudservice.config.sentinel.FileDataSourceInit</span><br></pre></td></tr></table></figure>\n\n<p>这样当在Dashboard中修改了配置后，Dashboard会调用客户端的接口修改客户端内存中的值，同时将配置写入文件FlowRule.json中，这样操作的话规则是实时生效的，如果是直接修改FlowRule.json的内容，这样需要等定时任务3秒后执行才能读到最新的规则。</p>\n<h4 id=\"推模式\"><a href=\"#推模式\" class=\"headerlink\" title=\"推模式\"></a>推模式</h4><p>生产环境下一般更常用的是push模式的数据源。对于push模式的数据源，如远程配置中心（ZooKeeper, Nacos, Apollo等等），推送的操作不应由Sentinel客户端进行，而应该经控制台统一进行管理，直接进行推送，数据源仅负责获取配置中心推送的配置并更新到本地。因此推送规则正确做法应该是配置中心控制台&#x2F;Sentinel控制台 → 配置中心 → Sentinel数据源 → Sentinel，而不是经Sentinel数据源推送至配置中心。这样的流程就非常清晰了：</p>\n<p><img src=\"/typora-user-images/c5abda0a657e59634fb07442a84bf5e0.png\" alt=\"img\"></p>\n<h3 id=\"基于Nacos配置中心控制台实现推送\"><a href=\"#基于Nacos配置中心控制台实现推送\" class=\"headerlink\" title=\"基于Nacos配置中心控制台实现推送\"></a>基于Nacos配置中心控制台实现推送</h3><p>配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel</p>\n<p>引入依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba.csp&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;sentinel-datasource-nacos&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>配置文件增加nacos的数据源：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">spring-cloud-service</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">sentinel:</span></span><br><span class=\"line\">      <span class=\"attr\">transport:</span></span><br><span class=\"line\">        <span class=\"attr\">dashboard:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8080</span></span><br><span class=\"line\">      <span class=\"attr\">datasource:</span></span><br><span class=\"line\">        <span class=\"attr\">flow-ds:</span></span><br><span class=\"line\">          <span class=\"attr\">nacos:</span></span><br><span class=\"line\">            <span class=\"attr\">server-addr:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">:8848</span></span><br><span class=\"line\">            <span class=\"attr\">dataId:</span> <span class=\"string\">$&#123;spring.application.name&#125;-flow</span></span><br><span class=\"line\">            <span class=\"attr\">groupId:</span> <span class=\"string\">DEFAULT_GROUP</span></span><br><span class=\"line\">            <span class=\"attr\">data-type:</span> <span class=\"string\">json</span></span><br><span class=\"line\">            <span class=\"attr\">rule-type:</span> <span class=\"string\">flow</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这样直接在Nacos控制台修改规则就能实时生效了，缺点是直接在Sentinel Dashboard中修改规则配置，配置中心的配置不会发生变化。</p>\n<p>思考：如何实现将通过sentinel控制台设置的规则直接持久化到nacos配置中心？</p>\n<p>方法一：微服务增加基于Nacos的写数据源（WritableDataSource），发布配置到nacos配置中心。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//核心逻辑： 实现WritableDataSource#write方法，发布配置到nacos配置中心</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(T t)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    lock.lock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        configService.publishConfig(dataId, groupId, <span class=\"built_in\">this</span>.configEncoder.convert(t), ConfigType.JSON.getType());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        lock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>方法二：Sentinel Dashboard监听Nacos配置的变化，如发生变化就更新本地缓存。在Sentinel Dashboard端新增或修改规则配置在保存到内存的同时，直接发布配置到nacos配置中心；Sentinel Dashboard直接从nacos拉取所有的规则配置。Sentinel Dashboard和微服务不直接通信，而是通过nacos配置中心获取到配置的变更，也就是下面的基于Sentinel控制台实现推送。</p>\n<p>AbstractDataSourceProperties<br>SentinelProperties内部提供了TreeMap类型的datasource属性用于配置数据源信息。</p>\n<blockquote>\n<p>com.alibaba.cloud.sentinel.datasource.config.AbstractDataSourceProperties#postRegister</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postRegister</span><span class=\"params\">(AbstractDataSource dataSource)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"built_in\">this</span>.getRuleType()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FLOW:</span><br><span class=\"line\">        FlowRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> DEGRADE:</span><br><span class=\"line\">        DegradeRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> PARAM_FLOW:</span><br><span class=\"line\">        ParamFlowRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> SYSTEM:</span><br><span class=\"line\">        SystemRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> AUTHORITY:</span><br><span class=\"line\">        AuthorityRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GW_FLOW:</span><br><span class=\"line\">        GatewayRuleManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> GW_API_GROUP:</span><br><span class=\"line\">        GatewayApiDefinitionManager.register2Property(dataSource.getProperty());</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>NacosDataSource从Nacos读取配置</strong></p>\n<p>NacosDataSource主要负责与Nacos进行通信，实时获取Nacos的配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">NacosDataSource</span><span class=\"params\">(<span class=\"keyword\">final</span> Properties properties, <span class=\"keyword\">final</span> String groupId, <span class=\"keyword\">final</span> String dataId,</span></span><br><span class=\"line\"><span class=\"params\">                       Converter&lt;String, T&gt; parser)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(parser);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtil.isBlank(groupId) || StringUtil.isBlank(dataId)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(String.format(<span class=\"string\">&quot;Bad argument: groupId=[%s], dataId=[%s]&quot;</span>,</span><br><span class=\"line\">            groupId, dataId));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    AssertUtil.notNull(properties, <span class=\"string\">&quot;Nacos properties must not be null, you could put some keys from PropertyKeyConst&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.groupId = groupId;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dataId = dataId;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.properties = properties;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.configListener = <span class=\"keyword\">new</span> <span class=\"title class_\">Listener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Executor <span class=\"title function_\">getExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pool;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">receiveConfigInfo</span><span class=\"params\">(<span class=\"keyword\">final</span> String configInfo)</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 配置发送变更</span></span><br><span class=\"line\">            RecordLog.info(<span class=\"string\">&quot;[NacosDataSource] New property value received for (properties: &#123;&#125;) (dataId: &#123;&#125;, groupId: &#123;&#125;): &#123;&#125;&quot;</span>,</span><br><span class=\"line\">                properties, dataId, groupId, configInfo);</span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> NacosDataSource.<span class=\"built_in\">this</span>.parser.convert(configInfo);</span><br><span class=\"line\">            <span class=\"comment\">// Update the new value to the property.</span></span><br><span class=\"line\">            getProperty().updateValue(newValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 监听配置</span></span><br><span class=\"line\">    initNacosListener();</span><br><span class=\"line\">    <span class=\"comment\">// 第一次读取配置</span></span><br><span class=\"line\">    loadInitialConfig();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadInitialConfig</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">T</span> <span class=\"variable\">newValue</span> <span class=\"operator\">=</span> loadConfig();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            RecordLog.warn(<span class=\"string\">&quot;[NacosDataSource] WARN: initial config is null, you may have to check your data source&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getProperty().updateValue(newValue);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        RecordLog.warn(<span class=\"string\">&quot;[NacosDataSource] Error when loading initial config&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initNacosListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.configService = NacosFactory.createConfigService(<span class=\"built_in\">this</span>.properties);</span><br><span class=\"line\">        <span class=\"comment\">// Add config listener.</span></span><br><span class=\"line\">        configService.addListener(dataId, groupId, configListener);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        RecordLog.warn(<span class=\"string\">&quot;[NacosDataSource] Error occurred when initializing Nacos data source&quot;</span>, e);</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>SentinelDataSourceHandler注入NacosDataSource</strong><br>SentinelAutoConfiguration中注入了SentinelDataSourceHandler。</p>\n<p>SentinelDataSourceHandler负责遍历配置文件中配置的DataSource，然后注入到spring容器中。</p>\n<blockquote>\n<p>com.alibaba.cloud.sentinel.custom.SentinelDataSourceHandler#afterSingletonsInstantiated</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterSingletonsInstantiated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sentinelProperties.getDatasource().forEach((dataSourceName, dataSourceProperties) -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            List&lt;String&gt; validFields = dataSourceProperties.getValidField();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (validFields.size() != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                log.error(<span class=\"string\">&quot;[Sentinel Starter] DataSource &quot;</span> + dataSourceName + <span class=\"string\">&quot; multi datasource active and won&#x27;t loaded: &quot;</span> + dataSourceProperties.getValidField());</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">AbstractDataSourceProperties</span> <span class=\"variable\">abstractDataSourceProperties</span> <span class=\"operator\">=</span> dataSourceProperties.getValidDataSourceProperties();</span><br><span class=\"line\">            abstractDataSourceProperties.setEnv(<span class=\"built_in\">this</span>.env);</span><br><span class=\"line\">            abstractDataSourceProperties.preCheck(dataSourceName);</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.registerBean(abstractDataSourceProperties, dataSourceName + <span class=\"string\">&quot;-sentinel-&quot;</span> + (String)validFields.get(<span class=\"number\">0</span>) + <span class=\"string\">&quot;-datasource&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception var5) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">&quot;[Sentinel Starter] DataSource &quot;</span> + dataSourceName + <span class=\"string\">&quot; build error: &quot;</span> + var5.getMessage(), var5);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>基于Sentinel控制台实现推送<br>配置中心控制台 → 配置中心 → Sentinel数据源 → Sentinel</p>\n<p>从Sentinel1.4.0开始，Sentinel控制台提供DynamicRulePublisher和DynamicRuleProvider接口用于实现应用维度的规则推送和拉取：</p>\n<ul>\n<li>DynamicRuleProvider: 拉取规则</li>\n<li>DynamicRulePublisher: 推送规则</li>\n</ul>\n<p>可以参考Sentinel Dashboard test包下的流控规则拉取和推送的实现逻辑：</p>\n<p><img src=\"/typora-user-images/image-20240220144907721.png\" alt=\"image-20240220144907721\"></p>\n<p>这里主要改造Dashboard端，客户端还是采用前面的配置。</p>\n<p>引入nacos的依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">   &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;</span><br><span class=\"line\">   &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;</span><br><span class=\"line\">   &lt;version&gt;<span class=\"number\">2.0</span><span class=\"number\">.3</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>NacosConfig负责注入一些最基本的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Eric Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.4.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NacosConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; <span class=\"title function_\">flowRuleEntityEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JSON::toJSONString;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; <span class=\"title function_\">flowRuleEntityDecoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s -&gt; JSON.parseArray(s, FlowRuleEntity.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConfigService <span class=\"title function_\">nacosConfigService</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConfigFactory.createConfigService(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>FlowRuleNacosProvider负责从Nacos读取配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRuleProvider;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.util.StringUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Eric Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.4.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowRuleNacosProvider</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DynamicRuleProvider</span>&lt;List&lt;FlowRuleEntity&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Converter&lt;String, List&lt;FlowRuleEntity&gt;&gt; converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;FlowRuleEntity&gt; <span class=\"title function_\">getRules</span><span class=\"params\">(String appName)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rules</span> <span class=\"operator\">=</span> configService.getConfig(appName + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span><br><span class=\"line\">            NacosConfigUtil.GROUP_ID, <span class=\"number\">3000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtil.isEmpty(rules)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> converter.convert(rules);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>FlowRuleNacosPublisher负责将配置写入Nacos：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.alibaba.csp.sentinel.dashboard.rule.nacos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.datasource.entity.rule.FlowRuleEntity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.dashboard.rule.DynamicRulePublisher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.datasource.Converter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.csp.sentinel.util.AssertUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.nacos.api.config.ConfigService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Eric Zhao</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.4.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FlowRuleNacosPublisher</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DynamicRulePublisher</span>&lt;List&lt;FlowRuleEntity&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigService configService;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Converter&lt;List&lt;FlowRuleEntity&gt;, String&gt; converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publish</span><span class=\"params\">(String app, List&lt;FlowRuleEntity&gt; rules)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        AssertUtil.notEmpty(app, <span class=\"string\">&quot;app name cannot be empty&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rules == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        configService.publishConfig(app + NacosConfigUtil.FLOW_DATA_ID_POSTFIX,</span><br><span class=\"line\">            NacosConfigUtil.GROUP_ID, converter.convert(rules));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面都是新增的类，最后还需要在Dashboard查询和修改规则时进行修改，具体修改是在FlowControllerV2</p>\n<p><img src=\"/typora-user-images/image-20240221092028120.png\" alt=\"image-20240221092028120\"></p>\n<p>以 Nacos 为例，若希望使用 Nacos 作为动态规则配置中心，用户可以提取出相关的类，然后只需在 FlowControllerV2 中指定对应的 bean 即可开启 Nacos 适配。前端页面需要手动切换，或者修改前端路由配置（sidebar.html 流控规则路由从 dashboard.flowV1 改成 dashboard.flow 即可，注意簇点链路页面对话框需要自行改造）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;flowRuleNacosProvider&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DynamicRuleProvider&lt;List&lt;FlowRuleEntity&gt;&gt; ruleProvider;</span><br><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;flowRuleNacosPublisher&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> DynamicRulePublisher&lt;List&lt;FlowRuleEntity&gt;&gt; rulePublisher;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>修改控制台源码实现流控规则持久化</strong></p>\n<p>接下来，参考以上官方提供的解决方案，我们来实际操作一下</p>\n<p><strong>1、改造代码</strong></p>\n<p>首先将pom中的sentinel-datasource-nacos中的scope去掉，将Nacos相关依赖引入到编译环境中来。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- for Nacos rule publisher sample --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.csp<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"/typora-user-images/image-20240221091728143.png\" alt=\"image-20240221091728143\"></p>\n<p>将test目录下nacos动态规则实现的相关代码，复制到com.alibaba.csp.sentinel.dashboard.rule包下</p>\n<p><img src=\"/typora-user-images/image-20240221091837069.png\" alt=\"image-20240221091837069\"></p>\n<p>修改FlowControllerV2类，将动态规则发布及拉取的注入类，替换为flowRuleNacosProvider及flowRuleNacosPublisher。</p>\n<p><img src=\"/typora-user-images/image-20240221091441127.png\" alt=\"image-20240221091441127\"></p>\n<p><strong>2、改造页面</strong></p>\n<p>找到图中目录下的sidebar页面，将流控规则菜单中的dashboard.flowV1改为dashboard.flow。</p>\n<p><img src=\"/typora-user-images/image-20240221092353574.png\" alt=\"image-20240221092353574\"></p>\n<p><img src=\"/typora-user-images/image-20240221092419244.png\" alt=\"image-20240221092419244\"></p>\n<p><img src=\"/typora-user-images/image-20240221092834785.png\" alt=\"image-20240221092834785\"></p>\n<p>以流控规则测试，当在sentinel dashboard配置了流控规则，会在nacos配置中心生成对应的配置，这样客户端就能读取到这个流控规则配置了。</p>\n<p><img src=\"/typora-user-images/image-20240221093021265.png\" alt=\"image-20240221093021265\"></p>\n<p>spring-cloud-service.json</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;app&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;spring-cloud-service&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clusterConfig&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;acquireRefuseStrategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;clientOfflineTime&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;fallbackToLocalWhenFail&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;resourceTimeout&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;resourceTimeoutStrategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;sampleCount&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">10</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;thresholdType&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;windowIntervalMs&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1000</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;clusterMode&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;controlBehavior&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">5</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;gmtCreate&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1708478952132</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;gmtModified&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1708478952132</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;grade&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">9</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ip&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;10.108.202.7&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;limitApp&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;default&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;port&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">9998</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;resource&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;/sentinel/message3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;strategy&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>进阶：</strong></p>\n<p><strong>此时你启动nacos-dashboard，正要到流控规则页面进行尝试时，你会发现</strong></p>\n<p><img src=\"/typora-user-images/image-20240221093711599.png\" alt=\"image-20240221093711599\"></p>\n<p><strong>有个回到单机页面的按钮，你好奇的点了一下，满怀期待的进行配置，但是却发现配置不能生效，这是因为单机页面的执行的方法还是默认的方法，需要进行如下修改：</strong></p>\n<blockquote>\n<p>resources&#x2F;app&#x2F;views&#x2F;flow_v2.html  </p>\n<p>两种方法：1.进到这个页面，找到执行的方法修改为自定义的V2类下的方法</p>\n<p>​         2.注释掉按钮</p>\n<p>为了方便快捷，我们直接注释</p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20240221093819873.png\" alt=\"image-20240221093819873\"></p>\n<p><em><strong>为了方便我们以后的配置，更为牛逼的进阶之旅开启，快上车</strong></em></p>\n<p> 一般我们习惯从簇点链路直接配置流控，而不是到流控规则页面进行配置，但是问题来了，从簇点链路进行配置的不生效，按F12看请求会发现，他还是请求的 &#x2F;v1&#x2F;flow 而不是 &#x2F;v2&#x2F;flow</p>\n<p><img src=\"/typora-user-images/image-20240221094018816.png\" alt=\"image-20240221094018816\"></p>\n<p>解决问题：</p>\n<blockquote>\n<p>resources&#x2F;app&#x2F;scripts&#x2F;controllers&#x2F;identity.js  </p>\n<p>对比这修改，至于为什么这么改不再赘述，有兴趣的可以对比一下两个路径执行的方法 </p>\n</blockquote>\n<p><img src=\"/typora-user-images/image-20240221094225094.png\" alt=\"image-20240221094225094\"></p>\n<p><img src=\"/typora-user-images/image-20240221094244920.png\" alt=\"image-20240221094244920\"></p>\n<p>修改到这，你会发现从簇点链路配置的流程规则可以推送到nacos了，但是新问题，出现了，保存完后会自动跳转到展示页面，但是展示页面是空的~~~~~~~~~~~~~~</p>\n<p>原因：F12查看请求得知，查询方法还是执行的V1版本的默认方法，而不是我们自定义的V2里面的方法，继续在当前js文件进行修改</p>\n<p><img src=\"/typora-user-images/image-20240221094447664.png\" alt=\"image-20240221094447664\"></p>\n<p><img src=\"/typora-user-images/image-20240221094852671.png\" alt=\"image-20240221094852671\"></p>\n<p>终于实现了分别在两个页面进行流控配置</p>\n<p><img src=\"/typora-user-images/image-20240221095745495.png\" alt=\"image-20240221095745495\"></p>\n<p><img src=\"/typora-user-images/image-20240221155333042.png\" alt=\"image-20240221155333042\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}